\input texinfo                  @c -*-texinfo-*-
@c %**start of header
@setfilename ansicl
@settitle ANSI Common Lisp
@paragraphindent 0
@exampleindent 0
@documentencoding utf-8
@defindex sy
@c %**end of header
@dircategory Programming
@direntry
* ANSI Common Lisp: (ansicl).    Draft ANSI Common Lisp standard (dpANS3R).
@end direntry
@include dp.texi
@node Top
@top ANSI Common Lisp

This is a Texinfo version@footnote{The converter is available
from @uref{http://purl.org/harder/dpans.html}} of the draft
ANSI Common Lisp standard.  Some font information has been lost
in the conversion, and errors may have been introduced.  Report
discrepancies with the hardcopy version to
@email{jesper.harder@@gmail.com, Jesper Harder}.

@menu
* Credits::
* Introduction::
* Syntax::
* Evaluation and Compilation::
* Types and Classes::
* Data and Control Flow::
* Iteration::
* Objects::
* Structures::
* Conditions::
* Symbols::
* Packages::
* Numbers::
* Characters::
* Conses::
* Arrays::
* Strings::
* Sequences::
* Hash Tables::
* Filenames::
* Files::
* Streams::
* Printer::
* Reader::
* System Construction::
* Environment::
* Glossary::
* Appendix::
* Index::
* Symbol Index::
* List of Figures::
@ifnotinfo
* Table of Contents::
@end ifnotinfo
@end menu
@node Credits
@unnumbered Credits
@editors

Special thanks to Guy L. Steele Jr. and Digital Press for producing @CLtL{},
and for relaxing copyright restrictions enough to make it possible for that
document's text to provide an early basis of this work.

@subheading Edit and Review History:
@multitable @columnfractions 0.15 0.15 0.7

@item 01-Jan-89 @tab Pitman @tab Draft of Chapters 5.1 (conditions).
@item 01-May-89 @tab Chapman @tab Draft of 1.2--1.6.
@item 01-May-89 @tab Gabriel @tab Rewrite of Chapters 1.1 and 5.1.
@item 01-Jun-89 @tab Loosemore @tab Review of Chapter 4.2.
@item 01-Jun-89 @tab Pitman @tab Review of Glossary
@item 15-Jun-89 @tab Gabriel @tab Rewrite of Glossary
@item 16-Jun-89 @tab Margolin @tab Comments on Chapters 2.1--2.4 (types, objects).
@item 23-Jun-89 @tab Gabriel @tab Rewrite of 4.2.
@item 07-Jul-89 @tab Moon @tab Review of Chapters 4.1, 4.3
@item 12-Jul-89 @tab Gabriel @tab Revision of 4.2.
@item 15-Jul-89 @tab Pitman @tab Review of Glossary
@item 18-Jul-89 @tab Gray @tab Comments on 5.1
@item 25-Jul-89 @tab Gabriel @tab Revision of Chapters 1.2--1.6, 2.2
@item 26-Jul-89 @tab Gabriel @tab Rewrite of 5.1
@item 26-Jul-89 @tab Gabriel @tab Rewrite of 4.1.
@item 27-Jul-89 @tab Pitman @tab Revision of 5.1
@item 27-Jul-89 @tab Gabriel @tab Revision of 5.1
@item 28-Jul-89 @tab Chapman @tab Draft of 2.2, 3.2, 3.3, 5.4
@item 28-Jul-89 @tab Gabriel @tab Revision of Glossary.
@item 01-Oct-89 @tab Margolin @tab Review of Dictionary from Jun-89 draft.
@item 20-Jan-91 @tab Pitman @tab Draft 8.81 (for X3J13 review). Document X3J13/91-101.
@item 29-Jan-91 @tab Waters @tab Review of 8.81/Chapter 23 (Printer).
@item 01-Mar-91 @tab Moon @tab Review of 8.81/Chapter 4 (Evaluation and Compilation).
@item 01-Mar-91 @tab Barrett @tab Review of 8.81/Chapter 4 (Evaluation and Compilation).
@item 01-Mar-91 @tab Moon @tab Review of 8.81/Glossary.
@item 13-Mar-90 @tab Wechsler @tab Review of 8.81/Glossary.
@item 21-Mar-91 @tab Kerns @tab Review of 8.81/Chapter 1.
@item 26-Apr-91 @tab Margolin @tab Review of 8.81/Chapters 1--12.
@item 15-May-91 @tab Barrett @tab Review of 8.81/Chapters 5 (Misc), 11 (Conditions).
@item 04-Jun-91 @tab Laddaga @tab Review of 9.60/Chapter 20 (Pathnames).
@item 10-Jun-91 @tab Pitman @tab Draft 9.126 (for X3J13 review). Document X3J13/91-102.
@item 02-Sep-91 @tab Barrett @tab Review of 9.28/Chapter 4 (Evaluation and Compilation).
@item 02-Sep-91 @tab Barrett @tab Review of 9.52/Chapter 4 (Evaluation and Compilation).
@item 15-Sep-91 @tab Barrett @tab Review of 9.126/Chapter 4 (Evaluation and Compilation)
@item  @tab  @tab @quad{} and Chapter 7 (Evaluation/Compilation).
@item  @tab  @tab @quad{}(some comments not yet merged)
@item 18-Sep-91 @tab Wechsler @tab Review of 9.126.
@item 21-Sep-91 @tab Barrett @tab Review of 10.16/Chapter 7 (Evaluation/Compilation).
@item  @tab  @tab @quad{}(some comments not yet merged)
@item 28-Sep-91 @tab Barrett @tab Review of 10.95/Chapter 25 (Printer).
@item  @tab  @tab @quad{}(some comments not yet merged)
@item 13-Oct-91 @tab Barrett @tab Review (and help editing) of 10.104/Chapter 4
@item  @tab  @tab @quad{}(Evaluation and Compilation)
@item 15-Oct-91 @tab Waters @tab Review of 10.95/Chapter 25 (Printer).
@item 24-Oct-91 @tab Pitman @tab Draft 10.156 (for X3J13 review). Document X3J13/91-103.
@item 04-Nov-91 @tab Moon @tab Review of 10.156/Chapter 5 (Data and Control Flow)
@item  @tab  @tab @quad{} and Chapter 26 (Glossary).
@item 11-Nov-91 @tab Loosemore @tab Review of 10.156/Chapter 2 (Syntax),
@item  @tab  @tab @quad{} Chapter 3 (Evaluation and Compilation),
@item  @tab  @tab @quad{} Chapter 5 (Data and Control Flow), 
and Chapter 8 (Structures).
@item 02-Dec-91 @tab Barrett @tab Review of 10.156/Chapter 4 (Types and Classes),
@item  @tab  @tab @quad{} and Chapter 10 (Symbols).
@item 02-Dec-91 @tab Barrett @tab Review of 10.156/Chapter 3 (Evaluation and Compilation),
@item  @tab  @tab @quad{} Chapter 6 (Iteration), Chapter 9 (Conditions),
@item  @tab  @tab @quad{} and Chapter 14 (Conses).
@item  @tab  @tab @quad{}(some comments not yet merged)
@item 09-Dec-91 @tab Gabriel @tab Review of 10.156/Chapter 1 (Introduction),
@item  @tab  @tab @quad{} Chapter 2 (Syntax), 
and Chapter 3 (Evaluation and Compilation).
@item 09-Dec-91 @tab Ida @tab Light review of 10.156/Chapters 1-5.
@item 09-Dec-91 @tab Moon @tab Review of 10.156/Chapter 3 (Evaluation and Compilation).
@item  @tab  @tab @quad{}(some comments not yet merged)
@item 10-Dec-91 @tab Loosemore @tab Review of 10.156/Chapter 10 (Symbols),
@item  @tab  @tab @quad{} Chapter 20 (Files), and Chapter 13 (Characters).
@item 10-Dec-91 @tab Loosemore @tab Review of 10.156/Chapter 14 (Conses).
@item  @tab  @tab @quad{}(some comments not yet merged)
@item 10-Dec-91 @tab Laubsch @tab Review of 10.156/Chapters 1 (Introduction),
@item  @tab  @tab @quad{} Chapter 2 (Syntax), Chapter 3 (Evaluation and Compilation),
@item  @tab  @tab @quad{} Chapter 4 (Types and Classes), 
Chapter 5 (Data and Control Flow),
@item  @tab  @tab @quad{} Chapter 7 (Objects), Chapter 11 (Packages),
@item  @tab  @tab @quad{} Chapter 19 (Filenames), and Chapter 21 (Streams).
@item 18-Dec-91 @tab Margolin @tab Review of 10.156/Chapter 18 (Hash Tables).
@item 04-Jan-92 @tab White @tab Review of 10.156/Chapter 6 (Iteration),
@item  @tab  @tab @quad{} Chapter 11 (Packages), Chapter 18 (Hash Tables),
@item  @tab  @tab @quad{} and Chapter 23 (Reader).
@item 04-Jan-92 @tab White @tab Review of 10.156/Chapter 26 (Glossary).
@item  @tab  @tab @quad{}(some comments not yet merged)
@item 04-Jan-92 @tab Barrett @tab Review of 10.156/Chapter 18 (Hash Tables) and Chapter 16 (Strings).
@item 04-Jan-92 @tab Barrett @tab Review of 10.156/Chapter 15 (Arrays) and Chapter 21 (Streams).
@item  @tab  @tab @quad{}(some comments not yet merged)
@item 06-Jan-92 @tab Loosemore @tab Review of 10.156/Chapter 16 (Strings),
@item  @tab  @tab @quad{} Chapter 17 (Sequences), and Chapter 25 (Environment).
@item 06-Jan-92 @tab Loosemore @tab Review of 10.156/Chapter 21 (Streams) and Chapter 23 (Reader).
@item  @tab  @tab @quad{}(some comments not yet merged)
@item 06-Jan-92 @tab Margolin @tab Review of 10.156/Chapter 2 (Syntax).
@item 07-Jan-92 @tab Margolin @tab Review of 10.156/Chapter 4 (Types and Classes).
@item 03-Feb-92 @tab Aspinall @tab Review of 10.156/Chapter 12 (Numbers).
@item 16-Feb-92 @tab Pitman @tab Draft 11.82 (for X3J13 letter ballot). Document X3J13/92-101.
@item 16-Mar-92 @tab Loosemore @tab Review of 11.82/Chapter 1, 3, 4, 5, 7, 8, 9, 10,
@item  @tab  @tab @quad{} 11, 12, 18, 22, 23, 24, 25, and 26.
@item 16-Feb-92 @tab Pitman @tab Draft 12.24 (for X3 consideration). Document X3J13/92-102.
@item 09-Sep-92 @tab Samson @tab Public Review Comments (#1). Documents X3J13/92-1001 to 92-1003.
@item 22-Oct-92 @tab Rose, Yen @tab Public Review Comments (#2). Documents X3J13/92-1101 to 92-1103.
@item 23-Oct-92 @tab Staley @tab Public Review Comments (#3). Documents X3J13/92-1201 to 92-1204.
@item 09-Nov-92 @tab Barrett @tab Public Review Comments (#4). Documents X3J13/92-3101 to 92-3110.
@item 11-Nov-92 @tab Moon @tab Public Review Comments (#5). Documents X3J13/92-3201 to 92-3248.
@item 17-Nov-92 @tab Loosemore @tab Public Review Comments (#6). Documents X3J13/92-1301 to 92-1335.
@item 23-Nov-92 @tab Margolin @tab Public Review Comments (#7). Documents X3J13/92-1401 to 92-1419.
@item 23-Nov-92 @tab Withington @tab Public Review Comments (#8a). Documents X3J13/92-1501 to 92-1512.
@item  @tab  @tab 
@item 23-Nov-92 @tab Feinberg @tab Public Review Comments (#8b). Documents X3J13/92-1601 to 92-1603.
@item 23-Nov-92 @tab Wechsler @tab Public Review Comments (#8c). Documents X3J13/92-1701 to 92-1703.
@item 23-Nov-92 @tab Moore @tab Public Review Comments (#9). Documents X3J13/92-1801 to 92-1802.
@item 23-Nov-92 @tab Flanagan @tab Public Review Comments (#10). Documents X3J13/92-1901 to 92-1910.
@item 23-Nov-92 @tab Dalton @tab Public Review Comments (#11). Documents X3J13/92-2001 to 92-2012.
@item 23-Nov-92 @tab Gallagher @tab Public Review Comments (#12). Documents X3J13/92-2101 to 92-2103.
@item 23-Nov-92 @tab Norvig @tab Public Review Comments (#13). Documents X3J13/92-2201 to 92-2208.
@item 24-Nov-92 @tab Robertson @tab Public Review Comments (#14). Document X3J13/92-2301.
@item 23-Nov-92 @tab Kawabe @tab Public Review Comments (#15). Documents X3J13/92-2401 to 92-2403.
@item 23-Nov-92 @tab Barrett @tab Public Review Comments (#16). Documents X3J13/92-2511 to X3J13/92-2531.
@item 23-Nov-92 @tab Wertheimer @tab Public Review Comments (#17). Document X3J13/92-2601.
@item 24-Nov-92 @tab Pitman @tab Public Review Comments (#18). Documents X3J13/92-2701 to 92-2742.
@item 24-Nov-92 @tab Mato Mira @tab Public Review Comments (#19). Documents X3J13/92-2801 to 92-2805.
@item 24-Nov-92 @tab Philpot @tab Public Review Comments (#20). Document X3J13/92-2901.
@item 23-Nov-92 @tab Cerys @tab Public Review Comments (#21). Document X3J13/92-3001.
@item 30-Aug-93 @tab Pitman @tab Draft 13.65 (for X3J13 consideration). Document X3J13/93-101.
@item 04-Oct-93 @tab X3J13 @tab Minor fixes to Draft 13.65 before sending to X3.
@item 05-Oct-93 @tab Pitman @tab Draft 14.10 (for X3 consideration). Document X3J13/93-102.
@item 08-Nov-93 @tab Dalton @tab ``reply to reply to pr comments''.  Document X3J13/94-311.
@item 04-Apr-94 @tab Boyer, @tab 
@item  @tab Kaufmann, @tab 
@item  @tab Moore @tab Public Review Comments (#1).  Document X3J13/94-305.
@item 05-Apr-94 @tab Pitman @tab Public Review Comments (#2).  Document X3J13/94-306.
@item 14-Mar-94 @tab Schulenburg @tab Public Review Comments (#3).  Document X3J13/94-307.
@item 04-Apr-94 @tab Shepard @tab Late commentary.  Document X3J13/94-309.
@item 05-May-94 @tab X3J13 @tab Editorial-only changes to Draft 14.10 in response to comments.
@item 10-May-94 @tab Pitman @tab Draft @rev{} (for X3 consideration). Document @DocumentNumber{}. 
@end multitable

@goodbreak{}

The following lists of information are almost certainly incomplete, but
it was felt that it was better to risk publishing incomplete information
than to fail to acknowledge important contributions by the many people
and organizations who have contributed to this effort.

Mention here of any individual or organization does not imply
endorsement of this document by that individual or organization.

@subheading Ad Hoc Group Chairs:
@multitable @columnfractions 0.5 0.5

@item Charter @tab Ennis, Susan P.
@item Cleanup @tab Masinter, Larry
@item  @tab Fahlman, Scott
@item Compiler @tab Haflich, Steve
@item  @tab Loosemore, Sandra
@item Conditions @tab Pitman, Kent M.
@item Editorial @tab Chapman, Kathy
@item Graphics @ampers{} Windows @tab Douglas Rand
@item Iteration @tab White, JonL
@item Lisp@mat{@sub1{}}/Lisp@mat{@sub2{}} @tab Gabriel, Richard P.
@item Macros @tab Haflich, Steve
@item  @tab Pitman, Kent M.
@item Objects @tab Bobrow, Daniel G.
@item Presentation of Standard @tab Brown, Gary
@item Pretty Printer @tab Waters, Richard C.
@item Public Review @tab Ida, Masayuki
@item Types @ampers{} Declarations @tab Scherlis, William
@item Validation @tab Berman, Richard
@item  @tab Balzer, Bob

@end multitable

@goodbreak{}

@subheading Major Administrative Contributions:
@multitable @columnfractions 0.5 0.5

@item Steele, Guy L., Jr. @tab Eiron, Hanoch
@item Zubkoff, Jan L. @tab Haflich, Steve
@item Gabriel, Richard P. @tab Ida, Masayuki
@item Masinter, Larry @tab Loeffler, David D.
@item Loosemore, Sandra @tab Tyson, Mabry
@item Pitman, Kent M. @tab Whittemore, Susan
@item Barrett, Kim @tab Woodyatt, Anne

@end multitable

@goodbreak{}

@subheading Major Technical Contributions:
@multitable @columnfractions 0.33 0.33 0.33

@item Loosemore, Sandra @tab  @tab 
@item Bobrow, Daniel G. @tab Margolin, Barry @tab 
@item Daniels, Andy @tab Moon, David A. @tab 
@item DeMichiel, Linda G. @tab Pitman, Kent M. @tab 
@item Dussud, Patrick H. @tab Perdue, Crispin @tab 
@item Gabriel, Richard P. @tab Steele, Guy L., Jr. @tab 
@item Ida, Masayuki @tab Waters, Richard C. @tab 
@item Kiczales, Gregor @tab White, JonL @tab 

@end multitable

@subheading Participating Companies and Organizations:
@multitable @columnfractions 0.5 0.5

@item LMI @tab 
@item AI Architects @tab Loosemore, Sandra
@item Amoco Production Co. @tab Lucid, Inc.
@item Aoyama Gakuin University @tab MCC
@item Apple Computer @tab MIT
@item Barrett, Kim @tab MITRE Corporation
@item Boeing Advanced Technology Center @tab MSC
@item Carnegie-Mellon University @tab NASA Ames Research Center
@item Chestnut Software @tab Nihon Symbolics
@item Computer Sciences @tab National Bureau of Standards
@item CONTEL @tab Prime Computer
@item Digital Equipment Corporation @tab Siemens
@item Evans @ampersand{} Sutherland @tab Southern Illinois University
@item Encore @tab Sperry
@item Franz, Inc. @tab SRI
@item Gigamos @tab Sun Microsystems
@item GMD @tab Symbolics
@item Gold Hill @tab Tektronix
@item Greenblatt, Richard @tab Texas Instruments
@item Grumman Data Systems Corporation @tab Thinking Machines Corporation
@item Harlequin, Ltd. @tab Unisys
@item Hewlett-Packard @tab University of Bath
@item Honeywell @tab University of Edinburgh
@item IBM @tab University of Utah
@item Integrated Inference Machines @tab US Army
@item International LISP Associates @tab USC/ISI
@item Johnson Controls @tab Xerox

@end multitable

@subheading Individual Participants:
@multitable @columnfractions 0.33 0.33 0.33

@item Arbaugh, Bill @tab Hornig, Charles @tab Philipp, Christopher
@item Balzer, Bob @tab Ida, Masayuki @tab Pierson, Dan
@item Barrett, Kim @tab Keene, Sonya @tab Pitman, Kent M.
@item Bartley, David @tab Keller, Shaun @tab Raghavan, B.
@item Beckerle, Mike @tab Kempf, James @tab Rand, Douglas
@item Beiser, Paul @tab Kerns, Robert W. @tab Rininger, Jeff
@item Benson, Eric @tab Kiczales, Gregor @tab Rosenking, Jeff
@item Berman, Richard @tab Kolb, Dieter @tab Scherlis, William
@item Bobrow, Daniel G. @tab Koschmann, Timothy @tab Shiota, Eiji
@item Boelk, Mary @tab Kosinski, Paul @tab Sizer, Andy
@item Brittain, Skona @tab Larson, Aaron @tab Slater, David
@item Brown, Gary @tab Latto, Andy @tab Sodan, Angela
@item Chailloux, Jerome @tab Laubsch, Joachim @tab Soley, Richard
@item Chapman, Kathy @tab Layer, Kevin @tab St. Clair, Bill
@item Clinger, Will @tab Linden, Thom @tab Stanhope, Philip
@item Coffee, Peter C. @tab Loeffler, David D. @tab Steele, Guy L., Jr.
@item Cugini, John @tab Loosemore, Sandra @tab Tucker, Paul
@item Curtis, Pavel @tab Magataca, Mituhiro @tab Turba, Thomas
@item Dabrowski, Christopher @tab Margolin, Barry @tab Unietis, Dave
@item Daessler, Klaus @tab Masinter, Larry @tab van Roggen, Walter
@item Dalton, Jeff @tab Mathis, Robert @tab van Roggen, Walter
@item Daniels, Andy @tab Matthews, Dave @tab Waldrum, Ellen
@item DeMichiel, Linda G. @tab McCarthy, John @tab Waters, Richard C.
@item Duggan, Jerry @tab Mikelsons, Martin @tab Wechsler, Allan
@item Dussud, Patrick H. @tab Moon, David A. @tab Wegman, Mark
@item Ennis, Susan P. @tab Moore, Timothy @tab Weinreb, Daniel
@item Fahlman, Scott @tab Nicoud, Stephen @tab White, JonL
@item Gabriel, Richard P. @tab Nilsson, Jarl @tab Wieland, Alexis
@item Giansiracusa, Bob @tab O'Dell, Jim @tab Withington, P. Tucker
@item Gray, David @tab Ohlander, Ron @tab Wright, Whitman
@item Greenblatt, Richard @tab Padget, Julian @tab York, Bill
@item Hadden, George D. @tab Palter, Gary @tab Zacharias, Gail
@item Haflich, Steve @tab Peck, Jeff @tab Zubkoff, Jan L.
@item Harris, Richard M. @tab Pellegrino, Bob @tab 

@end multitable

@node Introduction
@chapter Introduction
@menu
* Scope; Purpose; and History::
* Organization of the Document::
* Referenced Publications::
* Definitions::
* Conformance::
* Language Extensions::
* Language Subsets::
* Deprecated Language Features::
* Symbols in the COMMON-LISP Package::
@end menu

@node Scope; Purpose; and History
@section Scope, Purpose, and History
@menu
* Scope and Purpose::
* History::
@end menu
@node Scope and Purpose
@subsection Scope and Purpose
The specification set forth in this document is designed to promote
the portability of @clisp{}@spc{}programs among a variety of data processing
systems. It is a language specification aimed at an audience of
implementors and knowledgeable programmers. It is neither a tutorial nor
an implementation guide.

@node History
@subsection History

Lisp is a family of languages with a long history.  Early key ideas in
Lisp were developed by John McCarthy during the 1956 Dartmouth Summer
Research Project on Artificial Intelligence.  McCarthy's motivation
was to develop an algebraic list processing language for artificial
intelligence work.
Implementation efforts for early dialects of Lisp were undertaken on
the IBM@tie{}704, the IBM@tie{}7090, the Digital Equipment Corporation (DEC) PDP-1,
the DEC@tie{}PDP-6, and the PDP-10. The primary dialect of Lisp between
1960 and 1965 was Lisp@tie{}1.5. By the early 1970's there were two
predominant dialects of Lisp, both arising from these early efforts:
MacLisp and Interlisp.
For further information about very early Lisp dialects, 
see @AnatomyOfLisp{} or @LispOnePointFive{}.

MacLisp improved on the Lisp@tie{}1.5 notion of special variables and error
handling. MacLisp also introduced the concept of functions that could take
a variable number of arguments, macros, arrays, non-local dynamic
exits, fast arithmetic, the first good Lisp compiler, and an emphasis
on execution speed. 
By the end of the 1970's, MacLisp was in use at over 50 sites.
For further information about Maclisp, 
see @Moonual{} or @Pitmanual{}.

Interlisp introduced many ideas into Lisp programming environments and
methodology. One of the Interlisp ideas that influenced @clisp{}@spc{}was an iteration
construct implemented by Warren Teitelman that inspired the @code{loop}
macro used both on the Lisp Machines and in MacLisp, and now in @clisp{}.
For further information about Interlisp,
see @InterlispManual{}.

Although the first implementations of Lisp were on the IBM@tie{}704 and the
IBM@tie{}7090, later work focussed on the DEC
PDP-6 and, later, PDP-10 computers, the latter being the mainstay of
Lisp and artificial intelligence work at such places as 
Massachusetts Institute of Technology (MIT), Stanford University,
and 
Carnegie Mellon University (CMU) from the mid-1960's through much of the 1970's.
The PDP-10 computer and its predecessor the PDP-6 computer were, by
design, especially well-suited to Lisp because they had 36-bit words
and 18-bit addresses. This architecture allowed a @term{cons} cell to be
stored in one word; single instructions could extract the 
@term{car} and @term{cdr}
parts.  The PDP-6 and PDP-10 had fast, powerful stack instructions
that enabled fast function calling.
But the limitations of the PDP-10 were evident by 1973: it supported a
small number of researchers using Lisp, and the small, 18-bit address
space (@mat{2^18} @mat{=} 262,144 words) limited the size of a single
program.
One response to the address space problem was the Lisp Machine, a
special-purpose computer designed to run Lisp programs.  The other
response was to use general-purpose computers with address spaces
larger than 18@tie{}bits, such as the DEC VAX and
the @hbox{S-1}@tie{}Mark@tie{}IIA.
For further information about S-1 Common Lisp, see ``@SOneCLPaper{}.''

The Lisp machine concept was developed in the late 1960's.  In the
early 1970's, Peter Deutsch, working with 
Daniel Bobrow, implemented a Lisp on the
Alto, a single-user minicomputer, using microcode to interpret a
byte-code implementation language. Shortly thereafter, Richard
Greenblatt began work on a different hardware and instruction set
design at MIT.
Although the Alto was not a total success as a Lisp machine, a dialect
of Interlisp known as Interlisp-D became available on the D-series
machines manufactured by Xerox---the Dorado, Dandelion,
Dandetiger, and Dove (or Daybreak).
An upward-compatible extension of MacLisp called Lisp
Machine Lisp became available on the early MIT Lisp Machines.
Commercial Lisp machines from Xerox, Lisp Machines (LMI), and
Symbolics were on the market by 1981.
For further information about Lisp Machine Lisp, see @Chinual{}.

During the late 1970's, Lisp Machine Lisp began to expand towards a
much fuller language.  Sophisticated lambda lists, 
@f{setf}, multiple values, and structures
like those in @clisp{}@spc{}are the results of early
experimentation with programming styles by the Lisp Machine group.
Jonl White and others migrated these features to MacLisp.
Around 1980, Scott Fahlman and others at CMU began work on a Lisp to
run on the Scientific Personal Integrated Computing
Environment (SPICE) workstation.  One of the goals of the project was to
design a simpler dialect than Lisp Machine Lisp.

The Macsyma group at MIT began a project during the late 1970's called
the New Implementation of Lisp (NIL) for the VAX, which was headed by
White.  One of the stated goals of the NIL project was to fix many of
the historic, but annoying, problems with Lisp while retaining significant 
compatibility with MacLisp.  At about the same time, a research group at
Stanford University and Lawrence Livermore National Laboratory headed
by Richard P. Gabriel began the design of a Lisp to run on the
@hbox{S-1}@tie{}Mark@tie{}IIA supercomputer.  @hbox{S-1}@tie{}Lisp, never completely
functional, was the test bed for adapting advanced compiler techniques
to Lisp implementation.  Eventually the @hbox{S-1} and NIL groups
collaborated.
For further information about the NIL project,
see ``@NILReport{}.''


The first effort towards Lisp standardization was made in 1969, 
when Anthony Hearn and Martin Griss at the University of Utah 
defined Standard Lisp---a subset of Lisp@tie{}1.5 and other dialects---to 
transport REDUCE, a symbolic algebra system.
During the 1970's, the Utah group implemented first a retargetable
optimizing compiler for Standard Lisp,
and then an extended implementation known as Portable Standard Lisp (PSL).
By the mid 1980's, PSL ran on about a dozen kinds of computers.
For further information about Standard Lisp, see ``@StandardLispReport{}.''

PSL and Franz Lisp---a MacLisp-like dialect for Unix machines---were 
the first examples of widely available Lisp dialects on multiple 
hardware platforms. 

One of the most important developments in Lisp occurred during the
second half of the 1970's: Scheme. Scheme, designed by Gerald J.
Sussman and Guy L. Steele Jr., is a simple dialect of Lisp whose
design brought to Lisp some of the ideas from programming language
semantics developed in the 1960's.  Sussman was one of the prime
innovators behind many other advances in Lisp technology from the late
1960's through the 1970's.
The major contributions of Scheme were lexical scoping, lexical
closures, first-class continuations, and simplified syntax (no
separation of value cells and function cells). Some of these contributions made
a large impact on the design of @clisp{}.
For further information about Scheme, see @IEEEScheme{} or ``@RevisedCubedScheme{}.''

In the late 1970's object-oriented programming concepts started to
make a strong impact on Lisp. 
At MIT, certain ideas from Smalltalk made their way into several
widely used programming systems.
Flavors, an object-oriented programming system with multiple inheritance, 
was developed at MIT for the Lisp machine community by Howard Cannon and others.
At Xerox, the experience with Smalltalk and 
Knowledge Representation Language (KRL) led to the development of 
Lisp Object Oriented Programming System (LOOPS) and later Common LOOPS.
For further information on Smalltalk, see @SmalltalkBook{}.
For further information on Flavors, see @FlavorsPaper{}.

These systems influenced the design of the Common Lisp Object System (CLOS).
CLOS was developed specifically for this standardization effort,
and was separately written up in ``@CLOSPaper{}.''  However, minor details
of its design have changed slightly since that publication, and that paper 
should not be taken as an authoritative reference to the semantics of the
@CLOS{}@spc{}as described in this document.

In 1980 Symbolics and LMI were developing Lisp Machine Lisp; stock-hardware
implementation groups were developing NIL, Franz Lisp, and PSL; Xerox
was developing Interlisp; and the SPICE project at CMU was developing
a MacLisp-like dialect of Lisp called SpiceLisp.

In April 1981, after a DARPA-sponsored meeting concerning the
splintered Lisp community, Symbolics, the SPICE project, the NIL
project, and the @hbox{S-1}@tie{}Lisp project joined together to define
@clisp{}.  Initially spearheaded by White and Gabriel, the
driving force behind this grassroots effort was provided by Fahlman,
Daniel Weinreb, David Moon, Steele,  and Gabriel.
@clisp{}@spc{}was designed as a description of a family of languages.  The
primary influences on @clisp{}@spc{}were Lisp Machine Lisp, MacLisp, NIL,
@hbox{S-1}@tie{}Lisp, Spice Lisp, and Scheme.
@CLtL{}@spc{}is a description of that design.  Its
semantics were intentionally underspecified in places where it was
felt that a tight specification would overly constrain @clisp{}
research and use.

In 1986 X3J13 was formed as a technical working group to
produce a draft for an ANSI @clisp{}@spc{}standard. Because of the
acceptance of @clisp{}, the goals of this group differed from those of
the original designers. These new goals included stricter
standardization for portability, an object-oriented programming
system, a condition system, iteration facilities, and a way to handle
large character sets.  To accommodate those
goals, a new language specification, this
document, was developed.



@node Organization of the Document
@section Organization of the Document

This is a reference document, not a tutorial document.  Where possible
and convenient, the order of presentation has been chosen so that the
more primitive topics precede those that build upon them;  however,
linear readability has not been a priority.

This document is divided into chapters by topic.
Any given chapter might contain conceptual material, dictionary entries, or both.

@term{Defined names} within the dictionary portion of a chapter are
grouped in a way that brings related topics into physical proximity.
Many such groupings were possible,
and no deep significance should be inferred from the particular grouping that was chosen.
To see @term{defined names} grouped alphabetically, consult the index.
For a complete list of @term{defined names}, see @ref{Symbols in the COMMON-LISP Package, Section 1.9 (Symbols in the COMMON-LISP Package)}.

In order to compensate for the sometimes-unordered portions of this document, 
a glossary has been provided; see @ref{Glossary, Chapter 26 (Glossary)}.
The glossary provides connectivity by providing easy access to 
definitions of terms, and in some cases by providing examples or 
cross references to additional conceptual material.

For information about notational conventions used in this document,
see @ref{Definitions, Section 1.4 (Definitions)}.

For information about conformance, see @ref{Conformance, Section 1.5 (Conformance)}. 

For information about extensions and subsets, see @ref{Language Extensions, Section 1.6 (Language Extensions)}
and @ref{Language Subsets, Section 1.7 (Language Subsets)}.

For information about how @term{programs} in the language are parsed by the
@term{Lisp reader}, see @ref{Syntax, Chapter 2 (Syntax)}.

For information about how @term{programs} in the language are @term{compiled}
and @term{executed}, see @ref{Evaluation and Compilation, Chapter 3 (Evaluation and Compilation)}.

For information about data types, see @ref{Types and Classes, Chapter 4 (Types and Classes)}.
Not all @term{types} and @term{classes} are defined in this chapter;
many are defined in chapter corresponding to their topic--for example,
the numeric types are defined in @ref{Numbers, Chapter 12 (Numbers)}.
For a complete list of @term{standardized} @term{types}, 
see @ref{StandardizedAtomicTypeSpecs, Figure 4.2}.

For information about general purpose control and data flow,
see @ref{Data and Control Flow, Chapter 5 (Data and Control Flow)}@spc{}or @ref{Iteration, Chapter 6 (Iteration)}.


@node Referenced Publications
@section Referenced Publications


@itemize @bullet{}

@item @AnatomyOfLisp{},
John Allen, McGraw-Hill, Inc., 1978.

@item @KnuthVolThree{},
Donald E. Knuth, Addison-Wesley Company (Reading, MA), 1973.

@item @MetaObjectProtocol{},
Kiczales et al., MIT Press (Cambridge, MA), 1991.

@item ``@CLOSPaper{},''
D. Bobrow, L. DiMichiel, R.P. Gabriel, S. Keene, G. Kiczales, D. Moon,
@i{SIGPLAN Notices} V23, September, 1988.

@item @CLtL{},
Guy L. Steele Jr., Digital Press (Burlington, MA), 1984.

@item @CLtLTwo{},
Guy L. Steele Jr., Digital Press (Bedford, MA), 1990.

@item @CondSysPaper{},
Kent M. Pitman,
@it Proceedings of the First European Conference
on the Practical Application of LISP
(EUROPAL '90),
Churchill College, Cambridge, England,
March 27-29, 1990.

@item @FlavorsPaper{},
Howard I. Cannon, 1982.

@item @IEEEFloatingPoint{},
ANSI/IEEE Std 754-1985,
Institute of Electrical and Electronics Engineers, Inc. (New York), 1985.

@item @IEEEScheme{},
IEEE Std 1178-1990,
Institute of Electrical and Electronic Engineers, Inc. (New York), 1991.

@item @InterlispManual{}, Third Revision,
Teitelman, Warren, et al,
Xerox Palo Alto Research Center (Palo Alto, CA), 1978.

@item @ISOChars{},
@i{Information processing---Coded character sets 
for text communication---Part 2: Latin alphabetic and non-alphabetic
graphic characters}, 
ISO, 1983.

@item @LispOnePointFive{},
John McCarthy, MIT Press (Cambridge, MA), August, 1962.

@item @Chinual{},
D.L. Weinreb and D.A. Moon,
Artificial Intelligence Laboratory, MIT (Cambridge, MA), July, 1981.

@item @Moonual{},
David A. Moon, Project MAC (Laboratory for Computer Science),
MIT (Cambridge, MA), March, 1974.

@item ``@NILReport{},'' 
JonL White, @i{Macsyma User's Conference}, 1979.

@item @GabrielBenchmarks{},
Richard P. Gabriel, MIT Press (Cambridge, MA), 1985.

@item ``@PrincipalValues{},'' 
Paul Penfield Jr., @i{APL 81 Conference Proceedings},
ACM SIGAPL (San Francisco, September 1981), 248-256.
Proceedings published as @i{APL Quote Quad 12}, 1 (September 1981).

@item @Pitmanual{},
Kent M. Pitman, 
Technical Report 295,
Laboratory for Computer Science, MIT (Cambridge, MA), May 1983.

@item ``@RevisedCubedScheme{},''
Jonathan Rees and William Clinger (editors), 
@i{SIGPLAN Notices} V21, #12, December, 1986.

@item ``@SOneCLPaper{},''
R.A. Brooks, R.P. Gabriel, and G.L. Steele,
@i{Conference Record of the 1982 ACM Symposium on Lisp and Functional Programming},
108-113, 1982.

@item @SmalltalkBook{},
A. Goldberg and D. Robson, Addison-Wesley, 1983.

@item ``@StandardLispReport{},''
J.B. Marti, A.C. Hearn, M.L. Griss, and C. Griss,
@i{SIGPLAN Notices} V14, #10, October, 1979.

@item @WebstersDictionary{},
Merriam Webster (Springfield, MA), 1986.

@item @XPPaper{},
R.C. Waters,
Memo 1102a,
Artificial Intelligence Laboratory, MIT (Cambridge, MA), September 1989.
@end itemize


@node Definitions
@section Definitions


This section contains notational conventions and definitions of terms
used in this manual.

@menu
* Notational Conventions::
* Error Terminology::
* Sections Not Formally Part Of This Standard::
* Interpreting Dictionary Entries::
@end menu
@node Notational Conventions
@subsection Notational Conventions

The following notational conventions are used throughout this document.

@subsubsection Font Key

Fonts are used in this document to convey information.


@table @asis

@item @id{@term{name}}
 

Denotes a formal term whose meaning is defined in the Glossary.
When this font is used, the Glossary definition takes precedence 
over normal English usage.

Sometimes a glossary term appears subscripted, 
as in ``@term{whitespace}@sub2{}.''  
Such a notation selects one particular Glossary definition out of several,
in this case the second.
The subscript notation for Glossary terms is generally used where the
context might be insufficient to disambiguate among the available definitions.

@item @id{@newterm{name}}
 

Denotes the introduction of a formal term locally to the current text.
There is still a corresponding glossary entry, and is formally equivalent
to a use of ``@term{name},'' but the hope is that making such uses 
conspicuous will save the reader a trip to the glossary in some cases.

@item @id{@t{name}}


Denotes a symbol in the @code{COMMON-LISP} @term{package}.
For information about @term{case} conventions,
see @ref{CaseInSymbols, Section 1.4.1.4.1 (Case in Symbols)}.

@item @id{@f{name}}
 

Denotes a sample @term{name} or piece of @term{code} that a programmer
might write in @clisp{}.

This font is also used for certain @term{standardized} names that are not
names of @term{external symbols} of the @code{COMMON-LISP} @term{package}, 
such as @term{keywords}@sub1{},
@term{package} @term{names},
and @term{loop keywords}.

@item @id{@param{name}}
 

Denotes the name of a @term{parameter} or @term{value}.

In some situations the notation ``@metaparam{name}'' (@ie{} the same font,
but with surrounding ``angle brackets'') is used instead in order to
provide better visual separation from surrounding characters.  These
``angle brackets'' are metasyntactic, and never actually appear in program
input or output.
@end table


@subsubsection Modified BNF Syntax
@anchor{ModifiedBNF}

This specification uses an extended Backus Normal Form (BNF) to
describe the syntax of @clisp{}@spc{}@term{macro forms} and @term{special forms}.
This section discusses the syntax of BNF expressions.

@unnumberedsubsubsec 1.4.1.2.1 Splicing in Modified BNF Syntax


The primary extension used is the following:


@quotation
@mat{@hbox{@interleave{@mat{O}}}}
@end quotation


An expression of this form appears whenever a list of elements is
to be spliced into a larger structure and the elements can appear in
any order. The symbol @mat{O} represents a description of the syntax of
some number of syntactic elements to be spliced; that description must
be of the form


@quotation
@mat{O@sub1{}@spc{}@vert{}@spc{}@ldots{}@spc{}@vert{}@spc{}O@subs1{l}}
@end quotation


@noindent
 where each @mat{O@subs1{i}} can be of the form @mat{S} or of
the form @star{@mat{S}} or of the form @one{@mat{S}}.
The expression @interleave{@mat{O}} means that a list of the form


@quotation
@mat{(O@subs{i@sub1{}}@ldots{} O@subs{i@subs1{j}})@quad{} 1@leq{} j}
@end quotation


@noindent
 is spliced into the enclosing expression,
such that if @mat{n @neq{} m} and @mat{1@leq{} n,m@leq{} j},
then either @mat{O@subs{i@subs1{n}}@neq{} O@subs{i@subs1{m}}}
or @mat{O@subs{i@subs1{n}} = O@subs{i@subs1{m}} = Q@subs1{k}}, 
where for some @mat{1@leq{} k @leq{} n}, @mat{O@subs1{k}} is of the form @star{@mat{Q@subs1{k}}}.
Furthermore, for each @mat{O@subs{i@subs1{n}}} that is of the form @one{@mat{Q@subs1{k}}},
that element is required to appear somewhere in the list to be spliced.

For example, the expression

@f{(x @interleave{A | @star{B} | C} y)}

@noindent
 means that at most one @tt{A}, any number of @tt{B}'s, and
at most one @tt{C} can occur in any order.
It is a description of any of these:

@lisp
 (x y)
 (x B A C y)
 (x A B B B B B C y)
 (x C B A B B B y)
@end lisp


@noindent
 but not any of these:

@lisp
 (x B B A A C C y)
 (x C B C y)
@end lisp


@noindent
 In the first case, both @tt{A} and @tt{C} appear too often,
and in the second case @tt{C} appears too often.


The notation @plus{@interleave{@mat{O@sub1{}} | @mat{O@sub2{}} | @mat{@ldots{}}}} 
adds the additional restriction that at least one item from among the possible
choices must be used.  For example:

@f{(x @plus{@interleave{A | @star{B} | C}} y)}

@noindent
 means that at most one @tt{A}, any number of @tt{B}'s, and
at most one @tt{C} can occur in any order, but that in any case at least
one of these options must be selected.
It is a description of any of these:

@lisp
 (x B y)
 (x B A C y)
 (x A B B B B B C y)
 (x C B A B B B y)
@end lisp


@noindent
 but not any of these:

@lisp
 (x y)
 (x B B A A C C y)
 (x C B C y)
@end lisp


@noindent
 In the first case, no item was used;
in the second case, both @tt{A} and @tt{C} appear too often;
and in the third case @tt{C} appears too often.

Also, the expression:

@f{(x @interleave{@one{A} | @one{B} | C} y)}

@noindent
 can generate exactly these and no others:

@lisp
 (x A B C y)
 (x A C B y)
 (x A B y)
 (x B A C y)
 (x B C A y)
 (x B A y)
 (x C A B y)
 (x C B A y)
@end lisp




@unnumberedsubsubsec 1.4.1.2.2 Indirection in Modified BNF Syntax


An indirection extension is introduced in order to make this
new syntax more readable:


@quotation
@mat{@hbox{@down{O}}}
@end quotation


@noindent
 If @param{O} is a non-terminal symbol, the right-hand side
of its definition is substituted for the entire expression 
@down{O}.  For example, the following BNF is equivalent to
the BNF in the previous example:

@f{(x @interleave{@down{O}} y)}

@auxbnf{O, @f{A} | @star{@f{B}} | @f{C}}



@unnumberedsubsubsec 1.4.1.2.3 Additional Uses for Indirect Definitions in Modified BNF Syntax


In some cases, an auxiliary definition in the BNF might appear to be unused
within the BNF, but might still be useful elsewhere.  For example, consider the
following definitions:

@DefmacWithValues{case, keyform  @stardown{normal-clause} @brac{@down{otherwise-clause}}, @starparam{result}}
@DefmacWithValues{ccase, keyplace @stardown{normal-clause}, @starparam{result}}
@DefmacWithValues{ecase, keyform  @stardown{normal-clause}, @starparam{result}}

@auxbnf{normal-clause, @paren{keys @starparam{form}}}
@auxbnf{otherwise-clause, @paren{@curly{otherwise | t} @starparam{form}}}
@auxbnf{clause, normal-clause | otherwise-clause}


Here the term ``@param{clause}'' might appear to be ``dead'' in that it
is not used in the BNF.  However, the purpose of the BNF is not just to guide parsing,
but also to define useful terms for reference in the descriptive text which follows.
As such, the term ``@param{clause}'' might appear in text that follows,
as shorthand for ``@param{normal-clause} or @param{otherwise-clause}.''


@subsubsection Special Symbols

The special symbols described here are used as a notational convenience
within this document, and are part of neither the @clisp{}@spc{}language nor
its environment.


@table @asis
@item @id{@EV{}}


This indicates evaluation.
For example:

@lisp
 (+ 4 5) @EV{} 9 
@end lisp

This means that the result of
evaluating the @term{form} @f{(+ 4 5)} is @f{9}.

If a @term{form} returns @term{multiple values}, those values might
be shown separated by spaces, line breaks, or commas.
For example:

@lisp
 (truncate 7 5)
@EV{} 1 2
 (truncate 7 5) 
@EV{} 1
   2
 (truncate 7 5)
@EV{} 1, 2
@end lisp


Each of the above three examples is equivalent, and specifies
that @f{(truncate 7 5)} returns two values, which are @f{1} and @f{2}.

Some @term{conforming implementations} actually type an arrow (or some
other indicator) before showing return values, while others do not.

@item @id{@OV{}}


The notation ``@OV{}'' is used to denote one of several possible
alternate results.  The example

@lisp
 (char-name #@bsl{}a)
@EV{} NIL
@OV{} "LOWERCASE-a"
@OV{} "Small-A"
@OV{} "LA01"
@end lisp


indicates that @nil{}, @f{"LOWERCASE-a"}, @f{"Small-A"}, @f{"LA01"} are
among the possible results of @f{(char-name #@bsl{}a)}---each with equal preference.
Unless explicitly specified otherwise, it should not be assumed that the set of possible 
results shown is exhaustive.
Formally, the above example is equivalent to

@lisp
 (char-name #@bsl{}a) @EV{} @term{implementation-dependent}
@end lisp


but it is intended to provide additional information to illustrate some
of the ways in which it is permitted for implementations to diverge.

@item @id{@NV{}}


The notation ``@NV{}'' is used to denote a result which is not possible.
This might be used, for example, in order to emphasize a situation where
some anticipated misconception might lead the reader to falsely believe
that the result might be possible.  For example,

@lisp
 (function-lambda-expression 
    (funcall #'(lambda (x) #'(lambda () x)) nil))
@EV{} NIL, @term{true}, NIL
@OV{} (LAMBDA () X), @term{true}, NIL
@NV{} NIL, @term{false}, NIL
@NV{} (LAMBDA () X), @term{false}, NIL
@end lisp


@item @id{@EQ{}}
 

This indicates code equivalence. For example:

@lisp
 (gcd x (gcd y z)) @EQ{} (gcd (gcd x y) z)
@end lisp

This means that the results and observable side-effects of evaluating
the @term{form}
@hbox{@f{(gcd x (gcd y z))} } are always the same as the results
and observable side-effects of
@hbox{@f{(gcd (gcd x y) z)} } for any 
@f{x}, @f{y}, and @f{z}.


@item @id{@OUT{}}


@clisp{}@spc{}specifies input and output with respect to a non-interactive stream model.
The specific details of how interactive input and output are mapped onto that
non-interactive model are @term{implementation-defined}.

For example, @term{conforming implementations} are permitted to differ in issues 
of how interactive input is terminated.  For example, @thefunction{read}
terminates when the final delimiter is typed on a non-interactive stream.
In some @term{implementations}, an interactive call to @code{read} returns
as soon as the final delimiter is typed, even if that delimiter is not a @term{newline}.
In other @term{implementations}, a final @term{newline} is always required.
In still other @term{implementations}, there might be a command which ``activates''
a buffer full of input without the command itself being visible on the program's
input stream.

In the examples in this document, the notation ``@OUT{}'' precedes 
lines where interactive input and output occurs.  Within such a scenario,
``@IN{this notation}'' notates user input.

For example, the notation

@lisp
 (+ 1 (print (+ (sqrt (read)) (sqrt (read)))))
@OUT{} @IN{9 16 }
@OUT{} 7
@EV{} 8
@end lisp


shows an interaction in which
``@f{(+ 1 (print (+ (sqrt (read)) (sqrt (read)))))}''
is a @term{form} to be @term{evaluated},
``@f{9 16 }'' is interactive input,
``@f{7}'' is interactive output, and 
``@f{8}'' is the @term{value} @term{yielded} from the @term{evaluation}.

The use of this notation is intended to disguise small differences 
in interactive input and output behavior between @term{implementations}.

Sometimes, the non-interactive stream model calls for a @term{newline}.
How that @term{newline} character is interactively entered is an 
@term{implementation-defined} detail of the user interface, but in that
case, either the notation ``@NewlineChar{}'' or ``@CRLF{}'' might be used.

@lisp
 (progn (format t "~&Who? ") (read-line))
@OUT{} Who? @IN{Fred, Mary, and Sally@CRLF{}}
@EV{} "Fred, Mary, and Sally", @term{false}
@end lisp

@end table


@subsubsection Objects with Multiple Notations

Some @term{objects} in @clisp{}@spc{}can be notated in more than one way.
In such situations, the choice of which notation to use is technically arbitrary,
but conventions may exist which convey a ``point of view'' or ``sense of intent.''

@unnumberedsubsubsec 1.4.1.4.1 Case in Symbols
@cindex case in symbol names
@anchor{CaseInSymbols}

While @term{case} is significant in the process of @term{interning} a @term{symbol},
the @term{Lisp reader}, by default, attempts to canonicalize the case of a
@term{symbol} prior to interning; see @ref{Effect of Readtable Case on the Lisp Reader, Section 23.1.2 (Effect of Readtable Case on the Lisp Reader)}.
As such, case in @term{symbols} is not, by default, significant.
Throughout this document, except as explicitly noted otherwise,
the case in which a @term{symbol} appears is not significant; 
that is, @f{HELLO}, @f{Hello}, @f{hElLo}, and @f{hello} are
all equivalent ways to denote a symbol whose name is @f{"HELLO"}.

The characters @term{backslash} and @term{vertical-bar} are used to explicitly
quote the @term{case} and other parsing-related 
aspects
of characters.  As such,
the notations @f{|hello|} and @f{@bsl{}h@bsl{}e@bsl{}l@bsl{}l@bsl{}o} are equivalent ways
to refer to a symbol whose name is @f{"hello"}, and which is @term{distinct} from
any symbol whose name is @f{"HELLO"}.

The @term{symbols} that correspond to @clisp{}@spc{}@term{defined names}
have @term{uppercase} names even though their names generally appear
in @term{lowercase} in this document.

@unnumberedsubsubsec 1.4.1.4.2 Numbers


Although @clisp{}@spc{}provides a variety of ways for programs to manipulate the
input and output radix for rational numbers, all numbers in this document
are in decimal notation unless explicitly noted otherwise.

@unnumberedsubsubsec 1.4.1.4.3 Use of the Dot Character


The dot appearing by itself in an @term{expression} such as

@f{(@param{item1} @param{item2} @dot{} @param{tail})}

means that @param{tail} represents a @term{list} of @term{objects} 
at the end of a list.  For example,

@f{(A B C @dot{} (D E F))}

is notationally equivalent to:

@f{(A B C D E F)}

Although @term{dot} is a valid constituent character in a symbol, no 
@term{standardized} @term{symbols} contain the character @term{dot},
so a period that follows a reference to a @term{symbol} at the end of
a sentence in this document should always be interpreted as a period
and never as part of the @term{symbol}'s @term{name}.
For example, within this document, a sentence such as
``This sample sentence refers to the symbol @code{car}.'' 
refers to a symbol whose name is @f{"CAR"} (with three letters),
and never to a four-letter symbol @f{"CAR."}

@unnumberedsubsubsec 1.4.1.4.4 NIL
@cindex nil
@cindex ()
@cindex nil

@nil{}@spc{}has a variety of meanings.
It is a @term{symbol} in the @code{COMMON-LISP} @term{package} with the @term{name} @f{"NIL"},
it is @term{boolean} (and @term{generalized boolean}) @term{false},
it is the @term{empty list},
and it is the @term{name} of the @term{empty type} (a @term{subtype} of all @term{types}).

Within @clisp{}, @nil{}@spc{}can be notated interchangeably as either @f{NIL} or @f{()}.
By convention, the choice of notation offers a hint as to which of its many
roles it is playing.


@float Figure,fig1.1
@cartouche
@multitable{@hfil{}@b{For Evaluation?}}{@hfil{}@b{Notation}@hfil{}}{use as a @term{symbol} or @term{boolean}.}

@item @hfil{}@b{For Evaluation?} @tab @hfil{}@b{Notation}@hfil{} @tab @b{Typically Implied Role}
@item Yes @tab @f{nil} @tab use as a @term{boolean}.
@item Yes @tab @f{'nil} @tab use as a @term{symbol}.
@item Yes @tab @f{'()} @tab use as an @term{empty list}
@item No @tab @f{nil} @tab use as a @term{symbol} or @term{boolean}.
@item No @tab @f{()} @tab use as an @term{empty list}.
@end multitable
@end cartouche
@caption{Notations for NIL}
@end float


Within this document only, @nil{}@spc{}is also sometimes notated as @term{false} to
emphasize its role as a @term{boolean}.

For example:

@lisp
 (print ())                          ;avoided
 (defun three nil 3)                 ;avoided 
 '(nil nil)                          ;list of two symbols
 '(() ())                            ;list of empty lists
 (defun three () 3)                  ;Emphasize empty parameter list.
 (append '() '()) @EV{} ()              ;Emphasize use of empty lists
 (not nil) @EV{} @term{true}                   ;Emphasize use as Boolean false
 (get 'nil 'color)                   ;Emphasize use as a symbol
@end lisp


A @term{function} is sometimes said to ``be @term{false}'' or ``be @term{true}''
in some circumstance.
Since no @term{function} object can be the same as @nil{}@spc{}
and all @term{function} @term{objects} represent @term{true} when viewed as @term{booleans},
it would be meaningless to say that the @term{function} was literally @term{false} 
and uninteresting to say that it was literally @term{true}.
Instead, these phrases are just traditional alternative ways of saying that the
@term{function} ``returns @term{false}'' or ``returns @term{true},'' respectively.



@subsubsection Designators
@anchor{Designators}

A @newterm{designator} is an @term{object} that denotes another @term{object}.

Where a @term{parameter} of an @term{operator} is described as a @term{designator},
the description of the @term{operator} is written in a way that assumes that
the value of the @term{parameter} is the denoted @term{object};
that is, that the @term{parameter} is already of the denoted @term{type}.
(The specific nature of the @term{object} denoted by
a ``@metavar{type} @term{designator}''
or a ``@term{designator} for a @metavar{type}'' 
can be found in the Glossary entry for ``@metavar{type} @term{designator}.'')

For example, ``@nil{}'' and ``@thevalueof{*standard-output*}'' are operationally
indistinguishable as @term{stream designators}.  Similarly, 
the @term{symbol} @f{foo} and the @term{string} @f{"FOO"} 
are operationally indistinguishable as @term{string designators}.  

Except as otherwise noted, in a situation where the denoted @term{object} 
might be used multiple times, it is @term{implementation-dependent}
whether the @term{object} is coerced only once or whether the coercion occurs
each time the @term{object} must be used.

For example, @code{mapcar} receives a @term{function designator} as an argument,
and its description is written as if this were simply a function.  In fact, it
is @term{implementation-dependent} whether the @term{function designator} is 
coerced right away or whether it is carried around internally in the form that
it was given as an @term{argument} and re-coerced each time it is needed.  In most
cases, @term{conforming programs} cannot detect the distinction, but there are some 
pathological situations (particularly those involving self-redefining or 
mutually-redefining functions) which do conform and which can detect this difference.
The following program is a @term{conforming program}, but might or might not have
portably correct results, depending on whether its correctness depends on one or
the other of the results:

@lisp
 (defun add-some (x) 
   (defun add-some (x) (+ x 2))
   (+ x 1)) @EV{} ADD-SOME
 (mapcar 'add-some '(1 2 3 4))
@EV{} (2 3 4 5)
@OV{} (2 4 5 6)
@end lisp


In a few rare situations, there may be a need in a dictionary entry
to refer to the @term{object} that was the original @term{designator}
for a @term{parameter}.
Since naming the @term{parameter} would refer to the denoted @term{object},
the phrase ``the @metavar{parameter-name} @term{designator}'' 
can be used to refer to the @term{designator} which was the @term{argument}
from which the @term{value} of @metavar{parameter-name} was computed.

@subsubsection Nonsense Words

When a word having no pre-attached semantics is required (@eg{} in an
example), it is common in the Lisp community to use one of the words
``foo,'' ``bar,'' ``baz,'' and ``quux.''  For example, in

@lisp
 (defun foo (x) (+ x 1))
@end lisp

the use of the name @f{foo} is just a shorthand way of saying 
``please substitute your favorite name here.''

These nonsense words have gained such prevalance of usage, that it is
commonplace for newcomers to the community to begin to wonder if there
is an attached semantics which they are overlooking---there is not.



@node Error Terminology
@subsection Error Terminology

Situations in which errors might, should, or must be signaled are described
in the standard.  The wording used to describe such situations is intended
to have precise meaning. The following list is a glossary of those meanings.


@table @asis
@item @id{@b{Safe code}}
@cindex safe

This is @term{code} processed with the @code{safety} optimization 
at its highest setting (@f{3}).  @code{safety} is a lexical property
of code.  The phrase ``the function @f{F} should signal an error'' 
means that if @f{F} is invoked from code processed with the highest
@code{safety} optimization, an error is signaled.
It is @term{implementation-dependent} whether @f{F} or the calling 
code signals the error.

@item @id{@b{Unsafe code}}
@cindex unsafe

This is code processed with lower safety levels.

Unsafe code might do error checking.  Implementations are permitted to
treat all code as safe code all the time.

@item @id{@b{An error is signaled}}

@cindex signal
@cindex is signaled
@cindex must signal

This means that an error is signaled in both safe and unsafe code.
@term{Conforming code} may rely on the fact that the error is signaled
in both safe and unsafe code.  Every implementation is required to
detect the error in both safe and unsafe code. For example, ``an error
is signaled if @code{unexport} is given a @term{symbol}
not @term{accessible} in the @term{current package}.''

If an explicit error type is not specified, the default is @code{error}.

@item @id{@b{An error should be signaled}}

@cindex signal
@cindex should signal

This means that an error is signaled in safe code, and an error
might be signaled in unsafe code.  @term{Conforming code} may rely on the
fact that the error is signaled in safe code.  Every
implementation is required to detect the error at least in safe code.
When the error is not signaled, the ``consequences are undefined''
(see below).  For example, ``@code{+} should signal an error @oftype{type-error}
if any argument is not @oftype{number}.''

@item @id{@b{Should be prepared to signal an error}}

@cindex signal
@cindex prepared to signal

This is similar to ``should be signaled'' except that it does not
imply that `extra effort' has to be taken on the part of an @term{operator}
to discover an erroneous situation if the normal action of that @term{operator}
can be performed successfully with only `lazy' checking.
An @term{implementation} is always permitted to signal an error,
but even in @term{safe} @term{code}, it is only required to signal the error
when failing to signal it might lead to incorrect results.
In @term{unsafe} @term{code}, the consequences are undefined.

For example, defining that 
``@code{find} should be prepared to signal an error @oftype{type-error}
if its second @term{argument} is not a @term{proper list}''
does not imply that an error is always signaled.  The @term{form}

@lisp
 (find 'a '(a b . c))
@end lisp


must either signal an error @oftype{type-error} in @term{safe} @term{code},
else return @f{A}.
In @term{unsafe} @term{code}, the consequences are undefined.
By contrast,

@lisp
 (find 'd '(a b . c))
@end lisp


must signal an error @oftype{type-error} in @term{safe} @term{code}.
In @term{unsafe} @term{code}, the consequences are undefined.
Also,

@lisp
 (find 'd '#1=(a b . #1#))
@end lisp


in @term{safe code}
might return @nil{}@spc{}(as an @term{implementation-defined} extension),
might never return,
or might signal an error @oftype{type-error}.
In @term{unsafe} @term{code}, the consequences are undefined.

Typically, the ``should be prepared to signal'' terminology is used in
type checking situations where there are efficiency considerations that
make it impractical to detect errors that are not relevant to the
correct operation of the @term{operator}.

@item @id{@b{The consequences are unspecified}}

@cindex consequences
@cindex unspecified consequences

This means that the consequences are unpredictable but harmless.
Implementations are permitted to specify the consequences of this
situation. No @term{conforming code} may depend on the results or effects of
this situation, and all @term{conforming code} is required to treat the
results and effects of this situation as unpredictable but harmless.
For example, ``if the second argument to @code{shared-initialize}
specifies a name that does not correspond to any @term{slots}
@term{accessible} in the @term{object}, the results are unspecified.''

@item @id{@b{The consequences are undefined}}

@cindex consequences
@cindex undefined consequences

This means that the consequences are unpredictable. The consequences
may range from harmless to fatal.  No @term{conforming code} may depend on
the results or effects. @term{Conforming code} must treat the consequences as
unpredictable.  In places where the words ``must,'' ``must not,'' or
``may not'' are used, then ``the consequences are undefined'' if the
stated requirement is not met and no specific consequence is
explicitly stated.  An implementation is permitted to signal an error
in this case.

For example: ``Once a name has been declared by @code{defconstant}
to be constant, any further assignment or binding of that
variable has undefined consequences.''

@item @id{@b{An error might be signaled}}

@cindex signal
@cindex might signal

This means that the situation has undefined consequences;
however, if an error is signaled, it is of the specified @term{type}.
For example, ``@code{open} might signal an error @oftype{file-error}.''

@item @id{@b{The return values are unspecified}}

@cindex unspecified values

This means that only the number and nature of the return values of a
@term{form} are not specified.  However, the issue of whether or not
any side-effects or transfer of control occurs is still well-specified.

A program can be well-specified even if it uses a function whose
returns values are unspecified.  For example, even if the return
values of some function @f{F} are unspecified, an expression such as
@f{(length (list (F)))} is still well-specified because it does not
rely on any particular aspect of the value or values returned by @f{F}.

@item @id{@b{Implementations may be extended to cover this situation}}

@cindex extensions

This means that the @term{situation} has undefined consequences;
however, a @term{conforming implementation} is free to treat
the situation in a more specific way.  
For example, an @term{implementation} might define 
that      an error is signaled,
or that      an error should be signaled,
or even that a certain well-defined non-error behavior occurs.

No @term{conforming code} may depend on the consequences of such a @term{situation};
all @term{conforming code} must treat the consequences of the situation
as undefined. @term{Implementations} are required to document how the
situation is treated.

For example, ``implementations may be extended to define other type
specifiers to have a corresponding @term{class}.''

@item @id{@b{Implementations are free to extend the syntax}}

@cindex extensions

This means that in this situation implementations are permitted to
define unambiguous extensions to the syntax of the @term{form} being
described.  No @term{conforming code} may depend on this extension.
Implementations are required to document each such extension. All
@term{conforming code} is required to treat the syntax as meaningless. The
standard might disallow certain extensions while allowing others. For
example, ``no implementation is free to extend the syntax of
@code{defclass}.''

@item @id{@b{A warning might be issued}}

@cindex warning

This means that @term{implementations} are encouraged to issue a warning
if the context is appropriate (@eg{} when compiling).  However, a
@term{conforming implementation} is not required to issue a warning.
@end table



@node Sections Not Formally Part Of This Standard
@subsection Sections Not Formally Part Of This Standard

Front matter and back matter, such as the ``Table of Contents,'' 
``Index,'' ``Figures,'' ``Credits,'' and ``Appendix'' are not considered formally 
part of this standard, so that we retain the flexibility needed to update
these sections even at the last minute without fear of needing a formal 
vote to change those parts of the document.  These items are quite short 
and very useful, however, and it is not recommended that they be removed 
even in an abridged version of this document.

Within the concept sections, subsections whose names begin with 
the words ``Note'' or ``Notes'' or ``Example'' or ``Examples'' 
are provided for illustration purposes only, and are not considered
part of the standard.

An attempt has been made to place these sections last in their parent section,
so that they could be removed without disturbing the contiguous numbering of the 
surrounding sections in order to produce a document of smaller size.

Likewise, the ``Examples'' and ``Notes'' sections in a dictionary entry
are not considered part of the standard and could be removed if necessary.

Nevertheless, the examples provide important clarifications and consistency 
checks for the rest of the material, and such abridging is not recommended
unless absolutely unavoidable.


@node Interpreting Dictionary Entries
@subsection Interpreting Dictionary Entries

The dictionary entry for each @term{defined name} is partitioned into
sections.  Except as explicitly indicated otherwise below, each section
is introduced by a label identifying that section.  The omission of a
section implies that the section is either not applicable, or would
provide no interesting information.

This section defines the significance of each potential section in a
dictionary entry.

@subsubsection The ``Affected By'' Section of a Dictionary Entry

For an @term{operator}, anything that can affect the side effects of
or @term{values} returned by the @term{operator}.

For a @term{variable}, anything that can affect the @term{value} of the @term{variable}
including @term{functions} that bind or assign it.


@subsubsection The ``Arguments'' Section of a Dictionary Entry

This information describes the syntax information of entries such as those for
@term{declarations} and special @term{expressions} which are never @term{evaluated}
as @term{forms}, and so do not return @term{values}.


@subsubsection The ``Arguments and Values'' Section of a Dictionary Entry

An English language description of what @term{arguments} the @term{operator} accepts
and what @term{values} it returns, including information about defaults for @term{parameters}
corresponding to omittable @term{arguments}
(such as @term{optional parameters} and @term{keyword parameters}).
For @term{special operators} and @term{macros},
their @term{arguments} are not @term{evaluated} unless it is explicitly stated in their
descriptions that they are @term{evaluated}.

Except as explicitly specified otherwise,
the consequences are undefined if these type restrictions are violated.


@subsubsection The ``Binding Types Affected'' Section of a Dictionary Entry

This information alerts the reader to the kinds of @term{bindings} that might 
potentially be affected by a declaration.  Whether in fact any particular such
@term{binding} is actually affected is dependent on additional factors as well.
See the ``Description'' section of the declaration in question for details.


@subsubsection The ``Class Precedence List'' Section of a Dictionary Entry

This appears in the dictionary entry for a @term{class},
and contains an ordered list of the @term{classes} defined 
by @clisp{}@spc{}that must be in the @term{class precedence list} of this @term{class}.

It is permissible for other (@term{implementation-defined}) @term{classes}
to appear in the @term{implementation}'s @term{class precedence list} for the @term{class}.

It is permissible for 
either @code{standard-object}
or @code{structure-object}
to appear in the @term{implementation}'s @term{class precedence list};
for details, see @ref{Type Relationships, Section 4.2.2 (Type Relationships)}.

Except as explicitly indicated otherwise somewhere in this specification,
no additional @term{standardized} @term{classes} may appear in 
the @term{implementation}'s @term{class precedence list}.

By definition of the relationship between @term{classes} and @term{types},
the @term{classes} listed in this section are also @term{supertypes} of 
the @term{type} denoted by the @term{class}.


@subsubsection Dictionary Entries for Type Specifiers
@anchor{TypeSpecEntries}

The @term{atomic type specifiers} are those @term{defined names} 
listed in @ref{StandardizedAtomicTypeSpecs, Figure 4.2}.
Such dictionary entries are of kind 
``Class,'' ``Condition Type,'' ``System Class,'' or ``Type.''
A description of how to interpret 
a @term{symbol} naming one of these @term{types} or @term{classes} 
as an @term{atomic type specifier}
is found in the ``Description'' section of such dictionary entries.

The @term{compound type specifiers} are those @term{defined names} 
listed in @ref{StandardizedCompoundTypeSpecNames, Figure 4.3}.
Such dictionary entries are of kind ``Class,'' ``System Class,''
``Type,'' or ``Type Specifier.''
A description of how to interpret as a @term{compound type specifier}
a @term{list} whose @term{car} is such a @term{symbol}
is found in the 
``Compound Type Specifier Kind,''
``Compound Type Specifier Syntax,''
``Compound Type Specifier Arguments,''
and ``Compound Type Specifier Description''
sections of such dictionary entries.

@unnumberedsubsubsec 1.4.4.6.1 The ``Compound Type Specifier Kind'' Section of a Dictionary Entry


An ``abbreviating'' @term{type specifier} is one that describes a @term{subtype}
for which it is in principle possible to enumerate the @term{elements},
but for which in practice it is impractical to do so.

A ``specializing'' @term{type specifier} is one that describes a @term{subtype}
by restricting the @term{type} of one or more components of the @term{type},
such as @term{element type} or @term{complex part type}.

A ``predicating'' @term{type specifier} is one that describes a @term{subtype}
containing only those @term{objects} that satisfy a given @term{predicate}.

A ``combining'' @term{type specifier} is one that describes a @term{subtype}
in a compositional way, using combining operations (such as ``and,'' ``or,'' and
``not'') on other @term{types}.


@unnumberedsubsubsec 1.4.4.6.2 The ``Compound Type Specifier Syntax'' Section of a Dictionary Entry


This information about a @term{type} describes the syntax of a 
@term{compound type specifier} for that @term{type}.

Whether or not the @term{type} is acceptable as an @term{atomic type specifier}
is not represented here; see @ref{TypeSpecEntries, Section 1.4.4.6 (Dictionary Entries for Type Specifiers)}.


@unnumberedsubsubsec 1.4.4.6.3 The ``Compound Type Specifier Arguments'' Section of a Dictionary Entry


This information describes @term{type} information for the structures defined in
the ``Compound Type Specifier Syntax'' section.


@unnumberedsubsubsec 1.4.4.6.4 The ``Compound Type Specifier Description'' Section of a Dictionary Entry


This information describes the meaning of the structures defined in
the ``Compound Type Specifier Syntax'' section.



@subsubsection The ``Constant Value'' Section of a Dictionary Entry

This information describes the unchanging @term{type} and @term{value} of 
a @term{constant variable}.


@subsubsection The ``Description'' Section of a Dictionary Entry

A summary of the @term{operator} and all intended aspects of the @term{operator}, 
but does not necessarily include all the fields referenced below it 
(``Side Effects,'' ``Exceptional Situations,'' @etc{}.)


@subsubsection The ``Examples'' Section of a Dictionary Entry

Examples of use of the @term{operator}.
These examples are not considered part of the standard;
see @ref{Sections Not Formally Part Of This Standard, Section 1.4.3 (Sections Not Formally Part Of This Standard)}.


@subsubsection The ``Exceptional Situations'' Section of a Dictionary Entry

Three kinds of information may appear here:

@itemize @bullet{}
@item
Situations that are detected by the @term{function} and formally signaled.
@item
Situations that are handled by the @term{function}.
@item
Situations that may be detected by the @term{function}.
@end itemize

This field does not include conditions that could
be signaled by @term{functions} passed to and called by this @term{operator}
as arguments or through dynamic variables, nor by executing subforms of this
operator if it is a @term{macro} or @term{special operator}.


@subsubsection The ``Initial Value'' Section of a Dictionary Entry

This information describes the initial @term{value} of a @term{dynamic variable}.
Since this variable might change, see @term{type} restrictions in the ``Value Type'' section.


@subsubsection The ``Argument Precedence Order'' Section of a Dictionary Entry

This information describes the @term{argument precedence order}.
If it is omitted, the @term{argument precedence order} is the default (left to right).


@subsubsection The ``Method Signature'' Section of a Dictionary Entry

The description of a @term{generic function} includes descriptions of the
@term{methods} that are defined on that @term{generic function} by the standard.  
A method signature is used to describe the @term{parameters} and 
@term{parameter specializers} for each @term{method}. 
@term{Methods} defined for the @term{generic function} must be of the form described
by the @term{method} @term{signature}. 

 F @paren{@param{x} @param{class}}
@paren{@param{y} t}
@opt{} @param{z} @key{} @param{k}

@noindent
 This @term{signature} indicates that this method on the @term{generic function}
@b{F} has two @term{required parameters}:
@param{x}, which must be a @term{generalized instance} of the @term{class} @param{class};
and @param{y}, which can  be any @term{object} 
(@ie{} a @term{generalized instance} of the @term{class} @code{t}).
In addition, there is an @term{optional parameter} @param{z} and a
@term{keyword parameter} @param{k}.  This @term{signature} also indicates that this
method on @f{F} is a @term{primary method} and has no @term{qualifiers}.

For each @term{parameter}, the @term{argument} supplied must be in the
intersection of the @term{type} specified in the description of the
corresponding @term{generic function} and the @term{type} given in 
the @term{signature} of some @term{method} (including not only those 
@term{methods} defined in this specification, but also
@term{implementation-defined} or user-defined @term{methods} in situations
where the definition of such @term{methods} is permitted).


@subsubsection The ``Name'' Section of a Dictionary Entry

This section introduces the dictionary entry.  It is not explicitly labeled.
It appears preceded and followed by a horizontal bar.

In large print at left, the @term{defined name} appears; if more than one
@term{defined name} is to be described by the entry, all such @term{names} 
are shown separated by commas.

In somewhat smaller italic print at right is an indication of what kind
of dictionary entry this is.  Possible values are:


@table @asis

@item @id{@i{Accessor}}


This is an @term{accessor} @term{function}.

@item @id{@i{Class}}


This is a @term{class}.

@item @id{@i{Condition Type}}


This is a @subtypeof{condition}.

@item @id{@i{Constant Variable}}


This is a @term{constant variable}.

@item @id{@i{Declaration}}


This is a @term{declaration identifier}.

@item @id{@i{Function}}


This is a @term{function}.

@item @id{@i{Local Function}}


This is a @term{function} that is defined only lexically within the scope of some
other @term{macro form}.

@item @id{@i{Local Macro}}


This is a @term{macro} that is defined only lexically within the scope of some
other @term{macro form}.

@item @id{@i{Macro}}


This is a @term{macro}.

@item @id{@i{Restart}}


This is a @term{restart}.

@item @id{@i{Special Operator}}


This is a @term{special operator}.

@item @id{@i{Standard Generic Function}}


This is a @term{standard generic function}.

@item @id{@i{Symbol}}


This is a @term{symbol} that is specially recognized in some particular situation,
such as the syntax of a @term{macro}.

@item @id{@i{System Class}}


This is like @term{class}, but it identifies a @term{class} that is potentially
a @term{built-in class}.  (No @term{class} is actually required to be a
@term{built-in class}.)

@item @id{@i{Type}}


This is an @term{atomic type specifier},
and depending on information for each particular entry,
may subject to form other @term{type specifiers}.

@item @id{@i{Type Specifier}}


This is a @term{defined name} that is not an @term{atomic type specifier},
but that can be used in constructing valid @term{type specifiers}.

@item @id{@i{Variable}}


This is a @term{dynamic variable}.
@end table



@subsubsection The ``Notes'' Section of a Dictionary Entry

Information not found elsewhere in this description
which pertains to this @term{operator}.
Among other things, this might include 
cross reference information,
code equivalences, 
stylistic hints,
implementation hints,
typical uses.
This information is not considered part of the standard;
any @term{conforming implementation} or @term{conforming program}
is permitted to ignore the presence of this information.


@subsubsection The ``Pronunciation'' Section of a Dictionary Entry

This offers a suggested pronunciation for @term{defined names} 
so that people not in verbal communication with the original designers
can figure out how to pronounce words that are not in normal English usage.
This information is advisory only, and is not considered part of the standard.
For brevity, it is only provided for entries with names that are specific to
@clisp{}@spc{}and would not be found in @WebstersDictionary{}.


@subsubsection The ``See Also'' Section of a Dictionary Entry

List of references to other parts of this standard
that offer information relevant to this @term{operator}. 
This list is not part of the standard.


@subsubsection The ``Side Effects'' Section of a Dictionary Entry

Anything that is changed as a result of the
evaluation of the @term{form} containing this @term{operator}.


@subsubsection The ``Supertypes'' Section of a Dictionary Entry

This appears in the dictionary entry for a @term{type},
and contains a list of the @term{standardized} @term{types} 
that must be @term{supertypes} of this @term{type}.

In @term{implementations} where there is a corresponding @term{class},
the order of the @term{classes} in the @term{class precedence list} 
is consistent with the order presented in this section.


@subsubsection The ``Syntax'' Section of a Dictionary Entry

This section describes how to use the @term{defined name} in code.
The ``Syntax'' description for a @term{generic function} 
describes the @term{lambda list} of the @term{generic function} itself, 
while the ``Method Signatures'' describe the @term{lambda lists} 
of the defined @term{methods}.
The ``Syntax'' description for 
an @term{ordinary function},
a @term{macro},
or a @term{special operator}
describes its @term{parameters}.

For example, an @term{operator} description might say:

@Defun{F, x y @opt{} z @key{} k}

@noindent
 This description indicates that the function @b{F} 
has two required parameters, @param{x} and @param{y}.  In addition,
there is an optional parameter @param{z} and a keyword parameter @param{k}.

For @term{macros} and @term{special operators}, syntax is given 
in modified BNF notation; see @ref{ModifiedBNF, Section 1.4.1.2 (Modified BNF Syntax)}.
For @term{functions} a @term{lambda list} is given.
In both cases, however, the outermost parentheses are omitted,
and default value information is omitted.

@unnumberedsubsubsec 1.4.4.20.1 Special ``Syntax'' Notations for Overloaded Operators


If two descriptions exist for the same operation but with different numbers of
arguments, then the extra arguments are to be treated as optional.  For example,
this pair of lines:

@DefunWithValues{file-position, stream, position}
@DefunWithValues{file-position, stream position-spec, success-p}

@noindent
 is operationally equivalent to this line:

@DefunWithValues{file-position, stream @opt{} position-spec, result}

@noindent
 and differs only in that it provides on opportunity to introduce different
names for @term{parameter} and @term{values} for each case.
The separated (multi-line) notation is used when an @term{operator} is overloaded in
such a way that the @term{parameters} are used in different ways
depending on how many @term{arguments} are supplied (@eg{} for @thefunction{/})
or the return values are different in the two cases (@eg{} for @thefunction{file-position}).


@unnumberedsubsubsec 1.4.4.20.2 Naming Conventions for Rest Parameters


Within this specification, 
if the name of a @term{rest parameter} is chosen to be a plural noun,
use of that name in @param{parameter} font refers
to the @term{list} to which the @term{rest parameter} is bound.
Use of the singular form of that name in @param{parameter} font refers 
to an @term{element} of that @term{list}.

For example, given a syntax description such as:

@Defun{F, @rest{} @param{arguments}}

@noindent
 it is appropriate to refer either to the @term{rest parameter} named
@param{arguments} by name, or to one of its elements by speaking of ``an @param{argument},''
``some @param{argument},'' ``each @param{argument}'' @etc{}.


@unnumberedsubsubsec 1.4.4.20.3 Requiring Non-Null Rest Parameters in the ``Syntax'' Section


In some cases it is useful to refer to all arguments equally as a single
aggregation using a @term{rest parameter} while at the same time
requiring at least one argument.  A variety of imperative and
declarative means are available in @term{code} for expressing such a
restriction, however they generally do not manifest themselves in a
@term{lambda list}.  For descriptive purposes within this specification,

@Defun{F, @rest{} @plus{arguments}}

@noindent
 means the same as

@Defun{F, @rest{} arguments}

@noindent
 but introduces the additional requirement that there be 
at least one @param{argument}.


@unnumberedsubsubsec 1.4.4.20.4 Return values in the ``Syntax'' Section


An evaluation arrow ``@EV{}'' precedes a list of @term{values} to be returned.
For example:

@DefunWithValues{F, a b c, x}

@noindent
 indicates that @f{F} is an operator that has three @term{required parameters}
(@ie{} @param{a}, @param{b}, and @param{c}) and that returns one @term{value} (@ie{} @param{x}).
If more than one @term{value} is returned by an operator, the @term{names} of the
@term{values} are separated by commas, as in:

@DefunWithValues{F, a b c, x\, y\, z}

@unnumberedsubsubsec 1.4.4.20.4.1 No Arguments or Values in the ``Syntax'' Section


If no @term{arguments} are permitted, or no @term{values} are returned, 
a special notation is used to make this more visually apparent.  For example,

@DefunWithValues{F, @noargs{}, @novalues{}}

indicates that @f{F} is an operator that accepts no @term{arguments} and returns
no @term{values}.


@unnumberedsubsubsec 1.4.4.20.4.2 Unconditional Transfer of Control in the ``Syntax'' Section


Some @term{operators} perform an unconditional transfer of control, and
so never have any return values.  Such @term{operators} are notated using
a notation such as the following:

@DefunNoReturn{F, a b c}




@subsubsection The ``Valid Context'' Section of a Dictionary Entry

This information is used by dictionary entries such as ``Declarations''
in order to restrict the context in which the declaration may appear.

A given ``Declaration'' might appear in 
a @term{declaration} (@ie{} a @t{declare} @term{expression}),
a @term{proclamation} (@ie{} a @code{declaim} or @code{proclaim} @term{form}),
or both.


@subsubsection The ``Value Type'' Section of a Dictionary Entry

This information describes any @term{type} restrictions on a @term{dynamic variable}.

Except as explicitly specified otherwise,
the consequences are undefined if this type restriction is violated.



@node Conformance
@section Conformance


This standard presents the syntax and semantics to be implemented by a
@term{conforming implementation} (and its accompanying documentation).
In addition, it imposes requirements on @term{conforming programs}.

@menu
* Conforming Implementations::
* Conforming Programs::
@end menu
@node Conforming Implementations
@subsection Conforming Implementations

A @newterm{conforming implementation} shall adhere to the requirements outlined
in this section.

@subsubsection Required Language Features
@anchor{ReqLangFeatures}

A @term{conforming implementation} shall accept all features 
(including deprecated features)
of the language specified in this standard,
with the meanings defined in this standard.

A @term{conforming implementation} shall not require the inclusion of substitute
or additional language elements in code in order to accomplish a feature of
the language that is specified in this standard.


@subsubsection Documentation of Implementation-Dependent Features

A @term{conforming implementation} shall be accompanied by a document
that provides a definition of all @term{implementation-defined}
aspects of the language defined by this specification.

In addition, a @term{conforming implementation} is encouraged (but not required) 
to document items in this standard that are identified as
@term{implementation-dependent}, although in some cases
such documentation might simply identify the item as ``undefined.''


@subsubsection Documentation of Extensions

A @term{conforming implementation} shall be accompanied by a
document that separately describes any features accepted by the
@term{implementation} that are not specified in this standard, but that do not
cause any ambiguity or contradiction when added to the language
standard.  Such extensions shall be described as being ``extensions to
@clisp{}@spc{}as specified by ANSI @metavar{standard number}.''


@subsubsection Treatment of Exceptional Situations

A @term{conforming implementation} shall treat exceptional situations 
in a manner consistent with this specification.

@unnumberedsubsubsec 1.5.1.4.1 Resolution of Apparent Conflicts in Exceptional Situations


If more than one passage in this specification appears to apply to the
same situation but in conflicting ways, the passage that appears
to describe the situation in the most specific way (not necessarily the
passage that provides the most constrained kind of error detection) 
takes precedence.

@unnumberedsubsubsec 1.5.1.4.1.1 Examples of Resolution of Apparent Conflicts 
in Exceptional Situations


Suppose that function @f{foo} is a member of a set @mat{S} of @term{functions} that
operate on numbers.  Suppose that one passage states that an error must be
signaled if any @term{function} in @mat{S} is ever given an argument of @f{17}.
Suppose that an apparently conflicting passage states that the consequences 
are undefined if @f{foo} receives an argument of @f{17}.  Then the second passage
(the one specifically about @f{foo}) would dominate because the description of
the situational context is the most specific, and it would not be required that
@f{foo} signal an error on an argument of @f{17} even though other functions in 
the set @mat{S} would be required to do so.




@subsubsection Conformance Statement

A @term{conforming implementation} shall produce a conformance statement 
as a consequence of using the implementation, or that statement
shall be included in the accompanying documentation.  If the implementation
conforms in all respects with this standard, the conformance statement
shall be


@table @asis
@item @id{}
 ``@metavar{Implementation} conforms with the requirements 
of ANSI @metavar{standard number}''
@end table


If the @term{implementation} conforms with some but not all of the requirements of this
standard, then the conformance statement shall be


@table @asis
@item @id{}
 ``@metavar{Implementation} conforms with the requirements of
ANSI @metavar{standard number} with the following exceptions: 
@metavar{reference to or complete list of the requirements of
the standard with which the implementation does not conform}.''
@end table




@node Conforming Programs
@subsection Conforming Programs
@cindex conforming program
@cindex conforming code

Code conforming with the requirements of this standard shall adhere to the
following:


@enumerate 1
@item @term{Conforming code} shall use only those features of the
language syntax and semantics that are 
either specified in this standard
or defined using the extension mechanisms 
specified in the standard.


@item @term{Conforming code} may use
@term{implementation-dependent} features and values, 
but shall not rely upon
any particular interpretation of these features and values 
other than those that are discovered by the execution of @term{code}.

@item @term{Conforming code} shall not depend on the consequences
of undefined or unspecified situations.

@item @term{Conforming code} does not use any constructions 
that are prohibited by the standard.

@item @term{Conforming code} does not depend on extensions 
included in an implementation.
@end enumerate


@subsubsection Use of Implementation-Defined Language Features

Note that @term{conforming code} may rely on particular
@term{implementation-defined} values or features. Also note that the
requirements for @term{conforming code} and @term{conforming implementations} do not
require that the results produced by conforming code always be the
same when processed by a @term{conforming implementation}. The results may be the
same, or they may differ.


Conforming code may run in all conforming implementations, but might
have allowable @term{implementation-defined} behavior that makes it
non-portable code.
For example, the following are examples of @term{forms} that are conforming, but
that might return different @term{values} in different implementations:

@lisp
 (evenp most-positive-fixnum) @EV{} @term{implementation-dependent}
 (random) @EV{} @term{implementation-dependent}
 (> lambda-parameters-limit 93) @EV{} @term{implementation-dependent}
 (char-name #@bsl{}A) @EV{} @term{implementation-dependent}
@end lisp


@unnumberedsubsubsec 1.5.2.1.1 Use of Read-Time Conditionals

@anchor{ReadTimeConditionals}

Use of @f{#+} and @f{#-} does not automatically disqualify a program
from being conforming.  A program which uses @f{#+} and @f{#-} is 
considered conforming if there is no set of @term{features} in which the
program would not be conforming.  Of course, @term{conforming programs} are
not necessarily working programs.  The following program is conforming:

@lisp
(defun foo ()
  #+ACME (acme:initialize-something)
  (print 'hello-there))
@end lisp


However, this program might or might not work, depending on whether the
presence of the feature @f{ACME} really implies that a function named
@f{acme:initialize-something} is present in the environment.  In effect,
using @f{#+} or @f{#-} in a @term{conforming program} means that the variable
@code{*features*}
@cindex *features*
becomes just one more piece of input data to that 
program.  Like any other data coming into a program, the programmer
is responsible for assuring that the program does not make unwarranted
assumptions on the basis of input data.



@subsubsection Character Set for Portable Code

@term{Portable code} is written using only @term{standard characters}.



@node Language Extensions
@section Language Extensions


A language extension is any documented @term{implementation-defined} behavior
of a @term{defined name} in this standard that varies from the
behavior described in this standard, or a documented consequence of a
situation that the standard specifies as undefined, unspecified, or
extendable by the implementation.  For example, if this standard says
that ``the results are unspecified,'' an extension would be to specify
the results.

@reviewer{Barmar: This contradicts previous definitions of conforming code.}
If the correct behavior of a program depends on the results provided
by an extension, only implementations with the same extension will
execute the program correctly.  Note that such a program might be
non-conforming.  Also, if this standard says that ``an implementation
may be extended,'' a conforming, but possibly non-portable, program
can be written using an extension.

An implementation can have extensions, provided they do not alter the
behavior of conforming code and provided they are not explicitly
prohibited by this standard.


The term ``extension'' refers only to extensions available upon
startup.  An implementation is free to allow or prohibit redefinition
of an extension.

The following list contains specific guidance to implementations 
concerning certain types of extensions.

@table @asis


@item @id{@b{Extra return values}}


An implementation must return exactly
the number of return values specified by this standard unless the
standard specifically indicates otherwise.

@item @id{@b{Unsolicited messages}}



No output can be produced by a function other than that specified in
the standard or due to the signaling of @term{conditions}
detected by the function.

Unsolicited output, such as garbage collection notifications and
autoload heralds, should not go directly to the @term{stream}
that is the value of a @term{stream} variable defined in this
standard, but can go indirectly to @term{terminal I/O} by using a
@term{synonym stream} to @code{*terminal-io*}.

Progress reports from such functions as @code{load} and
@code{compile} are considered solicited, and are not covered by
this prohibition.


@item @id{@b{Implementation of macros and special forms}}



@term{Macros} and @term{special operators} defined in this standard
must not be @term{functions}.
@end table


@node Language Subsets
@section Language Subsets

The language described in this standard contains no subsets,
though subsets are not forbidden.

For a language to be considered a subset,
it must have the property that any valid @term{program} in that language
has equivalent semantics and will run directly
(with no extralingual pre-processing, and no special compatibility packages)
in any @term{conforming implementation} of the full language.

A language that conforms to this requirement shall be described
as being a ``subset of @clisp{}@spc{}as specified by ANSI @metavar{standard number}.''

@node Deprecated Language Features
@section Deprecated Language Features

Deprecated language features are not expected to appear in future @clisp{}
standards, but are required to be implemented for conformance with this
standard; see @ref{ReqLangFeatures, Section 1.5.1.1 (Required Language Features)}.

@term{Conforming programs} can use deprecated features;
however, it is considered good programming style to avoid them.
It is permissible for the compiler to produce @term{style warnings} 
about the use of such features at compile time, 
but there should be no such warnings at program execution time.

@menu
* Deprecated Functions::
* Deprecated Argument Conventions::
* Deprecated Variables::
* Deprecated Reader Syntax::
@end menu
@node Deprecated Functions
@subsection Deprecated Functions

The @term{functions} in @thenextfigure{}@spc{}are deprecated.

@float Figure,fig1.2
@cartouche
@multitable{delete-if-not}{nsubstitute-if-not}{substitute-if-not}

@item assoc-if-not @tab nsubst-if-not @tab require
@item count-if-not @tab nsubstitute-if-not @tab set
@item delete-if-not @tab position-if-not @tab subst-if-not
@item find-if-not @tab provide @tab substitute-if-not
@item gentemp @tab rassoc-if-not @tab 
@item member-if-not @tab remove-if-not @tab 
@end multitable
@end cartouche
@caption{Deprecated Functions}
@end float



@node Deprecated Argument Conventions
@subsection Deprecated Argument Conventions

The ability to pass a numeric @term{argument} to @code{gensym} has been deprecated.

@Thekeyarg{test-not} to the @term{functions} in @thenextfigure{}@spc{}are deprecated.


@float Figure,fig1.3
@cartouche
@multitable{delete-duplicates}{nset-exclusive-or}{set-exclusive-or}

@item adjoin @tab nset-difference @tab search
@item assoc @tab nset-exclusive-or @tab set-difference
@item count @tab nsublis @tab set-exclusive-or
@item delete @tab nsubst @tab sublis
@item delete-duplicates @tab nsubstitute @tab subsetp
@item find @tab nunion @tab subst
@item intersection @tab position @tab substitute
@item member @tab rassoc @tab tree-equal
@item mismatch @tab remove @tab union
@item nintersection @tab remove-duplicates @tab 
@end multitable
@end cartouche
@caption{Functions with Deprecated :TEST-NOT Arguments}
@end float


The use of the situation names @t{compile}, @t{load}, and @t{eval}
in @code{eval-when} is deprecated.


@node Deprecated Variables
@subsection Deprecated Variables

The @term{variable} @code{*modules*} is deprecated.


@node Deprecated Reader Syntax
@subsection Deprecated Reader Syntax

The @f{#S} @term{reader macro} forces keyword names into the @code{KEYWORD} @term{package};
see @ref{SharpsignS, Section 2.4.8.13 (Sharpsign S)}.
This feature is deprecated;
in the future, keyword names will be taken in the package they are read in,
so @term{symbols} that are actually in the @code{KEYWORD} @term{package}
should be used if that is what is desired.



@node Symbols in the COMMON-LISP Package
@section Symbols in the COMMON-LISP Package

The figures on the next twelve pages contain a complete enumeration
of the 978 @term{external} @term{symbols} in the @code{COMMON-LISP} @term{package}.
@cindex COMMON-LISP


@float Figure,fig1.4
@cartouche
@multitable{*default-pathname-defaults*}{*read-default-float-format*}

@item @ampers{}allow-other-keys @tab *print-miser-width*
@item @ampers{}aux @tab *print-pprint-dispatch*
@item @ampers{}body @tab *print-pretty*
@item @ampers{}environment @tab *print-radix*
@item @ampers{}key @tab *print-readably*
@item @ampers{}optional @tab *print-right-margin*
@item @ampers{}rest @tab *query-io*
@item @ampers{}whole @tab *random-state*
@item * @tab *read-base*
@item ** @tab *read-default-float-format*
@item *** @tab *read-eval*
@item *break-on-signals* @tab *read-suppress*
@item *compile-file-pathname* @tab *readtable*
@item *compile-file-truename* @tab *standard-input*
@item *compile-print* @tab *standard-output*
@item *compile-verbose* @tab *terminal-io*
@item *debug-io* @tab *trace-output*
@item *debugger-hook* @tab +
@item *default-pathname-defaults* @tab ++
@item *error-output* @tab +++
@item *features* @tab -
@item *gensym-counter* @tab /
@item *load-pathname* @tab //
@item *load-print* @tab ///
@item *load-truename* @tab /=
@item *load-verbose* @tab 1+
@item *macroexpand-hook* @tab 1-
@item *modules* @tab <
@item *package* @tab <=
@item *print-array* @tab =
@item *print-base* @tab >
@item *print-case* @tab >=
@item *print-circle* @tab abort
@item *print-escape* @tab abs
@item *print-gensym* @tab acons
@item *print-length* @tab acos
@item *print-level* @tab acosh
@item *print-lines* @tab add-method
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part one of twelve).}
@end float



@float Figure,fig1.5
@cartouche
@multitable{arithmetic-error-operation}{bit-vector-p}{broadcast-stream-streams}

@item adjoin @tab atom @tab boundp
@item adjust-array @tab base-char @tab break
@item adjustable-array-p @tab base-string @tab broadcast-stream
@item allocate-instance @tab bignum @tab broadcast-stream-streams
@item alpha-char-p @tab bit @tab built-in-class
@item alphanumericp @tab bit-and @tab butlast
@item and @tab bit-andc1 @tab byte
@item append @tab bit-andc2 @tab byte-position
@item apply @tab bit-eqv @tab byte-size
@item apropos @tab bit-ior @tab caaaar
@item apropos-list @tab bit-nand @tab caaadr
@item aref @tab bit-nor @tab caaar
@item arithmetic-error @tab bit-not @tab caadar
@item arithmetic-error-operands @tab bit-orc1 @tab caaddr
@item arithmetic-error-operation @tab bit-orc2 @tab caadr
@item array @tab bit-vector @tab caar
@item array-dimension @tab bit-vector-p @tab cadaar
@item array-dimension-limit @tab bit-xor @tab cadadr
@item array-dimensions @tab block @tab cadar
@item array-displacement @tab boole @tab caddar
@item array-element-type @tab boole-1 @tab cadddr
@item array-has-fill-pointer-p @tab boole-2 @tab caddr
@item array-in-bounds-p @tab boole-and @tab cadr
@item array-rank @tab boole-andc1 @tab call-arguments-limit
@item array-rank-limit @tab boole-andc2 @tab call-method
@item array-row-major-index @tab boole-c1 @tab call-next-method
@item array-total-size @tab boole-c2 @tab car
@item array-total-size-limit @tab boole-clr @tab case
@item arrayp @tab boole-eqv @tab catch
@item ash @tab boole-ior @tab ccase
@item asin @tab boole-nand @tab cdaaar
@item asinh @tab boole-nor @tab cdaadr
@item assert @tab boole-orc1 @tab cdaar
@item assoc @tab boole-orc2 @tab cdadar
@item assoc-if @tab boole-set @tab cdaddr
@item assoc-if-not @tab boole-xor @tab cdadr
@item atan @tab boolean @tab cdar
@item atanh @tab both-case-p @tab cddaar
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part two of twelve).}
@end float



@float Figure,fig1.6
@cartouche
@multitable{char-not-greaterp}{concatenated-stream-streams}{define-method-combination}

@item cddadr @tab clear-input @tab copy-tree
@item cddar @tab clear-output @tab cos
@item cdddar @tab close @tab cosh
@item cddddr @tab clrhash @tab count
@item cdddr @tab code-char @tab count-if
@item cddr @tab coerce @tab count-if-not
@item cdr @tab compilation-speed @tab ctypecase
@item ceiling @tab compile @tab debug
@item cell-error @tab compile-file @tab decf
@item cell-error-name @tab compile-file-pathname @tab declaim
@item cerror @tab compiled-function @tab declaration
@item change-class @tab compiled-function-p @tab declare
@item char @tab compiler-macro @tab decode-float
@item char-code @tab compiler-macro-function @tab decode-universal-time
@item char-code-limit @tab complement @tab defclass
@item char-downcase @tab complex @tab defconstant
@item char-equal @tab complexp @tab defgeneric
@item char-greaterp @tab compute-applicable-methods @tab define-compiler-macro
@item char-int @tab compute-restarts @tab define-condition
@item char-lessp @tab concatenate @tab define-method-combination
@item char-name @tab concatenated-stream @tab define-modify-macro
@item char-not-equal @tab concatenated-stream-streams @tab define-setf-expander
@item char-not-greaterp @tab cond @tab define-symbol-macro
@item char-not-lessp @tab condition @tab defmacro
@item char-upcase @tab conjugate @tab defmethod
@item char/= @tab cons @tab defpackage
@item char< @tab consp @tab defparameter
@item char<= @tab constantly @tab defsetf
@item char= @tab constantp @tab defstruct
@item char> @tab continue @tab deftype
@item char>= @tab control-error @tab defun
@item character @tab copy-alist @tab defvar
@item characterp @tab copy-list @tab delete
@item check-type @tab copy-pprint-dispatch @tab delete-duplicates
@item cis @tab copy-readtable @tab delete-file
@item class @tab copy-seq @tab delete-if
@item class-name @tab copy-structure @tab delete-if-not
@item class-of @tab copy-symbol @tab delete-package
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part three of twelve).}
@end float



@float Figure,fig1.7
@cartouche
@multitable{double-float-negative-epsilon}{file-error-pathname}

@item denominator @tab eq
@item deposit-field @tab eql
@item describe @tab equal
@item describe-object @tab equalp
@item destructuring-bind @tab error
@item digit-char @tab etypecase
@item digit-char-p @tab eval
@item directory @tab eval-when
@item directory-namestring @tab evenp
@item disassemble @tab every
@item division-by-zero @tab exp
@item do @tab export
@item do* @tab expt
@item do-all-symbols @tab extended-char
@item do-external-symbols @tab fboundp
@item do-symbols @tab fceiling
@item documentation @tab fdefinition
@item dolist @tab ffloor
@item dotimes @tab fifth
@item double-float @tab file-author
@item double-float-epsilon @tab file-error
@item double-float-negative-epsilon @tab file-error-pathname
@item dpb @tab file-length
@item dribble @tab file-namestring
@item dynamic-extent @tab file-position
@item ecase @tab file-stream
@item echo-stream @tab file-string-length
@item echo-stream-input-stream @tab file-write-date
@item echo-stream-output-stream @tab fill
@item ed @tab fill-pointer
@item eighth @tab find
@item elt @tab find-all-symbols
@item encode-universal-time @tab find-class
@item end-of-file @tab find-if
@item endp @tab find-if-not
@item enough-namestring @tab find-method
@item ensure-directories-exist @tab find-package
@item ensure-generic-function @tab find-restart
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part four of twelve).}
@end float



@float Figure,fig1.8
@cartouche
@multitable{floating-point-invalid-operation}{hash-table-rehash-threshold}

@item find-symbol @tab get-internal-run-time
@item finish-output @tab get-macro-character
@item first @tab get-output-stream-string
@item fixnum @tab get-properties
@item flet @tab get-setf-expansion
@item float @tab get-universal-time
@item float-digits @tab getf
@item float-precision @tab gethash
@item float-radix @tab go
@item float-sign @tab graphic-char-p
@item floating-point-inexact @tab handler-bind
@item floating-point-invalid-operation @tab handler-case
@item floating-point-overflow @tab hash-table
@item floating-point-underflow @tab hash-table-count
@item floatp @tab hash-table-p
@item floor @tab hash-table-rehash-size
@item fmakunbound @tab hash-table-rehash-threshold
@item force-output @tab hash-table-size
@item format @tab hash-table-test
@item formatter @tab host-namestring
@item fourth @tab identity
@item fresh-line @tab if
@item fround @tab ignorable
@item ftruncate @tab ignore
@item ftype @tab ignore-errors
@item funcall @tab imagpart
@item function @tab import
@item function-keywords @tab in-package
@item function-lambda-expression @tab incf
@item functionp @tab initialize-instance
@item gcd @tab inline
@item generic-function @tab input-stream-p
@item gensym @tab inspect
@item gentemp @tab integer
@item get @tab integer-decode-float
@item get-decoded-time @tab integer-length
@item get-dispatch-macro-character @tab integerp
@item get-internal-real-time @tab interactive-stream-p
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part five of twelve).}
@end float



@float Figure,fig1.9
@cartouche
@multitable{least-negative-normalized-double-float}{load-logical-pathname-translations}

@item intern @tab lisp-implementation-type
@item internal-time-units-per-second @tab lisp-implementation-version
@item intersection @tab list
@item invalid-method-error @tab list*
@item invoke-debugger @tab list-all-packages
@item invoke-restart @tab list-length
@item invoke-restart-interactively @tab listen
@item isqrt @tab listp
@item keyword @tab load
@item keywordp @tab load-logical-pathname-translations
@item labels @tab load-time-value
@item lambda @tab locally
@item lambda-list-keywords @tab log
@item lambda-parameters-limit @tab logand
@item last @tab logandc1
@item lcm @tab logandc2
@item ldb @tab logbitp
@item ldb-test @tab logcount
@item ldiff @tab logeqv
@item least-negative-double-float @tab logical-pathname
@item least-negative-long-float @tab logical-pathname-translations
@item least-negative-normalized-double-float @tab logior
@item least-negative-normalized-long-float @tab lognand
@item least-negative-normalized-short-float @tab lognor
@item least-negative-normalized-single-float @tab lognot
@item least-negative-short-float @tab logorc1
@item least-negative-single-float @tab logorc2
@item least-positive-double-float @tab logtest
@item least-positive-long-float @tab logxor
@item least-positive-normalized-double-float @tab long-float
@item least-positive-normalized-long-float @tab long-float-epsilon
@item least-positive-normalized-short-float @tab long-float-negative-epsilon
@item least-positive-normalized-single-float @tab long-site-name
@item least-positive-short-float @tab loop
@item least-positive-single-float @tab loop-finish
@item length @tab lower-case-p
@item let @tab machine-instance
@item let* @tab machine-type
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part six of twelve).}
@end float



@float Figure,fig1.10
@cartouche
@multitable{make-dispatch-macro-character}{most-negative-double-float}

@item machine-version @tab mask-field
@item macro-function @tab max
@item macroexpand @tab member
@item macroexpand-1 @tab member-if
@item macrolet @tab member-if-not
@item make-array @tab merge
@item make-broadcast-stream @tab merge-pathnames
@item make-concatenated-stream @tab method
@item make-condition @tab method-combination
@item make-dispatch-macro-character @tab method-combination-error
@item make-echo-stream @tab method-qualifiers
@item make-hash-table @tab min
@item make-instance @tab minusp
@item make-instances-obsolete @tab mismatch
@item make-list @tab mod
@item make-load-form @tab most-negative-double-float
@item make-load-form-saving-slots @tab most-negative-fixnum
@item make-method @tab most-negative-long-float
@item make-package @tab most-negative-short-float
@item make-pathname @tab most-negative-single-float
@item make-random-state @tab most-positive-double-float
@item make-sequence @tab most-positive-fixnum
@item make-string @tab most-positive-long-float
@item make-string-input-stream @tab most-positive-short-float
@item make-string-output-stream @tab most-positive-single-float
@item make-symbol @tab muffle-warning
@item make-synonym-stream @tab multiple-value-bind
@item make-two-way-stream @tab multiple-value-call
@item makunbound @tab multiple-value-list
@item map @tab multiple-value-prog1
@item map-into @tab multiple-value-setq
@item mapc @tab multiple-values-limit
@item mapcan @tab name-char
@item mapcar @tab namestring
@item mapcon @tab nbutlast
@item maphash @tab nconc
@item mapl @tab next-method-p
@item maplist @tab nil
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part seven of twelve).}
@end float



@float Figure,fig1.11
@cartouche
@multitable{no-applicable-method}{pprint-exit-if-list-exhausted}

@item nintersection @tab package-error
@item ninth @tab package-error-package
@item no-applicable-method @tab package-name
@item no-next-method @tab package-nicknames
@item not @tab package-shadowing-symbols
@item notany @tab package-use-list
@item notevery @tab package-used-by-list
@item notinline @tab packagep
@item nreconc @tab pairlis
@item nreverse @tab parse-error
@item nset-difference @tab parse-integer
@item nset-exclusive-or @tab parse-namestring
@item nstring-capitalize @tab pathname
@item nstring-downcase @tab pathname-device
@item nstring-upcase @tab pathname-directory
@item nsublis @tab pathname-host
@item nsubst @tab pathname-match-p
@item nsubst-if @tab pathname-name
@item nsubst-if-not @tab pathname-type
@item nsubstitute @tab pathname-version
@item nsubstitute-if @tab pathnamep
@item nsubstitute-if-not @tab peek-char
@item nth @tab phase
@item nth-value @tab pi
@item nthcdr @tab plusp
@item null @tab pop
@item number @tab position
@item numberp @tab position-if
@item numerator @tab position-if-not
@item nunion @tab pprint
@item oddp @tab pprint-dispatch
@item open @tab pprint-exit-if-list-exhausted
@item open-stream-p @tab pprint-fill
@item optimize @tab pprint-indent
@item or @tab pprint-linear
@item otherwise @tab pprint-logical-block
@item output-stream-p @tab pprint-newline
@item package @tab pprint-pop
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part eight of twelve).}
@end float



@float Figure,fig1.12
@cartouche
@multitable{print-not-readable-object}{read-preserving-whitespace}

@item pprint-tab @tab read-char
@item pprint-tabular @tab read-char-no-hang
@item prin1 @tab read-delimited-list
@item prin1-to-string @tab read-from-string
@item princ @tab read-line
@item princ-to-string @tab read-preserving-whitespace
@item print @tab read-sequence
@item print-not-readable @tab reader-error
@item print-not-readable-object @tab readtable
@item print-object @tab readtable-case
@item print-unreadable-object @tab readtablep
@item probe-file @tab real
@item proclaim @tab realp
@item prog @tab realpart
@item prog* @tab reduce
@item prog1 @tab reinitialize-instance
@item prog2 @tab rem
@item progn @tab remf
@item program-error @tab remhash
@item progv @tab remove
@item provide @tab remove-duplicates
@item psetf @tab remove-if
@item psetq @tab remove-if-not
@item push @tab remove-method
@item pushnew @tab remprop
@item quote @tab rename-file
@item random @tab rename-package
@item random-state @tab replace
@item random-state-p @tab require
@item rassoc @tab rest
@item rassoc-if @tab restart
@item rassoc-if-not @tab restart-bind
@item ratio @tab restart-case
@item rational @tab restart-name
@item rationalize @tab return
@item rationalp @tab return-from
@item read @tab revappend
@item read-byte @tab reverse
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part nine of twelve).}
@end float



@float Figure,fig1.13
@cartouche
@multitable{set-dispatch-macro-character}{simple-condition-format-arguments}

@item room @tab simple-bit-vector
@item rotatef @tab simple-bit-vector-p
@item round @tab simple-condition
@item row-major-aref @tab simple-condition-format-arguments
@item rplaca @tab simple-condition-format-control
@item rplacd @tab simple-error
@item safety @tab simple-string
@item satisfies @tab simple-string-p
@item sbit @tab simple-type-error
@item scale-float @tab simple-vector
@item schar @tab simple-vector-p
@item search @tab simple-warning
@item second @tab sin
@item sequence @tab single-float
@item serious-condition @tab single-float-epsilon
@item set @tab single-float-negative-epsilon
@item set-difference @tab sinh
@item set-dispatch-macro-character @tab sixth
@item set-exclusive-or @tab sleep
@item set-macro-character @tab slot-boundp
@item set-pprint-dispatch @tab slot-exists-p
@item set-syntax-from-char @tab slot-makunbound
@item setf @tab slot-missing
@item setq @tab slot-unbound
@item seventh @tab slot-value
@item shadow @tab software-type
@item shadowing-import @tab software-version
@item shared-initialize @tab some
@item shiftf @tab sort
@item short-float @tab space
@item short-float-epsilon @tab special
@item short-float-negative-epsilon @tab special-operator-p
@item short-site-name @tab speed
@item signal @tab sqrt
@item signed-byte @tab stable-sort
@item signum @tab standard
@item simple-array @tab standard-char
@item simple-base-string @tab standard-char-p
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part ten of twelve).}
@end float



@float Figure,fig1.14
@cartouche
@multitable{standard-generic-function}{translate-logical-pathname}

@item standard-class @tab sublis
@item standard-generic-function @tab subseq
@item standard-method @tab subsetp
@item standard-object @tab subst
@item step @tab subst-if
@item storage-condition @tab subst-if-not
@item store-value @tab substitute
@item stream @tab substitute-if
@item stream-element-type @tab substitute-if-not
@item stream-error @tab subtypep
@item stream-error-stream @tab svref
@item stream-external-format @tab sxhash
@item streamp @tab symbol
@item string @tab symbol-function
@item string-capitalize @tab symbol-macrolet
@item string-downcase @tab symbol-name
@item string-equal @tab symbol-package
@item string-greaterp @tab symbol-plist
@item string-left-trim @tab symbol-value
@item string-lessp @tab symbolp
@item string-not-equal @tab synonym-stream
@item string-not-greaterp @tab synonym-stream-symbol
@item string-not-lessp @tab t
@item string-right-trim @tab tagbody
@item string-stream @tab tailp
@item string-trim @tab tan
@item string-upcase @tab tanh
@item string/= @tab tenth
@item string< @tab terpri
@item string<= @tab the
@item string= @tab third
@item string> @tab throw
@item string>= @tab time
@item stringp @tab trace
@item structure @tab translate-logical-pathname
@item structure-class @tab translate-pathname
@item structure-object @tab tree-equal
@item style-warning @tab truename
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part eleven of twelve).}
@end float



@float Figure,fig1.15
@cartouche
@multitable{update-instance-for-different-class}{with-hash-table-iterator}

@item truncate @tab values-list
@item two-way-stream @tab variable
@item two-way-stream-input-stream @tab vector
@item two-way-stream-output-stream @tab vector-pop
@item type @tab vector-push
@item type-error @tab vector-push-extend
@item type-error-datum @tab vectorp
@item type-error-expected-type @tab warn
@item type-of @tab warning
@item typecase @tab when
@item typep @tab wild-pathname-p
@item unbound-slot @tab with-accessors
@item unbound-slot-instance @tab with-compilation-unit
@item unbound-variable @tab with-condition-restarts
@item undefined-function @tab with-hash-table-iterator
@item unexport @tab with-input-from-string
@item unintern @tab with-open-file
@item union @tab with-open-stream
@item unless @tab with-output-to-string
@item unread-char @tab with-package-iterator
@item unsigned-byte @tab with-simple-restart
@item untrace @tab with-slots
@item unuse-package @tab with-standard-io-syntax
@item unwind-protect @tab write
@item update-instance-for-different-class @tab write-byte
@item update-instance-for-redefined-class @tab write-char
@item upgraded-array-element-type @tab write-line
@item upgraded-complex-part-type @tab write-sequence
@item upper-case-p @tab write-string
@item use-package @tab write-to-string
@item use-value @tab y-or-n-p
@item user-homedir-pathname @tab yes-or-no-p
@item values @tab zerop
@end multitable
@end cartouche
@caption{Symbols in the COMMON-LISP package (part twelve of twelve).}
@end float




@node Syntax
@chapter Syntax
@menu
* Character Syntax::
* Reader Algorithm::
* Interpretation of Tokens::
* Standard Macro Characters::
@end menu

@node Character Syntax
@section Character Syntax

The @term{Lisp reader} takes @term{characters} from a @term{stream}, 
interprets them as a printed representation of an @term{object},
constructs that @term{object}, and returns it.

The syntax described by this chapter is called the @newterm{standard syntax}.
Operations are provided by @clisp{}@spc{}so that
various aspects of the syntax information represented by a @term{readtable} 
can be modified under program control; see @ref{Reader, Chapter 23 (Reader)}.
Except as explicitly stated otherwise, 
the syntax used throughout this document is @term{standard syntax}.

@menu
* Readtables::
* Variables that affect the Lisp Reader::
* Standard Characters::
* Character Syntax Types::
@end menu
@node Readtables
@subsection Readtables


Syntax information for use by the @term{Lisp reader} is embodied in an
@term{object} called a @newterm{readtable}.  Among other things, 
the @term{readtable} contains the association between @term{characters} 
and @term{syntax types}.

@Thenextfigure{}@spc{}lists some @term{defined names} that are applicable to
@term{readtables}.


@float Figure,fig2.1
@cartouche
@multitable{make-dispatch-macro-character}{set-dispatch-macro-character}{}

@item *readtable* @tab readtable-case @tab 
@item copy-readtable @tab readtablep @tab 
@item get-dispatch-macro-character @tab set-dispatch-macro-character @tab 
@item get-macro-character @tab set-macro-character @tab 
@item make-dispatch-macro-character @tab set-syntax-from-char @tab 
@end multitable
@end cartouche
@caption{Readtable defined names}
@end float


@subsubsection The Current Readtable
@anchor{CurrentReadtable}

Several @term{readtables} describing different syntaxes can exist,
but at any given time only one, called the @newterm{current readtable}, 
affects the way in which @term{expressions}@sub2{} are parsed 
into @term{objects} by the @term{Lisp reader}.
The @term{current readtable} in a given @term{dynamic environment}
is @thevalueof{*readtable*} in that @term{environment}.
To make a different @term{readtable} become the @term{current readtable},
@code{*readtable*} can be @term{assigned} or @term{bound}.


@subsubsection The Standard Readtable

The @newterm{standard readtable} conforms to @term{standard syntax}.
The consequences are undefined if an attempt is made
to modify the @term{standard readtable}.
To achieve the effect of altering or extending @term{standard syntax},
a copy of the @term{standard readtable} can be created; see the @term{function} @ref{copy-readtable}.

The @term{readtable case} of the @term{standard readtable} is @kwd{upcase}.


@subsubsection The Initial Readtable

The @newterm{initial readtable} is
the @term{readtable} that is the @term{current readtable}
at the time when the @term{Lisp image} starts.
At that time, it conforms to @term{standard syntax}.
The @term{initial readtable} is @term{distinct} 
from the @term{standard readtable}.
It is permissible for a @term{conforming program} 
to modify the @term{initial readtable}.



@node Variables that affect the Lisp Reader
@subsection Variables that affect the Lisp Reader

The @term{Lisp reader} is influenced not only by the @term{current readtable},
but also by various @term{dynamic variables}.  @Thenextfigure{}@spc{}lists
the @term{variables} that influence the behavior of the @term{Lisp reader}.


@float Figure,fig2.2
@cartouche
@multitable{*read-base*}{*read-default-float-format*}{*readtable*}

@item *package* @tab *read-default-float-format* @tab *readtable*
@item *read-base* @tab *read-suppress* @tab 
@end multitable
@end cartouche
@caption{Variables that influence the Lisp reader.}
@end float



@node Standard Characters
@subsection Standard Characters

All @term{implementations} must support a @term{character} @term{repertoire}
called @code{standard-char}; @term{characters} that are members of that
@term{repertoire} are called 
@cindex standard character
@dfn{standard characters}.

The @code{standard-char} @term{repertoire} consists of
the @term{non-graphic} @term{character} @term{newline},
the @term{graphic} @term{character} @term{space},
and the following additional
ninety-four @term{graphic} @term{characters} or their equivalents:


@float Figure,fig2.3
@cartouche
@multitable{Graphic ID}{Glyph}{Description}{Graphic ID}{Glyph}{Description}
@headitem Graphic ID @tab Glyph @tab Description @tab Graphic ID @tab Glyph @tab Description
@item LA01 @tab @f{a} @tab small a @tab LN01 @tab @f{n} @tab small n
@item LA02 @tab @f{A} @tab capital A @tab LN02 @tab @f{N} @tab capital N
@item LB01 @tab @f{b} @tab small b @tab LO01 @tab @f{o} @tab small o
@item LB02 @tab @f{B} @tab capital B @tab LO02 @tab @f{O} @tab capital O
@item LC01 @tab @f{c} @tab small c @tab LP01 @tab @f{p} @tab small p
@item LC02 @tab @f{C} @tab capital C @tab LP02 @tab @f{P} @tab capital P
@item LD01 @tab @f{d} @tab small d @tab LQ01 @tab @f{q} @tab small q
@item LD02 @tab @f{D} @tab capital D @tab LQ02 @tab @f{Q} @tab capital Q
@item LE01 @tab @f{e} @tab small e @tab LR01 @tab @f{r} @tab small r
@item LE02 @tab @f{E} @tab capital E @tab LR02 @tab @f{R} @tab capital R
@item LF01 @tab @f{f} @tab small f @tab LS01 @tab @f{s} @tab small s
@item LF02 @tab @f{F} @tab capital F @tab LS02 @tab @f{S} @tab capital S
@item LG01 @tab @f{g} @tab small g @tab LT01 @tab @f{t} @tab small t
@item LG02 @tab @f{G} @tab capital G @tab LT02 @tab @f{T} @tab capital T
@item LH01 @tab @f{h} @tab small h @tab LU01 @tab @f{u} @tab small u
@item LH02 @tab @f{H} @tab capital H @tab LU02 @tab @f{U} @tab capital U
@item LI01 @tab @f{i} @tab small i @tab LV01 @tab @f{v} @tab small v
@item LI02 @tab @f{I} @tab capital I @tab LV02 @tab @f{V} @tab capital V
@item LJ01 @tab @f{j} @tab small j @tab LW01 @tab @f{w} @tab small w
@item LJ02 @tab @f{J} @tab capital J @tab LW02 @tab @f{W} @tab capital W
@item LK01 @tab @f{k} @tab small k @tab LX01 @tab @f{x} @tab small x
@item LK02 @tab @f{K} @tab capital K @tab LX02 @tab @f{X} @tab capital X
@item LL01 @tab @f{l} @tab small l @tab LY01 @tab @f{y} @tab small y
@item LL02 @tab @f{L} @tab capital L @tab LY02 @tab @f{Y} @tab capital Y
@item LM01 @tab @f{m} @tab small m @tab LZ01 @tab @f{z} @tab small z
@item LM02 @tab @f{M} @tab capital M @tab LZ02 @tab @f{Z} @tab capital Z
@end multitable
@end cartouche
@caption{Standard Character Subrepertoire (Part 1 of 3: Latin Characters)}
@end float



@float Figure,fig2.4
@cartouche
@multitable{Graphic ID}{Glyph}{Description}{Graphic ID}{Glyph}{Description}
@headitem Graphic ID @tab Glyph @tab Description @tab Graphic ID @tab Glyph @tab Description
@item ND01 @tab @f{1} @tab digit 1 @tab ND06 @tab @f{6} @tab digit 6
@item ND02 @tab @f{2} @tab digit 2 @tab ND07 @tab @f{7} @tab digit 7
@item ND03 @tab @f{3} @tab digit 3 @tab ND08 @tab @f{8} @tab digit 8
@item ND04 @tab @f{4} @tab digit 4 @tab ND09 @tab @f{9} @tab digit 9
@item ND05 @tab @f{5} @tab digit 5 @tab ND10 @tab @f{0} @tab digit 0
@end multitable
@end cartouche
@caption{Standard Character Subrepertoire (Part 2 of 3: Numeric Characters)}
@end float




@float Figure,StdCharsThree
@cartouche
@multitable{Graphic ID}{@f{@percent{}}}{right parenthesis, or close parenthesis}
@headitem Graphic ID @tab Glyph @tab Description
@item SP02 @tab @f{!} @tab exclamation mark
@item SC03 @tab @f{@dollar{}} @tab dollar sign
@item SP04 @tab @f{"} @tab quotation mark, or double quote
@item SP05 @tab @f{'} @tab apostrophe, or @brac{single} quote
@item SP06 @tab @f{(} @tab left parenthesis, or open parenthesis
@item SP07 @tab @f{)} @tab right parenthesis, or close parenthesis
@item SP08 @tab @f{,} @tab comma
@item SP09 @tab @f{_} @tab low line, or underscore
@item SP10 @tab @f{-} @tab hyphen, or minus @brac{sign}
@item SP11 @tab @f{.} @tab full stop, period, or dot
@item SP12 @tab @f{/} @tab solidus, or slash
@item SP13 @tab @f{:} @tab colon
@item SP14 @tab @f{;} @tab semicolon
@item SP15 @tab @f{?} @tab question mark
@item SA01 @tab @f{+} @tab plus @brac{sign}
@item SA03 @tab @f{<} @tab less-than @brac{sign}
@item SA04 @tab @f{=} @tab equals @brac{sign}
@item SA05 @tab @f{>} @tab greater-than @brac{sign}
@item SM01 @tab @f{#} @tab number sign, or sharp@brac{sign}
@item SM02 @tab @f{@percent{}} @tab percent @brac{sign}
@item SM03 @tab @f{@ampers{}} @tab ampersand
@item SM04 @tab @f{*} @tab asterisk, or star
@item SM05 @tab @f{@@} @tab commercial at, or at-sign
@item SM06 @tab @f{[} @tab left @brac{square} bracket
@item SM07 @tab @f{@bsl{}} @tab reverse solidus, or backslash
@item SM08 @tab @f{]} @tab right @brac{square} bracket
@item SM11 @tab @f{@lcurly{}} @tab left curly bracket, or left brace
@item SM13 @tab @f{|} @tab vertical bar
@item SM14 @tab @f{@rcurly{}} @tab right curly bracket, or right brace
@item SD13 @tab @f{`} @tab grave accent, or backquote
@item SD15 @tab @f{@hat{}} @tab circumflex accent
@item SD19 @tab @f{@tild{}} @tab tilde
@end multitable
@end cartouche
@caption{Standard Character Subrepertoire (Part 3 of 3: Special Characters)}
@end float


The graphic IDs are not used within @clisp{},
but are provided for cross reference purposes with @ISOChars{}.
Note that the first letter of the graphic ID 
categorizes the character as follows:
L---Latin, N---Numeric, S---Special.



@node Character Syntax Types
@subsection Character Syntax Types

The @term{Lisp reader} constructs an @term{object} 
from the input text by interpreting each @term{character} 
according to its @term{syntax type}.
The @term{Lisp reader} cannot accept as input 
everything that the @term{Lisp printer} produces,
and the @term{Lisp reader} has features that are not used by the @term{Lisp printer}.
The @term{Lisp reader} can be used as a lexical analyzer 
for a more general user-written parser.

When the @term{Lisp reader} is invoked, it reads a single character from 
the @term{input} @term{stream} and dispatches according to the
@newterm{syntax type} of that @term{character}.
Every @term{character} that can appear in the @term{input} @term{stream}
is of one of the @term{syntax types} shown in @ref{PossibleSyntaxTypes, Figure 2.6}.



@float Figure,PossibleSyntaxTypes
@cartouche
@multitable{@term{constituent}}{@term{macro character}}{@term{whitespace}@sub2{}}

@item @term{constituent} @tab @term{macro character} @tab @term{single escape}
@item @term{invalid} @tab @term{multiple escape} @tab @term{whitespace}@sub2{}
@end multitable
@end cartouche
@caption{Possible Character Syntax Types}
@end float


The @term{syntax type} of a @term{character} in a @term{readtable}
determines how that character is interpreted by the @term{Lisp reader}
while that @term{readtable} is the @term{current readtable}.
At any given time, every character has exactly one @term{syntax type}.

@ref{CharSyntaxTypesInStdSyntax, Figure 2.7}@spc{}
lists the @term{syntax type} of each @term{character} in @term{standard syntax}.



@float Figure,CharSyntaxTypesInStdSyntax
@cartouche
@multitable{xxxxxxxxx}{xxxxxxxxxxxxxxxxxxxxxxxxxx}{xxxxxx}{xxxxxxxxxxxxxxxxxxxxxx}
@headitem character @tab syntax type @tab character @tab syntax type
@item Backspace @tab @term{constituent} @tab 0--9 @tab @term{constituent}
@item Tab @tab @term{whitespace}@sub2{} @tab : @tab @term{constituent}
@item Newline @tab @term{whitespace}@sub2{} @tab ; @tab @term{terminating} @term{macro char}
@item Linefeed @tab @term{whitespace}@sub2{} @tab @tt{<} @tab @term{constituent}
@item Page @tab @term{whitespace}@sub2{} @tab = @tab @term{constituent}
@item Return @tab @term{whitespace}@sub2{} @tab @tt{>} @tab @term{constituent}
@item Space @tab @term{whitespace}@sub2{} @tab ? @tab @term{constituent}
@item ! @tab @term{constituent} @tab @tt{@@} @tab @term{constituent}
@item @tt{"} @tab @term{terminating} @term{macro char} @tab A--Z @tab @term{constituent}
@item # @tab @term{non-terminating} @term{macro char} @tab @f{[} @tab @term{constituent}
@item @dollar{} @tab @term{constituent} @tab @f{@bsl{}} @tab @term{single escape}
@item @percent{} @tab @term{constituent} @tab @f{]} @tab @term{constituent}
@item @ampers{} @tab @term{constituent} @tab @hat{} @tab @term{constituent}
@item ' @tab @term{terminating} @term{macro char} @tab @f{_} @tab @term{constituent}
@item ( @tab @term{terminating} @term{macro char} @tab ` @tab @term{terminating} @term{macro char}
@item ) @tab @term{terminating} @term{macro char} @tab a--z @tab @term{constituent}
@item @tt{*} @tab @term{constituent} @tab @f{@lcurly{}} @tab @term{constituent}
@item + @tab @term{constituent} @tab @f{|} @tab @term{multiple escape}
@item , @tab @term{terminating} @term{macro char} @tab @f{@rcurly{}} @tab @term{constituent}
@item - @tab @term{constituent} @tab @f{@tild{}} @tab @term{constituent}
@item . @tab @term{constituent} @tab Rubout @tab @term{constituent}
@item / @tab @term{constituent} @tab  @tab 
@end multitable
@end cartouche
@caption{Character Syntax Types in Standard Syntax}
@end float


The characters marked with an asterisk (*) are initially @term{constituents},
but they are not used in any standard @clisp{}@spc{}notations.
These characters are explicitly reserved to the @term{programmer}.
@f{@tild{}} is not used in @clisp{}, and reserved to implementors.
@f{@dollar{}} and @f{@percent{}} are @term{alphabetic}@sub2{} @term{characters},
but are not used in the names of any standard @clisp{}@spc{}@term{defined names}.

@term{Whitespace}@sub2{} characters serve as separators but are otherwise
ignored.  @term{Constituent} and @term{escape} @term{characters} are accumulated
to make a @term{token}, which is then interpreted as a @term{number} or @term{symbol}.
@term{Macro characters} trigger the invocation of @term{functions} (possibly
user-supplied) that can perform arbitrary parsing actions.
@term{Macro characters} are divided into two kinds,
@term{terminating} and @term{non-terminating},
depending on whether or not they terminate a @term{token}.
The following are descriptions of each kind of @term{syntax type}.

@subsubsection Constituent Characters
@anchor{ConstituentChars}

@term{Constituent} @term{characters} are used in @term{tokens}.
A @newterm{token} is a representation of a @term{number} or a @term{symbol}.  
Examples of @term{constituent} @term{characters} are letters and digits.

Letters in symbol names are sometimes converted to 
letters in the opposite @term{case} when the name is read;
see @ref{Effect of Readtable Case on the Lisp Reader, Section 23.1.2 (Effect of Readtable Case on the Lisp Reader)}.
@term{Case} conversion can be suppressed by the use 
of @term{single escape} or @term{multiple escape} characters.

@subsubsection Constituent Traits
@anchor{ConstituentTraits}

Every @term{character} has one or more @term{constituent traits}
that define how the @term{character} is to be interpreted by the @term{Lisp reader}
when the @term{character} is a @term{constituent} @term{character}.
These @term{constituent traits} are 
@term{alphabetic}@sub2{},                  
digit,
@term{package marker},
plus sign,
minus sign, 
dot,
decimal point,
@term{ratio marker},
@term{exponent marker},
and @term{invalid}.
@ref{ConstituentTraitsOfStdChars, Figure 2.8}@spc{}shows the @term{constituent traits}
of the @term{standard characters}
and of certain @term{semi-standard} @term{characters};
no mechanism is provided for changing the @term{constituent trait} of a @term{character}.
Any @term{character} with the alphadigit @term{constituent trait}
in that figure is a digit if the @term{current input base} is greater
than that character's digit value,
otherwise the @term{character} is @term{alphabetic}@sub2{}.  
Any @term{character} quoted by a @term{single escape} 
is treated as an @term{alphabetic}@sub2{} constituent, regardless of its normal syntax.



@float Figure,ConstituentTraitsOfStdChars
@cartouche
@multitable{@b{constituent}}{@term{alphabetic}@sub2{}*}{@b{constituent}}{alphadigit, double-float @term{exponent marker}}

@item @b{constituent} @tab @b{traits} @tab @b{constituent} @tab @b{traits}
@item @b{characters} @tab  @tab @b{characters} @tab 
@item Backspace @tab @term{invalid} @tab @f{@lcurly{}} @tab @term{alphabetic}@sub2{}
@item Tab @tab @term{invalid}* @tab @f{@rcurly{}} @tab @term{alphabetic}@sub2{}
@item Newline @tab @term{invalid}* @tab + @tab @term{alphabetic}@sub2{}, plus sign
@item Linefeed @tab @term{invalid}* @tab - @tab @term{alphabetic}@sub2{}, minus sign
@item Page @tab @term{invalid}* @tab . @tab @term{alphabetic}@sub2{}, dot, decimal point
@item Return @tab @term{invalid}* @tab / @tab @term{alphabetic}@sub2{}, @term{ratio marker}
@item Space @tab @term{invalid}* @tab A, a @tab alphadigit
@item ! @tab @term{alphabetic}@sub2{} @tab B, b @tab alphadigit
@item @tt{"} @tab @term{alphabetic}@sub2{}* @tab C, c @tab alphadigit
@item # @tab @term{alphabetic}@sub2{}* @tab D, d @tab alphadigit, double-float @term{exponent marker}
@item @dollar{} @tab @term{alphabetic}@sub2{} @tab E, e @tab alphadigit, float @term{exponent marker}
@item @percent{} @tab @term{alphabetic}@sub2{} @tab F, f @tab alphadigit, single-float @term{exponent marker}
@item @ampers{} @tab @term{alphabetic}@sub2{} @tab G, g @tab alphadigit
@item ' @tab @term{alphabetic}@sub2{}* @tab H, h @tab alphadigit
@item ( @tab @term{alphabetic}@sub2{}* @tab I, i @tab alphadigit
@item ) @tab @term{alphabetic}@sub2{}* @tab J, j @tab alphadigit
@item @tt{*} @tab @term{alphabetic}@sub2{} @tab K, k @tab alphadigit
@item , @tab @term{alphabetic}@sub2{}* @tab L, l @tab alphadigit, long-float @term{exponent marker}
@item 0-9 @tab alphadigit @tab M, m @tab alphadigit
@item : @tab @term{package marker} @tab N, n @tab alphadigit
@item ; @tab @term{alphabetic}@sub2{}* @tab O, o @tab alphadigit
@item @tt{<} @tab @term{alphabetic}@sub2{} @tab P, p @tab alphadigit
@item = @tab @term{alphabetic}@sub2{} @tab Q, q @tab alphadigit
@item @tt{>} @tab @term{alphabetic}@sub2{} @tab R, r @tab alphadigit
@item ? @tab @term{alphabetic}@sub2{} @tab S, s @tab alphadigit, short-float @term{exponent marker}
@item @f{@@} @tab @term{alphabetic}@sub2{} @tab T, t @tab alphadigit
@item @f{[} @tab @term{alphabetic}@sub2{} @tab U, u @tab alphadigit
@item @f{@bsl{}} @tab @term{alphabetic}@sub2{}* @tab V, v @tab alphadigit
@item @f{]} @tab @term{alphabetic}@sub2{} @tab W, w @tab alphadigit
@item @hat{} @tab @term{alphabetic}@sub2{} @tab X, x @tab alphadigit
@item @f{_} @tab @term{alphabetic}@sub2{} @tab Y, y @tab alphadigit
@item ` @tab @term{alphabetic}@sub2{}* @tab Z, z @tab alphadigit
@item @f{|} @tab @term{alphabetic}@sub2{}* @tab Rubout @tab @term{invalid}
@item @f{@tild{}} @tab @term{alphabetic}@sub2{} @tab  @tab 
@end multitable
@end cartouche
@caption{Constituent Traits of Standard Characters and Semi-Standard Characters}
@end float
                   
The interpretations in this table apply only to @term{characters}
whose @term{syntax type} is @term{constituent}.
Entries marked with an asterisk (*) are normally @term{shadowed}@sub2{} 
because the indicated @term{characters} are of @term{syntax type}
@term{whitespace}@sub2{},
@term{macro character},
@term{single escape},
or @term{multiple escape};
these @term{constituent traits} apply to them only if their @term{syntax types} 
are changed to @term{constituent}.



@subsubsection Invalid Characters

@term{Characters} with the @term{constituent trait} @term{invalid} 
cannot ever appear in a @term{token} 
except under the control of a @term{single escape} @term{character}.
If an @term{invalid} @term{character} is encountered while an @term{object} is
being read, an error @oftype{reader-error} is signaled.
If an @term{invalid} @term{character} is preceded by a @term{single escape} @term{character},
it is treated as an @term{alphabetic}@sub2{} @term{constituent} instead.


@subsubsection Macro Characters
@anchor{MacroChars}

When the @term{Lisp reader} encounters a @term{macro character} 
on an @term{input} @term{stream},
special parsing of subsequent @term{characters} 
on the @term{input} @term{stream} 
is performed.

A @term{macro character} has an associated @term{function}
called a @newterm{reader macro function} that implements its specialized parsing behavior.
An association of this kind can be established or modified under control of
a @term{conforming program} by using 
@thefunctions{set-macro-character} and @code{set-dispatch-macro-character}.

Upon encountering a @term{macro character}, the @term{Lisp reader} calls its
@term{reader macro function}, which parses one specially formatted object 
from the @term{input} @term{stream}.
The @term{function} either returns the parsed @term{object},
or else it returns no @term{values} 
to indicate that the characters scanned by the @term{function}
are being ignored (@eg{} in the case of a comment).
Examples of @term{macro characters}
are @term{backquote}, @term{single-quote}, @term{left-parenthesis}, and 
@term{right-parenthesis}.

A @term{macro character} is either @term{terminating} or @term{non-terminating}.
The difference between @term{terminating} and @term{non-terminating} @term{macro characters} 
lies in what happens when such characters occur in the middle of a @term{token}.  
If a @newterm{non-terminating} @term{macro character} occurs in the middle of a @term{token},
the @term{function} associated 
with the @term{non-terminating} @term{macro character} is not called,
and the
@term{non-terminating} @term{macro character} does not terminate the @term{token}'s name; it
becomes part of the name as if the @term{macro character} were really a constituent
character.  A @newterm{terminating} @term{macro character} terminates any @term{token},
and its associated @term{reader macro function}
is called no matter where the @term{character} appears.
The only @term{non-terminating} @term{macro character} in @term{standard syntax} 
is @term{sharpsign}.

If a @term{character} is a @term{dispatching macro character} @mat{C@sub1{}},
its @term{reader macro function} is a @term{function} supplied by the @term{implementation}.
This @term{function} reads decimal @term{digit} @term{characters} until a non-@term{digit}
@mat{C@sub2{}} is read.
If any @term{digits} were read,
they are converted into a corresponding @term{integer} infix parameter @mat{P};
otherwise, the infix parameter @mat{P} is @nil{}.  
The terminating non-@term{digit} @mat{C@sub2{}} is a @term{character} 
(sometimes called a ``sub-character'' to emphasize its subordinate role in the dispatching)
that is looked up in the dispatch table associated with
the @term{dispatching macro character} @mat{C@sub1{}}.
The @term{reader macro function} associated with the sub-character @mat{C@sub2{}} 
is invoked with three arguments:
the @term{stream},
the sub-character @mat{C@sub2{}},
and the infix parameter @mat{P}.
For more information about dispatch characters,
see the @term{function} @ref{set-dispatch-macro-character}.

For information about the @term{macro characters} 
that are available in @term{standard syntax},
see @ref{Standard Macro Characters, Section 2.4 (Standard Macro Characters)}.


@subsubsection Multiple Escape Characters
@anchor{MultipleEscapeChar}

A pair of @newterm{multiple escape} @term{characters}
is used to indicate that an enclosed sequence of characters,
including possible @term{macro characters} and @term{whitespace}@sub2{} @term{characters},
are to be treated as @term{alphabetic}@sub2{} @term{characters} 
with @term{case} preserved.
Any @term{single escape} and @term{multiple escape} @term{characters} 
that are to appear in the sequence must be preceded by a @term{single escape} 
@term{character}.  

@term{Vertical-bar} is a @term{multiple escape} @term{character}
in @term{standard syntax}.

@unnumberedsubsubsec 2.1.4.5.1 Examples of Multiple Escape Characters


@lisp
 ;; The following examples assume the readtable case of *readtable* 
 ;; and *print-case* are both :upcase.
 (eq 'abc 'ABC) @EV{} @term{true}
 (eq 'abc '|ABC|) @EV{} @term{true}
 (eq 'abc 'a|B|c) @EV{} @term{true}
 (eq 'abc '|abc|) @EV{} @term{false}
@end lisp




@subsubsection Single Escape Character
@anchor{SingleEscapeChar}

A @newterm{single escape} is used to indicate that 
the next @term{character} is to be treated as 
an @term{alphabetic}@sub2{} @term{character}
with its @term{case} preserved,
no matter what the @term{character} is 
or which @term{constituent traits} it has.  

@term{Backslash} is a @term{single escape} @term{character} in @term{standard syntax}.

@unnumberedsubsubsec 2.1.4.6.1 Examples of Single Escape Characters


@lisp
 ;; The following examples assume the readtable case of *readtable* 
 ;; and *print-case* are both :upcase.
 (eq 'abc '@bsl{}A@bsl{}B@bsl{}C) @EV{} @term{true}
 (eq 'abc 'a@bsl{}Bc) @EV{} @term{true}
 (eq 'abc '@bsl{}ABC) @EV{} @term{true}
 (eq 'abc '@bsl{}abc) @EV{} @term{false}
@end lisp




@subsubsection Whitespace Characters
@anchor{WhitespaceChars}

@term{Whitespace}@sub2{} @term{characters} are used to separate @term{tokens}.

@term{Space} and @term{newline} are @term{whitespace}@sub2{} @term{characters}
in @term{standard syntax}.

@unnumberedsubsubsec 2.1.4.7.1 Examples of Whitespace Characters


@lisp
 (length '(this-that)) @EV{} 1
 (length '(this - that)) @EV{} 3
 (length '(a
           b)) @EV{} 2
 (+ 34) @EV{} 34
 (+ 3 4) @EV{} 7
@end lisp





@node Reader Algorithm
@section Reader Algorithm

This section describes the algorithm used by the @term{Lisp reader}
to parse @term{objects} from an @term{input} @term{character} @term{stream},
including how the @term{Lisp reader} processes @term{macro characters}.

When dealing with @term{tokens}, the reader's basic function is to distinguish
representations of @term{symbols} from those of @term{numbers}.
When a @term{token} is accumulated, it is assumed to represent a @term{number} if it
satisfies the syntax for numbers listed in @ref{SyntaxForNumericTokens, Figure 2.9}.
If it does not represent a @term{number},
it is then assumed to be a @term{potential number} 
if it satisfies the rules governing the syntax for a @term{potential number}.
If a valid @term{token} is neither a representation of a @term{number} 
nor a @term{potential number},
it represents a @term{symbol}.

The algorithm performed by the @term{Lisp reader} is as follows:


@enumerate 1
@item            
If at end of file, end-of-file processing is performed as specified
in @code{read}.
Otherwise,
one @term{character}, @param{x},  is read from the @term{input} @term{stream}, and
dispatched according to the @term{syntax type} of @param{x} to one
of steps 2 to 7.

@item                                          
If @param{x} is an @term{invalid} @term{character},
an error @oftype{reader-error} is signaled.

@item
If @param{x} is a @term{whitespace}@sub2{} @term{character},
then it is discarded and step 1 is re-entered.

@item
If @param{x} is a @term{terminating} or @term{non-terminating} @term{macro character}
then its associated @term{reader macro function} is called with two @term{arguments},
the @term{input} @term{stream} and @param{x}.

The @term{reader macro function} may read @term{characters} 
from the @term{input} @term{stream}; 
if it does, it will see those @term{characters} following the @term{macro character}.
The @term{Lisp reader} may be invoked recursively from the @term{reader macro function}.

The @term{reader macro function} must not have any side effects other than on the
@term{input} @term{stream};
because of backtracking and restarting of the @code{read} operation,
front ends to the @term{Lisp reader} (@eg{} ``editors'' and ``rubout handlers'') 
may cause the @term{reader macro function} to be called repeatedly during the
reading of a single @term{expression} in which @param{x} only appears once.

The @term{reader macro function} may return zero values or one value.
If one value is returned,
then that value is returned as the result of the read operation;
the algorithm is done.
If zero values are returned, then step 1 is re-entered.

@item
If @param{x} is a @term{single escape} @term{character}
then the next @term{character}, @param{y}, is read, or an error @oftype{end-of-file} 
is signaled if at the end of file.
@param{y} is treated as if it is a @term{constituent} 
whose only @term{constituent trait} is @term{alphabetic}@sub2{}.
@param{y} is used to begin a @term{token}, and step 8 is entered.

@item
If @param{x} is a @term{multiple escape} @term{character}
then a @term{token} (initially
containing no @term{characters}) is  begun and step 9 is entered.

@item
If @param{x} is a @term{constituent} @term{character}, then it begins a @term{token}.
After the @term{token} is read in, it will be interpreted
either as a @Lisp{}@spc{}@term{object} or as being of invalid syntax.
If the @term{token} represents an @term{object},
that @term{object} is returned as the result of the read operation.
If the @term{token} is of invalid syntax, an error is signaled.
If @param{x} is a @term{character} with @term{case},
it might be replaced with the corresponding @term{character} of the opposite @term{case}, 
depending on the @term{readtable case} of the @term{current readtable},
as outlined in @ref{Effect of Readtable Case on the Lisp Reader, Section 23.1.2 (Effect of Readtable Case on the Lisp Reader)}.
@param{X} is used to begin a @term{token}, and step 8 is entered.

@item
At this point a @term{token} is being accumulated, and an even number
of @term{multiple escape} @term{characters} have been encountered.
If at end of file, step 10 is entered.
Otherwise, a @term{character}, @param{y}, is read, and
one of the following actions is performed according to its @term{syntax type}:


@itemize @bullet{}
@item
If @param{y} is a @term{constituent} or @term{non-terminating} @term{macro character}:

@itemize --
@item
If @param{y} is a @term{character} with @term{case},
it might be replaced with the corresponding @term{character} of the opposite @term{case}, 
depending on the @term{readtable case} of the @term{current readtable},
as outlined in @ref{Effect of Readtable Case on the Lisp Reader, Section 23.1.2 (Effect of Readtable Case on the Lisp Reader)}.
@item
@param{Y} is appended to the @term{token} being built.
@item
Step 8 is repeated.
@end itemize


@item
If @param{y} is a @term{single escape} @term{character}, then the next @term{character},
@param{z}, is read, or an error @oftype{end-of-file} is signaled if at end of file.
@param{Z} is treated as if it is a @term{constituent} 
whose only @term{constituent trait} is @term{alphabetic}@sub2{}.
@param{Z} is appended to the @term{token} being built,
and step 8 is repeated.

@item
If @param{y} is a @term{multiple escape} @term{character},
then step 9 is entered.

@item
If @param{y} is an @term{invalid} @term{character},
an error @oftype{reader-error} is signaled.

@item
If @param{y} is a @term{terminating} @term{macro character},
then it terminates the @term{token}.
First the @term{character} @param{y} is unread (see @code{unread-char}),
and then step 10 is entered.

@item
If @param{y} is a @term{whitespace}@sub2{} @term{character}, then it terminates
the @term{token}.  First the @term{character} @param{y} is unread
if appropriate (see @code{read-preserving-whitespace}),
and then step 10 is entered.
@end itemize


@item
At this point a @term{token} is being accumulated, and an odd number
of @term{multiple escape} @term{characters} have been encountered.
If at end of file, an error @oftype{end-of-file} is signaled.
Otherwise, a @term{character}, @param{y}, is read, and
one of the following actions is performed according to its @term{syntax type}:


@itemize @bullet{}
@item
If @param{y} is a @term{constituent}, macro, or @term{whitespace}@sub2{} @term{character},
@param{y} is treated as a @term{constituent} 
whose only @term{constituent trait} is @term{alphabetic}@sub2{}.             
@param{Y} is appended to the @term{token} being built, and step 9 is repeated.

@item
If @param{y} is a @term{single escape} @term{character}, then the next @term{character},
@param{z}, is read, or an error @oftype{end-of-file} is signaled if at end of file.
@param{Z} is treated as a @term{constituent}
whose only @term{constituent trait} is @term{alphabetic}@sub2{}.
@param{Z} is appended to the @term{token} being built,
and step 9 is repeated.

@item
If @param{y} is a @term{multiple escape} @term{character},
then step 8 is entered.

@item
If @param{y} is an @term{invalid} @term{character},
an error @oftype{reader-error} is signaled.
@end itemize


@item
An entire @term{token} has been accumulated.
The @term{object} represented by the @term{token} is returned 
as the result of the read operation,
or an error @oftype{reader-error} is signaled if the @term{token} is not of valid syntax.
@end enumerate



@node Interpretation of Tokens
@section Interpretation of Tokens

@menu
* Numbers as Tokens::
* Constructing Numbers from Tokens::
* The Consing Dot::
* Symbols as Tokens::
* Valid Patterns for Tokens::
* Package System Consistency Rules::
@end menu
@node Numbers as Tokens
@subsection Numbers as Tokens

When a @term{token} is read,
it is interpreted as a @term{number} or @term{symbol}.
The @term{token} is interpreted as a @term{number} if it satisfies
the syntax for numbers specified in @thenextfigure{}.



@float Figure,SyntaxForNumericTokens
@cartouche
@multitable{@param{numeric-token}}{::@mat{=}}{| @ttbrac{@param{sign}} @plus{@curly{@param{decimal-digit}}}  @ttbrac{@param{decimal-point}  @star{@curly{@param{decimal-digit}}}} @down{exponent}}

@item @param{numeric-token} @tab ::@mat{=} @tab @down{integer} @mat{@vert{}} 
@down{ratio}   @mat{@vert{}}
@down{float}
@item @param{integer} @tab ::@mat{=} @tab @ttbrac{@param{sign}} 
@plusparam{decimal-digit} 
@param{decimal-point} @mat{@vert{}}
@ttbrac{@param{sign}} 
@plusparam{digit}
@item @param{ratio} @tab ::@mat{=} @tab @ttbrac{@param{sign}}
@plus{@curly{@param{digit}}}
@param{slash} 
@plus{@curly{@param{digit}}}
@item @param{float} @tab ::@mat{=} @tab @ttbrac{@param{sign}}
@star{@curly{@param{decimal-digit}}}
@param{decimal-point}
@plus{@curly{@param{decimal-digit}}}
@ttbrac{@down{exponent}}
@item  @tab  @tab | @ttbrac{@param{sign}} @plus{@curly{@param{decimal-digit}}}  @ttbrac{@param{decimal-point}  @star{@curly{@param{decimal-digit}}}} @down{exponent}
@item @param{exponent} @tab ::@mat{=} @tab @param{exponent-marker}
@ttbrac{@param{sign}}
@plus{@curly{@param{digit}}}
@end multitable
@end cartouche
@caption{Syntax for Numeric Tokens}
@end float

@param{sign}---a @term{sign}.@span{}@span{}@cr{}
@param{slash}---a @term{slash}@span{}@span{}@cr{}
@param{decimal-point}---a @term{dot}.@span{}@span{}@cr{}
@param{exponent-marker}---an @term{exponent marker}.@span{}@span{}@cr{}
@param{decimal-digit}---a @term{digit} in @term{radix} @f{10}.@span{}@span{}@cr{}
@param{digit}---a @term{digit} in the @term{current input radix}.@span{}@span{}@cr{}

@subsubsection Potential Numbers as Tokens
@anchor{PotentialNumbersAsTokens}

To allow implementors and future @clisp{}@spc{}standards
to extend the syntax of numbers, a
syntax for @term{potential numbers} is defined that is
more general than the syntax for numbers.
A @term{token} is a @term{potential number} if it satisfies all of the following
requirements:


@enumerate 1
@item
The @term{token} consists entirely of 
@term{digits},
@term{signs},
@term{ratio markers},
decimal points (@f{.}),
extension characters (@hat{}@spc{}or @f{_}),
and number markers.
A number marker is a letter. 
Whether a letter may be treated as a number marker depends on context,
but no letter that is adjacent to another letter may ever be treated as a number marker.
@term{Exponent markers} are number markers.

@item
The @term{token} contains at least one digit.  Letters may be considered to be
digits, depending on the @term{current input base}, but only
in @term{tokens} containing no decimal points.

@item
The @term{token} begins with a @term{digit}, @term{sign}, decimal point, or extension character,
@reviewer{Barmar: This section is unnecessary because the first bullet already 
omits discussion of a colon (@term{package marker}).}
but not a 
@term{package marker}.
The syntax involving a leading 
@term{package marker} followed by a @term{potential number} is
not well-defined. The consequences of the use 
of notation such as @f{:1}, @f{:1/2}, and @f{:2@hat{}3} in a
position where an expression appropriate for @code{read} 
is expected are unspecified.

@item
The @term{token} does not end with a sign.
@end enumerate


If a @term{potential number} has number syntax, 
a @term{number} of the appropriate type is constructed and returned, 
if the @term{number} is representable in an implementation.
A @term{number} will not be representable in an implementation 
if it is outside the boundaries set by the @term{implementation-dependent} 
constants for @term{numbers}.
For example, specifying too large or too small an exponent for a @term{float}
may make the @term{number} impossible to represent in the implementation.
A @term{ratio} with denominator zero (such as @f{-35/000})
is not represented in any implementation.
When a @term{token} with the syntax of a number cannot be converted to an internal
@term{number}, an error @oftype{reader-error} is signaled.  An error
must not be signaled for specifying too many significant digits
for a @term{float}; a truncated or rounded value should be produced.

If there is an ambiguity as to whether
a letter should be treated as a digit or as a number marker,
the letter is treated as a digit.

@unnumberedsubsubsec 2.3.1.1.1 Escape Characters and Potential Numbers

@anchor{EscCharsAndPotentialNums}

A @term{potential number} cannot contain any @term{escape}
@term{characters}.  An @term{escape} @term{character} robs the following
@term{character} of all syntactic qualities, forcing it to be strictly
@term{alphabetic}@sub2{} and therefore unsuitable for use in a
@term{potential number}.  For example, all of the following
representations are interpreted as @term{symbols}, not @term{numbers}:

@lisp
 @bsl{}256   25@bsl{}64   1.0@bsl{}E6   |100|   3@bsl{}.14159   |3/4|   3@bsl{}/4   5||
@end lisp


In each case, removing the @term{escape} @term{character} (or @term{characters}) 
would 
cause the token to be a @term{potential number}.


@unnumberedsubsubsec 2.3.1.1.2 Examples of Potential Numbers


As examples, the @term{tokens} in @thenextfigure{}@spc{}are @term{potential numbers},
but they are not actually numbers, and so are reserved @term{tokens};
a @term{conforming implementation} is permitted, but not required,
to define their meaning.


@float Figure,fig2.10
@cartouche
@multitable{xxxxxxxxxxxxxxxxxxxxxxxxxxxxx}{xxxxxxxxx}{xxxxxx}{xxxxxxxxxxx}{xxxxxxxxxx}

@item @f{1b5000} @tab @f{777777q} @tab @f{1.7J} @tab @f{-3/4+6.7J} @tab @f{12/25/83}
@item @f{27@hat{}19} @tab @f{3@hat{}4/5} @tab @f{6//7} @tab @f{3.1.2.6} @tab @f{@hat{}-43@hat{}}
@item @f{3.141_592_653_589_793_238_4} @tab @f{-3.7+2.6i-6.17j+19.6k} @tab  @tab  @tab 
@end multitable
@end cartouche
@caption{Examples of reserved tokens}
@end float


The @term{tokens} in @thenextfigure{}@spc{}are not @term{potential numbers}; 
they are always treated as @term{symbols}:


@float Figure,fig2.11
@cartouche
@multitable{@f{foo+}}{@f{ab.cd}}{@f{+}}{@f{@hat{}}}{@f{@hat{}/-}}

@item @f{/} @tab @f{/5} @tab @f{+} @tab @f{1+} @tab @f{1-}
@item @f{foo+} @tab @f{ab.cd} @tab @f{_} @tab @f{@hat{}} @tab @f{@hat{}/-}
@end multitable
@end cartouche
@caption{Examples of symbols}
@end float


The @term{tokens} in @thenextfigure{}@spc{}are @term{potential numbers}
if the @term{current input base} is @f{16}, 
but they are always treated as @term{symbols} if the @term{current input base} is @f{10}. 


@float Figure,fig2.12
@cartouche
@multitable{@f{bad-face}}{@f{25-dec-83}}{@f{a/b}}{@f{fad_cafe}}{@f{f@hat{}}}

@item @f{bad-face} @tab @f{25-dec-83} @tab @f{a/b} @tab @f{fad_cafe} @tab @f{f@hat{}}
@end multitable
@end cartouche
@caption{Examples of symbols or potential numbers}
@end float





@node Constructing Numbers from Tokens
@subsection Constructing Numbers from Tokens

A @term{real} is constructed directly from a corresponding numeric @term{token};
see @ref{SyntaxForNumericTokens, Figure 2.9}.

A @term{complex} is notated as a @f{#C} (or @f{#c}) followed by a @term{list}
of two @term{reals}; see @ref{SharpsignC, Section 2.4.8.11 (Sharpsign C)}.

The @term{reader macros} @f{#B}, @f{#O}, @f{#X}, and @f{#R} may also be useful
in controlling the input @term{radix} in which @term{rationals} are parsed;
see @ref{SharpsignB, Section 2.4.8.7 (Sharpsign B)},
@ref{SharpsignO, Section 2.4.8.8 (Sharpsign O)},
@ref{SharpsignX, Section 2.4.8.9 (Sharpsign X)},
and @ref{SharpsignR, Section 2.4.8.10 (Sharpsign R)}.

This section summarizes the full syntax for @term{numbers}.

@subsubsection Syntax of a Rational

@unnumberedsubsubsec 2.3.2.1.1 Syntax of an Integer

@anchor{SyntaxOfIntegers}

@term{Integers} can be written as a sequence of @term{digits}, 
optionally preceded by a @term{sign} and optionally followed by a decimal point;
see @ref{SyntaxForNumericTokens, Figure 2.9}.
When a decimal point is used,
the @term{digits} are taken to be in @term{radix} @f{10};
when no decimal point is used,
the @term{digits} are taken to be in radix given by the @term{current input base}.

For information on how @term{integers} are printed, see @ref{PrintingIntegers, Section 22.1.3.1.1 (Printing Integers)}.


@unnumberedsubsubsec 2.3.2.1.2 Syntax of a Ratio

@anchor{SyntaxOfRatios}

@term{Ratios} can be written as an optional @term{sign} followed by two
non-empty sequences of @term{digits} separated by a @term{slash};
see @ref{SyntaxForNumericTokens, Figure 2.9}.
The second sequence may not consist
entirely of zeros.
Examples of @term{ratios} are in @thenextfigure{}.


@float Figure,fig2.13
@cartouche
@multitable{@f{-30517578125/32768}}{;Hexadecimal notation for @mat{1027565/16435934}}

@item @f{2/3} @tab ;This is in canonical form
@item @f{4/6} @tab ;A non-canonical form for 2/3
@item @f{-17/23} @tab ;A ratio preceded by a sign
@item @f{-30517578125/32768} @tab ;This is @mat{(-5/2)^15}
@item @f{10/5} @tab ;The canonical form for this is @f{2}
@item @f{#o-101/75} @tab ;Octal notation for @mat{-65/61}
@item @f{#3r120/21} @tab ;Ternary notation for @mat{15/7}
@item @f{#Xbc/ad} @tab ;Hexadecimal notation for @mat{188/173}
@item @f{#xFADED/FACADE} @tab ;Hexadecimal notation for @mat{1027565/16435934}
@end multitable
@end cartouche
@caption{Examples of Ratios}
@end float


@reviewer{Barmar: #o, #3r, #X, and #x mentioned above 
are not in the syntax rules defined just above that.}

For information on how @term{ratios} are printed,
see @ref{PrintingRatios, Section 22.1.3.1.2 (Printing Ratios)}.



@subsubsection Syntax of a Float
@anchor{SyntaxOfFloats}

@term{Floats} can be written in either decimal fraction or computerized
scientific notation: an optional sign, then a non-empty sequence of digits
with an embedded decimal point,
then an optional decimal exponent specification.
If there is no exponent specifier, then
the decimal point is required, and there must be digits
after it.
The exponent specifier consists of an @term{exponent marker},
an optional sign, and a non-empty sequence of digits.
If no exponent specifier is present, or if the @term{exponent marker} @f{e}
(or @f{E}) is used, then
the format specified
by @code{*read-default-float-format*} is used.
See @ref{SyntaxForNumericTokens, Figure 2.9}.

An implementation may provide one or more kinds of @term{float}
that collectively make up @thetype{float}.
The letters @f{s}, @f{f}, @f{d}, and @f{l} (or their
respective uppercase equivalents) explicitly specify the
use of the @term{types} @code{short-float}, @code{single-float}, 
@code{double-float}, and @code{long-float}, respectively.

The internal format used for an external representation depends only
on the @term{exponent marker}, and not on the number of decimal digits
in the external representation.

@Thenextfigure{}@spc{}contains examples of notations for @term{floats}: 


@float Figure,fig2.14
@cartouche
@multitable{@f{6.02E+23}}{; (or as @f{0.0} if @t{short-float} was the default format).}

@item @f{0.0} @tab ;Floating-point zero in default format
@item @f{0E0} @tab ;As input, this is also floating-point zero in default format.
@item  @tab ;As output, this would appear as @f{0.0}.
@item @f{0e0} @tab ;As input, this is also floating-point zero in default format.
@item  @tab ;As output, this would appear as @f{0.0}.
@item @f{-.0} @tab ;As input, this might be a zero or a minus zero,
@item  @tab ; depending on whether the implementation supports
@item  @tab ; a distinct minus zero.
@item  @tab ;As output, @f{0.0} is zero and @f{-0.0} is minus zero.
@item @f{0.} @tab ;On input, the integer zero---@i{not} a floating-point number!
@item  @tab ;Whether this appears as @f{0} or @f{0.} on output depends
@item  @tab ;on @thevalueof{*print-radix*}.
@item @f{0.0s0} @tab ;A floating-point zero in short format
@item @f{0s0} @tab ;As input, this is a floating-point zero in short format.
@item  @tab ;As output, such a zero would appear as @f{0.0s0}
@item  @tab ; (or as @f{0.0} if @t{short-float} was the default format).
@item @f{6.02E+23} @tab ;Avogadro's number, in default format
@item @f{602E+21} @tab ;Also Avogadro's number, in default format
@end multitable
@end cartouche
@caption{Examples of Floating-point numbers}
@end float


For information on how @term{floats} are printed,
see @ref{PrintingFloats, Section 22.1.3.1.3 (Printing Floats)}.


@subsubsection Syntax of a Complex
@anchor{SyntaxOfComplexes}

A @term{complex} has a Cartesian structure, 
with a real part and an imaginary part each of which is a 
@term{real}.
The parts of a @term{complex} are not necessarily @term{floats} 
but both parts must be of the same @term{type}: 
@editornote{KMP: This is not the same as saying they must be the same type.
Maybe we mean they are of the same `precision' or `format'?
GLS had suggestions which are not yet merged.}
either both are @term{rationals}, or both are of the same @term{float} @term{subtype}.
When constructing a @term{complex}, if the specified parts are not the
same @term{type}, the parts are converted to be the same @term{type}
internally (@ie{} the @term{rational} part is converted to a @term{float}). 
An @term{object} of type @f{(complex rational)} is converted internally
and represented thereafter as a @term{rational} if its imaginary part is an 
@term{integer} whose value is 0.

For further information, see @ref{SharpsignC, Section 2.4.8.11 (Sharpsign C)}@spc{}and @ref{PrintingComplexes, Section 22.1.3.1.4 (Printing Complexes)}.



@node The Consing Dot
@subsection The Consing Dot

If a @term{token} consists solely of dots (with no escape characters),
then an error @oftype{reader-error} is signaled,
except in one circumstance:
if the @term{token} is a single @term{dot}
and appears in a situation where @term{dotted pair} notation permits a @term{dot},
then it is accepted as part of such syntax and no error is signaled. 
See @ref{Left-Parenthesis, Section 2.4.1 (Left-Parenthesis)}.


@node Symbols as Tokens
@subsection Symbols as Tokens

Any @term{token} that is not a @term{potential number},
does not contain a @term{package marker},
and does not consist entirely of dots
will always be interpreted as a @term{symbol}.
Any @term{token} that is a @term{potential number} but does not fit the       
number syntax is a reserved @term{token} and
has an @term{implementation-dependent} interpretation.
In all other cases, the @term{token} is construed to be the name of a @term{symbol}.

Examples of the printed representation of @term{symbols} are in @thenextfigure{}. 
For presentational simplicity,
these examples assume that
the @term{readtable case} of the @term{current readtable} is @kwd{upcase}.


@float Figure,fig2.15
@cartouche
@multitable{@f{3.14159265@bsl{}s0}}{A different @term{symbol},  whose @term{name} is @f{3.14159265S0}.}

@item @f{FROBBOZ} @tab The @term{symbol} whose @term{name} is @f{FROBBOZ}.
@item @f{frobboz} @tab Another way to notate the same @term{symbol}.
@item @f{fRObBoz} @tab Yet another way to notate it.
@item @f{unwind-protect} @tab A @term{symbol} with a hyphen in its @term{name}.
@item @f{+@dollar{}} @tab The @term{symbol} named @f{+@dollar{}}.
@item @f{1+} @tab The @term{symbol} named @f{1+}.
@item @f{+1} @tab This is the @term{integer} @f{1},
not a @term{symbol}.
@item @f{pascal_style} @tab This @term{symbol} has an underscore 
in its @term{name}.
@item @f{file.rel.43} @tab This @term{symbol} has periods in its @term{name}.
@item @f{@bsl{}(} @tab The @term{symbol} whose @term{name} is @f{(}.
@item @f{@bsl{}+1} @tab The @term{symbol} whose @term{name} is @f{+1}.
@item @f{+@bsl{}1} @tab Also the @term{symbol} whose @term{name} is @f{+1}.
@item @f{@bsl{}frobboz} @tab The @term{symbol} whose @term{name} is @f{fROBBOZ}.
@item @f{3.14159265@bsl{}s0} @tab The @term{symbol} whose @term{name}
is @f{3.14159265s0}.
@item @f{3.14159265@bsl{}S0} @tab A different @term{symbol},  whose @term{name} is @f{3.14159265S0}.
@item @f{3.14159265s0} @tab A possible @term{short float} 
approximation to @mat{@pi{}}.
@end multitable
@end cartouche
@caption{Examples of the printed representation of symbols (Part 1 of 2)}
@end float



@float Figure,fig2.16
@cartouche
@multitable{@f{@bsl{}(@bsl{}b@hat{}2@bsl{})\@spc{}-@bsl{}4*@bsl{}a*@bsl{}c}}{Also the @term{symbol} whose @term{name}  is @f{APL@bsl{}360}.}

@item @f{APL@bsl{}@bsl{}360} @tab The @term{symbol} whose @term{name} 
is @f{APL@bsl{}360}.
@item @f{apl@bsl{}@bsl{}360} @tab Also the @term{symbol} whose @term{name}  is @f{APL@bsl{}360}.
@item @f{@bsl{}(b@hat{}2@bsl{})\@spc{}-\@spc{}4*a@f{*c}} @tab The @term{name} is @f{(B@hat{}2) - 4*A*C}.
@item  @tab Parentheses and two spaces in it.
@item @f{@bsl{}(@bsl{}b@hat{}2@bsl{})\@spc{}-@bsl{}4*@bsl{}a*@bsl{}c} @tab The @term{name} is @f{(b@hat{}2) - 4*a*c}.
@item  @tab Letters explicitly lowercase.
@item @f{|"|} @tab The same as writing @f{@bsl{}"}.
@item @f{|(b@hat{}2) - 4*a*c|} @tab The @term{name} is @f{(b@hat{}2) - 4*a*c}.
@item @f{|frobboz|} @tab The @term{name} is @f{frobboz}, not @f{FROBBOZ}.
@item @f{|APL@bsl{}360|} @tab The @term{name} is @f{APL360}.
@item @f{|APL@bsl{}@bsl{}360|} @tab The @term{name} is @f{APL@bsl{}360}.
@item @f{|apl@bsl{}@bsl{}360|} @tab The @term{name} is @f{apl@bsl{}360}.
@item @f{|@bsl{}|@bsl{}||} @tab Same as @f{@bsl{}|@bsl{}|} ---the @term{name} is @f{||}.
@item @f{|(B@hat{}2) - 4*A*C|} @tab The @term{name} is @f{(B@hat{}2) - 4*A*C}.
@item  @tab Parentheses and two spaces in it.
@item @f{|(b@hat{}2) - 4*a*c|} @tab The @term{name} is @f{(b@hat{}2) - 4*a*c}.
@end multitable
@end cartouche
@caption{Examples of the printed representation of symbols (Part 2 of 2)}
@end float


In the process of parsing a @term{symbol},
it is @term{implementation-dependent} which
@term{implementation-defined} @term{attributes} are removed
from the @term{characters} forming a @term{token} that represents a @term{symbol}.

When parsing the syntax for a @term{symbol},
the @term{Lisp reader} looks up the @term{name} of that @term{symbol} 
in the @term{current package}.
This lookup may involve looking in other 
@term{packages} whose @term{external symbols}
are inherited by the @term{current package}.  If the name is found,
the corresponding @term{symbol} is returned.  If the name is not found
(that is, there is no @term{symbol} 
of that name @term{accessible} in the @term{current package}),
a new @term{symbol} is created and is placed in the @term{current package}
as an @term{internal symbol}.  The @term{current package} becomes the owner
(@term{home package}) of the @term{symbol}, 
and the @term{symbol} becomes interned in the @term{current package}.
If the name is later read again while this same @term{package} is
current, the same @term{symbol} will be found and returned.


@node Valid Patterns for Tokens
@subsection Valid Patterns for Tokens

The valid patterns for @term{tokens} are summarized in @thenextfigure{}. 


@float Figure,fig2.17
@cartouche
@multitable{@f{@i{aaaaa}:@i{aaaaa}:@i{aaaaa}}}{a (possibly internal) @term{symbol}  in the @i{ppppp} @term{package}}

@item @f{@i{nnnnn}} @tab a @term{number}
@item @f{@i{xxxxx}} @tab a @term{symbol} in the @term{current package}
@item @f{:@i{xxxxx}} @tab a @term{symbol} in the the @code{KEYWORD} @term{package}
@item @f{@i{ppppp}:@i{xxxxx}} @tab an @term{external symbol} 
in the @i{ppppp} @term{package}
@item @f{@i{ppppp}::@i{xxxxx}} @tab a (possibly internal) @term{symbol}  in the @i{ppppp} @term{package}
@item @f{:@i{nnnnn}} @tab undefined
@item @f{@i{ppppp}:@i{nnnnn}} @tab undefined
@item @f{@i{ppppp}::@i{nnnnn}} @tab undefined
@item @f{::@i{aaaaa}} @tab undefined
@item @f{@i{aaaaa}:} @tab undefined
@item @f{@i{aaaaa}:@i{aaaaa}:@i{aaaaa}} @tab undefined
@end multitable
@end cartouche
@caption{Valid patterns for tokens}
@end float


Note that @i{nnnnn} has number syntax,
neither @i{xxxxx} nor @i{ppppp} has number syntax,
and @i{aaaaa} has any syntax.

A summary of rules concerning @term{package markers} follows.
In each case, examples are offered to illustrate the case;
for presentational simplicity, the examples assume that
the @term{readtable case} of the @term{current readtable} is @kwd{upcase}.


@enumerate 1
@item
If there is a single @term{package marker}, and it occurs at the beginning of the
@term{token}, then the @term{token} is interpreted as a @term{symbol} in the @code{KEYWORD} @term{package}.
It also sets the @code{symbol-value} of the newly-created @term{symbol} to that
same @term{symbol} so that the @term{symbol} will self-evaluate.

For example, 
@f{:bar}, when read, interns @f{BAR} as an @term{external symbol} in the @code{KEYWORD} @term{package}.

@item
If there is a single @term{package marker} not at the beginning or end of the
@term{token}, then it divides the @term{token} into two parts.  The first part
specifies a @term{package}; 
the second part is the name of an @term{external symbol}
available in that package.  

For example, 
@f{foo:bar}, when read, looks up @f{BAR} among the @term{external symbols} of
the @term{package} named @f{FOO}.

@item
If there are two adjacent @term{package markers} not at the beginning or end of the
@term{token}, then they divide the @term{token} into two parts.  The first part
specifies a @term{package};
the second part is the name of a @term{symbol} within
that @term{package} (possibly an @term{internal symbol}).

For example, 
@f{foo::bar}, when read, interns @f{BAR} in the @term{package} named @f{FOO}.

@item
If the @term{token} contains no @term{package markers}, 
and does not have @term{potential number} syntax,
then the entire @term{token} is the name of the @term{symbol}.
The @term{symbol} is looked up in the @term{current package}.

For example, 
@f{bar}, when read, interns @f{BAR} in the @term{current package}.

@item
The consequences are unspecified if any other pattern of @term{package markers}
in a @term{token} is used.
All other uses of @term{package markers} within names of @term{symbols} 
are not defined by this standard 
but are reserved for @term{implementation-dependent} use.
@end enumerate


For example,
assuming the @term{readtable case} of the @term{current readtable} is @kwd{upcase},
@f{editor:buffer} refers to the @term{external symbol} 
named @f{BUFFER} present in the @term{package} named @f{editor},
regardless of whether there is a @term{symbol} named @f{BUFFER} in
the @term{current package}.  If there is no @term{package} named
@f{editor}, or if no @term{symbol} named @f{BUFFER}
is present in @f{editor}, or if @f{BUFFER} is not exported by
@f{editor}, the reader signals
a correctable error.
If @f{editor::buffer} is seen, the effect is exactly the same as
reading @f{buffer} with the @code{EDITOR} @term{package} being the @term{current package}.


@node Package System Consistency Rules
@subsection Package System Consistency Rules

The following rules apply to the package system as long as 
@thevalueof{*package*} is not changed:


@table @asis
@item @id{@b{Read-read consistency}}


Reading the same @term{symbol} @term{name}
always results in the @term{same} @term{symbol}.

@item @id{@b{Print-read consistency}}


An @term{interned symbol} always prints as a sequence of characters that, 
when read back in, yields the @term{same} @term{symbol}.

For information about how the @term{Lisp printer} treats @term{symbols},
see @ref{PrintingSymbols, Section 22.1.3.3 (Printing Symbols)}.

@item @id{@b{Print-print consistency}}


If two interned @term{symbols} are not the @term{same},
then their printed representations will be different sequences of characters.
@end table


These rules are true regardless of any implicit interning.
As long as the @term{current package} is not changed,
results are reproducible regardless of the order of @term{loading} files 
or the exact history of what @term{symbols} were typed in when.  
If @thevalueof{*package*} is changed and then changed back to the previous value,
consistency is maintained.
The rules can be violated by
changing @thevalueof{*package*},
forcing a change to @term{symbols} 
or to @term{packages} 
or to both
by continuing from an error,
or calling one of the following @term{functions}:
@code{unintern},
@code{unexport},
@code{shadow},
@code{shadowing-import},
or @code{unuse-package}.

An inconsistency only applies if one of the restrictions is violated
between two of the named @term{symbols}.
@code{shadow}, @code{unexport}, @code{unintern},
and @code{shadowing-import} can only affect the consistency of
@term{symbols} with the same @term{names} (under @code{string=})
as the ones supplied as arguments.


@node Standard Macro Characters
@section Standard Macro Characters

If the reader encounters a @term{macro character},
then its associated @term{reader macro function} 
is invoked and may produce an @term{object} to be returned.
This @term{function} may read the @term{characters} 
following the @term{macro character} in the @term{stream} 
in any syntax and return the @term{object} represented by that syntax.

Any @term{character} can be made to be a @term{macro character}.
The @term{macro characters} defined initially in a @term{conforming implementation}
include
the following:

@menu
* Left-Parenthesis::
* Right-Parenthesis::
* Single-Quote::
* Semicolon::
* Double-Quote::
* Backquote::
* Comma::
* Sharpsign::
* Re-Reading Abbreviated Expressions::
@end menu
@node Left-Parenthesis
@subsection Left-Parenthesis
@cindex (
@cindex Left-Parenthesis (reader macro)
@cindex list

The @term{left-parenthesis} initiates reading of a @term{list}.
@code{read} is called recursively to read successive @term{objects}
until a right parenthesis is found in the input @term{stream}.
A @term{list} of the @term{objects} read is returned.  Thus

@lisp
 (a b c)
@end lisp

is read as a @term{list} of three @term{objects}
(the @term{symbols} @f{a}, @f{b}, and @f{c}).
The right parenthesis need not immediately follow the printed representation of
the last @term{object}; @term{whitespace}@sub2{}                              
characters and comments may precede it.

If no @term{objects} precede the right parenthesis, 
it reads as a @term{list} of zero @term{objects} 
(the @term{empty list}).

If a @term{token} that is just a dot
@cindex dot
@cindex .
not immediately preceded by an escape character
is read after some @term{object}
then exactly one more @term{object} must follow the dot,
possibly preceded or followed by @term{whitespace}@sub2{} or a comment,
followed by the right parenthesis:

@lisp
 (a b c . d)
@end lisp

This means that the @term{cdr} of the last @term{cons} in the 
@term{list} is not @nil{},
but rather the @term{object} whose representation followed the dot.
The above example might have been the result of evaluating

@lisp
 (cons 'a (cons 'b (cons 'c 'd)))
@end lisp

Similarly,

@lisp
 (cons 'this-one 'that-one) @EV{} (this-one . that-one)
@end lisp

It is permissible for the @term{object} 
following the dot to be a @term{list}:

@lisp
 (a b c d . (e f . (g))) @EQ{} (a b c d e f g)
@end lisp


For information on how the @term{Lisp printer} prints @term{lists} and @term{conses},
see @ref{PrintingListsAndConses, Section 22.1.3.5 (Printing Lists and Conses)}.


@node Right-Parenthesis
@subsection Right-Parenthesis
@cindex )
@cindex Right-Parenthesis (reader macro)

The @term{right-parenthesis} is invalid 
except when used in conjunction with the left parenthesis character.
For more information, see @ref{Reader Algorithm, Section 2.2 (Reader Algorithm)}.


@node Single-Quote
@subsection Single-Quote
@cindex '
@cindex Single-Quote (reader macro)
@cindex quotation (of forms)
@cindex quote

@b{Syntax:}  @f{'@metaparam{exp}}

A @term{single-quote} introduces an @term{expression} to be ``quoted.''
@term{Single-quote} followed by an @term{expression} @param{exp} 
is treated by the @term{Lisp reader} as an abbreviation for
and is parsed identically to the @term{expression} @f{(quote @param{exp})}.
See the @term{special operator} @ref{quote}.

@subsubsection Examples of Single-Quote

@lisp
 'foo @EV{} FOO
 ''foo @EV{} (QUOTE FOO)
 (car ''foo) @EV{} QUOTE
@end lisp




@node Semicolon
@subsection Semicolon
@cindex ;
@cindex Semicolon (reader macro)
@cindex comment

@b{Syntax:} @f{;@metaparam{text}}

A @term{semicolon} introduces @term{characters} that are to be ignored,
such as comments.  The @term{semicolon} and all @term{characters} up to
and including the next @term{newline} or end of file are ignored.

@subsubsection Examples of Semicolon

@lisp
 (+ 3 ; three
    4)
@EV{} 7    
@end lisp



@subsubsection Notes about Style for Semicolon

Some text editors make assumptions about desired indentation based on
the number of @term{semicolons} that begin a comment.  The following style 
conventions are common, although not by any means universal.  

@unnumberedsubsubsec 2.4.4.2.1 Use of Single Semicolon


Comments that begin with a single @term{semicolon} are all aligned to 
the same column at the right (sometimes called the ``comment column'').
The text of such a comment generally applies only to the line on which it appears.
Occasionally two or three contain a single sentence together;
this is sometimes indicated by indenting all but the first with an additional
space (after the @term{semicolon}).


@unnumberedsubsubsec 2.4.4.2.2 Use of Double Semicolon


Comments that begin with a double @term{semicolon} are all aligned to
the same level of indentation as a @term{form} would be at that same
position in the @term{code}.
The text of such a comment usually describes
the state of the @term{program} at the point where the comment occurs,
the @term{code} which follows the comment,
or both.


@unnumberedsubsubsec 2.4.4.2.3 Use of Triple Semicolon


Comments that begin with a triple @term{semicolon} are all aligned to
the left margin.  Usually they are used prior to a definition or set
of definitions, rather than within a definition.


@unnumberedsubsubsec 2.4.4.2.4 Use of Quadruple Semicolon


Comments that begin with a quadruple @term{semicolon} are all aligned to
the left margin, and generally contain only a short piece of text that
serve as a title for the code which follows, and might be used in the
header or footer of a program that prepares code for presentation as 
a hardcopy document.


@unnumberedsubsubsec 2.4.4.2.5 Examples of Style for Semicolon


@lisp
;;;; Math Utilities

;;; FIB computes the the Fibonacci function in the traditional
;;; recursive way.

(defun fib (n)
  (check-type n integer)
  ;; At this point we're sure we have an integer argument.
  ;; Now we can get down to some serious computation.
  (cond ((< n 0)
         ;; Hey, this is just supposed to be a simple example.
         ;; Did you really expect me to handle the general case?
         (error "FIB got ~D as an argument." n))
        ((< n 2) n)             ;fib[0]=0 and fib[1]=1
        ;; The cheap cases didn't work.
        ;; Nothing more to do but recurse.
        (t (+ (fib (- n 1))     ;The traditional formula
              (fib (- n 2)))))) ; is fib[n-1]+fib[n-2].
@end lisp





@node Double-Quote
@subsection Double-Quote
@cindex Double-Quote (reader macro)
@cindex quotation (of strings)
@cindex string

@b{Syntax:} @f{"@metaparam{text}"}

The @term{double-quote} is used to begin and end a @term{string}.
When a @term{double-quote} is encountered,
@term{characters} are read from the @term{input} @term{stream} 
and accumulated until another @term{double-quote} is encountered.
If a @term{single escape} @term{character} is seen,
the @term{single escape} @term{character} is discarded,
the next @term{character} is accumulated, and accumulation continues.
The accumulated @term{characters} 
up to but not including the matching @term{double-quote} 
are made into a @term{simple string} and returned.
It is @term{implementation-dependent}
which @term{attributes} of the accumulated characters are removed in this process.

Examples of the use of the @term{double-quote} character are in @thenextfigure{}. 


@float Figure,fig2.18
@cartouche
@multitable{@f{"@bsl{}"APL@bsl{}@bsl{}360?@bsl{}" he cried."}}{;A string with three characters in it}

@item @f{"Foo"} @tab ;A string with three characters in it
@item @f{""} @tab ;An empty string
@item @f{"@bsl{}"APL@bsl{}@bsl{}360?@bsl{}" he cried."} @tab ;A string with twenty characters
@item @f{"|x| = |-x|"} @tab ;A ten-character string
@end multitable
@end cartouche
@caption{Examples of the use of double-quote}
@end float


Note that to place a single escape character or a @term{double-quote} into a string,
such a character must be preceded by a single escape character.
Note, too, that a multiple escape character need not be quoted by a 
single escape character within a string.

For information on how the @term{Lisp printer} prints @term{strings},
see @ref{PrintingStrings, Section 22.1.3.4 (Printing Strings)}.


@node Backquote
@subsection Backquote

@cindex `
@cindex Backquote (reader macro)
@cindex quotation (of forms)
@cindex quote
@cindex list
@cindex cons

The @term{backquote} introduces a template of a data structure to be built.  
For example, writing

@lisp
 `(cond ((numberp ,x) ,@@y) (t (print ,x) ,@@y))
@end lisp

is roughly equivalent to writing

@lisp
 (list 'cond 
       (cons (list 'numberp x) y) 
       (list* 't (list 'print x) y))
@end lisp

Where a comma
occurs in the template, 
the @term{expression}
following the comma is to be evaluated to produce an @term{object} to
be inserted at that point.  Assume @f{b} has the value 3, for example, then
evaluating the @term{form} denoted by @f{`(a b ,b ,(+ b 1) b)} produces
the result @f{(a b 3 4 b)}.

If a comma is immediately followed by an @term{at-sign}, 
then the @term{form} following the @term{at-sign}
is evaluated to produce a @term{list} of @term{objects}.
These @term{objects} are then ``spliced'' into place in the template.  For
example, if @f{x} has the value @f{(a b c)}, then

@lisp
 `(x ,x ,@@x foo ,(cadr x) bar ,(cdr x) baz ,@@(cdr x))
@EV{} (x (a b c) a b c foo b bar (b c) baz b c)
@end lisp

The backquote syntax can be summarized formally as follows.


@itemize @bullet{}
@item
@f{`@param{basic}} is the same as @f{'@param{basic}},
that is, @f{(quote @param{basic})}, for any @term{expression} 
@param{basic} that is not a @term{list} or a general @term{vector}.

@item
@f{`,@param{form}} is the same as @param{form}, for any @param{form}, provided
that the representation of @param{form} does not begin with @term{at-sign}
or @term{dot}.  (A similar caveat holds for all occurrences of a form after a @term{comma}.)

@item
@f{`,@@@param{form}} has undefined consequences.

@item
@f{`(x1 x2 x3 ... xn . atom)}
may be interpreted to mean

@lisp
 (append @lbracket{}@spc{}x1@rbracket{} @lbracket{}@spc{}x2@rbracket{} @lbracket{}@spc{}x3@rbracket{} ... @lbracket{}@spc{}xn@rbracket{} (quote atom))
@end lisp

where the brackets are used to indicate
a transformation of an @param{xj} as follows:


@itemize --
@item
@f{[@param{form}]} is interpreted as @f{(list `@param{form})}, 
which contains a backquoted form that must then be further interpreted.

@item
@f{[,@param{form}]} is interpreted as @f{(list @param{form})}.

@item
@f{[,@@@param{form}]} is interpreted as @param{form}.
@end itemize


@item
@f{`(x1 x2 x3 ... xn)} may be interpreted to mean
the same as the backquoted form
@f{`(x1 x2 x3 ... xn . @nil{})},
thereby reducing it to the previous case.

@item
@f{`(x1 x2 x3 ... xn . ,form)} may be interpreted to mean

@lisp
 (append @lbracket{}@spc{}x1@rbracket{} @lbracket{}@spc{}x2@rbracket{} @lbracket{}@spc{}x3@rbracket{} ... @lbracket{}@spc{}xn@rbracket{} form)
@end lisp

where the brackets indicate a transformation of an @tt{xj} as described above.

@item
@f{`(x1 x2 x3 ... xn . ,@@form)} has undefined consequences.

@item
@f{`#(x1 x2 x3 ... xn)} may be interpreted to mean
@f{(apply #'vector `(x1 x2 x3 ... xn))}.
@end itemize


Anywhere ``@f{,@@}'' may be used, the syntax ``@f{,.}'' may be used instead
to indicate that it is permissible to operate @term{destructively} on 
the @term{list structure}  produced by the form following the ``@f{,.}'' 
(in effect, to use @code{nconc} instead of @code{append}).

If the backquote syntax is nested, the innermost backquoted form
should be expanded first.  This means that if several commas occur
in a row, the leftmost one belongs to the innermost @term{backquote}.

An @term{implementation} is free to interpret a backquoted @term{form} @mat{F@sub1{}}
as any @term{form} @mat{F@sub2{}} that, when evaluated, will produce a result that is
the @term{same} under @code{equal} as the result implied by the above definition, 
provided that the side-effect behavior of the substitute @term{form} @mat{F@sub2{}} 
is also consistent with the description given above.
The constructed
copy of the template might or might not share @term{list} structure with the
template itself.  As an example, the above definition implies that

@lisp
 `((,a b) ,c ,@@d)
@end lisp

will be interpreted as if it were

@lisp
 (append (list (append (list a) (list 'b) '@nil{})) (list c) d '@nil{})
@end lisp

but it could also be legitimately interpreted to mean any of the following:

@lisp
 (append (list (append (list a) (list 'b))) (list c) d)
 (append (list (append (list a) '(b))) (list c) d)
 (list* (cons a '(b)) c d)
 (list* (cons a (list 'b)) c d)
 (append (list (cons a '(b))) (list c) d)
 (list* (cons a '(b)) c (copy-list d))
@end lisp


@subsubsection Notes about Backquote

Since the exact manner in which the @term{Lisp reader} will parse
an @term{expression} involving the @term{backquote} @term{reader macro} 
is not specified, an @term{implementation} is free to choose any
representation that preserves the semantics described.

Often an @term{implementation} will choose a representation that facilitates
pretty printing of the expression, so that @f{(pprint `(a ,b))} will display
@f{`(a ,b)} and not, for example, @f{(list 'a b)}.  However, this is not a
requirement.

Implementors who have no particular reason to make one choice or another
might wish to refer to @IEEEScheme{}, which identifies a popular choice of
representation for such expressions that might provide useful to be useful
compatibility for some user communities.  There is no requirement, however,
that any @term{conforming implementation} use this particular representation.
This information is provided merely for cross-reference purposes.



@node Comma
@subsection Comma
@cindex ,
@cindex Comma (reader macro)
@cindex quotation (of forms)
@cindex quote
@cindex list
@cindex cons


The @term{comma} is part of the backquote syntax; see @ref{Backquote, Section 2.4.6 (Backquote)}.
@term{Comma} is invalid if used other than inside the body of a 
backquote @term{expression} as described above.


@node Sharpsign
@subsection Sharpsign
@cindex #
@cindex Sharpsign (reader macro)

@term{Sharpsign} is a @term{non-terminating} @term{dispatching macro character}.
It reads an optional 
sequence of digits and then one more character,
and uses that character to select a @term{function} to run as a
@term{reader macro function}.

The @term{standard syntax} includes constructs introduced by the @f{#} character.
The syntax of these constructs is as follows:
a character that identifies the type of construct is 
followed by arguments in some form.
If the character is a letter, its @term{case} is not important;
@f{#O} and @f{#o} are considered to be equivalent, for example.

Certain @f{#} constructs allow an unsigned decimal number to appear
between the @f{#} and the character.

The @term{reader macros} associated with the @term{dispatching macro character} @f{#}
are described later in this section and summarized in @thenextfigure{}.


@float Figure,fig2.19
@cartouche
@multitable{dispatch char}{labels following object}{dispatch char}{radix-@mat{n} rational}
@headitem dispatch char @tab purpose @tab dispatch char @tab purpose
@item Backspace @tab signals error @tab @f{@lcurly{}} @tab undefined*
@item Tab @tab signals error @tab @f{@rcurly{}} @tab undefined*
@item Newline @tab signals error @tab + @tab read-time conditional
@item Linefeed @tab signals error @tab - @tab read-time conditional
@item Page @tab signals error @tab . @tab read-time evaluation
@item Return @tab signals error @tab / @tab undefined
@item Space @tab signals error @tab A, a @tab array
@item ! @tab undefined* @tab B, b @tab binary rational
@item @f{"} @tab undefined @tab C, c @tab complex number
@item # @tab reference to = label @tab D, d @tab undefined
@item @dollar{} @tab undefined @tab E, e @tab undefined
@item @percent{} @tab undefined @tab F, f @tab undefined
@item @ampers{} @tab undefined @tab G, g @tab undefined
@item ' @tab function abbreviation @tab H, h @tab undefined
@item ( @tab simple vector @tab I, i @tab undefined
@item ) @tab signals error @tab J, j @tab undefined
@item @tt{*} @tab bit vector @tab K, k @tab undefined
@item , @tab undefined @tab L, l @tab undefined
@item : @tab uninterned symbol @tab M, m @tab undefined
@item ; @tab undefined @tab N, n @tab undefined
@item @f{<} @tab signals error @tab O, o @tab octal rational
@item @f{=} @tab labels following object @tab P, p @tab pathname
@item @f{>} @tab undefined @tab Q, q @tab undefined
@item ? @tab undefined* @tab R, r @tab radix-@mat{n} rational
@item @@ @tab undefined @tab S, s @tab structure
@item [ @tab undefined* @tab T, t @tab undefined
@item @f{@bsl{}} @tab character object @tab U, u @tab undefined
@item ] @tab undefined* @tab V, v @tab undefined
@item @hat{} @tab undefined @tab W, w @tab undefined
@item @f{_} @tab undefined @tab X, x @tab hexadecimal rational
@item ` @tab undefined @tab Y, y @tab undefined
@item @f{|} @tab balanced comment @tab Z, z @tab undefined
@item @f{@tild{}} @tab undefined @tab Rubout @tab undefined
@end multitable
@end cartouche
@caption{Standard # Dispatching Macro Character Syntax}
@end float


The combinations marked by an asterisk (*) are explicitly reserved to the
user.  No @term{conforming implementation} defines them.

Note also that @term{digits} do not appear in the preceding table.  This is
because the notations @tt{#0}, @tt{#1}, ..., @tt{#9} are
reserved for another purpose which occupies the same syntactic space.
When a @term{digit} follows a @term{sharpsign},
it is not treated as a dispatch character.
Instead, an unsigned integer argument is accumulated 
and passed as an @term{argument} to the @term{reader macro} 
for the @term{character} that follows the digits.
For example,
@f{#2A((1 2) (3 4))} is a use of @tt{#A} with an argument of @f{2}.

@subsubsection Sharpsign Backslash
@anchor{SharpsignBackslash}
@cindex Sharpsign Backslash (reader macro)
@cindex Backslash (sharpsign reader macro)
@cindex character

@b{Syntax:} @f{#@bsl{}@metaparam{x}}

When the @term{token} @param{x} is a single @term{character} long, 
this parses as the literal @term{character} @param{char}.
@term{Uppercase} and @term{lowercase} letters are distinguished after @f{#@bsl{}};
@f{#@bsl{}A} and @f{#@bsl{}a} denote different @term{character} @term{objects}.
Any single @term{character} works after @f{#@bsl{}},
even those that are normally special to @code{read}, 
such as @term{left-parenthesis} and @term{right-parenthesis}.

In the single @term{character} case,
the @param{x} must be followed by a non-constituent @term{character}.
After @f{#@bsl{}} is read,
the reader backs up over the @term{slash} and then reads a @term{token},
treating the initial @term{slash} as a @term{single escape} @term{character}
(whether it really is or not in the @term{current readtable}).

When the @term{token} @param{x} is more than one @term{character} long,
the @param{x} must have the syntax of a @term{symbol} 
with no embedded @term{package markers}.
In this case, the @term{sharpsign} @term{backslash} notation
parses as the @term{character} whose @term{name} is @f{(string-upcase @param{x})};
see @ref{Character Names, Section 13.1.7 (Character Names)}.


For information about how the @term{Lisp printer} prints @term{character} @term{objects},
see @ref{PrintingCharacters, Section 22.1.3.2 (Printing Characters)}.


@subsubsection Sharpsign Single-Quote
@anchor{SharpsignQuote}
@cindex Sharpsign Single-Quote (reader macro)
@cindex Single-Quote (sharpsign reader macro)
@cindex function

Any @param{expression} preceded by @f{#'} 
(@term{sharpsign} followed by @term{single-quote}),
as in @f{#'@param{expression}},
is treated by the @term{Lisp reader} as an abbreviation for and parsed identically 
to the @term{expression} @f{(function @param{expression})}.
See @code{function}.  For example,

@lisp
(apply #'+ l) @EQ{} (apply (function +) l)
@end lisp



@subsubsection Sharpsign Left-Parenthesis
@anchor{SharpsignLeftParen}
@cindex Sharpsign Left-Parenthesis (reader macro)
@cindex Left-Parenthesis (sharpsign reader macro)
@cindex vector
@cindex simple-vector

@f{#(} and @f{)} are used to notate a @term{simple vector}. 

If an unsigned decimal integer
appears between the @f{#} and @f{(},
it specifies explicitly the length of the @term{vector}.  
The consequences are undefined if the number of @term{objects} 
specified before the closing @f{)}
exceeds the unsigned decimal integer.
If the number of @term{objects} supplied before the closing @f{)}
is less than the unsigned decimal integer but greater than zero,
the last @term{object}
is used to fill all
remaining elements of the @term{vector}.
@editornote{Barmar: This should say "signals...".}
The consequences are undefined if the unsigned decimal integer is non-zero and
number of @term{objects} supplied before the closing @f{)}
is zero.
For example,

@lisp
 #(a b c c c c)
 #6(a b c c c c)
 #6(a b c)
 #6(a b c c)
@end lisp


all mean the same thing: a @term{vector} of length @f{6}
with @term{elements} @f{a}, @f{b}, and four occurrences of @f{c}.  
Other examples follow:

@lisp
 #(a b c)               ;A vector of length 3
 #(2 3 5 7 11 13 17 19 23 29 31 37 41 43 47)
                        ;A vector containing the primes below 50
 #()                    ;An empty vector
@end lisp

The notation @f{#()} denotes an empty @term{vector}, as does @f{#0()}.

For information on how the @term{Lisp printer} prints @term{vectors},
see @ref{PrintingStrings, Section 22.1.3.4 (Printing Strings)},
@ref{PrintingBitVectors, Section 22.1.3.6 (Printing Bit Vectors)},
or @ref{PrintingOtherVectors, Section 22.1.3.7 (Printing Other Vectors)}.


@subsubsection Sharpsign Asterisk
@anchor{SharpsignStar}
@cindex Sharpsign Asterisk (reader macro)
@cindex Asterisk (sharpsign reader macro)
@cindex bit-vector
@cindex simple-bit-vector

@b{Syntax:} @f{#*@metaparam{bits}}

A @term{simple bit vector} is constructed containing the indicated @term{bits}
(@f{0}'s and @f{1}'s), where the leftmost @param{bit} has index zero 
and the subsequent @param{bits} have increasing indices.

@b{Syntax:} @f{#@metaparam{n}*@metaparam{bits}}

With an argument @param{n},
the @term{vector} to be created is of @term{length} @param{n}.
If the number of @param{bits} is less than @param{n} but greater than zero,
the last bit is used to fill all remaining bits of the @term{bit vector}.

The notations @f{#*} and @f{#0*} each denote an empty @term{bit vector}.

Regardless of whether the optional numeric argument @param{n} is provided,
the @term{token} that follows the @term{asterisk} is delimited by 
a normal @term{token} delimiter.
However, (unless @thevalueof{*read-suppress*} is @term{true})
an error @oftype{reader-error} is signaled 
if that @term{token} is not composed entirely of @f{0}'s and @f{1}'s,
or if @param{n} was supplied 
and the @term{token} is composed of more than @param{n} @param{bits},
or if @param{n} is greater than one, but no @param{bits} were specified.
Neither a @term{single escape} nor a @term{multiple escape} is permitted in this @term{token}.

For information on how the @term{Lisp printer} prints @term{bit vectors},
see @ref{PrintingBitVectors, Section 22.1.3.6 (Printing Bit Vectors)}.

@unnumberedsubsubsec 2.4.8.4.1 Examples of Sharpsign Asterisk


For example, 
@lisp
  #*101111
 #6*101111
 #6*101
 #6*1011
@end lisp

all mean the same thing: a @term{vector} of length @f{6}
with @term{elements} @f{1}, @f{0}, @f{1}, @f{1}, @f{1}, and @f{1}.

For example:

@lisp
 #*         ;An empty bit-vector
@end lisp




@subsubsection Sharpsign Colon
@anchor{SharpsignColon}
@cindex Sharpsign Colon (reader macro)
@cindex Colon (sharpsign reader macro)
@cindex symbol

@b{Syntax:}  @f{#:@metaparam{symbol-name}}

@f{#:} introduces an @term{uninterned} @term{symbol} whose @term{name} 
is @param{symbol-name}.  Every time this syntax is encountered,
a @term{distinct} @term{uninterned} @term{symbol} is created.
The @param{symbol-name} must have the syntax of a @term{symbol} 
with no @term{package prefix}.

For information on how the @term{Lisp reader} 
prints @term{uninterned} @term{symbols},
see @ref{PrintingSymbols, Section 22.1.3.3 (Printing Symbols)}.


@subsubsection Sharpsign Dot
@anchor{SharpsignDot}
@cindex Sharpsign Dot (reader macro)
@cindex Dot (sharpsign reader macro)
@cindex eval
@cindex *read-eval*

@f{#.@param{foo}} is read as the @term{object} resulting from the evaluation
of the @term{object} represented by @param{foo}.
The evaluation is done during the @code{read} process,
when the @f{#.} notation is encountered.
The @f{#.} syntax therefore performs a read-time evaluation of @param{foo}.

The normal effect of @tt{#.} is inhibited when @thevalueof{*read-eval*} is @term{false}.
In that situation, an error @oftype{reader-error} is signaled.

For an @term{object}
that does not have a convenient printed
representation, a @term{form} that computes the @term{object} can be given using
the @f{#.} notation.



@subsubsection Sharpsign B
@anchor{SharpsignB}
@cindex Sharpsign B (reader macro)
@cindex B (sharpsign reader macro)
@cindex *read-base*

@f{#B}@param{rational} reads @param{rational} in binary (radix 2).
For example, 

@lisp
 #B1101 @EQ{} 13 ;1101@ssst{}
 #b101/11 @EQ{} 5/3
@end lisp


The consequences are undefined if the token immediately following
the @f{#B} does not have the syntax of a binary (@ie{} radix 2) @term{rational}.


@subsubsection Sharpsign O
@anchor{SharpsignO}
@cindex Sharpsign O (reader macro)
@cindex O (sharpsign reader macro)
@cindex *read-base*

@f{#O}@param{rational} reads @param{rational} in octal (radix 8).
For example, 

@lisp
 #o37/15 @EQ{} 31/13
 #o777 @EQ{} 511
 #o105 @EQ{} 69 ;105@ssse{}
@end lisp


The consequences are undefined if the token immediately following
the @f{#O} does not have the syntax of an octal (@ie{} radix 8) @term{rational}.


@subsubsection Sharpsign X
@anchor{SharpsignX}
@cindex Sharpsign X (reader macro)
@cindex X (sharpsign reader macro)
@cindex *read-base*

@f{#X}@param{rational} reads @param{rational} in hexadecimal (radix 16).
The digits above @f{9} are the letters @f{A} through @f{F} (the lowercase
letters @f{a} through @f{f} are also acceptable).  For example,

@lisp
 #xF00 @EQ{} 3840             
 #x105 @EQ{} 261 ;105@ssss{}
@end lisp


The consequences are undefined if the token immediately following
the @f{#X} does not have the syntax of a hexadecimal (@ie{} radix 16) @term{rational}.


@subsubsection Sharpsign R
@anchor{SharpsignR}
@cindex Sharpsign R (reader macro)
@cindex R (sharpsign reader macro)
@cindex *read-base*

@f{#@param{n}R}

@f{#@param{radix}R@param{rational}} reads @param{rational} in radix @param{radix}.
@param{radix} must consist of only digits
that are interpreted as an @term{integer}
in decimal radix; its value must be between 2 and 36 (inclusive).
Only valid digits
for the specified radix may be used.

For example, @f{#3r102} is another way of writing @f{11} (decimal), 
and @f{#11R32}
is another way of writing @f{35} (decimal).  
For radices larger than 10, letters of
the alphabet are used in order for the digits after @f{9}.
No alternate @f{#} notation exists for the decimal radix since a
decimal point suffices.

@Thenextfigure{}@spc{}contains examples of the use of @tt{#B},
@tt{#O}, @tt{#X}, and @tt{#R}.


@float Figure,fig2.20
@cartouche
@multitable{@f{#2r11010101}}{;Another way of writing @f{213} decimal}

@item @f{#2r11010101} @tab ;Another way of writing @f{213} decimal
@item @f{#b11010101} @tab ;Ditto
@item @f{#b+11010101} @tab ;Ditto
@item @f{#o325} @tab ;Ditto, in octal radix
@item @f{#xD5} @tab ;Ditto, in hexadecimal radix
@item @f{#16r+D5} @tab ;Ditto
@item @f{#o-300} @tab ;Decimal @f{-192}, written in base 8
@item @f{#3r-21010} @tab ;Same thing in base 3
@item @f{#25R-7H} @tab ;Same thing in base 25
@item @f{#xACCEDED} @tab ;@f{181202413}, in hexadecimal radix
@end multitable
@end cartouche
@caption{Radix Indicator Example}
@end float


The consequences are undefined if the token immediately following
the @f{#@param{n}R} does not have the syntax of a @term{rational} in radix @param{n}.


@subsubsection Sharpsign C
@anchor{SharpsignC}
@cindex Sharpsign C (reader macro)
@cindex C (sharpsign reader macro)
@cindex complex

@f{#C} reads a following @term{object}, which must be a @term{list} of
length two whose @term{elements} are both @term{reals}.
These @term{reals} denote, respectively,
the real and imaginary parts of a @term{complex} number.
If the two parts as notated are not of the same data type,
then they are converted 
according to the rules of floating-point @term{contagion}
described in @ref{NumericContagionRules, Section 12.1.1.2 (Contagion in Numeric Operations)}.

@f{#C(@param{real} @param{imag})} is equivalent to 
@f{#.(complex (quote @param{real}) (quote @param{imag}))},
except that @f{#C} is not affected by @code{*read-eval*}.
See the @term{function} @ref{complex (Function)}.

@Thenextfigure{}@spc{}contains examples of the use of @tt{#C}.


@float Figure,fig2.21
@cartouche
@multitable{@f{#C(3.0s1 2.0s-1)}}{;Will be converted internally to @f{#C(1.66666 7.0)}}

@item @f{#C(3.0s1 2.0s-1)} @tab ;A @term{complex} with @term{small float} parts.
@item @f{#C(5 -3)      } @tab ;A ``Gaussian integer''
@item @f{#C(5/3 7.0) } @tab ;Will be converted internally to @f{#C(1.66666 7.0)}
@item @f{#C(0 1)} @tab ;The imaginary unit; that is, i.
@end multitable
@end cartouche
@caption{Complex Number Example}
@end float


For further information, 
see @ref{PrintingComplexes, Section 22.1.3.1.4 (Printing Complexes)}@spc{}and @ref{SyntaxOfComplexes, Section 2.3.2.3 (Syntax of a Complex)}.


@subsubsection Sharpsign A
@anchor{SharpsignA}
@cindex Sharpsign A (reader macro)
@cindex A (sharpsign reader macro)
@cindex array

@f{#@param{n}A}

@f{#@param{n}@f{A}@param{object}} constructs an @param{n}-dimensional @term{array},
using @param{object} as the value of the @kwd{initial-contents} argument
to @code{make-array}.

For example, @f{#2A((0 1 5) (foo 2 (hot dog)))} represents a 2-by-3 matrix:

@lisp
 0       1       5
 foo     2       (hot dog)
@end lisp

In contrast, @f{#1A((0 1 5) (foo 2 (hot dog)))} 
represents a @term{vector} of @term{length} @f{2} 
whose @term{elements} are @term{lists}:

@lisp
 (0 1 5) (foo 2 (hot dog))
@end lisp

@f{#0A((0 1 5) (foo 2 (hot dog)))} represents a zero-dimensional
@term{array} whose sole element is a @term{list}:

@lisp
 ((0 1 5) (foo 2 (hot dog)))
@end lisp

@f{#0A foo} represents 
a zero-dimensional @term{array} whose sole element is the 
@term{symbol} @f{foo}.
The notation @f{#1A foo} is not valid because @f{foo} is
not a @term{sequence}.

If some @term{dimension} of the @term{array}
whose representation is being parsed is found to be @f{0},
all @term{dimensions} to the right 
(@ie{} the higher numbered @term{dimensions})
are also considered to be @f{0}.

For information on how the @term{Lisp printer} prints @term{arrays},
see @ref{PrintingStrings, Section 22.1.3.4 (Printing Strings)},
@ref{PrintingBitVectors, Section 22.1.3.6 (Printing Bit Vectors)},
@ref{PrintingOtherVectors, Section 22.1.3.7 (Printing Other Vectors)},
or @ref{PrintingOtherArrays, Section 22.1.3.8 (Printing Other Arrays)}.


@subsubsection Sharpsign S
@anchor{SharpsignS}
@cindex Sharpsign S (reader macro)
@cindex S (sharpsign reader macro)
@cindex structure

@f{#s(name slot1 value1 slot2 value2 ...)}
denotes a @term{structure}.  This is valid only if @param{name} is the name
of a @term{structure} @term{type} already defined by @code{defstruct} 
and if the @term{structure} @term{type} has a standard constructor function.
Let @param{cm} stand for the name of this constructor function;
then this syntax is equivalent to

@lisp
 #.(cm keyword1 'value1 keyword2 'value2 ...)
@end lisp


where each @param{keywordj} is the result of computing

@lisp
 (intern (string slotj) (find-package 'keyword))
@end lisp


The net effect is that the constructor function is called with the specified
slots having the specified values. 
(This coercion feature is deprecated; in the future, keyword names will 
be taken in the package they are read in, so @term{symbols} that are 
actually in the @code{KEYWORD} @term{package} should be used if that is what is desired.)

Whatever @term{object} the constructor function returns
is returned by the @f{#S} syntax.

For information on how the @term{Lisp printer} prints @term{structures},
see @ref{PrintingStructures, Section 22.1.3.12 (Printing Structures)}.


@subsubsection Sharpsign P
@anchor{SharpsignP}
@cindex Sharpsign P (reader macro)
@cindex P (sharpsign reader macro)
@cindex pathname


@f{#P} reads a following @term{object}, which must be a @term{string}.

@f{#P@metaparam{expression}} is equivalent to 
@f{#.(parse-namestring '@metaparam{expression})},
except that @f{#P} is not affected by @code{*read-eval*}.

For information on how the @term{Lisp printer} prints @term{pathnames},
see @ref{PrintingPathnames, Section 22.1.3.11 (Printing Pathnames)}.



@subsubsection Sharpsign Equal-Sign
@cindex Sharpsign Equal-Sign (reader macro)
@cindex Equal-Sign (sharpsign reader macro)
@cindex *print-circle*

@f{#@param{n}=}

@f{#@param{n}=@param{object}} reads as whatever @term{object}
has @param{object} as its printed representation.  However, that @term{object}
is labeled by @param{n}, a required unsigned decimal integer, for
possible reference by the syntax @f{#@param{n}#}.
The scope of the label is the @term{expression} being read by the outermost
call to @code{read}; within this @term{expression},
the same label may not appear twice.


@subsubsection Sharpsign Sharpsign
@cindex Sharpsign Sharpsign (reader macro)
@cindex Sharpsign (sharpsign reader macro)
@cindex *print-circle*

@f{#@param{n}#}

@f{#@param{n}#}, where @param{n} is a required unsigned decimal
@term{integer},
provides a reference to some @term{object} labeled by @f{#@param{n}=};
that is, @f{#@param{n}#} represents a pointer to the same 
(@code{eq}) @term{object} labeled by @f{#@param{n}=}.
For example, a structure created in the variable @f{y} by this code:

@lisp
 (setq x (list 'p 'q))
 (setq y (list (list 'a 'b) x 'foo x))
 (rplacd (last y) (cdr y))
@end lisp

could be represented in this way:

@lisp
 ((a b) . #1=(#2=(p q) foo #2# . #1#))
@end lisp

Without this notation, but with @code{*print-length*} set to @f{10}
and @code{*print-circle*} set to @nil{},
the structure would print in this way:

@lisp
 ((a b) (p q) foo (p q) (p q) foo (p q) (p q) foo (p q) ...)
@end lisp

A reference @f{#@param{n}#} may only occur after a label @f{#@param{n}=};
forward references are not permitted.  The reference
may not appear as the labeled object itself (that is,
@f{#@param{n}=#@param{n}#}) may not be written 
because the @term{object}
labeled by @f{#@param{n}=} is not well defined in this case.


@subsubsection Sharpsign Plus
@cindex Sharpsign Plus (reader macro)
@cindex Plus (sharpsign reader macro)
@cindex *features*

@f{#+} provides a read-time conditionalization facility;
the syntax is @f{#+@param{test} @param{expression}}.
If the @term{feature expression} @param{test} succeeds,
then this textual notation represents an @term{object}
whose printed representation is @param{expression}.
If the @term{feature expression} @param{test} fails,
then this textual notation is treated as @term{whitespace}@sub2{}; 
that is, it is as if the ``@f{#+} @param{test} @param{expression}'' 
did not appear and only a @term{space} appeared in its place.

For a detailed description of success and failure in @term{feature expressions},
see @ref{FeatureExpressions, Section 24.1.2.1 (Feature Expressions)}.

@f{#+} operates by first reading the @term{feature expression}
and then skipping over the @param{form} if the @term{feature expression} fails.
While reading the @param{test}, the @term{current package} is the @code{KEYWORD} @term{package}.
Skipping over the @param{form} is accomplished by @term{binding} 
@code{*read-suppress*} to @term{true} and then calling @code{read}.

For examples, see @ref{FeatureExpExamples, Section 24.1.2.1.1 (Examples of Feature Expressions)}.


@subsubsection Sharpsign Minus
@cindex Sharpsign Minus (reader macro)
@cindex Minus (sharpsign reader macro)
@cindex *features*

@f{#-} is like @f{#+} 
except that it skips the @param{expression} if the @param{test} succeeds; 
that is,

@lisp
#-@param{test} @param{expression} @EQ{} #+(not @param{test}) @param{expression}
@end lisp


For examples, see @ref{FeatureExpExamples, Section 24.1.2.1.1 (Examples of Feature Expressions)}.


@subsubsection Sharpsign Vertical-Bar
@cindex Sharpsign Vertical-Bar (reader macro)
@cindex Vertical-Bar (sharpsign reader macro)
@cindex comment

@f{#|...|#} is treated as a comment by the reader.
It must be balanced with respect to other occurrences of @f{#|} and @f{|#},
but otherwise may contain any characters whatsoever.

@unnumberedsubsubsec 2.4.8.19.1 Examples of Sharpsign Vertical-Bar


The following are some examples that exploit the @f{#|...|#} notation:

@lisp
;;; In this example, some debugging code is commented out with #|...|#
;;; Note that this kind of comment can occur in the middle of a line
;;; (because a delimiter marks where the end of the comment occurs)
;;; where a semicolon comment can only occur at the end of a line 
;;; (because it comments out the rest of the line).
 (defun add3 (n) #|(format t "~&Adding 3 to ~D." n)|# (+ n 3))
@goodbreak{}
;;; The examples that follow show issues related to #| ... |# nesting.

;;; In this first example, #| and |# always occur properly paired,
;;; so nesting works naturally.
 (defun mention-fun-fact-1a ()
   (format t "CL uses ; and #|...|# in comments."))
@EV{} MENTION-FUN-FACT-1A
 (mention-fun-fact-1a)
@OUT{} CL uses ; and #|...|# in comments.
@EV{} NIL
 #| (defun mention-fun-fact-1b ()
      (format t "CL uses ; and #|...|# in comments.")) |#
 (fboundp 'mention-fun-fact-1b) @EV{} NIL
@goodbreak{}
;;; In this example, vertical-bar followed by sharpsign needed to appear
;;; in a string without any matching sharpsign followed by vertical-bar
;;; having preceded this.  To compensate, the programmer has included a
;;; slash separating the two characters.  In case 2a, the slash is 
;;; unnecessary but harmless, but in case 2b, the slash is critical to
;;; allowing the outer #| ... |# pair match.  If the slash were not present,
;;; the outer comment would terminate prematurely.
 (defun mention-fun-fact-2a ()
   (format t "Don't use |@bsl{}# unmatched or you'll get in trouble!"))
@EV{} MENTION-FUN-FACT-2A
 (mention-fun-fact-2a)
@OUT{} Don't use |# unmatched or you'll get in trouble!
@EV{} NIL
 #| (defun mention-fun-fact-2b ()
      (format t "Don't use |@bsl{}# unmatched or you'll get in trouble!") |#
 (fboundp 'mention-fun-fact-2b) @EV{} NIL
@goodbreak{}
;;; In this example, the programmer attacks the mismatch problem in a
;;; different way.  The sharpsign vertical bar in the comment is not needed
;;; for the correct parsing of the program normally (as in case 3a), but 
;;; becomes important to avoid premature termination of a comment when such 
;;; a program is commented out (as in case 3b).
 (defun mention-fun-fact-3a () ; #|
   (format t "Don't use |# unmatched or you'll get in trouble!"))
@EV{} MENTION-FUN-FACT-3A
 (mention-fun-fact-3a)
@OUT{} Don't use |# unmatched or you'll get in trouble!
@EV{} NIL
 #|
 (defun mention-fun-fact-3b () ; #|
   (format t "Don't use |# unmatched or you'll get in trouble!"))
 |#
 (fboundp 'mention-fun-fact-3b) @EV{} NIL
@end lisp



@unnumberedsubsubsec 2.4.8.19.2 Notes about Style for Sharpsign Vertical-Bar


Some text editors that purport to understand Lisp syntax treat any @f{|...|}
as balanced pairs that cannot nest (as if they were just balanced pairs of 
the multiple escapes used in notating certain symbols).  To compensate for 
this deficiency, some programmers use the notation @f{#||...#||...||#...||#}
instead of @f{#|...#|...|#...|#}.   Note that this alternate usage is not
a different @term{reader macro}; it merely exploits the fact that the additional
vertical-bars occur within the comment in a way that tricks certain text editor
into better supporting nested comments.  As such, one might sometimes see code
like:

@lisp
 #|| (+ #|| 3 ||# 4 5) ||# 
@end lisp


Such code is equivalent to:

@lisp
 #| (+ #| 3 |# 4 5) |#
@end lisp




@subsubsection Sharpsign Less-Than-Sign
@anchor{SharpsignLeftAngle}
@cindex Sharpsign Less-Than-Sign (reader macro)
@cindex Less-Than-Sign (sharpsign reader macro)

@tt{ #<} is not valid reader syntax.
The @term{Lisp reader} will signal an error 
@oftype{reader-error}
on encountering @f{#<}.
This syntax is typically used in the printed representation 
of @term{objects} that cannot be read back in.  


@subsubsection Sharpsign Whitespace
@cindex Sharpsign Whitespace

@f{#} followed immediately by @term{whitespace}@sub1{} is not valid reader syntax.
The @term{Lisp reader} will signal an error @oftype{reader-error} if it
encounters the reader macro notation @f{#@NewlineChar{}} or @f{#@SpaceChar{}}.


@subsubsection Sharpsign Right-Parenthesis
@cindex Sharpsign Right-Parenthesis

This is not valid reader syntax.

The @term{Lisp reader} will signal an error 
@oftype{reader-error}
upon encountering @f{#)}.



@node Re-Reading Abbreviated Expressions
@subsection Re-Reading Abbreviated Expressions
@cindex Dot Dot
@cindex ..
@cindex Dot Dot Dot
@cindex ...
@cindex Sharpsign Whitespace
@cindex Sharpsign Right-Parenthesis

Note that the @term{Lisp reader} will 
generally
signal an error @oftype{reader-error}
when reading an @term{expression}@sub2{} that has been
abbreviated because of length or level limits 
(see @code{*print-level*},
@code{*print-length*},
and @code{*print-lines*})
due to restrictions on ``@f{..}'', ``@f{...}'', ``@f{#}'' followed by @term{whitespace}@sub1{},
and ``@f{#)}''.




@node Evaluation and Compilation
@chapter Evaluation and Compilation
@menu
* Evaluation::
* Compilation::
* Declarations::
* Lambda Lists::
* Error Checking in Function Calls::
* Traversal Rules and Side Effects::
* Destructive Operations::

Dictionary

* lambda (Symbol)::
* lambda (Macro)::
* compile::
* eval::
* eval-when::
* load-time-value::
* quote::
* compiler-macro-function::
* define-compiler-macro::
* defmacro::
* macro-function::
* macroexpand; macroexpand-1::
* define-symbol-macro::
* symbol-macrolet::
* *macroexpand-hook*::
* proclaim::
* declaim::
* declare::
* ignore; ignorable::
* dynamic-extent::
* type::
* inline; notinline::
* ftype::
* declaration::
* optimize::
* special::
* locally::
* the::
* special-operator-p::
* constantp::
@end menu

@node Evaluation
@section Evaluation


@term{Execution} of @term{code} can be accomplished by a variety of means ranging
from direct interpretation of a @term{form} representing a @term{program}
to invocation of @term{compiled code} produced by a @term{compiler}.

@cindex evaluation
@dfn{Evaluation} is the process by which a @term{program} is @term{executed} in @clisp{}.
The mechanism of @term{evaluation} is manifested
both implicitly through the effect of the @term{Lisp read-eval-print loop},
and  explicitly through the presence of the @term{functions} 
@code{eval},
@code{compile},
@code{compile-file},
and @code{load}.
Any of these facilities might share the same execution strategy, 
or each might use a different one.

The behavior of a @term{conforming program} processed by @code{eval}
and by @code{compile-file} might differ; see @ref{SemanticConstraints, Section 3.2.2.3 (Semantic Constraints)}.

@term{Evaluation} can be understood in terms of a model in which an
interpreter recursively traverses a @term{form} performing each
step of the computation as it goes.  
This model, which describes the semantics of @clisp{}@spc{}@term{programs},
is described in @ref{The Evaluation Model, Section 3.1.2 (The Evaluation Model)}.

@menu
* Introduction to Environments::
* The Evaluation Model::
* Lambda Expressions::
* Closures and Lexical Binding::
* Shadowing::
* Extent::
* Return Values::
@end menu
@node Introduction to Environments
@subsection Introduction to Environments

A @newterm{binding} is an association between a @term{name} and
that which the name denotes.  @term{Bindings} are @term{established}
in a @term{lexical environment} or a @term{dynamic environment}
by particular @term{special operators}.

An @newterm{environment} is a set of @term{bindings} and other information
used during evaluation (@eg{} to associate meanings with names).

@term{Bindings} in an @term{environment} are partitioned into 
@cindex namespace
@dfn{namespaces}.
A single @term{name} can simultaneously have more than one
associated @term{binding} per @term{environment},
but can have only one associated @term{binding} per @term{namespace}.

@subsubsection The Global Environment

The @newterm{global environment} is that part of an @term{environment}
that contains @term{bindings} with both @term{indefinite scope} 
and @term{indefinite extent}.
The @term{global environment} contains, among other things, the following:


@itemize @bullet{}
@item @term{bindings} of @term{dynamic variables} and @term{constant variables}.
@item @term{bindings} of @term{functions}, @term{macros}, and @term{special operators}.
@item
@term{bindings} of @term{compiler macros}.
@item @term{bindings} of @term{type} and @term{class} @term{names}
@item information about @term{proclamations}.
@end itemize



@subsubsection Dynamic Environments

A @newterm{dynamic environment} for @term{evaluation} is that part of an
@term{environment} that contains @term{bindings} whose duration
is bounded by points of @term{establishment} and @term{disestablishment} 
within the execution of the @term{form} that
established the @term{binding}.
A @term{dynamic environment} contains, among other things, the following:


@itemize @bullet{}
@item @term{bindings} for @term{dynamic variables}.
@item information about @term{active} @term{catch tags}.
@item information about @term{exit points} established by @code{unwind-protect}.
@item information about @term{active} @term{handlers} and @term{restarts}.
@end itemize


The @term{dynamic environment} that is active at any given point 
in the @term{execution} of a @term{program} is referred to by 
definite reference as ``the current @term{dynamic environment},''
or sometimes as just ``the @term{dynamic environment}.''

Within a given @term{namespace},
a @term{name} is said to be @term{bound}
in a @term{dynamic environment} if there is a @term{binding} 
associated with its @term{name} in the @term{dynamic environment} 
or, if not, there is a @term{binding} 
associated with its name in the @term{global environment}.


@subsubsection Lexical Environments

A @newterm{lexical environment} for @term{evaluation} at some position in a @term{program}
is that part of the @term{environment} that contains information having 
@term{lexical scope} within the @term{forms} containing that position.
A @term{lexical environment} contains, among other things, the following:


@itemize @bullet{}
@item @term{bindings} of @term{lexical variables} and @term{symbol macros}.
@item @term{bindings} of @term{functions} and @term{macros}.
(Implicit in this is information about those @term{compiler macros} 
that are locally disabled.)
@item @term{bindings} of @term{block tags}.
@item @term{bindings} of @term{go tags}.
@item information about @term{declarations}.
@end itemize


The @term{lexical environment} that is active at any given position
in a @term{program} being semantically processed is referred to by
definite reference as ``the current @term{lexical environment},''
or sometimes as just ``the @term{lexical environment}.''  

Within a given @term{namespace},
a @term{name} is said to be @term{bound} in a @term{lexical environment}
if there is a @term{binding} 
associated with its @term{name}
in the @term{lexical environment} or, if not, there is a @term{binding} 
associated with its name in the @term{global environment}.

@unnumberedsubsubsec 3.1.1.3.1 The Null Lexical Environment

@anchor{NullLexicalEnv}

The @newterm{null lexical environment} is equivalent to the @term{global environment}.

Although in general the representation of an @term{environment} @term{object}
is @term{implementation-dependent}, @nil{}@spc{}can be used in any situation where an
@term{environment} @term{object} is called for in order to denote 
the @term{null lexical environment}.



@subsubsection Environment Objects
@anchor{EnvObjs}

Some @term{operators} make use of an @term{object}, 
called an @newterm{environment object},
that represents the set of @term{lexical bindings} needed to perform
semantic analysis on a @term{form} in a given @term{lexical environment}.
The set of @term{bindings} in an @term{environment object}
may be a subset of the @term{bindings} that would be needed to actually 
perform an @term{evaluation}; for example, @term{values} associated with
@term{variable} @term{names} and @term{function names} in the corresponding
@term{lexical environment} might not be available in an @term{environment object}.

The @term{type} and nature of an @term{environment object} is @term{implementation-dependent}.
The @term{values} of @term{environment parameters} to @term{macro functions}
are examples of @term{environment objects}.

The @term{object} @nil{}@spc{}when used as an @term{environment object}
denotes the @term{null lexical environment};
see @ref{NullLexicalEnv, Section 3.1.1.3.1 (The Null Lexical Environment)}.



@node The Evaluation Model
@subsection The Evaluation Model

A @clisp{}@spc{}system evaluates @term{forms} with respect to lexical,
dynamic, and global @term{environments}.  The following sections
describe the components of the @clisp{}@spc{}evaluation model.

@subsubsection Form Evaluation

@term{Forms} fall into three categories:
@term{symbols}, @term{conses}, and @term{self-evaluating objects}.
The following sections explain these categories.

@unnumberedsubsubsec 3.1.2.1.1 Symbols as Forms

@anchor{SymbolsAsForms}

If a @term{form} is a @term{symbol},
then it is either a @term{symbol macro} or a @term{variable}.

The @term{symbol} names a @term{symbol macro} 
if there is a @term{binding} of the @term{symbol} as a @term{symbol macro}
in the current @term{lexical environment} 
(see @code{define-symbol-macro} and @code{symbol-macrolet}).
If the @term{symbol} is a @term{symbol macro},
its expansion function is obtained.
The expansion function is a function of two arguments, and is invoked
by calling the @term{macroexpand hook} with 
the expansion function as its first argument,
the @term{symbol} as its second argument,
and an @term{environment object} (corresponding to the current @term{lexical environment})
as its third argument.
The @term{macroexpand hook}, in turn, calls the expansion function with the
@term{form} as its first argument and the @term{environment} as its second argument.
The @term{value} of the expansion function, which is passed through
by the @term{macroexpand hook}, is a @term{form}. 
This resulting @term{form} is processed in place of the original @term{symbol}.

If a @term{form} is a @term{symbol} that is not a @term{symbol macro},
then it is the @term{name} of a @term{variable}, and the @term{value} of that
@term{variable} is returned. There are three kinds of variables:
@term{lexical variables},
@term{dynamic variables},
and
@term{constant variables}.
A @term{variable} can store one @term{object}.
The main operations on a @term{variable} are 
to @term{read}@sub1{} and 
to @term{write}@sub1{}
its @term{value}.

An error @oftype{unbound-variable} should be signaled if
an @term{unbound variable} is referenced.

@term{Non-constant variables} can be @term{assigned} by using @code{setq} 
or @term{bound}@sub3{} by using @code{let}.
@Thenextfigure{}@spc{}lists some @term{defined names} that
are applicable to assigning, binding, and defining @term{variables}.


@float Figure,fig3.1
@cartouche
@multitable{defparameter}{multiple-value-bind}{symbol-value}

@item boundp @tab let @tab progv
@item defconstant @tab let* @tab psetq
@item defparameter @tab makunbound @tab set
@item defvar @tab multiple-value-bind @tab setq
@item lambda @tab multiple-value-setq @tab symbol-value
@end multitable
@end cartouche
@caption{Some Defined Names Applicable to Variables}
@end float


The following is a description of each kind of variable.

@unnumberedsubsubsec 3.1.2.1.1.1 Lexical Variables


A @term{lexical variable} is a @term{variable} that can be referenced only within 
the @term{lexical scope} of the @term{form} that establishes that @term{variable};
@term{lexical variables} have @term{lexical scope}.
Each time a @term{form} creates a @term{lexical binding} of a @term{variable},
a @term{fresh} @term{binding} is @term{established}.

Within the @term{scope} of a @term{binding} for a @term{lexical variable} @term{name},
uses of that @term{name} as a @term{variable} are considered to be references
to that @term{binding} except where the @term{variable} is @term{shadowed}@sub2{} 
by a @term{form} that @term{establishes} a @term{fresh} @term{binding} for that 
@term{variable} @term{name},
or by a @term{form} that locally @term{declares} the @term{name} @code{special}.

A @term{lexical variable} always has a @term{value}.
There is no @term{operator} that introduces a @term{binding} for a
@term{lexical variable} without giving it an initial @term{value}, nor
is there any @term{operator} that can make a @term{lexical variable} be @term{unbound}.

@term{Bindings} of @term{lexical variables} are found in the @term{lexical environment}.


@unnumberedsubsubsec 3.1.2.1.1.2 Dynamic Variables


A @term{variable} is a @term{dynamic variable} if one of the following
conditions hold:


@itemize @bullet{}

@item It is locally declared or globally proclaimed @code{special}.

@item It occurs textually within a @term{form} that
creates a @term{dynamic binding} for a @term{variable} of the @term{same} @term{name},
and the @term{binding} is not @term{shadowed}@sub2{} by a @term{form}
that creates a @term{lexical binding} of the same @term{variable} @term{name}.
@end itemize


A @term{dynamic variable} can be referenced at any time in any @term{program};
there is no textual limitation on references to @term{dynamic variables}.
At any given time, all @term{dynamic variables} with a given name refer to 
exactly one @term{binding}, either in the @term{dynamic environment}
or in the @term{global environment}.

The @term{value} part of the @term{binding} for a @term{dynamic variable} might
be empty; in this case, the @term{dynamic variable} is said to have no @term{value},
or to be @term{unbound}.  A @term{dynamic variable} can be made @term{unbound}
by using @code{makunbound}.

The effect of @term{binding} a @term{dynamic variable} is to create
a new @term{binding} to which all references to that @term{dynamic variable}
in any @term{program} refer for the duration of the @term{evaluation} of the @term{form}
that creates the @term{dynamic binding}.

A @term{dynamic variable} can be referenced outside the @term{dynamic extent} of
a @term{form} that @term{binds} it.  Such a @term{variable} is sometimes called 
a ``global variable'' but is still in all respects just a @term{dynamic variable}
whose @term{binding} happens to exist in the @term{global environment} rather than in some
@term{dynamic environment}.

A @term{dynamic variable} is @term{unbound}
unless and until explicitly assigned a value, except for 
those variables whose initial value is 
defined in this specification or by an @term{implementation}.


@unnumberedsubsubsec 3.1.2.1.1.3 Constant Variables

@anchor{ConstantVars}

Certain variables, called @term{constant variables}, are reserved as ``named constants.''  
The consequences are undefined if an attempt is made to 
assign a value to,
or create
a @term{binding} for a @term{constant variable}, 
except that a `compatible' redefinition of a @term{constant variable}
using @code{defconstant} is permitted; see the @term{macro} @ref{defconstant}.

@term{Keywords}, 
@term{symbols} defined by @clisp{}@spc{}or the @term{implementation}
as constant (such as @nil{}, @code{t}, and @code{pi}),
and @term{symbols} declared as constant using @code{defconstant}
are @term{constant variables}.


@unnumberedsubsubsec 3.1.2.1.1.4 Symbols Naming Both Lexical and Dynamic Variables


The same @term{symbol} can name both 
a @term{lexical variable} 
and a @term{dynamic variable},
but never in the same @term{lexical environment}.

In the following example, the @term{symbol} @f{x} is used,
at different times, 
as the @term{name} of a @term{lexical variable}
and as the @term{name} of a @term{dynamic variable}.

@lisp
 (let ((x 1))            ;Binds a special variable X
   (declare (special x))
   (let ((x 2))          ;Binds a lexical variable X
     (+ x                ;Reads a lexical variable X
        (locally (declare (special x))
                 x))))   ;Reads a special variable X
@EV{} 3
@end lisp




@unnumberedsubsubsec 3.1.2.1.2 Conses as Forms


A @term{cons} that is used as a @term{form} is called a @term{compound form}.

If the @term{car} of that @term{compound form} is a @term{symbol}, 
that @term{symbol} is the @term{name} of an @term{operator},
and the @term{form} is either a @term{special form}, a @term{macro form},
or a @term{function form}, depending on the @term{function} @term{binding} 
of the @term{operator} in the current @term{lexical environment}.
If the @term{operator} is neither a @term{special operator}
nor a @term{macro name}, it is assumed to be a @term{function name}
(even if there is no definition for such a @term{function}).

If the @term{car} of the @term{compound form} is not a @term{symbol},
then that @term{car} must be a @term{lambda expression},
in which case the @term{compound form} is a @term{lambda form}.

How a @term{compound form} is processed depends on whether it is 
classified as a @term{special form}, a @term{macro form}, 
a @term{function form}, or a @term{lambda form}.

@unnumberedsubsubsec 3.1.2.1.2.1 Special Forms


A @term{special form} is a @term{form} with special syntax,
special evaluation rules, or both, possibly manipulating the
evaluation environment, control flow, or both.
A @term{special operator} has access to
the current @term{lexical environment} 
and the current @term{dynamic environment}.
Each @term{special operator} defines the manner in which its @term{subexpressions}
are treated---which are @term{forms}, which are special syntax, @etc{}.

Some @term{special operators} create new 
lexical or dynamic @term{environments} for use during the 
@term{evaluation} of @term{subforms}
of the @term{special form}.  For example, @code{block} creates a
new @term{lexical environment} that is the same as the one in force
at the point of evaluation of the @code{block} @term{form}
with the addition of a @term{binding} of the @code{block} name
to an @term{exit point} from the @code{block}.

The set of @term{special operator} @term{names} is fixed in @clisp{}; 
no way is provided for the user to define a @term{special operator}.
@Thenextfigure{}@spc{}lists all of the @clisp{}@spc{}@term{symbols}
that have definitions as @term{special operators}.



@float Figure,CLSpecialOps
@cartouche
@multitable{eval-when}{multiple-value-prog1}{symbol-macrolet}

@item block @tab let* @tab return-from
@item catch @tab load-time-value @tab setq
@item eval-when @tab locally @tab symbol-macrolet
@item flet @tab macrolet @tab tagbody
@item function @tab multiple-value-call @tab the
@item go @tab multiple-value-prog1 @tab throw
@item if @tab progn @tab unwind-protect
@item labels @tab progv @tab 
@item let @tab quote @tab 
@end multitable
@end cartouche
@caption{Common Lisp Special Operators}
@end float



@unnumberedsubsubsec 3.1.2.1.2.2 Macro Forms


If the @term{operator} names a @term{macro},
its associated @term{macro function} is applied
to the entire @term{form} and the result of that application is
used in place of the original @term{form}.

Specifically, a @term{symbol} names a @term{macro} in a given @term{lexical environment} if
@code{macro-function} is @term{true} of the 
@term{symbol} and that @term{environment}.
The @term{function} returned by @code{macro-function}
is a @term{function} of two arguments, called the
expansion function.
The expansion function is invoked by calling the @term{macroexpand hook} with
the expansion function as its first argument,
the entire @term{macro form} as its second argument,
and an @term{environment object} (corresponding to the current @term{lexical environment})
as its third argument.
The @term{macroexpand hook}, in turn, calls the expansion function with the
@term{form} as its first argument and the @term{environment} as its second argument.
The @term{value} of the expansion function, which is passed through
by the @term{macroexpand hook}, is a @term{form}. 
The returned @term{form} is @term{evaluated} in place of the original @term{form}.

The consequences are undefined if a @term{macro function} destructively modifies
any part of its @term{form} argument.

A @term{macro name} is not a @term{function designator},
and cannot be used as the @param{function} argument to @term{functions} 
such as @code{apply}, @code{funcall}, or @code{map}.

An @term{implementation} is free to implement a @clisp{}@spc{}@term{special operator}
as a @term{macro}.  An @term{implementation} is free to implement any
@term{macro} @term{operator} as a @term{special operator}, but only
if an equivalent definition of the @term{macro} is also provided.

@Thenextfigure{}@spc{}lists some @term{defined names} that are applicable
to @term{macros}.


@float Figure,fig3.3
@cartouche
@multitable{*macroexpand-hook*}{macro-function}{macroexpand-1}

@item *macroexpand-hook* @tab macro-function @tab macroexpand-1
@item defmacro @tab macroexpand @tab macrolet
@end multitable
@end cartouche
@caption{Defined names applicable to macros}
@end float



@unnumberedsubsubsec 3.1.2.1.2.3 Function Forms

@anchor{FunctionForms}

If the @term{operator} is a @term{symbol} naming a @term{function},
the @term{form} represents a @term{function form},
and the @term{cdr} of the list contains the @term{forms} 
which when evaluated will supply the arguments passed to the @term{function}.

When a @term{function name} is not defined, 
an error @oftype{undefined-function} should be signaled at run time;
see @ref{SemanticConstraints, Section 3.2.2.3 (Semantic Constraints)}.

A @term{function form} is evaluated as follows:

The @term{subforms} in the @term{cdr} of the original @term{form}
are evaluated in left-to-right order in the current lexical and 
dynamic @term{environments}.  The @term{primary value} of each
such @term{evaluation} becomes an @term{argument} to the named @term{function};
any additional @term{values} returned by the @term{subforms} are discarded.

The @term{functional value} of the @term{operator} 
is retrieved from the @term{lexical environment},
and that @term{function} is invoked with the indicated arguments.

Although the order of @term{evaluation} of 
the @term{argument} @term{subforms} themselves is 
strictly left-to-right, it is not specified whether 
the definition of the @term{operator} in a @term{function form} is looked up 
before the @term{evaluation} of the @term{argument} @term{subforms},
after the @term{evaluation} of the @term{argument} @term{subforms},
or between the @term{evaluation} of any two @term{argument} @term{subforms} 
if there is more than one such @term{argument} @term{subform}.  
For example, the following might return 23 or@tie{}24.

@lisp
 (defun foo (x) (+ x 3))
 (defun bar () (setf (symbol-function 'foo) #'(lambda (x) (+ x 4))))
 (foo (progn (bar) 20))
@end lisp


A @term{binding} for a @term{function name} can be @term{established} in 
one of several ways.  A @term{binding} for a @term{function name} in 
the @term{global environment} can be @term{established} by 
@code{defun},
@SETFof{fdefinition},
@SETFof{symbol-function},
@code{ensure-generic-function},
@code{defmethod} (implicitly, due to @code{ensure-generic-function}),
or
@code{defgeneric}.
A @term{binding} for a @term{function name} in the @term{lexical environment}
can be @term{established} by
@code{flet}
or @code{labels}.

@Thenextfigure{}@spc{}lists some @term{defined names} that are applicable to @term{functions}.


@float Figure,fig3.4
@cartouche
@multitable{call-arguments-limit}{fdefinition}{multiple-value-call}

@item apply @tab fdefinition @tab mapcan
@item call-arguments-limit @tab flet @tab mapcar
@item complement @tab fmakunbound @tab mapcon
@item constantly @tab funcall @tab mapl
@item defgeneric @tab function @tab maplist
@item defmethod @tab functionp @tab multiple-value-call
@item defun @tab labels @tab reduce
@item fboundp @tab map @tab symbol-function
@end multitable
@end cartouche
@caption{Some function-related defined names}
@end float



@unnumberedsubsubsec 3.1.2.1.2.4 Lambda Forms

@anchor{LambdaForms}

A @term{lambda form} is similar to a @term{function form}, except that
the @term{function name} is replaced by a @term{lambda expression}.

A @term{lambda form} is equivalent to using @term{funcall} of a
@term{lexical closure} of the @term{lambda expression} on the given @term{arguments}.
(In practice, some compilers are more likely to produce inline code 
for a @term{lambda form} than for an arbitrary named function 
that has been declared @code{inline}; however, such a difference
is not semantic.)

For further information, see @ref{Lambda Expressions, Section 3.1.3 (Lambda Expressions)}.



@unnumberedsubsubsec 3.1.2.1.3 Self-Evaluating Objects


A @term{form} that is neither a @term{symbol} nor a @term{cons} is 
defined to be a @term{self-evaluating object}.  @term{Evaluating}
such an @term{object} @term{yields} the @term{same} @term{object} 
as a result.

Certain specific @term{symbols} and @term{conses} might also happen 
to be ``self-evaluating'' but only as a special case of a more 
general set of rules for the @term{evaluation} of @term{symbols} and
@term{conses}; such @term{objects} are not considered to be
@term{self-evaluating objects}.

The consequences are undefined if @term{literal objects} (including
@term{self-evaluating objects}) are destructively modified.

@unnumberedsubsubsec 3.1.2.1.3.1 Examples of Self-Evaluating Objects


@term{Numbers}, @term{pathnames}, and @term{arrays} are examples of
@term{self-evaluating objects}.

@lisp
 3 @EV{} 3
 #c(2/3 5/8) @EV{} #C(2/3 5/8)
 #p"S:[BILL]OTHELLO.TXT" @EV{} #P"S:[BILL]OTHELLO.TXT"
 #(a b c) @EV{} #(A B C)
 "fred smith" @EV{} "fred smith"
@end lisp






@node Lambda Expressions
@subsection Lambda Expressions

In a @term{lambda expression},
the body is evaluated in a lexical @term{environment} that is formed by
adding the @term{binding} of 
each @term{parameter} in the @term{lambda list}
with the corresponding @term{value} from the @term{arguments}
to the current lexical @term{environment}.

For further discussion of how @term{bindings} are @term{established} 
based on the @term{lambda list}, see @ref{Lambda Lists, Section 3.4 (Lambda Lists)}.

The body of a @term{lambda expression} is an @term{implicit progn};
the @term{values} it returns are returned by the @term{lambda expression}.


@node Closures and Lexical Binding
@subsection Closures and Lexical Binding

A @term{lexical closure} is a @term{function} that can refer to and alter
the values of @term{lexical bindings} @term{established} by @term{binding} @term{forms}
that textually include the function definition.

Consider this code, where @f{x} is not declared @code{special}:

@lisp
 (defun two-funs (x)
   (list (function (lambda () x))
         (function (lambda (y) (setq x y)))))
 (setq funs (two-funs 6))
 (funcall (car funs)) @EV{} 6
 (funcall (cadr funs) 43) @EV{} 43
 (funcall (car funs)) @EV{} 43
@end lisp


@Thespecform{function} coerces a 
@term{lambda expression} into a @term{closure} in which the 
@term{lexical environment} in effect when the @term{special form} is
evaluated is captured along with the @term{lambda expression}.

The function @f{two-funs} returns a @term{list} of two 
@term{functions}, each of which refers to the @term{binding} of the
variable @f{x} created on entry to the function @f{two-funs} when it
was called.
This variable has the value @f{6}
initially, but @code{setq} can alter this @term{binding}.
The @term{lexical closure} created for the first 
@term{lambda expression} does not ``snapshot'' the @term{value} @f{6} for @f{x}
when the @term{closure} is created; rather it captures the @term{binding} of @f{x}.
The second @term{function} can be used to alter the @term{value} in the same (captured)
@term{binding} (to @f{43}, in the example), and
this altered variable binding then affects the value returned by the first @term{function}.


In situations where a @term{closure} of a 
@term{lambda expression} over the same set of @term{bindings} may be
produced more than once, the various resulting @term{closures} may
or may not be @term{identical}, at the discretion of the @term{implementation}.
That is, two @term{functions} that are behaviorally
indistinguishable might or might not be @term{identical}.
Two @term{functions} that are behaviorally distinguishable are @term{distinct}.
For example:

@lisp
 (let ((x 5) (funs '()))
   (dotimes (j 10)                          
     (push #'(lambda (z)                        
               (if (null z) (setq x 0) (+ x z)))
           funs))
   funs)
@end lisp

The result of the above @term{form} is a @term{list} of ten @term{closures}.
Each requires only the @term{binding} of @f{x}.
It is the same @term{binding} in each case, 
but the ten @term{closure} @term{objects} might or might not be @term{identical}.
On the other hand, the result of the @term{form}

@lisp
 (let ((funs '()))     
   (dotimes (j 10)
     (let ((x 5))
       (push (function (lambda (z)
                        (if (null z) (setq x 0) (+ x z))))
             funs)))
  funs)
@end lisp

is also a @term{list} of ten @term{closures}.
However, in this case no two of the @term{closure} @term{objects} can
be @term{identical} because each @term{closure} is closed over a distinct
@term{binding} of @f{x}, and these @term{bindings} can be behaviorally
distinguished because of the use of @code{setq}.

The result of the @term{form}

@lisp
 (let ((funs '()))
   (dotimes (j 10)
     (let ((x 5))
       (push (function (lambda (z) (+ x z)))
            funs)))
   funs)
@end lisp

is a @term{list} of ten @term{closure} @term{objects} that
might or might not be @term{identical}.
A different @term{binding} of @f{x} is involved for
each @term{closure}, but the @term{bindings} cannot be distinguished
because their values are the @term{same} and immutable (there being no occurrence
of @code{setq} on @f{x}).  A compiler could internally
transform the @term{form} to

@lisp
 (let ((funs '()))
   (dotimes (j 10)
     (push (function (lambda (z) (+ 5 z)))
           funs))
  funs)
@end lisp

where the @term{closures} may be @term{identical}.

It is possible that a @term{closure} does not
close over any variable bindings.
In the code fragment

@lisp
 (mapcar (function (lambda (x) (+ x 2))) y)
@end lisp

the function @f{(lambda (x) (+ x 2))} contains no references to any outside
object. In this case, the same @term{closure} might be returned
for all evaluations of the @code{function} @term{form}.


@node Shadowing
@subsection Shadowing


If two @term{forms} that @term{establish} @term{lexical bindings} with
the same @term{name} @mat{N} are textually nested, then references to @mat{N}
within the inner @term{form} refer to the @term{binding} established by
the inner @term{form}; the inner @term{binding} for @mat{N}
@cindex shadow
@dfn{shadows} the outer @term{binding} for @mat{N}.  Outside the inner
@term{form} but inside the outer one, references to @mat{N} refer to the
@term{binding} established by the outer @term{form}.  For example:

@lisp
 (defun test (x z)
   (let ((z (* x 2)))
     (print z))
   z)
@end lisp

The @term{binding} of the variable @f{z} by
@code{let} shadows
the @term{parameter} binding for the function @f{test}.  The reference to the
variable @f{z} in the @code{print} @term{form} refers to the @code{let} binding.
The reference to @f{z} at the end of the function @f{test} 
refers to the @term{parameter} named @f{z}.

Constructs that are lexically scoped act as if new names were
generated for each @term{object} on each execution.  Therefore,
dynamic shadowing cannot occur.  For example:

@lisp
 (defun contorted-example (f g x)
   (if (= x 0)
       (funcall f)
       (block here
          (+ 5 (contorted-example g
                                  #'(lambda () (return-from here 4))
                                  (- x 1))))))
@end lisp

Consider the call @f{(contorted-example nil nil 2)}.  This produces
@f{4}.  During the course of execution, there are three
calls to @f{contorted-example}, interleaved with two 
blocks:

@lisp
 (contorted-example nil nil 2)
   (block here@ssso{} ...)
     (contorted-example nil #'(lambda () (return-from here@ssso{} 4)) 1)
       (block here@ssst{} ...)
         (contorted-example #'(lambda () (return-from here@ssso{} 4))
                            #'(lambda () (return-from here@ssst{} 4))
                            0)
             (funcall f)
                    where f @EV{} #'(lambda () (return-from here@ssso{} 4))
                 (return-from here@ssso{} 4)
@end lisp

At the time the @f{funcall} is executed
there are two @code{block} @term{exit points} outstanding, each apparently
named @f{here}.
The @code{return-from} @term{form} executed as a result of the @f{funcall}
operation
refers to the outer outstanding @term{exit point}
(here@ssso{}), not the
inner one (here@ssst{}).
It
refers to that @term{exit point} textually visible at the point of
execution of @code{function}
(here abbreviated by the @f{#'} syntax) that resulted
in creation of the @term{function} @term{object} actually invoked by 
@code{funcall}.                       

If, in this example, one were to change the @f{(funcall f)} to
@f{(funcall g)}, then the value of the call @f{(contorted-example nil nil 2)}
would be @f{9}.  The value would change because 
@code{funcall} would cause the
execution of @f{(return-from here@ssst{}@spc{}4)}, thereby causing
a return from the inner @term{exit point} (here@ssst{}).
When that occurs, the value @f{4} is returned from the
middle invocation of @f{contorted-example}, @f{5} is added to that
to get @f{9}, and that value is returned from the outer block
and the outermost call to @f{contorted-example}.  The point
is that the choice of @term{exit point}
returned from has nothing to do with its
being innermost or outermost; rather,
it depends on the lexical environment
that is packaged up with a @term{lambda expression} when
@code{function} is executed.


@node Extent
@subsection Extent
@f{Contorted-example} works only because the
@term{function} named by @f{f} is invoked during the @term{extent} of the 
@term{exit point}.
Once the flow of execution has left the block,
the @term{exit point} is @term{disestablished}.  For example:

@lisp
 (defun invalid-example ()
   (let ((y (block here #'(lambda (z) (return-from here z)))))
     (if (numberp y) y (funcall y 5))))
@end lisp

One might expect the call @f{(invalid-example)} to produce @f{5}
by the following incorrect reasoning:
@code{let} binds @f{y} to the
value of @code{block}; this value is a @term{function} resulting
from the @term{lambda expression}.  Because @f{y} is not a number, it is
invoked on the value @f{5}.  The @code{return-from} should then
return this value from the                      
@term{exit point} named @f{here}, thereby
exiting from the block again and giving @f{y} the value @f{5}
which, being a number, is then returned as the value of the call
to @f{invalid-example}.

The argument fails only because @term{exit points} have 
@term{dynamic extent}.  The argument is correct up to the execution of
@code{return-from}.  The execution of @code{return-from}
should signal an error @oftype{control-error}, however, not
because it cannot refer to the @term{exit point}, but because it
does correctly refer to an @term{exit point} and that 
@term{exit point} has been @term{disestablished}.

A reference by name to a dynamic @term{exit point} binding such as
a @term{catch tag} refers to the most recently 
@term{established} @term{binding} of that name that has not been 
@term{disestablished}.  For example:

@lisp
 (defun fun1 (x)
   (catch 'trap (+ 3 (fun2 x))))
 (defun fun2 (y)
   (catch 'trap (* 5 (fun3 y))))
 (defun fun3 (z)
   (throw 'trap z))
@end lisp

Consider the call @f{(fun1 7)}.  The result is @f{10}.  At the time
the @code{throw} is executed, there are two outstanding catchers with the
name @f{trap}: one established within procedure @f{fun1}, and the other
within procedure @f{fun2}.  The latter is the more recent, and so the
value @f{7} is returned from @code{catch} in @f{fun2}.
Viewed from within @f{fun3}, the @code{catch} 
in @f{fun2} shadows the one in @f{fun1}.
Had @f{fun2} been defined as

@lisp
 (defun fun2 (y)
   (catch 'snare (* 5 (fun3 y))))
@end lisp

then the two @term{exit points} 
would have different @term{names}, and therefore the one
in @f{fun1} would not be shadowed.  The result would then have been @f{7}.


@node Return Values
@subsection Return Values

Ordinarily the result of calling a @term{function} is a single @term{object}.
Sometimes, however, it is convenient for a function to compute several
@term{objects} and return them.

In order to receive other than exactly one value from a @term{form},
one of several @term{special forms} or @term{macros} must be used to request those
values.  If a @term{form} produces @term{multiple values} which were not
requested in this way, then the first value is given to the caller and
all others are discarded; if the @term{form} produces zero values,
then the caller receives @nil{}@spc{}as a value.

@Thenextfigure{}@spc{}lists 
some @term{operators} for receiving @term{multiple values}@sub2{}.
These @term{operators} can be used to specify 
one or more @term{forms} to @term{evaluate} 
and where to put the @term{values} returned by those @term{forms}.


@float Figure,fig3.5
@cartouche
@multitable{multiple-value-bind}{multiple-value-prog1}{return-from}

@item multiple-value-bind @tab multiple-value-prog1 @tab return-from
@item multiple-value-call @tab multiple-value-setq @tab throw
@item multiple-value-list @tab return @tab 
@end multitable
@end cartouche
@caption{Some operators applicable to receiving multiple values}
@end float


@Thefunction{values} can produce @term{multiple values}@sub2{}.
@f{(values)} returns zero values;
@f{(values @param{form})} returns the @term{primary value} returned by @param{form};
@f{(values @param{form1} @param{form2})} returns two values,
the @term{primary value} of @param{form1}
and the @term{primary value} of @param{form2};
and so on.

See @code{multiple-values-limit} and @code{values-list}.



@node Compilation
@section Compilation


@menu
* Compiler Terminology::
* Compilation Semantics::
* File Compilation::
* Literal Objects in Compiled Files::
* Exceptional Situations in the Compiler::
@end menu
@node Compiler Terminology
@subsection Compiler Terminology


The following terminology is used in this section.

The @newterm{compiler} is a utility that translates code into an
@term{implementation-dependent} form that might be represented or
executed efficiently.
The term @newterm{compiler} refers to both of the @term{functions}
@code{compile} and @code{compile-file}.

The term @newterm{compiled code} refers to 
@term{objects} representing compiled programs, such as @term{objects} constructed
by @code{compile} or by @code{load} when @term{loading} a @term{compiled file}.

The term @newterm{implicit compilation} refers to @term{compilation}
performed during @term{evaluation}.

The term @newterm{literal object} refers to 
a quoted @term{object} 
or a @term{self-evaluating object} 
or an @term{object} that is a substructure of such an @term{object}.
A @term{constant variable} is not itself a @term{literal object}.

The term @newterm{coalesce} is defined as follows.
Suppose @f{A} and @f{B} are two @term{literal constants} in the @term{source code},
and that @f{A'} and @f{B'} are the corresponding @term{objects} in the @term{compiled code}.
If @f{A'} and @f{B'} are @code{eql} but
@f{A} and @f{B} are not @code{eql}, then it is said
that @f{A} and @f{B} have been coalesced by the compiler.

The term @newterm{minimal compilation} refers to actions the compiler
must take at @term{compile time}. These actions are specified in 
@ref{Compilation Semantics, Section 3.2.2 (Compilation Semantics)}.

The verb @newterm{process} refers to performing @term{minimal compilation},
determining the time of evaluation for a @term{form},
and possibly @term{evaluating} that @term{form} (if required).

The term @newterm{further compilation} refers to
@term{implementation-dependent} compilation beyond @term{minimal compilation}.
That is, @term{processing} does not imply complete compilation.
Block compilation and generation of machine-specific instructions are 
examples of further compilation.
Further compilation is permitted to take place at @term{run time}.

Four different @term{environments} relevant to compilation are
distinguished:
the @term{startup environment},
the @term{compilation environment},
the @term{evaluation environment}, and
the @term{run-time environment}.

The @newterm{startup environment} is
the @term{environment} of the @term{Lisp image} 
from which the @term{compiler} was invoked.

The @newterm{compilation environment} is maintained by the compiler
and is used to hold definitions and declarations to be used internally
by the compiler.  Only those parts of a definition needed for correct
compilation are saved. The @term{compilation environment} is used
as the @term{environment} @term{argument} to macro expanders called by
the compiler. It is unspecified whether a definition available in the
@term{compilation environment} can be used in an @term{evaluation}
initiated in the @term{startup environment} or @term{evaluation environment}.

The @newterm{evaluation environment} is a @term{run-time environment}
in which macro expanders and code specified by @code{eval-when}
to be evaluated are evaluated.  All evaluations initiated by the
@term{compiler} take place in the @term{evaluation environment}.

The @newterm{run-time environment} is the 
@term{environment} in which the program being compiled will be executed.

The @term{compilation environment} inherits from
the @term{evaluation environment},
and the @term{compilation environment} and @term{evaluation environment} 
might be @term{identical}.
The @term{evaluation environment} inherits from
the @term{startup environment}, 
and the @term{startup environment} and @term{evaluation environment} 
might be @term{identical}.

The term @newterm{compile time} refers to the duration of time that
the compiler is processing @term{source code}.
At @term{compile time},
only the @term{compilation environment} 
and  the @term{evaluation environment}
are available.

The term @newterm{compile-time definition} refers to a definition in
the @term{compilation environment}.
For example, when compiling a file, 
the definition of a function might be retained in the @term{compilation environment} 
if it is declared @code{inline}. 
This definition might not be available in the @term{evaluation environment}.

The term @newterm{run time} refers to the duration of time that the
loader is loading compiled code or compiled code is being executed.
At run time, only the @term{run-time environment} is available.

The term @newterm{run-time definition} refers to a definition in the
@term{run-time environment}.

The term @newterm{run-time compiler} refers to @thefunction{compile}
or @term{implicit compilation}, for which the compilation and run-time 
@term{environments} are maintained in the same @term{Lisp image}.
Note that when the @term{run-time compiler} is used,
the @term{run-time environment} 
and @term{startup environment} 
are the same.


@node Compilation Semantics
@subsection Compilation Semantics

Conceptually, compilation is a process that traverses code, performs
certain kinds of syntactic and semantic analyses using information
(such as proclamations and @term{macro} definitions) present in the
@term{compilation environment}, and produces equivalent, possibly
more efficient code.


@subsubsection Compiler Macros
@anchor{CompilerMacros}

A @term{compiler macro} can be defined for a @term{name}
that also names a @term{function} or @term{macro}.
That is, it is possible for a
@term{function name} to name both a @term{function} and a @term{compiler macro}.

A @term{function name} names a @term{compiler macro} if @code{compiler-macro-function}
is @term{true} of the @term{function name} in the @term{lexical environment} in which
it appears.  Creating a @term{lexical binding} for the @term{function name}
not only creates a new local @term{function} or
@term{macro} definition, but also @term{shadows}@sub2{} the @term{compiler macro}.

The @term{function} returned by @code{compiler-macro-function}
is a @term{function} of two arguments, called the
expansion function.  To expand a @term{compiler macro},
the expansion function is invoked by calling the @term{macroexpand hook} with
the expansion function as its first argument,
the entire compiler macro @term{form} as its second argument,
and the current compilation @term{environment} 
(or with the current lexical @term{environment},
if the @term{form} is being processed by something
other than @code{compile-file}) 
as its third argument.
The @term{macroexpand hook}, in turn, calls the expansion function with the
@term{form} as its first argument and the @term{environment} as its second argument.
The return value from the expansion function, which is passed through
by the @term{macroexpand hook}, might either be the @term{same} @term{form}, 
or else a form that can, at the discretion of the @term{code} doing the expansion, 
be used in place of the original @term{form}.


@float Figure,fig3.6
@cartouche
@multitable{*macroexpand-hook*}{compiler-macro-function}{define-compiler-macro}

@item *macroexpand-hook* @tab compiler-macro-function @tab define-compiler-macro
@end multitable
@end cartouche
@caption{Defined names applicable to compiler macros}
@end float


@unnumberedsubsubsec 3.2.2.1.1 Purpose of Compiler Macros


The purpose of the @term{compiler macro} facility is to permit 
selective source code transformations as optimization advice 
to the @term{compiler}.  When a @term{compound form} is being
processed (as by the compiler), if the @term{operator} names a
@term{compiler macro} then the @term{compiler macro function} may be
invoked on the form, and the resulting expansion recursively processed
in preference to performing the usual processing on the original @term{form}
according to its normal interpretation as a @term{function form} or
@term{macro form}.

A @term{compiler macro function}, like a @term{macro function},
is a @term{function} of two @term{arguments}: the entire call @term{form}
and the @term{environment}. Unlike an ordinary @term{macro function}, a 
@term{compiler macro function} can decline to provide an expansion merely by
returning a value that is the @term{same} as the original @term{form}.
The consequences are undefined if a @term{compiler macro function}
destructively modifies any part of its @term{form} argument.

The @term{form} passed to the compiler macro function can either be a @term{list}
whose @term{car} is the function name, or a @term{list} whose @term{car} is
@code{funcall} and whose @term{cadr} is a list @f{(function @param{name})};
note that this affects destructuring of the form argument by the 
@term{compiler macro function}.
@code{define-compiler-macro} arranges for destructuring of arguments to be
performed correctly for both possible formats.

When @code{compile-file} chooses to expand a @term{top level form} that is
a @term{compiler macro} @term{form}, the expansion is also treated as a @term{top level form}
for the purposes of @code{eval-when} processing; see @ref{TopLevelForms, Section 3.2.3.1 (Processing of Top Level Forms)}.


@unnumberedsubsubsec 3.2.2.1.2 Naming of Compiler Macros


@term{Compiler macros} may be defined for @term{function names} that name
@term{macros} as well as @term{functions}.  

@term{Compiler macro} definitions are strictly global.  There is no provision
for defining local @term{compiler macros} in the way that @code{macrolet}
defines local @term{macros}.  Lexical bindings of a function name shadow any
compiler macro definition associated with the name as well as its 
global @term{function} or @term{macro} definition.

Note that the presence of a compiler macro definition does not affect
the values returned by
functions that access @term{function} definitions (@eg{} @code{fboundp})
or @term{macro} definitions (@eg{} @code{macroexpand}).
Compiler macros are global, and the function
@code{compiler-macro-function} is sufficient to resolve their interaction
with other lexical and global definitions.


@unnumberedsubsubsec 3.2.2.1.3 When Compiler Macros Are Used


The presence of a @term{compiler macro} definition for a @term{function} or @term{macro}
indicates that it is desirable for the @term{compiler} to use the expansion
of the @term{compiler macro} instead of the original @term{function form} or
@term{macro form}.  However, no language processor
(compiler, evaluator, or other code walker) is ever required to actually
invoke @term{compiler macro functions}, or to 
make use of the resulting expansion if it does invoke 
a @term{compiler macro function}.

When the @term{compiler} encounters a @term{form} during processing that represents
a call to a @term{compiler macro} @term{name} (that is not declared @code{notinline}),
the @term{compiler} might expand the @term{compiler macro}, 
and might use the expansion in place of the original @term{form}.

When @code{eval} encounters a @term{form} during processing that represents 
a call to a @term{compiler macro} @term{name} (that is not declared @code{notinline}),
@code{eval} might expand the @term{compiler macro},
and might use the expansion in place of the original @term{form}.

There are two situations in which a @term{compiler macro} definition must not be
applied by any language processor:


@itemize @bullet{}
@item
The global function name binding associated with the compiler
macro is shadowed by a lexical binding of the function name.

@item
The function name has been declared or proclaimed @code{notinline} and
the call form appears within the scope of the declaration.
@end itemize


It is unspecified whether @term{compiler macros} are expanded or used in any other
situations.

@unnumberedsubsubsec 3.2.2.1.3.1 Notes about the Implementation of Compiler Macros


Although it is technically permissible, as described above,
for @code{eval} to treat @term{compiler macros} in the same situations
as @term{compiler} might, this is not necessarily a good idea in
@term{interpreted implementations}.

@term{Compiler macros} exist for the purpose of trading compile-time speed
for run-time speed.  Programmers who write @term{compiler macros} tend to
assume that the @term{compiler macros} can take more time than normal @term{functions}
and @term{macros} in order to produce code which is especially optimal for use
at run time.  Since @code{eval} in an @term{interpreted implementation}
might perform semantic analysis of the same form multiple times, it might be 
inefficient in general for the @term{implementation} to choose to call
@term{compiler macros} on every such @term{evaluation}.

Nevertheless, the decision about what to do in these situations is left to
each @term{implementation}.





@subsubsection Minimal Compilation
@anchor{MinimalCompilation}

@term{Minimal compilation} is defined as follows:


@itemize @bullet{}
@item All @term{compiler macro}
@cindex compiler macro 
calls appearing in the
@term{source code} being compiled are expanded, if at all, at compile time;
they will not be expanded at run time.

@item All @term{macro}
@cindex macro 
and 
@term{symbol macro}
@cindex symbol macro 
calls
appearing in the source code being compiled are expanded at compile time
in such a way that they will not be expanded again at run time.
@code{macrolet}
@cindex macrolet
and
@code{symbol-macrolet}
@cindex symbol-macrolet
are effectively replaced by
@term{forms} corresponding to their bodies in which calls to 
@term{macros} are replaced by their expansions.

@item 
The first @term{argument} in a @code{load-time-value}
@cindex load-time-value
@term{form} 
in @term{source code} processed by @code{compile}
@cindex compile
is @term{evaluated} at @term{compile time};
in @term{source code} processed by @code{compile-file}
@cindex compile-file
, 
the compiler arranges for it to be @term{evaluated} at @term{load time}.
In either case, the result of the @term{evaluation}
is remembered and used later as the value of the 
@code{load-time-value} @term{form} at @term{execution time}.
@end itemize



@subsubsection Semantic Constraints
@anchor{SemanticConstraints}

All @term{conforming programs} must obey the following constraints,
which are designed to minimize the observable differences 
between compiled and interpreted programs:


@itemize @bullet{}
@item Definitions of any referenced @term{macros}
must be present in the @term{compilation environment}.  
Any @term{form} that is a @term{list}
beginning with a @term{symbol} that does not name a
@term{special operator} or a @term{macro} defined in the 
@term{compilation environment} is treated by the compiler as a 
function call.

@item @code{Special} proclamations for @term{dynamic variables}
must be made in the @term{compilation environment}.  Any @term{binding}
for which there is no @code{special} declaration or proclamation in
the @term{compilation environment} is treated by the compiler as
a @term{lexical binding}.

@item The definition of a function that is defined and
declared @code{inline} in the @term{compilation environment} must be
the same at run time.


@item Within a @term{function} named @mat{F}, the compiler may
(but is not required to)
assume that an apparent recursive call to a @term{function} named @mat{F} 
refers to the same definition of @mat{F},
unless that function has been declared @code{notinline}.
The consequences of redefining such a recursively defined @term{function} @mat{F} 
while it is executing are undefined.

@item A call within a file to a named function that is
defined in the same file refers to that function, unless that function
has been declared @code{notinline}.  The consequences are unspecified
if functions are redefined individually at run time or multiply
defined in the same file.


@item The argument syntax and number of return values for
all functions whose @code{ftype} is declared at compile time must
remain the same at run time.

@item @term{Constant variables} defined in
the @term{compilation environment} must have a @term{similar} value at
run time.  A reference to 
a @term{constant variable} 
in @term{source code} is equivalent to a reference to 
a @term{literal} @term{object} that is the @term{value} of the @term{constant variable}.

@item Type definitions made with @code{deftype} or
@code{defstruct} in the @term{compilation environment} must
retain the same definition at run time.  Classes defined by @code{defclass}
in the @term{compilation environment} must be defined
at run time to have the same @term{superclasses} and same 
@term{metaclass}.

This implies that @term{subtype}/@term{supertype} relationships of 
@term{type specifiers} must not change between @term{compile time} and @term{run time}.  

@item Type declarations present in the compilation 
@term{environment} must accurately describe the corresponding values at run time;
otherwise, the consequences are undefined.  It is permissible
for an unknown @term{type} to appear in a declaration at 
compile time, though a warning might be signaled in such a case.

@item Except in the situations explicitly listed above, a
@term{function} defined in the @term{evaluation environment}
is permitted to have a different definition or a different @term{signature}
at run time, and the run-time definition prevails.
@end itemize


@term{Conforming programs} should not be written using any additional
assumptions about consistency between the run-time 
@term{environment} and the startup, evaluation, and compilation 
@term{environments}.

Except where noted, when a compile-time and a run-time definition are
different, one of the following occurs at run time:


@itemize @bullet{}

@item an error @oftype{error} is signaled
@item the compile-time definition prevails
@item the run-time definition prevails
@end itemize


If the @term{compiler} processes a @term{function form} whose @term{operator} 
is not defined at compile time, no error is signaled at compile time.

@node File Compilation
@subsection File Compilation

@Thefunction{compile-file} performs compilation of 
@term{forms} in a file following the rules specified in @ref{Compilation Semantics, Section 3.2.2 (Compilation Semantics)},
and produces an output file that can be loaded by using @code{load}.

Normally, the @term{top level forms} appearing in a file compiled with
@code{compile-file} are evaluated only when the resulting
compiled file is loaded, and not when the file is compiled.  However,
it is typically the case that some forms in the file need to be evaluated
at compile time so the
remainder of the file can be read and compiled correctly.

@Thespecform{eval-when} can be used to control
whether a @term{top level form} is evaluated at compile time, load
time, or both.  It is possible to specify any of three situations with
@code{eval-when}, denoted by the symbols @kwd{compile-toplevel},
@kwd{load-toplevel}, and @kwd{execute}.  For top level 
@code{eval-when} forms, @kwd{compile-toplevel} specifies that the
compiler must evaluate the body at compile time, and @tt{
:load-toplevel} specifies that the compiler must arrange to evaluate
the body at load time. For non-top level @code{eval-when} forms,
@kwd{execute} specifies that the body must be executed in the run-time
@term{environment}.

The behavior of this @term{form} can be more precisely understood in
terms of a model of how @code{compile-file} processes forms in
a file to be compiled. There are two processing modes, called
``not-compile-time'' and ``compile-time-too''.

Successive forms are read from the file by @code{compile-file}
and processed in not-compile-time mode; in this mode, 
@code{compile-file} arranges for forms to be evaluated only at load time
and not at compile time.  When @code{compile-file} is in
compile-time-too mode, forms are evaluated both at compile time and
load time.

@subsubsection Processing of Top Level Forms
@anchor{TopLevelForms}

Processing of @term{top level forms} in the file compiler is defined
as follows:


@enumerate 1
@item If the @term{form} is a @term{compiler macro form}
(not disabled by a @code{notinline} @term{declaration}),
the @term{implementation} might or might not choose to compute
the @term{compiler macro expansion} of the @term{form} and,
having performed the expansion, might or might not choose to process the result
as a @term{top level form} in the same processing mode
(compile-time-too or not-compile-time).
If it declines to obtain or use the expansion, it must process the original @term{form}.

@item If the form is a @term{macro form},
its @term{macro expansion} is computed and processed as a 
@term{top level form} in
the same processing mode (compile-time-too or not-compile-time).

@item If the form is a @code{progn} form, each of its
body @term{forms} is sequentially processed as a 
@term{top level form} in the same processing mode.

@item If the form is a @code{locally}, 
@code{macrolet}, or @code{symbol-macrolet}, 
@code{compile-file} establishes the appropriate bindings and processes the
body forms as @term{top level forms} with those bindings in effect
in the same processing mode.  (Note that this implies that the lexical
@term{environment} in which @term{top level forms} are processed
is not necessarily the @term{null lexical environment}.)

@item If the form is an @code{eval-when}
@cindex eval-when 
form, it is
handled according to @thenextfigure{}.


@float Figure,fig3.7
@cartouche
@multitable{@b{CT}}{@b{LT}}{@hfil{}---}{@hfil{} CTT}{@b{Action}}{compile-time-too}
@headitem @b{CT} @tab @b{LT} @tab @b{E} @tab @b{Mode} @tab @b{Action} @tab @b{New Mode}
@item Yes @tab Yes @tab @hfil{}--- @tab @hfil{}--- @tab Process @tab compile-time-too
@item No @tab Yes @tab Yes @tab @hfil{} CTT @tab Process @tab compile-time-too
@item No @tab Yes @tab Yes @tab @hfil{} NCT @tab Process @tab not-compile-time
@item No @tab Yes @tab No @tab @hfil{}--- @tab Process @tab not-compile-time
@item Yes @tab No @tab @hfil{}--- @tab @hfil{}--- @tab Evaluate @tab @hfil{}---
@item No @tab No @tab Yes @tab @hfil{} CTT @tab Evaluate @tab @hfil{}---
@item No @tab No @tab Yes @tab @hfil{} NCT @tab Discard @tab @hfil{}---
@item No @tab No @tab No @tab @hfil{}--- @tab Discard @tab @hfil{}---
@end multitable
@end cartouche
@caption{EVAL-WHEN processing}
@end float

Column @b{CT}   indicates whether @kwd{compile-toplevel} is specified.
Column @b{LT}   indicates whether @kwd{load-toplevel} is specified.
Column @b{E}    indicates whether @kwd{execute} is specified.  
Column @b{Mode} indicates the processing mode; 
a dash (---) indicates that the processing mode is not relevant.

The @b{Action} column specifies one of three actions:


@table @asis

@item @id{}
@b{Process:} process the body as @term{top level forms} in the
specified mode.

@item @id{}
@b{Evaluate:} evaluate the body in the dynamic execution
context of the compiler, using the @term{evaluation environment} as
the global environment and the @term{lexical environment} in which
the @code{eval-when} appears.

@item @id{}
@b{Discard:} ignore the @term{form}.
@end table


The @b{New Mode} column indicates the new processing mode. 
A dash (---) indicates the compiler remains in its current mode.

@item Otherwise, the form is a @term{top level form} that
is not one of the special cases.  In compile-time-too mode, the
compiler first evaluates the form in the evaluation 
@term{environment} and then minimally compiles it.  In not-compile-time
mode, the @term{form} is simply minimally compiled.  All @term{subforms}
are treated as @term{non-top-level forms}.

Note that @term{top level forms} are processed in the order in
which they textually appear in the file and that each 
@term{top level form} read by the compiler is processed before the next is
read.  However, the order of processing (including macro expansion) of
@term{subforms} that are not @term{top level forms} and the order of
further compilation is unspecified as long as Common Lisp semantics
are preserved.
@end enumerate


@code{eval-when} forms cause compile-time evaluation only at
top level.  Both @kwd{compile-toplevel} and @kwd{load-toplevel} situation specifications
are ignored for @term{non-top-level forms}. For @term{non-top-level forms}, 
an @code{eval-when}
specifying the @kwd{execute} situation is treated as an @term{implicit progn}
including the @term{forms} in the body of the @code{eval-when} @term{form};
otherwise, the @term{forms} in the body are ignored.

@unnumberedsubsubsec 3.2.3.1.1 Processing of Defining Macros



Defining @term{macros} (such as @code{defmacro} or @code{defvar})
appearing within a file being processed by @code{compile-file}
normally have compile-time side effects which affect how subsequent @term{forms}
in the same @term{file} are compiled.  A convenient model for explaining how these
side effects happen is that the defining macro expands into one or
more @code{eval-when} @term{forms}, and that the calls which cause the compile-time
side effects to happen appear 
in the body of an @f{(eval-when (:compile-toplevel) ...)} @term{form}.

The compile-time side effects may cause information about the definition to
be stored differently than if the defining macro had been processed in the
`normal' way (either interpretively or by loading the compiled file).

In particular, the information stored by the defining @term{macros} at compile time
might or might not be available to the interpreter (either during or after compilation),
or during subsequent calls to the @term{compiler}.  For example,
the following code is nonportable because it assumes that the @term{compiler}
stores the macro definition of @f{foo} where it is available to the interpreter:

@lisp
 (defmacro foo (x) `(car ,x))
 (eval-when (:execute :compile-toplevel :load-toplevel)
   (print (foo '(a b c))))
@end lisp


A portable way to do the same thing would be to include the macro
definition inside the @code{eval-when} @term{form}, as in:

@lisp
 (eval-when (:execute :compile-toplevel :load-toplevel)
   (defmacro foo (x) `(car ,x))
   (print (foo '(a b c))))
@end lisp



@Thenextfigure{}@spc{}lists macros that make definitions
available both in the compilation and run-time @term{environments}.
It is not specified whether definitions made available in the
@term{compilation environment} are available in the evaluation
@term{environment}, nor is it specified whether they are available
in subsequent compilation units or subsequent invocations of the
compiler.  As with @code{eval-when}, these compile-time side
effects happen only when the defining macros appear at 
top level.


@float Figure,fig3.8
@cartouche
@multitable{define-compiler-macro}{define-setf-expander}{defstruct}

@item declaim @tab define-modify-macro @tab defsetf
@item defclass @tab define-setf-expander @tab defstruct
@item defconstant @tab defmacro @tab deftype
@item define-compiler-macro @tab defpackage @tab defvar
@item define-condition @tab defparameter @tab 
@end multitable
@end cartouche
@caption{Defining Macros That Affect the Compile-Time Environment}
@end float




@unnumberedsubsubsec 3.2.3.1.2 Constraints on Macros and Compiler Macros



Except where explicitly stated otherwise, no @term{macro} defined in
the @clisp{}@spc{}standard produces an expansion that could cause any of the
@term{subforms} of the @term{macro form} to be treated as 
@term{top level forms}.  If an @term{implementation} also provides a
@term{special operator} definition of a @clisp{}@spc{}@term{macro}, 
the @term{special operator} definition must be semantically equivalent
in this respect.

@term{Compiler macro} expansions must also have the same
top level evaluation semantics as the @term{form} which they replace.
This is of concern both to @term{conforming implementations} and to
@term{conforming programs}.




@node Literal Objects in Compiled Files
@subsection Literal Objects in Compiled Files

The functions @code{eval} and @code{compile} are
required to ensure that @term{literal objects} referenced within the resulting
interpreted or compiled code objects are the @term{same} as the
corresponding @term{objects} in the @term{source code}.
@code{compile-file}, on the other hand, 
must produce a @term{compiled file} that, when loaded with
@code{load}, constructs the @term{objects} defined by the
@term{source code} and produces references to them.

In the case of @code{compile-file}, @term{objects}
constructed by @code{load} of the @term{compiled file} cannot be spoken
of as being the @term{same} as the @term{objects} constructed at
compile time, because the @term{compiled file} may be loaded into a different
@term{Lisp image} than the one in which it was compiled.  This section
defines the concept of @term{similarity} which relates
@term{objects} in the @term{evaluation environment} to the
corresponding @term{objects} in the @term{run-time environment}.

The constraints on @term{literal objects} described in this section
apply only to @code{compile-file};
@code{eval} and @code{compile} do not copy or coalesce constants.

@subsubsection Externalizable Objects

The fact that the @term{file compiler} represents @term{literal} @term{objects} 
externally in a @term{compiled file} and must later reconstruct suitable 
equivalents of those @term{objects} when that @term{file} is loaded
imposes a need for constraints on the nature of the @term{objects} that can be 
used as @term{literal} @term{objects} in @term{code} to be processed 
by the @term{file compiler}.

An @term{object} that can be used as a @term{literal} @term{object} 
in @term{code} to be processed by the @term{file compiler} is called an
@newterm{externalizable object}.

We define that two @term{objects} are @newterm{similar} if they satisfy
a two-place conceptual equivalence predicate (defined below), which is
independent of the @term{Lisp image} so that the two @term{objects} in
different @term{Lisp images} can be understood to be equivalent under
this predicate.  Further, by inspecting the definition of this conceptual
predicate, the programmer can anticipate what aspects of an @term{object}
are reliably preserved by @term{file compilation}.

The @term{file compiler} must cooperate with the @term{loader} in order to
assure that in each case where an @term{externalizable object} is processed
as a @term{literal object}, the @term{loader} will construct a @term{similar}
@term{object}.

The set of @term{objects} that are 
@cindex externalizable object
@dfn{externalizable objects} are those
for which the new conceptual term ``@term{similar}'' is defined, such that
when a @term{compiled file} is @term{loaded}, an @term{object} can be constructed
which can be shown to be @term{similar} to the original @term{object} which
existed at the time the @term{file compiler} was operating.


@subsubsection Similarity of Literal Objects
@anchor{Similarity}

@unnumberedsubsubsec 3.2.4.2.1 Similarity of Aggregate Objects


Of the @term{types} over which @term{similarity} is defined, 
some are treated as aggregate objects.  For these types, 
@term{similarity} is defined recursively.  
We say that an @term{object} of these types has certain ``basic qualities''
and to satisfy the @term{similarity} relationship, the values of the
corresponding qualities of the two @term{objects} must also be similar.


@unnumberedsubsubsec 3.2.4.2.2 Definition of Similarity


Two @term{objects} @mat{S} (in @term{source code}) and @mat{C} (in @term{compiled code})
are defined to be @term{similar} if and only if 
they are both of one of the @term{types} listed here
(or defined by the @term{implementation}) 
and they both satisfy all additional requirements of @term{similarity} 
indicated for that @term{type}.


@table @asis

@item @id{@code{number}}


Two @term{numbers} @mat{S} and @mat{C} are @term{similar} if they are of the same @term{type}
and represent the same mathematical value.

@item @id{@code{character}}



Two @term{simple} @term{characters} @mat{S} and @mat{C} are @term{similar} 
if they have @term{similar} @term{code} @term{attributes}.

@term{Implementations} providing additional, @term{implementation-defined} 
@term{attributes} must define whether and how @term{non-simple} @term{characters} 
can be regarded as @term{similar}.

@item @id{@code{symbol}}


Two @term{apparently uninterned} @term{symbols} @mat{S} and @mat{C} are @term{similar}
if their
@term{names}
are @term{similar}.

Two @term{interned} symbols @mat{S} and @mat{C} are @term{similar} 
if their @term{names} are @term{similar},
and if either @mat{S} is accessible in the @term{current package} at compile time
and @mat{C} is accessible in the @term{current package} at load time,
or @mat{C} is accessible in the @term{package} that is @term{similar} to
the @term{home package} of @mat{S}.

(Note that @term{similarity} of
@term{symbols} is dependent
on neither the @term{current readtable} nor how @thefunction{read} would
parse the @term{characters} in the @term{name} of the @term{symbol}.)

@item @id{@code{package}}


Two @term{packages} @mat{S} and @mat{C} are @term{similar} if their @term{names} are @term{similar}.

Note that although a @term{package} @term{object} is an @term{externalizable object},
the programmer is responsible for ensuring that the corresponding @term{package} is
already in existence when code referencing it as a @term{literal} @term{object} 
is @term{loaded}.  The @term{loader} finds the corresponding @term{package} @term{object}
as if by calling @code{find-package} with that @term{name} as an @term{argument}.
An error is signaled by the @term{loader} if no @term{package} exists at load time.

@item @id{@code{random-state}}


Two @term{random states} @mat{S} and @mat{C} are @term{similar} if @mat{S}
would always produce the same sequence of pseudo-random numbers 
as a @term{copy}@sub5{} of @mat{C}
when given as the @param{random-state} @term{argument} to @thefunction{random}, 
assuming equivalent @param{limit} @term{arguments} in each case.

(Note that since @mat{C} has been processed by the @term{file compiler},
it cannot be used directly as an @term{argument} to @code{random}
because @code{random} would perform a side effect.)

@item @id{@code{cons}}
 

Two @term{conses}, @mat{S} and @mat{C}, are @term{similar} if
the @term{car}@sub2{} of @mat{S} is @term{similar} to the @term{car}@sub2{} of @mat{C},
and the @term{cdr}@sub2{} of @mat{S} is @term{similar} to the @term{cdr}@sub2{} of @mat{C}.

@item @id{@code{array}}


Two one-dimensional @term{arrays}, @mat{S} and @mat{C}, are @term{similar} if
the @term{length} of @mat{S} is @term{similar} to the @term{length} of @mat{C},
the @term{actual array element type} of @mat{S} is @term{similar} to
the @term{actual array element type} of @mat{C},
and each @term{active} @term{element} of @mat{S} is @term{similar} to
the corresponding @term{element} of @mat{C}.

Two @term{arrays} of @term{rank} other than one, @mat{S} and @mat{C}, are @term{similar} if
the @term{rank} of @mat{S} is @term{similar} to the @term{rank} of @mat{C},
each @term{dimension}@sub1{} of @mat{S} is @term{similar} to 
the corresponding @term{dimension}@sub1{} of @mat{C},
the @term{actual array element type} of @mat{S} is @term{similar} to
the @term{actual array element type} of @mat{C},
and each @term{element} of @mat{S} is @term{similar} to
the corresponding @term{element} of @mat{C}.

In addition,
if @mat{S} is a @term{simple array}, then @mat{C} must also be a @term{simple array}.
If @mat{S} is a @term{displaced array},
has a @term{fill pointer},
or is @term{actually adjustable}, 
@mat{C} is permitted to lack any or all of these qualities.

@item @id{@code{hash-table}}


Two @term{hash tables} @mat{S} and @mat{C} are @term{similar} if they meet the following
three requirements:


@enumerate 1
@item  They both have the same test 
(@eg{} they are both @code{eql} @term{hash tables}).

@item  There is a unique one-to-one correspondence between the keys of
the two @term{hash tables}, such that the corresponding keys are 
@term{similar}.

@item  For all keys, the values associated with two corresponding keys
are @term{similar}.
@end enumerate


If there is more than one possible one-to-one correspondence between
the keys of @mat{S} and @mat{C}, the consequences are unspecified.  
A @term{conforming program} cannot use a table such as @mat{S} as an
@term{externalizable constant}.

@item @id{@code{pathname}}


Two @term{pathnames} @mat{S} and @mat{C} are @term{similar} if all corresponding 
@term{pathname components} are @term{similar}.

@item @id{@code{function}}


@term{Functions} are not @term{externalizable objects}.

@item @id{@code{structure-object} and @code{standard-object}}


A general-purpose concept of @term{similarity} does not exist for @term{structures}
and @term{standard objects}.
However, a @term{conforming program} is permitted to define a @code{make-load-form}
@term{method} for any @term{class} @mat{K} defined by that @term{program} that is
a @term{subclass} of either @code{structure-object} or @code{standard-object}.
The effect of such a @term{method} is to define that an @term{object} @mat{S} of @term{type} @mat{K}
in @term{source code} is @term{similar} to an @term{object} @mat{C} of @term{type} @mat{K}
in @term{compiled code} if @mat{C} was constructed from @term{code} produced by 
calling @code{make-load-form} on @mat{S}.
@end table



@subsubsection Extensions to Similarity Rules

Some @term{objects}, such as @term{streams}, @code{readtables}, and @code{methods}
are not @term{externalizable objects} under the definition of similarity given above.
That is, such @term{objects} may not portably appear as @term{literal} @term{objects} 
in @term{code} to be processed by the @term{file compiler}. 

An @term{implementation} is permitted to extend the rules of similarity, 
so that other kinds of @term{objects} are @term{externalizable objects}
for that @term{implementation}.

If for some kind of @term{object}, @term{similarity} is
neither defined by this specification 
nor by the @term{implementation}, 
then the @term{file compiler} must signal an error upon encountering such 
an @term{object} as a @term{literal constant}.


@subsubsection Additional Constraints on Externalizable Objects

If two @term{literal objects} appearing in the source code for a single file
processed with
the @term{file compiler} 
are the @term{identical},
the corresponding @term{objects} in the @term{compiled code} 
must also be the @term{identical}.
With the exception of @term{symbols} and @term{packages}, any two
@term{literal objects}
in @term{code} being processed by
the @term{file compiler}
may be @term{coalesced} 
if and only if they are @term{similar}; 
if they are either both @term{symbols} or both @term{packages},
they may only be @term{coalesced} if and only if they are @term{identical}.

@term{Objects} containing circular references can 
be @term{externalizable objects}.
The @term{file compiler} is required to preserve @code{eql}ness of 
substructures within a @term{file}.
Preserving @code{eql}ness means that subobjects that are
the @term{same}
in the @term{source code} must 
be
the @term{same}
in the corresponding @term{compiled code}.

In addition, the following are constraints on the handling of
@term{literal objects} by the @term{file compiler}:


@table @asis

@item @id{}
@b{array:} If an @term{array} in the source code is a
@term{simple array}, then the corresponding @term{array}
in the compiled code will also be a @term{simple array}.  If
an @term{array} in the source code is displaced, has a 
@term{fill pointer}, or is @term{actually adjustable}, the corresponding 
@term{array} in the compiled code might lack any or all of these
qualities. If an @term{array} in the source code has a fill
pointer, then the corresponding @term{array} in the compiled
code might be only the size implied by the fill pointer.

@item @id{}
@b{packages:} The loader is required to find the
corresponding @term{package} @term{object} as if by calling 
@code{find-package} with the package name as an argument.  
An error @oftype{package-error} is signaled if no 
@term{package} of that name exists at load time.

@item @id{}
@b{random-state:} A constant @term{random state}
object cannot be used as the state argument 
to @thefunction{random} because @code{random} modifies this data structure.

@item @id{}
@b{structure, standard-object:}
@term{Objects} of @term{type} @code{structure-object} and @code{standard-object}
may appear in compiled constants if there is an
appropriate @code{make-load-form} method defined for that
@term{type}.

@anchor{CallingMakeLoadForm}
The @term{file compiler} calls @code{make-load-form} on any @term{object}
that is referenced as a @term{literal object} if the @term{object} is a
@term{generalized instance} of @code{standard-object},
@code{structure-object}, @code{condition}, or any of a 
(possibly empty) @term{implementation-dependent} set of other @term{classes}.
The @term{file compiler} only calls @code{make-load-form} once for
any given @term{object} within a single @term{file}.

@item @id{}
@b{symbol:} In order to guarantee that @term{compiled files} can be @term{loaded}
correctly, users must ensure that the @term{packages} referenced in those @term{files}
are defined consistently at compile time and load time.  @term{Conforming programs}
must satisfy the following requirements:


@enumerate 1
@item The @term{current package} when a @term{top level form} in the @term{file}
is processed by @code{compile-file} must be the same as the @term{current package}
when the @term{code} corresponding to that @term{top level form} in the
@term{compiled file} is executed by @code{load}.  In particular:


@enumerate a

@item Any @term{top level form} in a @term{file} that alters
the @term{current package} must change it to a @term{package}
of the same @term{name} both at compile time and at load time.

@item If the first @term{non-atomic} @term{top level form} in the @term{file}
is not an @code{in-package} @term{form}, then the @term{current package}
at the time @code{load} is called must be a @term{package} with the 
same @term{name} as the package that was the @term{current package}
at the time @code{compile-file} was called.
@end enumerate


@item For all @term{symbols} 
appearing lexically within a @term{top level form} that
were @term{accessible} in the @term{package} that was the @term{current package}
during processing of that @term{top level form} at compile time, but
whose @term{home package} was another @term{package}, at load time there must
be a @term{symbol} with the same @term{name} that is @term{accessible} in both the
load-time @term{current package} and in the @term{package}
with the same @term{name} as the
compile-time @term{home package}. 

@item For all @term{symbols} represented in the @term{compiled file} 
that were @term{external symbols} in
their @term{home package} at compile time, there must be a @term{symbol} with the
same @term{name} that is an @term{external symbol} in the @term{package} 
with the same @term{name} at load time.
@end enumerate


If any of these conditions do not hold, the @term{package} in which the @term{loader} looks
for the affected @term{symbols} is unspecified.  @term{Implementations} are permitted 
to signal an error or to define this behavior.
@end table




@node Exceptional Situations in the Compiler
@subsection Exceptional Situations in the Compiler



@code{compile} and @code{compile-file} are permitted to
signal errors and warnings, including errors due to compile-time
processing of @f{(eval-when (:compile-toplevel) ...)} forms,
macro expansion, and conditions signaled by the compiler itself.

@term{Conditions} @oftype{error} might be signaled by the compiler
in situations where the compilation cannot proceed without intervention.  

In addition to situations for which the standard specifies that
@term{conditions} @oftype{warning} must or might be signaled,
warnings might be signaled in situations where the compiler can
determine that the consequences are undefined or that a run-time
error will be signaled.  Examples of this situation are as follows: 
violating type declarations,
altering or assigning the value of a constant defined with @code{defconstant},
calling built-in Lisp functions with a wrong number of arguments or malformed keyword
argument lists, 
and using unrecognized declaration specifiers.

The compiler is permitted to issue warnings about matters of
programming style as conditions @oftype{style-warning}.
Examples of this situation are as follows:
redefining a function using a different argument list,
calling a function with a wrong number of arguments,
not declaring @code{ignore} of a local variable that is not referenced,
and referencing a variable declared @code{ignore}.

Both @code{compile} and @code{compile-file} are permitted
(but not required) to @term{establish} a @term{handler}
for @term{conditions} @oftype{error}.  For example, they
might signal a warning, and restart compilation from some
@term{implementation-dependent} point in order to let the 
compilation proceed without manual intervention.

Both @code{compile} and @code{compile-file} return three
values, the second two indicating whether the source code being compiled
contained errors and whether style warnings were issued.


Some warnings might be deferred until the end of compilation. 
See @code{with-compilation-unit}.



@node Declarations
@section Declarations


@cindex declaration
@dfn{Declarations} provide a way of specifying information for use by
program processors, such as the evaluator or the compiler.

@cindex local declaration
@dfn{Local declarations}
can be embedded in executable code using @t{declare}.
@cindex global declaration
@dfn{Global declarations}, 
or 
@cindex proclamation
@dfn{proclamations},
are established by @code{proclaim} or @code{declaim}.

@Thespecform{the} provides a shorthand notation for 
making a @term{local declaration} about the @term{type} of the
@term{value} of a given @term{form}.

The consequences are undefined if a program violates a @term{declaration}
or a @term{proclamation}.

@menu
* Minimal Declaration Processing Requirements::
* Declaration Specifiers::
* Declaration Identifiers::
* Declaration Scope::
@end menu
@node Minimal Declaration Processing Requirements
@subsection Minimal Declaration Processing Requirements

In general, an @term{implementation} is free to ignore
@term{declaration specifiers} except for the
@code{declaration}
@cindex declaration
,
@code{notinline}
@cindex notinline
,
@code{safety}
@cindex safety
,
and @code{special}
@cindex special 
@term{declaration specifiers}.

A @code{declaration} @term{declaration} must suppress warnings
about unrecognized @term{declarations} of the kind that it declares.
If an @term{implementation} does not produce warnings about
unrecognized declarations, it may safely ignore this @term{declaration}.

A @code{notinline} @term{declaration} must be recognized by any @term{implementation}
that supports inline functions or @term{compiler macros} in order to disable those facilities.
An @term{implementation} that does not use inline functions or @term{compiler macros}
may safely ignore this @term{declaration}.

A @code{safety} @term{declaration} that increases the current safety level 
must always be recognized.  An @term{implementation} that always processes 
code as if safety were high may safely ignore this @term{declaration}.

A @code{special} @term{declaration} must be processed by all @term{implementations}.


@node Declaration Specifiers
@subsection Declaration Specifiers

A @newterm{declaration specifier} is an @term{expression} that can appear at
top level of a @t{declare} expression or a @code{declaim} form, or as 
the argument to @code{proclaim}.
It is a @term{list} whose @term{car} is a @term{declaration identifier},
and whose @term{cdr} is data interpreted according to rules specific to
the @term{declaration identifier}.


@node Declaration Identifiers
@subsection Declaration Identifiers

@Thenextfigure{}@spc{}shows a list of all 
@term{declaration identifiers}
@cindex declaration identifier 

defined by this standard.


@float Figure,fig3.9
@cartouche
@multitable{dynamic-extent}{notinline}{special}

@item declaration @tab ignore @tab special
@item dynamic-extent @tab inline @tab type
@item ftype @tab notinline @tab 
@item ignorable @tab optimize @tab 
@end multitable
@end cartouche
@caption{Common Lisp Declaration Identifiers}
@end float


An implementation is free to support other (@term{implementation-defined})
@term{declaration identifiers} as well.  
A warning might be issued
if a @term{declaration identifier} 
is not among those defined above,
is not defined by the @term{implementation},
is not a @term{type} @term{name}, 
and has not been declared in a @code{declaration} @term{proclamation}.

@subsubsection Shorthand notation for Type Declarations

A @term{type specifier} can be used as a @term{declaration identifier}.
@f{(@param{type-specifier} @starparam{var})} is taken as shorthand for
@f{(type @param{type-specifier} @starparam{var})}.



@node Declaration Scope
@subsection Declaration Scope

@term{Declarations} can be divided into two kinds: those that apply to the
@term{bindings} of @term{variables} or @term{functions}; and those that
do not apply to @term{bindings}.

A @term{declaration} that appears at the head of a binding @term{form} 
and applies to a @term{variable} or @term{function} @term{binding} 
made by that @term{form} is called a @newterm{bound declaration}; 
such a @term{declaration} affects both the @term{binding} and
any references within the @term{scope} of the @term{declaration}.  

@term{Declarations} that are not @term{bound declarations} are called
@cindex free declaration
@dfn{free declarations}.

A @term{free declaration} in a @term{form} @mat{F1} that applies to a @term{binding}
for a @term{name} @mat{N} @term{established} by some @term{form} @mat{F2}
of which @mat{F1} is a @term{subform}
affects only references to @mat{N} within @mat{F1}; it does not to apply to
other references to @mat{N} outside of @mat{F1}, nor does it affect the manner
in which the @term{binding} of @mat{N} by @mat{F2} is @term{established}.

@term{Declarations} that do not apply to @term{bindings} can only appear 
as @term{free declarations}.

The @term{scope} of a @term{bound declaration} is the same as the
@term{lexical scope}
of the @term{binding} to which it applies;
for @term{special variables},
this means the @term{scope} that the @term{binding} 
would have had had it been a @term{lexical binding}.

Unless explicitly stated otherwise, the @term{scope} of a 
@term{free declaration} includes only the body @term{subforms} of 
the @term{form} at whose head it appears, and no other @term{subforms}.
The @term{scope} of @term{free declarations} specifically does not
include @term{initialization forms} for @term{bindings} established
by the @term{form} containing the @term{declarations}.

Some @term{iteration forms} include step, end-test, or result 
@term{subforms} that are also included in the @term{scope}
of @term{declarations} that appear in the @term{iteration form}.
Specifically, the @term{iteration forms} and @term{subforms} involved
are:


@itemize @bullet{}
@item @code{do}, @code{do*}:  
@param{step-forms}, @param{end-test-form}, and @param{result-forms}.
@item @code{dolist}, @code{dotimes}:
@param{result-form}
@item @code{do-all-symbols}, @code{do-external-symbols}, @code{do-symbols}:
@param{result-form}
@end itemize


@subsubsection Examples of Declaration Scope

Here is an example illustrating the @term{scope} of @term{bound declarations}.

@lisp
 (let ((x 1))                ;[1] 1st occurrence of x
   (declare (special x))     ;[2] 2nd occurrence of x
   (let ((x 2))              ;[3] 3rd occurrence of x
     (let ((old-x x)         ;[4] 4th occurrence of x
           (x 3))            ;[5] 5th occurrence of x
       (declare (special x)) ;[6] 6th occurrence of x
       (list old-x x))))     ;[7] 7th occurrence of x
@EV{} (2 3)
@end lisp


The first occurrence of @f{x} @term{establishes} a @term{dynamic binding}
of @f{x} because of the @code{special} @term{declaration} for @f{x}
in the second line.  The third occurrence of @f{x} @term{establishes} a
@term{lexical binding} of @f{x} (because there is no @code{special}
@term{declaration} in the corresponding @code{let} @term{form}).
The fourth occurrence of @f{x} @term{x} is a reference to the
@term{lexical binding} of @f{x} established in the third line.
The fifth occurrence of @f{x} @term{establishes} a @term{dynamic binding}
of @term{x} for the body of the @code{let} @term{form} that begins on
that line because of the @code{special} @term{declaration} for @f{x}
in the sixth line. The reference to @f{x} in the fourth line is not
affected by the @code{special} @term{declaration} in the sixth line 
because that reference is not within the ``would-be @term{lexical scope}''
of the @term{variable} @f{x} in the fifth line.  The reference to @f{x}
in the seventh line is a reference to the @term{dynamic binding} of @term{x}
@term{established} in the fifth line.

Here is another example, to illustrate the @term{scope} of a
@term{free declaration}.  In the following:

@lisp
 (lambda (&optional (x (foo 1))) ;[1]
   (declare (notinline foo))     ;[2]
   (foo x))                      ;[3]
@end lisp


the @term{call} to @f{foo} in the first line might be 
compiled inline even though the @term{call} to @f{foo} in
the third line must not be.  This is because
the @code{notinline} @term{declaration}
for @f{foo} in the second line applies only to the body on the
third line.  In order to suppress inlining for both @term{calls}, 
one might write:

@lisp
 (locally (declare (notinline foo)) ;[1]
   (lambda (&optional (x (foo 1)))  ;[2]
     (foo x)))                      ;[3]
@end lisp


or, alternatively:

@lisp
 (lambda (&optional                               ;[1]
            (x (locally (declare (notinline foo)) ;[2]
                 (foo 1))))                       ;[3]
   (declare (notinline foo))                      ;[4]
   (foo x))                                       ;[5]
@end lisp


Finally, here is an example that shows the @term{scope} of
@term{declarations} in an @term{iteration form}.

@lisp
 (let ((x  1))                     ;[1]
   (declare (special x))           ;[2]
     (let ((x 2))                  ;[3]
       (dotimes (i x x)            ;[4]
         (declare (special x)))))  ;[5]
@EV{} 1
@end lisp


In this example, the first reference to @f{x} on the fourth line is to
the @term{lexical binding} of @f{x} established on the third line.
However, the second occurrence of @f{x} on the fourth line lies within
the @term{scope} of the @term{free declaration} on the fifth line
(because this is the @param{result-form} of the @code{dotimes})
and therefore refers to the @term{dynamic binding} of @f{x}.



@node Lambda Lists
@section Lambda Lists

A @newterm{lambda list} is a @term{list} that
specifies a set of @term{parameters} (sometimes called @term{lambda variables})
and a protocol for receiving @term{values} for those @term{parameters}.

There are several kinds of @term{lambda lists}.


@float Figure,fig3.10
@cartouche
@multitable{@code{define-method-combination} @kwd{arguments} option}{@term{define-method-combination arguments lambda list}}
@headitem Context @tab Kind of Lambda List
@item @code{defun} @term{form} @tab @term{ordinary lambda list}
@item @code{defmacro} @term{form} @tab @term{macro lambda list}
@item @term{lambda expression} @tab @term{ordinary lambda list}
@item @code{flet} local @term{function} definition @tab @term{ordinary lambda list}
@item @code{labels} local @term{function} definition @tab @term{ordinary lambda list}
@item @code{handler-case} @param{clause} specification @tab @term{ordinary lambda list}
@item @code{restart-case} @param{clause} specification @tab @term{ordinary lambda list}
@item @code{macrolet} local @term{macro} definition @tab @term{macro lambda list}
@item @code{define-method-combination} @tab @term{ordinary lambda list}
@item @code{define-method-combination} @kwd{arguments} option @tab @term{define-method-combination arguments lambda list}
@item @code{defstruct} @kwd{constructor} option @tab @term{boa lambda list}
@item @code{defgeneric} @term{form} @tab @term{generic function lambda list}
@item @code{defgeneric} @term{method} clause @tab @term{specialized lambda list}
@item @code{defmethod} @term{form} @tab @term{specialized lambda list}
@item @code{defsetf} @term{form} @tab @term{defsetf lambda list}
@item @code{define-setf-expander} @term{form} @tab @term{macro lambda list}
@item @code{deftype} @term{form} @tab @term{deftype lambda list}
@item @code{destructuring-bind} @term{form} @tab @term{destructuring lambda list}
@item @code{define-compiler-macro} @term{form} @tab @term{macro lambda list}
@item @code{define-modify-macro} @term{form} @tab @term{define-modify-macro lambda list}
@end multitable
@end cartouche
@caption{What Kind of Lambda Lists to Use}
@end float


@Thenextfigure{}@spc{}lists some @term{defined names} that are applicable
to @term{lambda lists}.


@float Figure,fig3.11
@cartouche
@multitable{lambda-list-keywords}{lambda-parameters-limit}{}

@item lambda-list-keywords @tab lambda-parameters-limit @tab 
@end multitable
@end cartouche
@caption{Defined names applicable to lambda lists}
@end float


@menu
* Ordinary Lambda Lists::
* Generic Function Lambda Lists::
* Specialized Lambda Lists::
* Macro Lambda Lists::
* Destructuring Lambda Lists::
* Boa Lambda Lists::
* Defsetf Lambda Lists::
* Deftype Lambda Lists::
* Define-modify-macro Lambda Lists::
* Define-method-combination Arguments Lambda Lists::
* Syntactic Interaction of Documentation Strings and Declarations::
@end menu
@node Ordinary Lambda Lists
@subsection Ordinary Lambda Lists

An @newterm{ordinary lambda list} is used to describe how a set of
@term{arguments} is received by an @term{ordinary} @term{function}.  
The @term{defined names} in @thenextfigure{}@spc{}are those which use
@term{ordinary lambda lists}:


@float Figure,fig3.12
@cartouche
@multitable{define-method-combination}{handler-case}{restart-case}

@item define-method-combination @tab handler-case @tab restart-case
@item defun @tab labels @tab 
@item flet @tab lambda @tab 
@end multitable
@end cartouche
@caption{Standardized Operators that use Ordinary Lambda Lists}
@end float


An @term{ordinary lambda list} can contain the @term{lambda list keywords} shown
in @thenextfigure{}.


@float Figure,fig3.13
@cartouche
@multitable{@keyref{allow-other-keys}}{@keyref{optional}}{@keyref{rest}}

@item @keyref{allow-other-keys} @tab @keyref{key} @tab @keyref{rest}
@item @keyref{aux} @tab @keyref{optional} @tab 
@end multitable
@end cartouche
@caption{Lambda List Keywords used by Ordinary Lambda Lists}
@end float


Each @term{element} of a @term{lambda list} is either a parameter specifier
or a @term{lambda list keyword}.
Implementations are free to provide additional @term{lambda list keywords}.
For a list of all @term{lambda list keywords}
used by the implementation, see @code{lambda-list-keywords}.

The syntax for @term{ordinary lambda lists} is as follows: 


@auxbnf{lambda-list, @lparen{}@starparam{var}@CR{} @spc{}@ttbrac{@opt{} @star{@VarValueSuppliedP{}}}@CR{} @spc{}@ttbrac{@rest{} @param{var}}@CR{} @spc{}@f{[}@Vtop{}@hbox{@key{} @star{@KeyVarValueSuppliedP{}}}  @hbox{@brac{@allowotherkeys{}}@f{]}}@CR{} @spc{}@ttbrac{@aux{} @star{@VarValue{}}}@rparen{}@CR{}}

A @param{var} or @param{supplied-p-parameter} must be a @term{symbol}
that is not the name of a @term{constant variable}.

An @param{init-form} can be any @term{form}.
Whenever any @param{init-form} is evaluated for any parameter
specifier, that @term{form} may refer to any parameter variable to
the left of the specifier in which the @param{init-form} appears,
including any @param{supplied-p-parameter} variables, and may rely 
on the fact that no other parameter variable has yet been bound
(including its own parameter variable).

A @param{keyword-name} can be any @term{symbol}, 
but by convention is normally a @term{keyword}@sub1{};
all @term{standardized} @term{functions} follow that convention.

An @term{ordinary lambda list} has five parts, any or all of which may be empty.
For information about the treatment of argument mismatches,
see @ref{Error Checking in Function Calls, Section 3.5 (Error Checking in Function Calls)}.

@subsubsection Specifiers for the required parameters

These are all the parameter specifiers up to 
the first @term{lambda list keyword};
if there are no @term{lambda list keywords}, 
then all the specifiers are for required parameters.
Each required parameter is specified by a parameter variable @param{var}.
@param{var} is bound as a lexical variable unless it is declared @code{special}.

If there are @f{n} required parameters (@f{n} may be zero), 
there must be at least @f{n} passed arguments, and the 
required parameters are bound to the first @f{n} passed arguments;
see @ref{Error Checking in Function Calls, Section 3.5 (Error Checking in Function Calls)}.
The other parameters are then processed using any remaining arguments.


@subsubsection Specifiers for optional parameters
@cindex &optional

If @keyref{optional} is present,
the optional parameter specifiers are those following 
@keyref{optional} 
up to the next @term{lambda list keyword} or the end of the list.
If optional parameters are specified, then each one is processed as
follows.  If any unprocessed arguments remain, then the parameter variable
@param{var} is bound to the next remaining argument, just as for a required
parameter.  If no arguments remain, however, then @param{init-form} 
is evaluated, and the parameter variable
is bound to the resulting value 
(or to @nil{}@spc{}if no @param{init-form} appears
in the parameter specifier).
If another variable name @param{supplied-p-parameter} 
appears in the specifier, it is bound
to @term{true} if an argument had been available, and to @term{false} if no
argument remained (and therefore @param{init-form} had to be evaluated).
@param{Supplied-p-parameter}
is bound not to an argument but to a value indicating whether or not
an argument had been supplied for the corresponding @param{var}.


@subsubsection A specifier for a rest parameter
@cindex &rest

@keyref{rest}, if present, must be followed by a single @term{rest parameter}
specifier, which in turn must be followed by another 
@term{lambda list keyword} or the end of the @term{lambda list}.  After all
optional parameter specifiers have been processed, then there may or
may not be a @term{rest parameter}.  If there is a @term{rest parameter}, it is
bound to a @term{list} of all as-yet-unprocessed arguments.  If
no unprocessed arguments remain, the @term{rest parameter} is bound to the
@term{empty list}.  If there is no @term{rest parameter} and there are no 
@term{keyword parameters}, then an error 
should be signaled if
any unprocessed arguments remain; see @ref{Error Checking in Function Calls, Section 3.5 (Error Checking in Function Calls)}.
The value of a @term{rest parameter}
is permitted, but not required, to share structure with the
last argument to @code{apply}.

@cindex &key
@cindex &allow-other-keys

@subsubsection Specifiers for keyword parameters

If @keyref{key} 
is present, all specifiers up to the next @term{lambda list keyword}
or the end of the @term{list} are keyword parameter specifiers.
When keyword parameters are processed,
the same arguments are processed that
would be made into a @term{list} for a @term{rest parameter}.
It is permitted to specify both @keyref{rest} and @keyref{key}.
In this case the remaining arguments are used for both purposes;
that is, all remaining arguments are made into a @term{list} for the
@term{rest parameter}, and are also processed for the @keyref{key} parameters.
If @keyref{key} is specified, there must remain
an even number of arguments; see @ref{OddNumberOfKeyArgs, Section 3.5.1.6 (Odd Number of Keyword Arguments)}.
These arguments are considered as pairs,
the first argument in each pair being interpreted as a name
and the second as the corresponding value.
The first @term{object} of each pair must be a @term{symbol};
see @ref{InvalidKeyArgs, Section 3.5.1.5 (Invalid Keyword Arguments)}.
The keyword parameter specifiers may optionally be followed by the
@term{lambda list keyword} @keyref{allow-other-keys}.

In each keyword parameter specifier must be a name @param{var} for
the parameter variable.
If the @param{var} appears alone or in a @f{(@param{var} @param{init-form})}
combination, the keyword name used when matching @term{arguments} to @term{parameters}
is a @term{symbol} in the @code{KEYWORD} @term{package} whose @term{name} is the
@term{same} (under @code{string=}) as @param{var}'s.
If the notation @f{((@param{keyword-name} @param{var}) @param{init-form})} is used,
then the keyword name used to match @term{arguments} to @term{parameters} is
@param{keyword-name}, which may be a @term{symbol} in any @term{package}.
(Of course, if it is not a @term{symbol} in the @code{KEYWORD} @term{package},
it does not necessarily self-evaluate, so care must be taken when calling the function
to make sure that normal evaluation still yields the keyword name.)
Thus

@lisp
 (defun foo (&key radix (type 'integer)) ...)
@end lisp

means exactly the same as

@lisp
 (defun foo (&key ((:radix radix)) ((:type type) 'integer)) ...)
@end lisp


The keyword parameter specifiers are, like all parameter specifiers,
effectively processed from left to right.  For each keyword parameter
specifier, if there is an argument pair whose name matches that
specifier's name (that is, the names are @code{eq}), then the
parameter variable for that specifier is bound to the second item (the
value) of that argument pair.  If more than one such argument pair
matches, the leftmost argument pair is used.  If no such argument pair
exists, then the @param{init-form} for that specifier is evaluated and
the parameter variable is bound to that value (or to @nil{}@spc{}if no
@param{init-form} was specified).  @param{supplied-p-parameter} is
treated as for @keyref{optional} parameters: it is bound to @term{true} if there
was a matching argument pair, and to @term{false} otherwise.

Unless keyword argument checking is suppressed,
an argument pair must a name matched by a parameter specifier;
see @ref{UnrecognizedKeyArgs, Section 3.5.1.4 (Unrecognized Keyword Arguments)}.

If keyword argument checking is suppressed, 
then it is permitted for an argument pair
to match no parameter specifier, and the argument pair is ignored, but
such an argument pair is accessible through the @term{rest parameter} if
one was supplied.  The purpose of these mechanisms is to allow sharing
of argument lists among several @term{lambda expressions} and to
allow either the caller or the called @term{lambda expression} to
specify that such sharing may be taking place.

Note that if @keyref{key} is present, a keyword argument of @kwd{allow-other-keys}
is always permitted---regardless of whether the associated value is @term{true}
or @term{false}.  However, if the value is @term{false}, other non-matching
keywords are not tolerated (unless @keyref{allow-other-keys} was used).

Furthermore, if the receiving argument list specifies a regular argument which
would be flagged by @kwd{allow-other-keys}, then @kwd{allow-other-keys} has both
its special-cased meaning (identifying whether additional keywords are permitted)
and its normal meaning (data flow into the function in question).

@unnumberedsubsubsec 3.4.1.4.1 Suppressing Keyword Argument Checking

@anchor{SuppressingKeyArgChecks}

If @keyref{allow-other-keys} was specified in the @term{lambda list} of a @term{function},
@term{keyword}@sub2{} @term{argument} checking is suppressed in calls
to that @term{function}.

If @thekeyarg{allow-other-keys} is @term{true} in a call to a @term{function},
@term{keyword}@sub2{} @term{argument} checking is suppressed 
in that call.

@Thekeyarg{allow-other-keys} is permissible in all situations involving
@term{keyword}@sub2{} @term{arguments}, even when its associated @term{value}
is @term{false}.

@unnumberedsubsubsec 3.4.1.4.1.1 Examples of Suppressing Keyword Argument Checking


@lisp
;;; The caller can supply :ALLOW-OTHER-KEYS T to suppress checking.
 ((lambda (&key x) x) :x 1 :y 2 :allow-other-keys t) @EV{} 1
;;; The callee can use &ALLOW-OTHER-KEYS to suppress checking.
 ((lambda (&key x &allow-other-keys) x) :x 1 :y 2) @EV{} 1
;;; :ALLOW-OTHER-KEYS NIL is always permitted.
 ((lambda (&key) t) :allow-other-keys nil) @EV{} T
;;; As with other keyword arguments, only the left-most pair
;;; named :ALLOW-OTHER-KEYS has any effect.
 ((lambda (&key x) x) 
  :x 1 :y 2 :allow-other-keys t :allow-other-keys nil)
@EV{} 1
;;; Only the left-most pair named :ALLOW-OTHER-KEYS has any effect,
;;; so in safe code this signals a PROGRAM-ERROR (and might enter the
;;; debugger).  In unsafe code, the consequences are undefined.
 ((lambda (&key x) x)                   ;This call is not valid
  :x 1 :y 2 :allow-other-keys nil :allow-other-keys t)
@end lisp





@subsubsection Specifiers for @keyref{aux} variables
@cindex &aux

These are not really parameters.  If the @term{lambda list keyword}
@keyref{aux} is present, all specifiers after it are auxiliary variable
specifiers.  After all parameter specifiers have been processed, the
auxiliary variable specifiers (those following @aux{}) are processed
from left to right.  For each one, @param{init-form} is evaluated and
@param{var} is bound to that value (or to @nil{}@spc{}if no @param{init-form}
was specified).  @keyref{aux} variable processing is analogous to
@code{let*} processing.

@lisp
 (lambda (x y &aux (a (car x)) (b 2) c) (list x y a b c))
    @EQ{} (lambda (x y) (let* ((a (car x)) (b 2) c) (list x y a b c)))
@end lisp



@subsubsection Examples of Ordinary Lambda Lists

Here are some examples involving @term{optional parameters} and @term{rest parameters}:

@lisp
 ((lambda (a b) (+ a (* b 3))) 4 5) @EV{} 19
 ((lambda (a &optional (b 2)) (+ a (* b 3))) 4 5) @EV{} 19
 ((lambda (a &optional (b 2)) (+ a (* b 3))) 4) @EV{} 10
 ((lambda (&optional (a 2 b) (c 3 d) &rest x) (list a b c d x)))
@EV{} (2 NIL 3 NIL NIL)
 ((lambda (&optional (a 2 b) (c 3 d) &rest x) (list a b c d x)) 6)
@EV{} (6 T 3 NIL NIL)
 ((lambda (&optional (a 2 b) (c 3 d) &rest x) (list a b c d x)) 6 3)
@EV{} (6 T 3 T NIL)
 ((lambda (&optional (a 2 b) (c 3 d) &rest x) (list a b c d x)) 6 3 8)
@EV{} (6 T 3 T (8))
 ((lambda (&optional (a 2 b) (c 3 d) &rest x) (list a b c d x))
  6 3 8 9 10 11)
@EV{} (6 t 3 t (8 9 10 11))
@end lisp


Here are some examples involving @term{keyword parameters}:

@lisp
 ((lambda (a b &key c d) (list a b c d)) 1 2) @EV{} (1 2 NIL NIL)
 ((lambda (a b &key c d) (list a b c d)) 1 2 :c 6) @EV{} (1 2 6 NIL)
 ((lambda (a b &key c d) (list a b c d)) 1 2 :d 8) @EV{} (1 2 NIL 8)
 ((lambda (a b &key c d) (list a b c d)) 1 2 :c 6 :d 8) @EV{} (1 2 6 8)
 ((lambda (a b &key c d) (list a b c d)) 1 2 :d 8 :c 6) @EV{} (1 2 6 8)
 ((lambda (a b &key c d) (list a b c d)) :a 1 :d 8 :c 6) @EV{} (:a 1 6 8)
 ((lambda (a b &key c d) (list a b c d)) :a :b :c :d) @EV{} (:a :b :d NIL)
 ((lambda (a b &key ((:sea c)) d) (list a b c d)) 1 2 :sea 6) @EV{} (1 2 6 NIL)
 ((lambda (a b &key ((c c)) d) (list a b c d)) 1 2 'c 6) @EV{} (1 2 6 NIL)
@end lisp


Here are some examples involving @term{optional parameters}, @term{rest parameters},
and @term{keyword parameters} together:

@lisp
 ((lambda (a &optional (b 3) &rest x &key c (d a))
    (list a b c d x)) 1)   
@EV{} (1 3 NIL 1 ()) 
 ((lambda (a &optional (b 3) &rest x &key c (d a))
    (list a b c d x)) 1 2)
@EV{} (1 2 NIL 1 ())
 ((lambda (a &optional (b 3) &rest x &key c (d a))
    (list a b c d x)) :c 7)
@EV{} (:c 7 NIL :c ())
 ((lambda (a &optional (b 3) &rest x &key c (d a))
    (list a b c d x)) 1 6 :c 7)
@EV{} (1 6 7 1 (:c 7))
 ((lambda (a &optional (b 3) &rest x &key c (d a))
    (list a b c d x)) 1 6 :d 8)
@EV{} (1 6 NIL 8 (:d 8))
 ((lambda (a &optional (b 3) &rest x &key c (d a))
    (list a b c d x)) 1 6 :d 8 :c 9 :d 10)
@EV{} (1 6 9 8 (:d 8 :c 9 :d 10))
@end lisp


As an example of the use of @keyref{allow-other-keys} and
@kwd{allow-other-keys}, consider a @term{function} that takes two named
arguments of its own and also accepts additional named arguments to be
passed to @code{make-array}:

@lisp
 (defun array-of-strings (str dims &rest named-pairs
                          &key (start 0) end &allow-other-keys)
   (apply #'make-array dims
          :initial-element (subseq str start end)
          :allow-other-keys t
          named-pairs))
@end lisp


This @term{function} takes a @term{string} and dimensioning
information and returns an @term{array} of the specified
dimensions, each of whose elements is the specified 
@term{string}.  However, @kwd{start} and @kwd{end} named
arguments may be used to specify that a substring of the given
@term{string} should be used.  In addition, the presence of
@keyref{allow-other-keys} in the @term{lambda list} indicates that the
caller may supply additional named arguments; the @term{rest parameter}
provides access to them.  These additional named arguments are passed
to @code{make-array}.  The @term{function} @code{make-array}
normally does not allow the named arguments @kwd{start} 
and @kwd{end} to be used, and an error should be
signaled if such named arguments are supplied to @code{make-array}.
However, the presence in the call to @code{make-array} 
of the named argument @kwd{allow-other-keys} with
a @term{true} value causes any extraneous named arguments, including
@kwd{start} and @kwd{end}, to be acceptable and ignored.



@node Generic Function Lambda Lists
@subsection Generic Function Lambda Lists

A @newterm{generic function lambda list} is used to describe the overall shape of
the argument list to be accepted by a @term{generic function}.
Individual @term{method} @term{signatures} might contribute additional 
@term{keyword parameters} to the @term{lambda list} of the @term{effective method}.

A @term{generic function lambda list} is used by @code{defgeneric}.

A @term{generic function lambda list} has the following syntax:


@auxbnf{lambda-list, @lparen{}@starparam{var}@CR{} @spc{}@ttbrac{@opt{} @star{@JustVar{}}}@CR{} @spc{}@ttbrac{@rest{} @param{var}}@CR{} @spc{}@f{[}@Vtop{}@hbox{@key{} @star{@JustKey{}}}  @hbox{@brac{@allowotherkeys{}}@f{]}@rparen{}}@CR{}}

A @term{generic function lambda list} can contain the @term{lambda list keywords} shown
in @thenextfigure{}.


@float Figure,fig3.14
@cartouche
@multitable{@keyref{allow-other-keys}}{@keyref{optional}}{}

@item @keyref{allow-other-keys} @tab @keyref{optional} @tab 
@item @keyref{key} @tab @keyref{rest} @tab 
@end multitable
@end cartouche
@caption{Lambda List Keywords used by Generic Function Lambda Lists}
@end float


A @term{generic function lambda list} differs from an @term{ordinary lambda list} 
in the following ways:


@table @asis
@item @id{@bf{Required arguments}}


Zero or more @term{required parameters} must be specified.

@item @id{@bf{Optional and keyword arguments}}


@term{Optional parameters} and @term{keyword parameters} may not have 
default initial value forms nor use supplied-p parameters.

@item @id{@bf{Use of @keyref{aux}}}


The use of @keyref{aux} is not allowed. 
@end table



@goodbreak{}
@node Specialized Lambda Lists
@subsection Specialized Lambda Lists

A @newterm{specialized lambda list} is used to @term{specialize} a @term{method}
for a particular @term{signature} and to describe how @term{arguments} matching
that @term{signature} are received by the @term{method}.  
The @term{defined names} in @thenextfigure{}@spc{}use @term{specialized lambda lists}
in some way; see the dictionary entry for each for information about how.


@float Figure,fig3.15
@cartouche
@multitable{defmethod}{defgeneric}{}

@item defmethod @tab defgeneric @tab 
@end multitable
@end cartouche
@caption{Standardized Operators that use Specialized Lambda Lists}
@end float


A @term{specialized lambda list} can contain the @term{lambda list keywords} shown
in @thenextfigure{}.


@float Figure,fig3.16
@cartouche
@multitable{@keyref{allow-other-keys}}{@keyref{optional}}{@keyref{rest}}

@item @keyref{allow-other-keys} @tab @keyref{key} @tab @keyref{rest}
@item @keyref{aux} @tab @keyref{optional} @tab 
@end multitable
@end cartouche
@caption{Lambda List Keywords used by Specialized Lambda Lists}
@end float


A @term{specialized lambda list} is syntactically the same as an @term{ordinary lambda list}
except that each @term{required parameter} may optionally be associated with a @term{class}
or @term{object} for which that @term{parameter} is @term{specialized}.


@auxbnf{lambda-list, @lparen{}@star{@SpecializedVar{}}@CR{} @xparen{}@ttbrac{@opt{} @star{@VarValueSuppliedP{}}}@CR{} @xparen{}@ttbrac{@rest{} @param{var}}@CR{} @xparen{}@ttbrac{@key{} @star{@KeyVarValueSuppliedP{}} @brac{@allowotherkeys{}}}@CR{} @xparen{}@ttbrac{@aux{} @star{@VarValue{}}}@rparen{}@CR{}}


@node Macro Lambda Lists
@subsection Macro Lambda Lists

A @newterm{macro lambda list} is used in describing @term{macros} 
defined by the @term{operators} in @thenextfigure{}.


@float Figure,fig3.17
@cartouche
@multitable{define-compiler-macro}{defmacro}{macrolet}

@item define-compiler-macro @tab defmacro @tab macrolet
@item define-setf-expander @tab  @tab 
@end multitable
@end cartouche
@caption{Operators that use Macro Lambda Lists}
@end float


With the additional restriction that
an @term{environment parameter} may appear only once
(at any of the positions indicated),
a @term{macro lambda list} has the following syntax:

@macrolambdalist{}
@auxbnf{envvar, @ttbrac{@environment{} @param{var}}}
@auxbnf{wholevar, @ttbrac{@whole{} @param{var}}}
@auxbnf{lambda-list, @lparen{}@down{wholevar} @down{envvar} @xparen{}@down{reqvars} @down{envvar} @xparen{}@down{optvars} @down{envvar}@CR{} @xparen{}@down{restvar} @down{envvar} @xparen{}@down{keyvars} @down{envvar} @xparen{}@down{auxvars} @down{envvar}@rparen{}@spc{}|@CR{} @lparen{}@down{wholevar} @down{envvar} @xparen{}@down{reqvars} @down{envvar} @xparen{}@down{optvars} @down{envvar} @f{.} @xparen{}@param{var}@rparen{}}
@auxbnf{pattern, @paren{@down{wholevar} @down{reqvars} @down{optvars} @down{restvar} @down{keyvars} @down{auxvars}} |@CR{} @paren{@down{wholevar} @down{reqvars} @down{optvars} @f{.} @param{var}}}

A @term{macro lambda list} can contain
the @term{lambda list keywords} shown in @thenextfigure{}.


@float Figure,fig3.18
@cartouche
@multitable{@keyref{allow-other-keys}}{@keyref{environment}}{@keyref{whole}}

@item @keyref{allow-other-keys} @tab @keyref{environment} @tab @keyref{rest}
@item @keyref{aux} @tab @keyref{key} @tab @keyref{whole}
@item @keyref{body} @tab @keyref{optional} @tab 
@end multitable
@end cartouche
@caption{Lambda List Keywords used by Macro Lambda Lists}
@end float


@term{Optional parameters} (introduced by @keyref{optional}) and
@term{keyword parameters} (introduced by @keyref{key})
can be supplied in a @term{macro lambda list},
just as in an @term{ordinary lambda list}.
Both may contain default initialization forms and @term{supplied-p parameters}.

@keyref{body}
@cindex &body
is identical in function to @keyref{rest},
but it can be used to inform certain output-formatting 
and editing functions that the remainder of the @term{form} is
treated as a body, and should be indented accordingly.
Only one of @keyref{body} or @keyref{rest} can be used at any particular level; 
see @ref{DestructuringByLambdaLists, Section 3.4.4.1 (Destructuring by Lambda Lists)}.
@keyref{body} can appear at any level of a 
@term{macro lambda list}; 
for details, see @ref{DestructuringByLambdaLists, Section 3.4.4.1 (Destructuring by Lambda Lists)}.

@keyref{whole}
@cindex &whole
is followed by a single variable that is bound to the
entire macro-call form; this is the value that the @term{macro function}
receives as its first argument.
If @keyref{whole} and a following variable appear,
they must appear first in @param{lambda-list},
before any other parameter or @term{lambda list keyword}.
@keyref{whole} can appear at any level of a @term{macro lambda list}. 
At inner levels, the @keyref{whole} variable is bound to
the corresponding part of the argument, 
as with @keyref{rest}, but unlike @keyref{rest}, other arguments are also allowed.
The use of @keyref{whole} does not affect the pattern of arguments
specified.

@keyref{environment}
@cindex &environment
is followed by a single variable that is bound
to an @term{environment} representing the @term{lexical environment} in which the
macro call is to be interpreted.
This @term{environment} 
should be used with
@code{macro-function},
@code{get-setf-expansion},
@code{compiler-macro-function}, 
and
@code{macroexpand} 
(for example) in computing the expansion of the macro, to ensure that any
@term{lexical bindings} or definitions established in the 
@term{compilation environment} are taken into account.
@keyref{environment} can only appear at the top level of a
@term{macro lambda list}, and can only
appear once, but can appear anywhere in that list;
the @keyref{environment} @term{parameter} is @term{bound} along with @keyref{whole}
before any other @term{variables} in the @term{lambda list}, regardless of where
@keyref{environment} appears in the @term{lambda list}.
The @term{object} that is bound to the
@term{environment parameter} has @term{dynamic extent}.

Destructuring allows a @term{macro lambda list} to express
the structure of a macro call syntax.
If no @term{lambda list keywords} appear,
then the @term{macro lambda list} is a @term{tree}
containing parameter names at the leaves.
The pattern and the @term{macro form} must have compatible @term{tree structure}; 
that is, their @term{tree structure} must be equivalent,
or it must differ only in that some @term{leaves} of the pattern
match @term{non-atomic} @term{objects} of the @term{macro form}.
For information about error detection in this @term{situation},
see @ref{DestructuringMismatch, Section 3.5.1.7 (Destructuring Mismatch)}.

A destructuring @term{lambda list}
(whether at top level or embedded) 
can
be dotted, ending
in a parameter name.  This situation is treated exactly as if the
parameter name that ends the @term{list} had appeared preceded by @keyref{rest}.

It is permissible for a @term{macro} @term{form} (or a @term{subexpression} of a
@term{macro} @term{form})
to be a @term{dotted list} 
only  when @f{(... @ampers{}rest var)} or @f{(... . var)} is used to match
it. It is the responsibility of the @term{macro} to recognize and deal
with such situations.
@editornote{KMP: Apparently the dotted-macro-forms cleanup doesn't allow for
the macro to `manually' notice dotted forms and fix them as well.
It shouldn't be required that this be done only by @ampers{}REST or 
a dotted pattern; it should only matter that ultimately the 
non-macro result of a full-macro expansion not contain dots.
Anyway, I plan to address this editorially unless someone
raises an objection.}

@subsubsection Destructuring by Lambda Lists
@anchor{DestructuringByLambdaLists}

Anywhere in a @term{macro lambda list} where a parameter
name can appear, and where @term{ordinary lambda list} syntax
(as described in @ref{Ordinary Lambda Lists, Section 3.4.1 (Ordinary Lambda Lists)}) does not 
otherwise allow a @term{list}, a @term{destructuring lambda list} 
can appear in place
of the parameter name.  When this is done, then the argument 
that would match the parameter is treated as a (possibly dotted) @term{list},
to be used as an argument list for satisfying the
parameters in the embedded @term{lambda list}.
This is known as destructuring.


Destructuring is the process of decomposing a compound @term{object} into
its component parts, using an abbreviated, declarative syntax, rather
than writing it out by hand using the primitive component-accessing
functions.  Each component part is bound to a variable.



A destructuring operation requires an @term{object} to be decomposed, 
a pattern that specifies what components are to be extracted, and the names
of the variables whose values are to be the components.

@unnumberedsubsubsec 3.4.4.1.1 Data-directed Destructuring by Lambda Lists


In data-directed destructuring,
the pattern is a sample @term{object} of the @term{type} to be decomposed.
Wherever a component is to be extracted, 
a @term{symbol} appears in the pattern; 
this @term{symbol} is the name of the variable whose value will be that component.

@unnumberedsubsubsec 3.4.4.1.1.1 Examples of Data-directed Destructuring by Lambda Lists


An example pattern is

@tt{(a b c)}

which destructures a list of three elements.  The variable @f{a} is assigned
to the first element, @f{b} to the second, etc.  A more complex example
is

@tt{((first . rest) . more)}

The important features of data-directed destructuring are its syntactic
simplicity and the ability to extend it to lambda-list-directed destructuring.



@unnumberedsubsubsec 3.4.4.1.2 Lambda-list-directed Destructuring by Lambda Lists


An extension of data-directed destructuring of @term{trees} is
lambda-list-directed destructuring.  This derives from the analogy
between the three-element destructuring pattern

@tt{(first second third)}

and the three-argument @term{lambda list}

@tt{(first second third)}


Lambda-list-directed destructuring is identical to data-directed destructuring
if no @term{lambda list keywords} appear in the pattern.  
Any list in the pattern (whether a sub-list or the whole pattern itself)
that contains a @term{lambda list keyword} is interpreted specially.
Elements of the list to the left of the first
@term{lambda list keyword} are treated as destructuring patterns, as usual, but the
remaining elements of the list are treated like a function's 
@term{lambda list}
except that where a variable would normally be required, an arbitrary
destructuring pattern is allowed.  Note that in case of ambiguity,
@term{lambda list} syntax is preferred over destructuring syntax.  Thus, after
@keyref{optional} a list of elements is a list of a destructuring pattern
and a default value form.

The detailed behavior of each @term{lambda list keyword} in a 
lambda-list-directed destructuring
pattern is as follows:


@table @asis
@item @id{@keyref{optional}}


Each following element is a variable or a list of a destructuring
pattern, a default value form, and a supplied-p variable.  The default value and
the supplied-p variable can be omitted.  
If the list being destructured ends
early, so that it does not have an element to match against this destructuring
(sub)-pattern, the default form is evaluated and destructured instead.  The
supplied-p variable receives the value 
@nil{}@spc{}if the default form is used, @code{t}@spc{}otherwise.

@item @id{@keyref{rest}, @keyref{body}}


The next element is a destructuring pattern that matches the
rest of the list.  @keyref{body} is identical to @keyref{rest} but declares that what
is being matched is a list of forms that constitutes the body of @term{form}.
This next element must be the last unless a @term{lambda list keyword} follows it.

@item @id{@keyref{aux}}
 

The remaining elements are not destructuring patterns at all, but are
auxiliary variable bindings.  

@item @id{@keyref{whole}}


The next element is a destructuring pattern that matches the entire
form in a macro, or the entire @term{subexpression} at inner levels.

@item @id{@keyref{key}}


Each following element is one of

@table @asis

@item @id{}

a @term{variable},

@item @id{or}

a list of a variable,
an optional initialization form,
and an optional supplied-p variable.

@item @id{or}

a list of a list of a keyword and a destructuring pattern,
an optional initialization form,
and an optional supplied-p variable.
@end table

The rest of the list being destructured
is taken to be alternating keywords and values and is taken apart appropriately.

@item @id{@keyref{allow-other-keys}}


Stands by itself.
@end table





@node Destructuring Lambda Lists
@subsection Destructuring Lambda Lists

A @newterm{destructuring lambda list} is used by @code{destructuring-bind}.

@term{Destructuring lambda lists} are closely related to 
@term{macro lambda lists}; see @ref{Macro Lambda Lists, Section 3.4.4 (Macro Lambda Lists)}.
A @term{destructuring lambda list} can contain all of the
@term{lambda list keywords} listed for @term{macro lambda lists}
except for @keyref{environment}, and supports destructuring in the
same way.  Inner @term{lambda lists} nested within a @term{macro lambda list}
have the syntax of @term{destructuring lambda lists}.

A @term{destructuring lambda list} has the following syntax:

@dmacrolambdalist{}
@auxbnf{envvar, @ttbrac{@environment{} @param{var}}}
@auxbnf{wholevar, @ttbrac{@whole{} @param{var}}}
@auxbnf{lambda-list, @paren{@down{wholevar} @down{reqvars} @down{optvars} @down{restvar} @down{keyvars} @down{auxvars}} |@CR{} @paren{@down{wholevar} @down{reqvars} @down{optvars} @f{.} @param{var}}}


@node Boa Lambda Lists
@subsection Boa Lambda Lists

A @newterm{boa lambda list} is a @term{lambda list} that is syntactically 
like an @term{ordinary lambda list}, but that is processed in
``@b{b}y @b{o}rder of @b{a}rgument'' style.

A @term{boa lambda list} is used only in a @code{defstruct} @term{form},
when explicitly specifying the @term{lambda list} 
of a constructor @term{function} (sometimes called a ``boa constructor'').

The @keyref{optional}, @keyref{rest}, @keyref{aux},
@keyref{key}, and @keyref{allow-other-keys}
@term{lambda list keywords} are recognized in a @term{boa lambda list}.
The way these @term{lambda list keywords} differ from their
use in an @term{ordinary lambda list} follows.

Consider this example, which describes how @code{destruct} processes
its @kwd{constructor} option.

@lisp
 (:constructor create-foo
         (a &optional b (c 'sea) &rest d &aux e (f 'eff)))
@end lisp


This defines @f{create-foo} to be a constructor of one or more arguments.
The first argument is used to initialize the @f{a} slot.  The second
argument is used to initialize the @f{b} slot.  If there isn't any
second argument, then the default value given in the body of the
@code{defstruct} (if given) is used instead.  
The third argument is used to
initialize the @f{c} slot.  If there isn't any third argument, then the
symbol @f{sea} is used instead.  Any arguments following the third
argument are collected into a @term{list} 
and used to initialize the @f{d}
slot.  If there are three or fewer arguments, then @nil{}@spc{}is placed in
the @f{d} slot.  The @f{e} slot is not initialized; 
its initial value is @term{implementation-defined}.
Finally, the @f{f} slot is initialized to contain the symbol @f{eff}.
@keyref{key} and @keyref{allow-other-keys} arguments default
in a manner similar to that of @keyref{optional} arguments: if no default
is supplied in the @term{lambda list} then the default value 
given in the body of the @code{defstruct} (if given) is used instead.
For example:

@lisp
 (defstruct (foo (:constructor CREATE-FOO (a &optional b (c 'sea)
                                             &key (d 2)
                                             &aux e (f 'eff))))
   (a 1) (b 2) (c 3) (d 4) (e 5) (f 6))
 
 (create-foo 10) @EV{} #S(FOO A 10 B 2 C SEA D 2 E @term{implemention-dependent} F EFF)
 (create-foo 10 'bee 'see :d 'dee) 
@EV{} #S(FOO A 10 B BEE C SEE D DEE E @term{implemention-dependent} F EFF)
@end lisp


If keyword arguments of the form 
@f{((@i{key} @i{var}) @brac{@i{default} @brac{@i{svar}}})}
are specified, the @term{slot} @term{name} is matched with @i{var} 
(not @i{key}).

The actions taken in the @f{b} and @f{e} cases were carefully
chosen to allow the user to specify all possible behaviors. 
The @keyref{aux} variables can be used to completely override the default
initializations given in the body.

If no default value is supplied for an @term{aux variable} variable,
the consequences are undefined if an attempt is later made to read
the corresponding @term{slot}'s value before a value is explicitly assigned.
If such a @term{slot} has a @kwd{type} option specified,
this suppressed initialization does not imply a type mismatch situation;
the declared type is only required to apply when the @term{slot} is finally assigned.

With this definition, the following can be written:

@lisp
 (create-foo 1 2)
@end lisp

instead of

@lisp
 (make-foo :a 1 :b 2)
@end lisp

and @f{create-foo} provides defaulting different
from that of @f{make-foo}.

Additional arguments that do not correspond to slot names but
are merely present to supply values used in subsequent initialization 
computations are allowed.
For example, in the definition

@lisp
 (defstruct (frob (:constructor create-frob
                  (a &key (b 3 have-b) (c-token 'c) 
                          (c (list c-token (if have-b 7 2))))))
         a b c)
@end lisp


the @tt{c-token} argument is used merely to supply a value used in the 
initialization of the @tt{c} slot. The @term{supplied-p parameters} 
associated with @term{optional parameters} and @term{keyword parameters}
might also be used this way.



@node Defsetf Lambda Lists
@subsection Defsetf Lambda Lists

A @newterm{defsetf lambda list} is used by @code{defsetf}.

A @term{defsetf lambda list} has the following syntax:


@auxbnf{lambda-list, @lparen{}@starparam{var}@CR{} @xparen{}@ttbrac{@opt{} @star{@VarValueSuppliedP{}}}@CR{} @xparen{}@ttbrac{@rest{} @param{var}}@CR{} @xparen{}@f{[}@Vtop{}@hbox{@key{} @star{@KeyVarValueSuppliedP{}}}  @hbox{@brac{@allowotherkeys{}}@f{]}}@CR{} @xparen{}@ttbrac{@environment{} @param{var}}}

A @term{defsetf lambda list} can contain the @term{lambda list keywords} shown
in @thenextfigure{}.


@float Figure,fig3.19
@cartouche
@multitable{@keyref{allow-other-keys}}{@keyref{optional}}{@keyref{rest}}

@item @keyref{allow-other-keys} @tab @keyref{key} @tab @keyref{rest}
@item @keyref{environment} @tab @keyref{optional} @tab 
@end multitable
@end cartouche
@caption{Lambda List Keywords used by Defsetf Lambda Lists}
@end float


A @term{defsetf lambda list} differs from an @term{ordinary lambda list} 
only in that it does not permit the use of @keyref{aux}, 
and that it permits use of @keyref{environment}, 
which introduces an @term{environment parameter}.


@node Deftype Lambda Lists
@subsection Deftype Lambda Lists

A @newterm{deftype lambda list} is used by @code{deftype}.

A @term{deftype lambda list} has the same syntax as a @term{macro lambda list},
and can therefore contain the @term{lambda list keywords} as a @term{macro lambda list}.

A @term{deftype lambda list} differs from a @term{macro lambda list} 
only in that if no @param{init-form} is supplied for an @term{optional parameter}
or @term{keyword parameter} in the @param{lambda-list}, the default @term{value} 
for that @term{parameter} is the @term{symbol} @t{*} (rather than @nil{}).


@node Define-modify-macro Lambda Lists
@subsection Define-modify-macro Lambda Lists

A @newterm{define-modify-macro lambda list} is used by 
@code{define-modify-macro}.

A @term{define-modify-macro lambda list} can contain the 
@term{lambda list keywords} shown in @thenextfigure{}.


@float Figure,fig3.20
@cartouche
@multitable{@keyref{optional}}{@keyref{rest}}

@item @keyref{optional} @tab @keyref{rest}
@end multitable
@end cartouche
@caption{Lambda List Keywords used by Define-modify-macro Lambda Lists}
@end float


@term{Define-modify-macro lambda lists} are similar to 
@term{ordinary lambda lists}, but do not support keyword arguments.
@code{define-modify-macro} has no need match keyword arguments, and
a @term{rest parameter} is sufficient.  @term{Aux variables} are also
not supported, since @code{define-modify-macro} has no body @term{forms}
which could refer to such @term{bindings}.  See the @term{macro} @ref{define-modify-macro}.


@node Define-method-combination Arguments Lambda Lists
@subsection Define-method-combination Arguments Lambda Lists

A @newterm{define-method-combination arguments lambda list} is used by 
the @kwd{arguments} option to @code{define-method-combination}.

A @term{define-method-combination arguments lambda list} can contain the 
@term{lambda list keywords} shown in @thenextfigure{}.


@float Figure,fig3.21
@cartouche
@multitable{@keyref{allow-other-keys}}{@keyref{optional}}{@keyref{whole}}

@item @keyref{allow-other-keys} @tab @keyref{key} @tab @keyref{rest}
@item @keyref{aux} @tab @keyref{optional} @tab @keyref{whole}
@end multitable
@end cartouche
@caption{Lambda List Keywords used by Define-method-combination arguments Lambda Lists}
@end float


@term{Define-method-combination arguments lambda lists} are similar to 
@term{ordinary lambda lists}, but also permit the use of @keyref{whole}.


@node Syntactic Interaction of Documentation Strings and Declarations
@subsection Syntactic Interaction of Documentation Strings and Declarations

In a number of situations, a @term{documentation string} can appear amidst a
series of @t{declare} @term{expressions} prior to a series of @term{forms}.

In that case, if a @term{string} @mat{S} appears where a @term{documentation string} is
permissible and is not followed by 
either a @t{declare} @term{expression} 
or a @term{form}
then @mat{S} is taken to be a @term{form};
otherwise, @mat{S} is taken as a @term{documentation string}.
The consequences are unspecified if more than one such @term{documentation string} 
is present.


@node Error Checking in Function Calls
@section Error Checking in Function Calls


@menu
* Argument Mismatch Detection::
@end menu
@node Argument Mismatch Detection
@subsection Argument Mismatch Detection

@subsubsection Safe and Unsafe Calls
@anchor{SafeAndUnsafeCalls}

A @term{call} is a @newterm{safe call} if each of the following is
either @term{safe} @term{code} or @term{system code} (other than
@term{system code} that results from @term{macro expansion} of 
@term{programmer code}):

@itemize @bullet{}
@item the @term{call}.
@item the definition of the @term{function} being @term{called}.
@item the point of @term{functional evaluation} 
@end itemize


The following special cases require some elaboration:


@itemize @bullet{}
@item
If the @term{function} being called is a @term{generic function},
it is considered @term{safe} if all of the following are
@term{safe code} or @term{system code}:


@itemize --
@item its definition (if it was defined explicitly).
@item the @term{method} definitions for all @term{applicable} @term{methods}.
@item the definition of its @term{method combination}.
@end itemize


@item
For the form @f{(coerce @param{x} 'function)}, 
where @param{x} is a @term{lambda expression},
the value of the @term{optimize quality} @code{safety}
in the global environment at the time the @code{coerce}
is @term{executed} applies to the resulting @term{function}.



@item
For a call to @thefunction{ensure-generic-function}, the value of the
@term{optimize quality} @code{safety} in the @term{environment}
@term{object} passed as the @kwd{environment} @term{argument} applies 
to the resulting @term{generic function}.

@item
For a call to @code{compile} with a @term{lambda expression} as the
@term{argument}, the value of the @term{optimize quality} @code{safety}
in the @term{global environment} at the time @code{compile} is @term{called}
applies to the resulting @term{compiled function}.

@item
For a call to @code{compile} with only one argument, if the original definition
of the @term{function} was @term{safe}, then the resulting @term{compiled function}
must also be @term{safe}.

@item
A @term{call} to a @term{method} by @code{call-next-method} must be 
considered @term{safe} if each of the following is 
@term{safe code} or @term{system code}:


@itemize --
@item the definition of the @term{generic function} (if it was defined explicitly).
@item the @term{method} definitions for all @term{applicable} @term{methods}.
@item the definition of the @term{method combination}.
@item the point of entry into the body of the @term{method defining form},
where the @term{binding} of @code{call-next-method} is established.
@item the point of @term{functional evaluation} of the name @code{call-next-method}.
@end itemize

@end itemize


An @newterm{unsafe call} is a @term{call} that is not a @term{safe call}.

The informal intent is that the @term{programmer} can rely on a @term{call}
to be @term{safe}, even when @term{system code} is involved, if all reasonable
steps have been taken to ensure that the @term{call} is @term{safe}.
For example, if a @term{programmer} calls @code{mapcar} from @term{safe}
@term{code} and supplies a @term{function} that was @term{compiled} 
as @term{safe}, the @term{implementation} is required to ensure that
@code{mapcar} makes a @term{safe call} as well.

@unnumberedsubsubsec 3.5.1.1.1 Error Detection Time in Safe Calls


If an error is signaled in a @term{safe call},
the exact point of the @term{signal} is @term{implementation-dependent}.
In particular, it might be signaled at compile time or at run time,
and if signaled at run time, 
it might be prior to, during, or after @term{executing} the @term{call}.
However, it is always prior to the execution of the body of the @term{function} 
being @term{called}.



@subsubsection Too Few Arguments

It is not permitted to supply too few @term{arguments} to a @term{function}.
Too few arguments means fewer @term{arguments} than the number of @term{required parameters} 
for the @term{function}.

If this @term{situation} occurs in a @term{safe call},
an error @oftype{program-error} must be signaled;
and in an @term{unsafe call} the @term{situation} has undefined consequences.


@subsubsection Too Many Arguments

It is not permitted to supply too many @term{arguments} to a @term{function}.
Too many arguments means more @term{arguments} than the number of @term{required parameters}
plus the number of @term{optional parameters}; however, if the @term{function} 
uses @keyref{rest} or @keyref{key}, it is not possible for it to receive too many arguments.

If this @term{situation} occurs in a @term{safe call},
an error @oftype{program-error} must be signaled;
and in an @term{unsafe call} the @term{situation} has undefined consequences.


@subsubsection Unrecognized Keyword Arguments
@anchor{UnrecognizedKeyArgs}

It is not permitted to supply a keyword argument to a @term{function}
using a name that is not recognized by that @term{function} 
unless keyword argument checking is suppressed as described
in @ref{SuppressingKeyArgChecks, Section 3.4.1.4.1 (Suppressing Keyword Argument Checking)}.

If this @term{situation} occurs in a @term{safe call},
an error @oftype{program-error} must be signaled;
and in an @term{unsafe call} the @term{situation} has undefined consequences.


@subsubsection Invalid Keyword Arguments
@anchor{InvalidKeyArgs}

It is not permitted to supply a keyword argument to a @term{function}
using a name that is not a @term{symbol}.

If this @term{situation} occurs in a @term{safe call},
an error @oftype{program-error} must be signaled 
unless keyword argument checking is suppressed as described
in @ref{SuppressingKeyArgChecks, Section 3.4.1.4.1 (Suppressing Keyword Argument Checking)};
and in an @term{unsafe call} the @term{situation} has undefined consequences.


@subsubsection Odd Number of Keyword Arguments
@anchor{OddNumberOfKeyArgs}


An odd number of @term{arguments} must not be supplied for the @term{keyword parameters}.

If this @term{situation} occurs in a @term{safe call},
an error @oftype{program-error} must be signaled
unless keyword argument checking is suppressed as described
in @ref{SuppressingKeyArgChecks, Section 3.4.1.4.1 (Suppressing Keyword Argument Checking)};
and in an @term{unsafe call} the @term{situation} has undefined consequences.



@subsubsection Destructuring Mismatch
@anchor{DestructuringMismatch}


When matching a @term{destructuring lambda list} against a @term{form},
the pattern and the @term{form} must have compatible @term{tree structure},
as described in @ref{Macro Lambda Lists, Section 3.4.4 (Macro Lambda Lists)}.

Otherwise, in a @term{safe call},
an error @oftype{program-error} must be signaled;
and in an @term{unsafe call} the @term{situation} has undefined consequences.



@subsubsection Errors When Calling a Next Method

If @code{call-next-method} is called with @term{arguments}, the ordered
set of @term{applicable} @term{methods} for the changed set of @term{arguments}
for @code{call-next-method} must be the same as the ordered set of 
@term{applicable} @term{methods} for the original @term{arguments} to the
@term{generic function}, or else an error should be signaled.

The comparison between the set of methods applicable to the
new arguments and the set applicable to the original arguments is
insensitive to order differences among methods with the same
specializers.

If @code{call-next-method} is called with @term{arguments} that specify
a different ordered set of @term{applicable} methods and there is no 
@term{next method} available, the test for different methods and the 
associated error signaling (when present) takes precedence over calling
@code{no-next-method}.




@node Traversal Rules and Side Effects
@section Traversal Rules and Side Effects


The consequences are undefined 
when @term{code} executed during an @term{object-traversing} operation
destructively modifies the @term{object} in a way that might affect the
ongoing traversal operation.
In particular, the following rules apply.

@table @asis
@item @id{@b{List traversal}}


For @term{list} traversal operations, the @term{cdr} chain of the
@term{list} is not allowed to be destructively modified.

@item @id{@b{Array traversal}}


For @term{array} traversal operations, the @term{array} is not allowed 
to be adjusted and its @term{fill pointer}, if any, is not allowed to 
be changed.

@item @id{@b{Hash-table traversal}}


For @term{hash table} traversal operations, new elements may not be added
or deleted except that the element corresponding to the current hash key 
may be changed or removed.

@item @id{@b{Package traversal}}


For @term{package} traversal operations (@eg{} @code{do-symbols}),
new @term{symbols} may not be @term{interned} in or @term{uninterned} 
from the @term{package} being traversed 
or any @term{package} that it uses except that the 
current @term{symbol} may be @term{uninterned} from the @term{package} 
being traversed.
@end table



@node Destructive Operations
@section Destructive Operations

@menu
* Modification of Literal Objects::
* Transfer of Control during a Destructive Operation::
@end menu
@node Modification of Literal Objects
@subsection Modification of Literal Objects

The consequences are undefined if @term{literal} @term{objects} 
are destructively modified.  For this purpose, the following operations 
are considered @term{destructive}:


@table @asis

@item @id{@code{random-state}}


Using it as an @term{argument} to @thefunction{random}.

@item @id{@code{cons}}


Changing the @term{car}@sub1{} or @term{cdr}@sub1{} of the @term{cons},
or performing a @term{destructive} operation on an @term{object} which is either
the @term{car}@sub2{} or the @term{cdr}@sub2{} of the @term{cons}.

@item @id{@code{array}}


Storing a new value into some element of the @term{array},
or performing a @term{destructive} operation 
on an @term{object} that is already such an @term{element}.

Changing the @term{fill pointer}, @term{dimensions}, or displacement of
the @term{array} (regardless of whether the @term{array} is @term{actually adjustable}).

Performing a @term{destructive} operation on another @term{array} 
that is displaced to the @term{array} or that otherwise shares its contents
with the @term{array}.

@item @id{@code{hash-table}}


Performing a @term{destructive} operation on any @term{key}.

Storing a new @term{value}@sub4{} for any @term{key},
or performing a @term{destructive} operation 
on any @term{object} that is such a @term{value}.

Adding or removing entries from the @term{hash table}.

@item @id{@code{structure-object}}


Storing a new value into any slot,
or performing a @term{destructive} operation on an @term{object} 
that is the value of some slot.

@item @id{@code{standard-object}}


Storing a new value into any slot,
or performing a @term{destructive} operation on an @term{object} 
that is the value of some slot.

Changing the class of the @term{object} (@eg{} using @thefunction{change-class}).

@item @id{@code{readtable}}


Altering the @term{readtable case}.

Altering the syntax type of any character in this readtable.

Altering the @term{reader macro function} associated with any @term{character}
in the @term{readtable}, or altering the @term{reader macro functions}
associated with @term{characters} defined as @term{dispatching macro characters}
in the @term{readtable}.

@item @id{@code{stream}}


Performing I/O operations on the @term{stream},
or @term{closing} the @term{stream}.

@item @id{All other standardized types}


[This category includes, for example, @code{character},
@code{condition},
@code{function},
@code{method-combination},
@code{method},
@code{number},
@code{package},
@code{pathname},
@code{restart},
and @code{symbol}.]

There are no @term{standardized} @term{destructive} operations
defined on @term{objects} of these @term{types}.
@end table



@node Transfer of Control during a Destructive Operation
@subsection Transfer of Control during a Destructive Operation

Should a transfer of control out of a @term{destructive} operation occur
(@eg{} due to an error) the state of the @param{object} being modified is
@term{implementation-dependent}.

@subsubsection Examples of Transfer of Control during a Destructive Operation

The following examples illustrate some of the many ways in which the
@term{implementation-dependent} nature of the modification can manifest
itself.

@lisp
 (let ((a (list 2 1 4 3 7 6 'five)))
   (ignore-errors (sort a #'<))
   a)
@EV{} (1 2 3 4 6 7 FIVE)
@OV{} (2 1 4 3 7 6 FIVE)
@OV{} (2)

 (prog foo ((a (list 1 2 3 4 5 6 7 8 9 10)))
   (sort a #'(lambda (x y) (if (zerop (random 5)) (return-from foo a) (> x y)))))
@EV{} (1 2 3 4 5 6 7 8 9 10)
@OV{} (3 4 5 6 2 7 8 9 10 1)
@OV{} (1 2 4 3)
@end lisp





@node lambda (Symbol)
@heading lambda (Symbol)
@syindex lambda
@cindex lambda



@subsubheading Syntax:

@Defspec{lambda, lambda-list @DeclsAndDoc{} @starparam{form}}

@subsubheading Arguments:

@param{lambda-list}---an @term{ordinary lambda list}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{documentation}---a @term{string}; @noeval{}.

@param{form}---a @term{form}.

@subsubheading Description:

A @term{lambda expression} is a @term{list} that can be used in place of a
@term{function name} in certain contexts to denote a @term{function} by 
directly describing its behavior rather than indirectly by referring to the 
name of an @term{established} @term{function}.

@param{Documentation} is attached to the denoted @param{function} (if any
is actually created) as a @term{documentation string}.

@subsubheading See Also:

@ref{function (Special Operator)},
@ref{documentation},
@ref{Lambda Expressions, Section 3.1.3 (Lambda Expressions)},
@ref{LambdaForms, Section 3.1.2.1.2.4 (Lambda Forms)},
@ref{Syntactic Interaction of Documentation Strings and Declarations, Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)}

@subsubheading Notes:

The @term{lambda form}

@lisp
 ((lambda @param{lambda-list} . @param{body}) . @param{arguments})
@end lisp


is semantically equivalent to the @term{function form}

@lisp
 (funcall #'(lambda @param{lambda-list} . @param{body}) . @param{arguments})
@end lisp




@node lambda (Macro)
@heading lambda (Macro)
@syindex lambda
@cindex lambda


@subsubheading Syntax:

@DefmacWithValues{lambda, lambda-list @DeclsAndDoc{} @starparam{form}, @param{function}}

@subsubheading Arguments and Values:

@param{lambda-list}---an @term{ordinary lambda list}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{documentation}---a @term{string}; @noeval{}.

@param{form}---a @term{form}.

@param{function}---a @term{function}.

@subsubheading Description:

Provides a shorthand notation for a @code{function} @term{special form}
involving a @term{lambda expression} such that:

@lisp
    (lambda @param{lambda-list} @DeclsAndDoc{} @starparam{form})
 @EQ{} (function (lambda @param{lambda-list} @DeclsAndDoc{} @starparam{form}))
 @EQ{} #'(lambda @param{lambda-list} @DeclsAndDoc{} @starparam{form})
@end lisp


@subsubheading Examples:

@lisp
 (funcall (lambda (x) (+ x 3)) 4) @EV{} 7
@end lisp


@subsubheading See Also:

@ref{lambda (Symbol)} (symbol)

@subsubheading Notes:

This macro could be implemented by:

@lisp
(defmacro lambda (&whole form &rest bvl-decls-and-body)
  (declare (ignore bvl-decls-and-body))
  `#',form)
@end lisp



@node compile
@heading compile (Function)
@syindex compile
@cindex compile



@subsubheading Syntax:

@DefunWithValues{compile, name @opt{} definition, function\, warnings-p\, failure-p}

@subsubheading Arguments and Values:

@param{name}---a @term{function name}, or @nil{}.

@param{definition}---a @term{lambda expression} or a @term{function}.
@Default{the function definition of @param{name} if it names a @term{function},
or the @term{macro function} of @param{name} if it names a @term{macro}}
The consequences are undefined if no @param{definition} is supplied
when the @param{name} is @nil{}.

@param{function}---the @param{function-name},
or a @term{compiled function}.

@param{warnings-p}---a @term{generalized boolean}.

@param{failure-p}---a @term{generalized boolean}.

@subsubheading Description:

Compiles an @term{interpreted function}.

@code{compile} produces a @term{compiled function} from @param{definition}.
If the @param{definition} is a @term{lambda expression},
it is coerced to a @term{function}.  
If the @param{definition} is already a @term{compiled function},
@code{compile} either produces that function itself (@ie{} is an identity operation)
or an equivalent function.

@editornote{KMP: There are a number of ambiguities here that still need resolution.}
If the @param{name} is @nil{},
the resulting @term{compiled function} is returned directly as the @term{primary value}.
If a @term{non-nil} @param{name} is given, 
then the resulting @term{compiled function} replaces 
the existing @term{function} definition of @param{name}
and the @param{name} is returned as the @term{primary value};
if @param{name} is a @term{symbol} that names a @term{macro},
its @term{macro function} is updated
and the @param{name} is returned as the @term{primary value}.

@term{Literal objects} appearing in code processed by 
the @code{compile} function are neither copied nor @term{coalesced}.
The code resulting from the execution of @code{compile} 
references @term{objects} that are @code{eql} to the corresponding
@term{objects} in the source code.  

@code{compile} is permitted, but not required, to @term{establish}
a @term{handler} for @term{conditions} @oftype{error}.
For example, the @term{handler} might issue a warning and 
restart compilation from some @term{implementation-dependent} point 
in order to let the compilation proceed without manual intervention.

The @term{secondary value}, @param{warnings-p}, is @term{false}
if no @term{conditions} @oftype{error} or @code{warning}
were detected by the compiler, and @term{true} otherwise.

The @term{tertiary value}, @param{failure-p}, is @term{false}
if no @term{conditions} @oftype{error} or @code{warning}
(other than @code{style-warning})
were detected by the compiler, and @term{true} otherwise.

@subsubheading Examples:

@lisp
 (defun foo () "bar") @EV{} FOO
 (compiled-function-p #'foo) @EV{} @term{implementation-dependent}
 (compile 'foo) @EV{} FOO 
 (compiled-function-p #'foo) @EV{} @term{true}
 (setf (symbol-function 'foo)
       (compile nil '(lambda () "replaced"))) @EV{} #<Compiled-Function>
 (foo) @EV{} "replaced"
@end lisp


@subsubheading Affected By:

@code{*error-output*},
@code{*macroexpand-hook*}.

The presence of macro definitions and proclamations.

@subsubheading Exceptional Situations:

The consequences are undefined if the @term{lexical environment} surrounding the
@term{function} to be compiled contains any @term{bindings} other than those for
@term{macros}, @term{symbol macros}, or @term{declarations}.


For information about errors detected during the compilation process, 
see @ref{Exceptional Situations in the Compiler, Section 3.2.5 (Exceptional Situations in the Compiler)}.

@subsubheading See Also:

@ref{compile-file}


@node eval
@heading eval (Function)
@syindex eval
@cindex eval


@subsubheading Syntax:

@DefunWithValues{eval, form, @starparam{result}}

@subsubheading Arguments and Values:

@param{form}---a @term{form}.

@param{results}---the @term{values} @term{yielded} by the @term{evaluation} of @param{form}.

@subsubheading Description:

Evaluates @param{form} in the current @term{dynamic environment}
and the @term{null lexical environment}.

@code{eval} is a user interface to the evaluator.

The evaluator expands macro calls as if through the use of @code{macroexpand-1}.

Constants appearing in code
processed by @code{eval} are
not copied nor coalesced. The code resulting from the execution of 
@code{eval}
references @term{objects} 
that are @code{eql} to the corresponding @term{objects} in
the source code.  

@subsubheading Examples:

@lisp
 (setq form '(1+ a) a 999) @EV{} 999
 (eval form) @EV{} 1000
 (eval 'form) @EV{} (1+ A)
 (let ((a '(this would break if eval used local value))) (eval form))
@EV{} 1000
@end lisp


@subsubheading See Also:

@ref{macroexpand-1},
@ref{The Evaluation Model, Section 3.1.2 (The Evaluation Model)}

@subsubheading Notes:

To obtain the current dynamic value of a @term{symbol}, 
use of @code{symbol-value} is equivalent (and usually preferable) 
to use of @code{eval}.

Note that an @code{eval} @term{form} involves two levels of @term{evaluation} 
for its @term{argument}.  First, @param{form} is @term{evaluated} by the
normal argument evaluation mechanism as would occur with any @term{call}.
The @term{object} that results from this normal @term{argument} @term{evaluation} 
becomes the @term{value} of the @param{form} @term{parameter}, and is then
@term{evaluated} as part of the @code{eval} @term{form}.
For example:

@lisp
 (eval (list 'cdr (car '((quote (a . b)) c)))) @EV{} b
@end lisp

The @term{argument} @term{form} @f{(list 'cdr (car '((quote (a . b)) c)))} is evaluated
in the usual way to produce the @term{argument} @f{(cdr (quote (a . b)))}; 
@code{eval} then evaluates its @term{argument}, @f{(cdr (quote (a . b)))}, to produce @f{b}.
Since a single @term{evaluation} already occurs for any @term{argument} @term{form}
in any @term{function form},
@code{eval} is sometimes said to perform ``an extra level of evaluation.''



@node eval-when
@heading eval-when (Special Operator)
@syindex eval-when
@cindex eval-when
      

@subsubheading Syntax:

@DefspecWithValues{eval-when, @paren{@starparam{situation}} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{situation}---One of the @term{symbols} 
@kwd{compile-toplevel}
@cindex :compile-toplevel
,
@kwd{load-toplevel}
@cindex :load-toplevel
,
@kwd{execute}
@cindex :execute
,
@t{compile}
@cindex compile
,
@t{load}
@cindex load
, or
@t{eval}
@cindex eval
.

The use of @t{eval}, @t{compile}, and @t{load} is deprecated.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} of the @term{forms} if they are executed,
or @nil{}@spc{}if they are not. 

@subsubheading Description:

The body of an @code{eval-when} form is processed as an @term{implicit progn}, 
but only in the @param{situations} listed.  



The use of the @param{situations} @kwd{compile-toplevel} (or @tt{compile}) and
@kwd{load-toplevel} (or @tt{load}) controls whether and when @term{evaluation}
occurs when @code{eval-when} appears as a @term{top level form} in
code processed by @code{compile-file}.  See @ref{File Compilation, Section 3.2.3 (File Compilation)}.

The use of the @param{situation} @kwd{execute} (or @tt{eval}) controls whether
evaluation occurs for other @code{eval-when} @term{forms}; that is, 
those that are not @term{top level forms}, or those in code processed by
@code{eval} or @code{compile}.  If the @kwd{execute} situation is
specified in such a @term{form}, then the body @param{forms} are processed as 
an @term{implicit progn}; otherwise, the @code{eval-when} @term{form}
returns @nil{}.



@code{eval-when} 
normally appears as a @term{top level form}, but it is meaningful
for it to appear as a @term{non-top-level form}.
However, the compile-time side
effects described in @ref{Compilation, Section 3.2 (Compilation)}
only take place when @code{eval-when} appears as a  
@term{top level form}.


@subsubheading Examples:

One example of the use of @code{eval-when} is that for the 
compiler to be able to read a file properly when it uses user-defined
@term{reader macros}, it is necessary to write

@lisp
 (eval-when (:compile-toplevel :load-toplevel :execute)
   (set-macro-character #@bsl{}$ #'(lambda (stream char)
                                (declare (ignore char))
                                (list 'dollar (read stream))))) @EV{} T
@end lisp

This causes the call to @code{set-macro-character} to be executed
in the compiler's execution environment, thereby modifying its
reader syntax table.

@lisp
;;;     The EVAL-WHEN in this case is not at toplevel, so only the :EXECUTE
;;;     keyword is considered. At compile time, this has no effect.
;;;     At load time (if the LET is at toplevel), or at execution time
;;;     (if the LET is embedded in some other form which does not execute
;;;     until later) this sets (SYMBOL-FUNCTION 'FOO1) to a function which
;;;     returns 1.
 (let ((x 1))
   (eval-when (:execute :load-toplevel :compile-toplevel)
     (setf (symbol-function 'foo1) #'(lambda () x))))

;;;     If this expression occurs at the toplevel of a file to be compiled,
;;;     it has BOTH a compile time AND a load-time effect of setting
;;;     (SYMBOL-FUNCTION 'FOO2) to a function which returns 2.
 (eval-when (:execute :load-toplevel :compile-toplevel)
   (let ((x 2))
     (eval-when (:execute :load-toplevel :compile-toplevel)
       (setf (symbol-function 'foo2) #'(lambda () x)))))

;;;     If this expression occurs at the toplevel of a file to be compiled,
;;;     it has BOTH a compile time AND a load-time effect of setting the
;;;     function cell of FOO3 to a function which returns 3.
 (eval-when (:execute :load-toplevel :compile-toplevel)
   (setf (symbol-function 'foo3) #'(lambda () 3)))
 
;;; #4: This always does nothing. It simply returns NIL.
 (eval-when (:compile-toplevel)
   (eval-when (:compile-toplevel) 
     (print 'foo4)))

;;;     If this form occurs at toplevel of a file to be compiled, FOO5 is
;;;     printed at compile time. If this form occurs in a non-top-level
;;;     position, nothing is printed at compile time. Regardless of context,
;;;     nothing is ever printed at load time or execution time.
 (eval-when (:compile-toplevel) 
   (eval-when (:execute)
     (print 'foo5)))
 
;;;     If this form occurs at toplevel of a file to be compiled, FOO6 is
;;;     printed at compile time.  If this form occurs in a non-top-level
;;;     position, nothing is printed at compile time. Regardless of context,
;;;     nothing is ever printed at load time or execution time.
 (eval-when (:execute :load-toplevel)
   (eval-when (:compile-toplevel)
     (print 'foo6)))
@end lisp


@subsubheading See Also:

@ref{compile-file}, @ref{Compilation, Section 3.2 (Compilation)}

@subsubheading Notes:

The following effects are logical consequences of the definition of 
@code{eval-when}:


@itemize @bullet{}
@item
Execution of a single @code{eval-when}
expression executes the body code at most once.

@item
@term{Macros} intended for use in @term{top level forms} 
should be written so that side-effects are done by the @term{forms}
in the macro expansion.  The macro-expander itself should not do 
the side-effects.

For example:

Wrong:  

@lisp
 (defmacro foo ()
   (really-foo)
   `(really-foo))
@end lisp


Right:  

@lisp
 (defmacro foo ()
   `(eval-when (:compile-toplevel :execute :load-toplevel) (really-foo)))
@end lisp


Adherence to this convention means that such @term{macros} behave
intuitively when appearing as @term{non-top-level forms}.

@item
Placing a variable binding around an @code{eval-when} reliably 
captures the binding because the compile-time-too mode cannot occur 
(@ie{} introducing a variable binding means that the @code{eval-when}
is not a @term{top level form}).
For example,

@lisp
 (let ((x 3))
   (eval-when (:execute :load-toplevel :compile-toplevel) (print x)))
@end lisp


prints @tt{3} 
at execution (@ie{} load) time, and does not print anything at
compile time.  This is important so that expansions of 
@code{defun} and 
@code{defmacro} 
can be done in terms of @code{eval-when} and can correctly capture
the @term{lexical environment}.

@lisp
 (defun bar (x) (defun foo () (+ x 3)))
@end lisp


might expand into

@lisp
 (defun bar (x) 
   (progn (eval-when (:compile-toplevel) 
            (compiler::notice-function-definition 'foo '(x)))
          (eval-when (:execute :load-toplevel)
            (setf (symbol-function 'foo) #'(lambda () (+ x 3))))))
@end lisp


which would be treated by the above rules the same as

@lisp
 (defun bar (x) 
   (setf (symbol-function 'foo) #'(lambda () (+ x 3))))
@end lisp


when the definition of @f{bar} is not a @term{top level form}.
@end itemize




@node load-time-value
@heading load-time-value (Special Operator)
@syindex load-time-value
@cindex load-time-value
      

@subsubheading Syntax:

@DefspecWithValues{load-time-value, form @opt{} read-only-p, object}

@subsubheading Arguments and Values:

@param{form}---a @term{form}; @evalspecial{}.

@param{read-only-p}---a @term{boolean}; @noeval{}.

@param{object}---the @term{primary value} resulting from evaluating @param{form}.

@subsubheading Description:

@code{load-time-value} provides a mechanism for delaying evaluation of @param{form}
until the expression is in the run-time environment; see @ref{Compilation, Section 3.2 (Compilation)}.

@param{Read-only-p} designates whether the result can be considered a
@term{constant object}.
If @code{t},
the result is a read-only quantity that can, 
if appropriate to the @term{implementation}, 
be copied into read-only space and/or @term{coalesced} with @term{similar}
@term{constant objects} from other @term{programs}.
If @nil{}@spc{}(the default),
the result must be neither copied nor coalesced;
it must be considered to be potentially modifiable data.

If a @code{load-time-value} expression is processed by @code{compile-file},
the compiler performs its normal semantic processing (such as macro expansion 
and translation into machine code) on @param{form}, but arranges for the
execution of @param{form} to occur at load time in a @term{null lexical environment}, 
with the result of this @term{evaluation} then being treated as 
a @term{literal object}
at run time.  It is guaranteed that the evaluation of @param{form} 
will take place only once when the @term{file} is @term{loaded}, but 
the order of evaluation with respect to the evaluation of
@term{top level forms} in the file is @term{implementation-dependent}.
@cindex order of evaluation
@cindex evaluation order

If a @code{load-time-value} expression appears within a function compiled
with @code{compile}, the @param{form} is evaluated at compile time in a
@term{null lexical environment}.  The result of this compile-time evaluation 
is treated as
a @term{literal object}
in the compiled code.  

If a @code{load-time-value} expression is processed by @code{eval},
@param{form} is evaluated in a @term{null lexical environment}, 
and one value is returned.  Implementations that implicitly compile
(or partially compile) expressions processed by @code{eval} 
might evaluate @param{form} only once, at the time this compilation is performed.  

If the @term{same} @term{list} @f{(load-time-value @param{form})} is
evaluated or compiled more than once, it is @term{implementation-dependent}
whether @param{form} is evaluated only once or is evaluated more than once.
This can happen both when an expression being evaluated or compiled shares
substructure, and when the @term{same} @term{form} is processed by @code{eval} or 
@code{compile} multiple times.                               
Since a @code{load-time-value} expression can be
referenced in more than one place and can be evaluated multiple times
by @code{eval}, it is 
@term{implementation-dependent} whether each execution returns
a fresh @term{object} 
or returns the same @term{object} as some other execution.
Users must use caution when destructively modifying the resulting
@term{object}.

If two lists @f{(load-time-value @param{form})} 
that are the @term{same} under @code{equal} but are not @term{identical}
are evaluated or compiled,
their values always come from distinct evaluations of @param{form}.
Their @term{values} may not be coalesced
unless @param{read-only-p} is @code{t}.

@subsubheading Examples:

@lisp
;;; The function INCR1 always returns the same value, even in different images.
;;; The function INCR2 always returns the same value in a given image, 
;;; but the value it returns might vary from image to image.
(defun incr1 (x) (+ x #.(random 17)))
(defun incr2 (x) (+ x (load-time-value (random 17))))

;;; The function FOO1-REF references the nth element of the first of 
;;; the *FOO-ARRAYS* that is available at load time.  It is permissible for
;;; that array to be modified (e.g., by SET-FOO1-REF); FOO1-REF will see the
;;; updated values.
(defvar *foo-arrays* (list (make-array 7) (make-array 8)))
(defun foo1-ref (n) (aref (load-time-value (first *my-arrays*) nil) n))
(defun set-foo1-ref (n val) 
  (setf (aref (load-time-value (first *my-arrays*) nil) n) val))

;;; The function BAR1-REF references the nth element of the first of 
;;; the *BAR-ARRAYS* that is available at load time.  The programmer has
;;; promised that the array will be treated as read-only, so the system 
;;; can copy or coalesce the array.
(defvar *bar-arrays* (list (make-array 7) (make-array 8)))
(defun bar1-ref (n) (aref (load-time-value (first *my-arrays*) t) n))

;;; This use of LOAD-TIME-VALUE permits the indicated vector to be coalesced
;;; even though NIL was specified, because the object was already read-only
;;; when it was written as a literal vector rather than created by a constructor.
;;; User programs must treat the vector v as read-only.
(defun baz-ref (n)
  (let ((v (load-time-value #(A B C) nil)))
    (values (svref v n) v)))

;;; This use of LOAD-TIME-VALUE permits the indicated vector to be coalesced
;;; even though NIL was specified in the outer situation because T was specified
;;; in the inner situation.  User programs must treat the vector v as read-only.
(defun baz-ref (n)
  (let ((v (load-time-value (load-time-value (vector 1 2 3) t) nil)))
    (values (svref v n) v)))
@end lisp


@subsubheading See Also:

@ref{compile-file},
@ref{compile},
@ref{eval},
@ref{MinimalCompilation, Section 3.2.2.2 (Minimal Compilation)},
@ref{Compilation, Section 3.2 (Compilation)}

@subsubheading Notes:

@code{load-time-value} must appear outside of quoted structure in a
``for @term{evaluation}'' position.  In situations which would appear to call
for use of @code{load-time-value} within a quoted structure, 
the @term{backquote} @term{reader macro} is probably called for;
see @ref{Backquote, Section 2.4.6 (Backquote)}.

Specifying @nil{}@spc{}for @param{read-only-p} is not a way to force an object
to become modifiable if it has already been made read-only.  It is only a way
to say that, for an object that is modifiable, this operation is not intended
to make that object read-only.



@node quote
@heading quote (Special Operator)
@syindex quote
@cindex quote


@subsubheading Syntax:

@DefspecWithValues{quote, object, object}

@subsubheading Arguments and Values:

@param{object}---an @term{object}; @noeval{}.

@subsubheading Description:

@Thespecop{quote} just returns @param{object}.

The consequences are undefined if @term{literal objects} (including
@term{quoted objects}) are destructively modified.

@subsubheading Examples:

@lisp
 (setq a 1) @EV{} 1
 (quote (setq a 3)) @EV{} (SETQ A 3)
 a @EV{} 1
 'a @EV{} A
 ''a @EV{} (QUOTE A) 
 '''a @EV{} (QUOTE (QUOTE A))
 (setq a 43) @EV{} 43
 (list a (cons a 3)) @EV{} (43 (43 . 3))
 (list (quote a) (quote (cons a 3))) @EV{} (A (CONS A 3)) 
 1 @EV{} 1
 '1 @EV{} 1
 "foo" @EV{} "foo"
 '"foo" @EV{} "foo"
 (car '(a b)) @EV{} A
 '(car '(a b)) @EV{} (CAR (QUOTE (A B)))
 #(car '(a b)) @EV{} #(CAR (QUOTE (A B)))
 '#(car '(a b)) @EV{} #(CAR (QUOTE (A B)))
@end lisp


@subsubheading See Also:

@ref{Evaluation, Section 3.1 (Evaluation)},
@ref{Single-Quote, Section 2.4.3 (Single-Quote)},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)}

@subsubheading Notes:

The textual notation @f{'@param{object}} is equivalent to @f{(quote @param{object})};
see @ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)}.

Some @term{objects}, called @term{self-evaluating objects}, 
do not require quotation by @code{quote}.  
However, @term{symbols} and @term{lists} are used to represent parts of programs,
and so would not be useable as constant data in a program without @code{quote}.
Since @code{quote} suppresses the @term{evaluation} of these @term{objects},
they become data rather than program.


@node compiler-macro-function
@heading compiler-macro-function (Accessor)
@syindex compiler-macro-function
@cindex compiler-macro-function



@subsubheading Syntax:

@DefunWithValues{compiler-macro-function, name @opt{} environment, function}
@Defsetf{compiler-macro-function, name @opt{} environment, new-function}

@subsubheading Arguments and Values:

@param{name}---a @term{function name}.

@param{environment}---an @term{environment} @term{object}.

@param{function}, @param{new-function}---a @term{compiler macro function}, or @nil{}.

@subsubheading Description:

@term{Accesses} the @term{compiler macro function} named @param{name}, if any,
in the @param{environment}.

A value of @nil{}@spc{}denotes the absence of a @term{compiler macro function} named @param{name}.

@subsubheading Exceptional Situations:

The consequences are undefined if @param{environment} is @term{non-nil}
in a use of @SETFof{compiler-macro-function}.

@subsubheading See Also:

@ref{define-compiler-macro}, @ref{CompilerMacros, Section 3.2.2.1 (Compiler Macros)}



@node define-compiler-macro
@heading define-compiler-macro (Macro)
@syindex define-compiler-macro
@cindex define-compiler-macro



@subsubheading Syntax:

@DefmacWithValuesNewline{define-compiler-macro, name lambda-list @DeclsAndDoc{} @starparam{form}, name}

@subsubheading Arguments and Values:

@param{name}---a @term{function name}.

@param{lambda-list}---a @term{macro lambda list}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{documentation}---a @term{string}; @noeval{}.

@param{form}---a @term{form}.

@subsubheading Description:

@editornote{KMP: This definition probably needs to be fully expanded to not
refer through the definition of defmacro, but should suffice for now.}

This is the normal mechanism for defining a @term{compiler macro function}.
Its manner of definition is the same as for @code{defmacro}; the only
differences are:


@itemize @bullet{}
@item The @param{name} can be a @term{function name} naming
any @term{function} or @term{macro}.

@item The expander function is installed as a @term{compiler macro function}
for the @param{name}, rather than as a @term{macro function}.

@item The @keyref{whole} argument is bound to the form argument that 
is passed to the @term{compiler macro function}.  The remaining lambda-list 
parameters are specified as if this form contained the function name in the
@term{car} and the actual arguments in the @term{cdr}, but if the @term{car} 
of the actual form is the symbol @code{funcall}, then the destructuring of 
the arguments is actually performed using its @term{cddr} instead.

@param{Documentation} is attached as a @term{documentation string} 
to @param{name} (as kind @code{compiler-macro})
and to the @term{compiler macro function}.

@item Unlike an ordinary @term{macro}, a @term{compiler macro}
can decline to provide an expansion merely by returning a form that is
the @term{same} as the original (which can be obtained by using
@keyref{whole}).
@end itemize


@subsubheading Examples:

@lisp
 (defun square (x) (expt x 2)) @EV{} SQUARE
 (define-compiler-macro square (&whole form arg)
   (if (atom arg)
       `(expt ,arg 2)
       (case (car arg)
         (square (if (= (length arg) 2)
                     `(expt ,(nth 1 arg) 4)
                     form))
         (expt   (if (= (length arg) 3)
                     (if (numberp (nth 2 arg))
                         `(expt ,(nth 1 arg) ,(* 2 (nth 2 arg)))
                         `(expt ,(nth 1 arg) (* 2 ,(nth 2 arg))))
                     form))
         (otherwise `(expt ,arg 2))))) @EV{} SQUARE
 (square (square 3)) @EV{} 81
 (macroexpand '(square x)) @EV{} (SQUARE X), @term{false}
 (funcall (compiler-macro-function 'square) '(square x) nil)
@EV{} (EXPT X 2)
 (funcall (compiler-macro-function 'square) '(square (square x)) nil)
@EV{} (EXPT X 4)
 (funcall (compiler-macro-function 'square) '(funcall #'square x) nil)
@EV{} (EXPT X 2)

 (defun distance-positional (x1 y1 x2 y2)
   (sqrt (+ (expt (- x2 x1) 2) (expt (- y2 y1) 2))))
@EV{} DISTANCE-POSITIONAL
 (defun distance (&key (x1 0) (y1 0) (x2 x1) (y2 y1))
   (distance-positional x1 y1 x2 y2))
@EV{} DISTANCE
 (define-compiler-macro distance (&whole form
                                  &rest key-value-pairs
                                  &key (x1 0  x1-p)
                                       (y1 0  y1-p)
                                       (x2 x1 x2-p)
                                       (y2 y1 y2-p)
                                  &allow-other-keys
                                  &environment env)
   (flet ((key (n) (nth (* n 2) key-value-pairs))
          (arg (n) (nth (1+ (* n 2)) key-value-pairs))
          (simplep (x)
            (let ((expanded-x (macroexpand x env)))
              (or (constantp expanded-x env)
                  (symbolp expanded-x)))))
     (let ((n (/ (length key-value-pairs) 2)))
       (multiple-value-bind (x1s y1s x2s y2s others)
           (loop for (key) on key-value-pairs by #'cddr
                 count (eq key ':x1) into x1s
                 count (eq key ':y1) into y1s
                 count (eq key ':x2) into x2s
                 count (eq key ':y1) into y2s
                 count (not (member key '(:x1 :x2 :y1 :y2)))
                   into others
                 finally (return (values x1s y1s x2s y2s others)))
         (cond ((and (= n 4)
                     (eq (key 0) :x1)
                     (eq (key 1) :y1)
                     (eq (key 2) :x2)
                     (eq (key 3) :y2))
                `(distance-positional ,x1 ,y1 ,x2 ,y2))
               ((and (if x1-p (and (= x1s 1) (simplep x1)) t)
                     (if y1-p (and (= y1s 1) (simplep y1)) t)
                     (if x2-p (and (= x2s 1) (simplep x2)) t)
                     (if y2-p (and (= y2s 1) (simplep y2)) t)
                     (zerop others))
                `(distance-positional ,x1 ,y1 ,x2 ,y2))
               ((and (< x1s 2) (< y1s 2) (< x2s 2) (< y2s 2)
                     (zerop others))
                (let ((temps (loop repeat n collect (gensym))))
                  `(let ,(loop for i below n
                               collect (list (nth i temps) (arg i)))
                     (distance
                       ,@@(loop for i below n
                               append (list (key i) (nth i temps)))))))
               (t form))))))
@EV{} DISTANCE
 (dolist (form
           '((distance :x1 (setq x 7) :x2 (decf x) :y1 (decf x) :y2 (decf x))
             (distance :x1 (setq x 7) :y1 (decf x) :x2 (decf x) :y2 (decf x))
             (distance :x1 (setq x 7) :y1 (incf x))
             (distance :x1 (setq x 7) :y1 (incf x) :x1 (incf x))
             (distance :x1 a1 :y1 b1 :x2 a2 :y2 b2)
             (distance :x1 a1 :x2 a2 :y1 b1 :y2 b2)
             (distance :x1 a1 :y1 b1 :z1 c1 :x2 a2 :y2 b2 :z2 c2)))
   (print (funcall (compiler-macro-function 'distance) form nil)))
@OUT{} (LET ((#:G6558 (SETQ X 7))
@OUT{}       (#:G6559 (DECF X))
@OUT{}       (#:G6560 (DECF X))
@OUT{}       (#:G6561 (DECF X)))
@OUT{}   (DISTANCE :X1 #:G6558 :X2 #:G6559 :Y1 #:G6560 :Y2 #:G6561)) 
@OUT{} (DISTANCE-POSITIONAL (SETQ X 7) (DECF X) (DECF X) (DECF X)) 
@OUT{} (LET ((#:G6567 (SETQ X 7))
@OUT{}       (#:G6568 (INCF X)))
@OUT{}   (DISTANCE :X1 #:G6567 :Y1 #:G6568)) 
@OUT{} (DISTANCE :X1 (SETQ X 7) :Y1 (INCF X) :X1 (INCF X)) 
@OUT{} (DISTANCE-POSITIONAL A1 B1 A2 B2) 
@OUT{} (DISTANCE-POSITIONAL A1 B1 A2 B2) 
@OUT{} (DISTANCE :X1 A1 :Y1 B1 :Z1 C1 :X2 A2 :Y2 B2 :Z2 C2) 
@EV{} NIL
@end lisp


@subsubheading See Also:

@ref{compiler-macro-function},
@ref{defmacro},
@ref{documentation},
@ref{Syntactic Interaction of Documentation Strings and Declarations, Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)}

@subsubheading Notes:

The consequences of writing a @term{compiler macro} definition for a function
in the @code{COMMON-LISP} @term{package} are undefined; it is quite possible that in some
@term{implementations} such an attempt would override an equivalent or equally
important definition.  In general, it is recommended that a programmer only
write @term{compiler macro} definitions for @term{functions} he or she personally 
maintains--writing a @term{compiler macro} definition for a function maintained
elsewhere is normally considered a violation of traditional rules of modularity
and data abstraction.



@node defmacro
@heading defmacro (Macro)
@syindex defmacro
@cindex defmacro



@subsubheading Syntax:

@DefmacWithValuesNewline{defmacro, name lambda-list @DeclsAndDoc{} @starparam{form}, name}

@subsubheading Arguments and Values:

@param{name}---a @term{symbol}. 

@param{lambda-list}---a @term{macro lambda list}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{documentation}---a @term{string}; @noeval{}.

@param{form}---a @term{form}.

@subsubheading Description:

Defines @param{name} as a @term{macro} 
by associating a @term{macro function} with that @param{name}
in the global environment.
The @term{macro function} is defined in the same @term{lexical environment}
in which the @code{defmacro} @term{form} appears.


The parameter variables in @param{lambda-list} are bound to
destructured portions of the macro call.

The expansion function
accepts two arguments, a @term{form} and an 
@term{environment}.  The expansion function returns a @term{form}.  
The body of the expansion function is specified by @param{forms}.
@param{Forms} are executed in order.  The value of the
last @param{form} executed is returned as the expansion of the
@term{macro}.
The body @param{forms} of the expansion function (but not the @param{lambda-list})
are implicitly enclosed in a @term{block} whose name is @param{name}.

The @param{lambda-list} conforms to the requirements described in @ref{Macro Lambda Lists, Section 3.4.4 (Macro Lambda Lists)}.

@param{Documentation} is attached as a @term{documentation string} 
to @param{name} (as kind @code{function})
and to the @term{macro function}.

@code{defmacro} can be used to redefine a @term{macro} or to replace
a @term{function} definition with a @term{macro} definition.


Recursive expansion of the @term{form} returned must terminate,
including the expansion of other @term{macros} which are @term{subforms}
of other @term{forms} returned.

The consequences are undefined if the result of fully macroexpanding
a @term{form}
contains any @term{circular} @term{list structure} except in @term{literal objects}.

If a @code{defmacro} @term{form} appears as a @term{top level form},
the @term{compiler} must store the @term{macro} definition at compile time,
so that occurrences of the macro later on in the file can be expanded correctly.
Users must ensure that the body of the @term{macro} can be evaluated at 
compile time if it is referenced within the @term{file} being @term{compiled}.

@subsubheading Examples:

@lisp
 (defmacro mac1 (a b) "Mac1 multiplies and adds" 
            `(+ ,a (* ,b 3))) @EV{} MAC1 
 (mac1 4 5) @EV{} 19 
 (documentation 'mac1 'function) @EV{} "Mac1 multiplies and adds" 
 (defmacro mac2 (&optional (a 2 b) (c 3 d) &rest x) `'(,a ,b ,c ,d ,x)) @EV{} MAC2 
 (mac2 6) @EV{} (6 T 3 NIL NIL) 
 (mac2 6 3 8) @EV{} (6 T 3 T (8)) 
 (defmacro mac3 (&whole r a &optional (b 3) &rest x &key c (d a))
    `'(,r ,a ,b ,c ,d ,x)) @EV{} MAC3 
 (mac3 1 6 :d 8 :c 9 :d 10) @EV{} ((MAC3 1 6 :D 8 :C 9 :D 10) 1 6 9 8 (:D 8 :C 9 :D 10)) 
@end lisp





The stipulation that
an embedded @term{destructuring lambda list} is permitted only
where @term{ordinary lambda list} syntax would permit a parameter name
but not a @term{list} is made to prevent ambiguity.  For example,
the following is not valid:

@lisp
 (defmacro loser (x &optional (a b &rest c) &rest z)
   ...)
@end lisp

because @term{ordinary lambda list} syntax does permit a 
@term{list} following @optional{};
the list @f{(a b @ampers{}rest c)} would be interpreted as describing an
optional parameter named @f{a} whose default value is that of the
form @f{b}, with a supplied-p parameter named @keyref{rest} (not valid),
and an extraneous symbol @f{c} in the list (also not valid).  An almost
correct way to express this is

@lisp
 (defmacro loser (x &optional ((a b &rest c)) &rest z)
   ...)
@end lisp

The extra set of parentheses removes the ambiguity.  However, the
definition is now incorrect because a macro call such as @f{(loser (car pool))}
would not provide any argument form for the lambda list @f{(a b @ampers{}rest c)},
and so the default value against which to match the @term{lambda list} would be
@nil{}@spc{}because no explicit default value was specified.  
The consequences of this are  unspecified
since the empty list, @nil{}, does not have @term{forms} to satisfy the
parameters @f{a} and @f{b}.  The fully correct definition would be either

@lisp
 (defmacro loser (x &optional ((a b &rest c) '(nil nil)) &rest z)
   ...)
@end lisp

or

@lisp
 (defmacro loser (x &optional ((&optional a b &rest c)) &rest z)
   ...)
@end lisp

These differ slightly: the first requires that if the macro call
specifies @f{a} explicitly then it must also specify @f{b} explicitly,
whereas the second does not have this requirement.  For example,

@lisp
 (loser (car pool) ((+ x 1)))
@end lisp

would be a valid call for the second definition but not for the first.


@lisp
 (defmacro dm1a (&whole x) `',x)
 (macroexpand '(dm1a))  @EV{} (QUOTE (DM1A))
 (macroexpand '(dm1a a)) is an error.
 
 (defmacro dm1b (&whole x a &optional b) `'(,x ,a ,b))
 (macroexpand '(dm1b))  is an error.
 (macroexpand '(dm1b q))  @EV{} (QUOTE ((DM1B Q) Q NIL))
 (macroexpand '(dm1b q r)) @EV{} (QUOTE ((DM1B Q R) Q R))
 (macroexpand '(dm1b q r s)) is an error.
@end lisp


@lisp
 (defmacro dm2a (&whole form a b) `'(form ,form a ,a b ,b))
 (macroexpand '(dm2a x y)) @EV{} (QUOTE (FORM (DM2A X Y) A X B Y))
 (dm2a x y) @EV{} (FORM (DM2A X Y) A X B Y)

 (defmacro dm2b (&whole form a (&whole b (c . d) &optional (e 5)) 
                 &body f &environment env)
   ``(,',form ,,a ,',b ,',(macroexpand c env) ,',d ,',e ,',f))
 ;Note that because backquote is involved, implementations may differ
 ;slightly in the nature (though not the functionality) of the expansion.
 (macroexpand '(dm2b x1 (((incf x2) x3 x4)) x5 x6))
 @EV{} (LIST* '(DM2B X1 (((INCF X2) X3 X4))
                   X5 X6)
            X1
            '((((INCF X2) X3 X4)) (SETQ X2 (+ X2 1)) (X3 X4) 5 (X5 X6))),
     T
 (let ((x1 5))
   (macrolet ((segundo (x) `(cadr ,x)))
     (dm2b x1 (((segundo x2) x3 x4)) x5 x6)))
 @EV{} ((DM2B X1 (((SEGUNDO X2) X3 X4)) X5 X6)
      5 (((SEGUNDO X2) X3 X4)) (CADR X2) (X3 X4) 5 (X5 X6))
@end lisp



@subsubheading See Also:

@ref{define-compiler-macro},
@ref{destructuring-bind}, 
@ref{documentation},
@ref{macroexpand},
@ref{*macroexpand-hook*},
@ref{macrolet}, 
@ref{macro-function}, 
@ref{Evaluation, Section 3.1 (Evaluation)},
@ref{Compilation, Section 3.2 (Compilation)},
@ref{Syntactic Interaction of Documentation Strings and Declarations, Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)}



@node macro-function
@heading macro-function (Accessor)
@syindex macro-function
@cindex macro-function


@subsubheading Syntax:

@DefunWithValues{macro-function, symbol @opt{} environment, function}
@Defsetf{macro-function, symbol @opt{} environment, new-function}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{environment}---an @term{environment} @term{object}.

@param{function}---a @term{macro function} or @nil{}.

@param{new-function}---a @term{macro function}.

@subsubheading Description:

Determines whether @param{symbol} has a function definition 
as a macro in the specified @param{environment}.

If so, the macro expansion function, a function of two arguments,
is returned.  If @param{symbol} has no function definition
in the lexical environment @param{environment}, or its definition
is not a @term{macro}, @code{macro-function} returns @nil{}.




It is possible for both @code{macro-function} and 
@code{special-operator-p}
to return @term{true} of @param{symbol}.  The @term{macro} definition must
be available for use by programs that understand only the standard 
@clisp{}@spc{}@term{special forms}.

@subsubheading Examples:
@lisp
 (defmacro macfun (x) '(macro-function 'macfun)) @EV{} MACFUN 
 (not (macro-function 'macfun)) @EV{} @term{false} 
@end lisp

@lisp
 (macrolet ((foo (&environment env)
               (if (macro-function 'bar env)
                  ''yes
                  ''no)))
    (list (foo)
          (macrolet ((bar () :beep))
             (foo))))
 
@EV{} (NO YES)
@end lisp


@subsubheading Affected By:
@f{(setf macro-function)}, @code{defmacro}, and @code{macrolet}.

@subsubheading Exceptional Situations:

The consequences are undefined if @param{environment} is @term{non-nil}
in a use of @SETFof{macro-function}.

@subsubheading See Also:

@ref{defmacro}, @ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:

@code{setf} can be used with @code{macro-function} to install
a @term{macro} as a symbol's global function definition:

@lisp
 (setf (macro-function symbol) fn)
@end lisp

The value installed must be a @term{function} that accepts two arguments,
the entire macro call and an @term{environment}, 
and computes the expansion for that call.
Performing this operation causes @param{symbol} to have only that
macro definition as its global function definition; any previous
definition, whether as a @term{macro} or as a 
@term{function}, is lost.


@node macroexpand; macroexpand-1
@heading macroexpand, macroexpand-1 (Function)
@syindex macroexpand
@cindex macroexpand
@syindex macroexpand-1
@cindex macroexpand-1
@anchor{macroexpand}
@anchor{macroexpand-1}


@subsubheading Syntax:

@DefunWithValues{macroexpand, form @opt{} env, expansion\, expanded-p}
@DefunWithValues{macroexpand-1, form @opt{} env, expansion\, expanded-p}

@subsubheading Arguments and Values:

@param{form}---a @term{form}.

@param{env}---an @term{environment} @term{object}.
@Default{@nil{}}

@param{expansion}---a @term{form}.

@param{expanded-p}---a @term{generalized boolean}.

@subsubheading Description:

@code{macroexpand} and @code{macroexpand-1} expand @term{macros}.

If @param{form} is a @term{macro form},
then @code{macroexpand-1} expands the @term{macro form} call once.

@code{macroexpand} 
repeatedly expands @param{form} until it is no longer a @term{macro form}.
In effect, @code{macroexpand} calls @code{macroexpand-1} repeatedly
until the @term{secondary value} it returns is @nil{}.

If @param{form} is a @term{macro form},
then the @param{expansion} is a @term{macro expansion}
and @param{expanded-p} is @term{true}.
Otherwise,
the @param{expansion} is the given @param{form}
and @param{expanded-p} is @term{false}.

Macro expansion is carried out as follows.  
Once @code{macroexpand-1} has
determined that the @param{form} is a @term{macro form},
it obtains an appropriate expansion @term{function} for the
@term{macro} or @term{symbol macro}.
The value of 
@code{*macroexpand-hook*} is 
coerced to a @term{function} and
then called as a @term{function} of three arguments:
the expansion @term{function},
the @param{form},
and the @param{env}.
The @term{value} returned from this call is taken to be the expansion
of the @param{form}.

In addition to @term{macro} definitions in the global environment,
any local macro definitions established within @param{env} by @code{macrolet} 
or @code{symbol-macrolet} are considered.
If only @param{form} is supplied as an argument,
then the environment is effectively null, and only global macro definitions
as established by @code{defmacro} are considered.
@term{Macro} definitions are shadowed by local @term{function} definitions.

@subsubheading Examples:

@lisp
 (defmacro alpha (x y) `(beta ,x ,y)) @EV{} ALPHA
 (defmacro beta (x y) `(gamma ,x ,y)) @EV{} BETA
 (defmacro delta (x y) `(gamma ,x ,y)) @EV{} EPSILON
 (defmacro expand (form &environment env)
   (multiple-value-bind (expansion expanded-p)
       (macroexpand form env)
     `(values ',expansion ',expanded-p))) @EV{} EXPAND
 (defmacro expand-1 (form &environment env)
   (multiple-value-bind (expansion expanded-p)
       (macroexpand-1 form env)
     `(values ',expansion ',expanded-p))) @EV{} EXPAND-1
@medbreak{}
;; Simple examples involving just the global environment
 (macroexpand-1 '(alpha a b)) @EV{} (BETA A B), @term{true}
 (expand-1 (alpha a b)) @EV{} (BETA A B), @term{true}
 (macroexpand '(alpha a b)) @EV{} (GAMMA A B), @term{true}
 (expand (alpha a b)) @EV{} (GAMMA A B), @term{true}
 (macroexpand-1 'not-a-macro) @EV{} NOT-A-MACRO, @term{false}
 (expand-1 not-a-macro) @EV{} NOT-A-MACRO, @term{false}
 (macroexpand '(not-a-macro a b)) @EV{} (NOT-A-MACRO A B), @term{false}
 (expand (not-a-macro a b)) @EV{} (NOT-A-MACRO A B), @term{false}
@medbreak{}
;; Examples involving lexical environments
 (macrolet ((alpha (x y) `(delta ,x ,y)))
   (macroexpand-1 '(alpha a b))) @EV{} (BETA A B), @term{true}
 (macrolet ((alpha (x y) `(delta ,x ,y)))
   (expand-1 (alpha a b))) @EV{} (DELTA A B), @term{true}
 (macrolet ((alpha (x y) `(delta ,x ,y)))
   (macroexpand '(alpha a b))) @EV{} (GAMMA A B), @term{true}
 (macrolet ((alpha (x y) `(delta ,x ,y)))
   (expand (alpha a b))) @EV{} (GAMMA A B), @term{true}
 (macrolet ((beta (x y) `(epsilon ,x ,y)))
   (expand (alpha a b))) @EV{} (EPSILON A B), @term{true}
 (let ((x (list 1 2 3)))
   (symbol-macrolet ((a (first x)))
     (expand a))) @EV{} (FIRST X), @term{true}
 (let ((x (list 1 2 3)))
   (symbol-macrolet ((a (first x)))
     (macroexpand 'a))) @EV{} A, @term{false}
 (symbol-macrolet ((b (alpha x y)))
   (expand-1 b)) @EV{} (ALPHA X Y), @term{true}
 (symbol-macrolet ((b (alpha x y)))
   (expand b)) @EV{} (GAMMA X Y), @term{true}
 (symbol-macrolet ((b (alpha x y))
                   (a b))
   (expand-1 a)) @EV{} B, @term{true}
 (symbol-macrolet ((b (alpha x y))
                   (a b))
   (expand a)) @EV{} (GAMMA X Y), @term{true}
@medbreak{}
;; Examples of shadowing behavior
 (flet ((beta (x y) (+ x y)))
   (expand (alpha a b))) @EV{} (BETA A B), @term{true}
 (macrolet ((alpha (x y) `(delta ,x ,y)))
   (flet ((alpha (x y) (+ x y)))
     (expand (alpha a b)))) @EV{} (ALPHA A B), @term{false}
 (let ((x (list 1 2 3)))
   (symbol-macrolet ((a (first x)))
     (let ((a x))
       (expand a)))) @EV{} A, @term{false}
@end lisp


@subsubheading Affected By:

@code{defmacro},
@code{setf} of @code{macro-function},
@code{macrolet},
@code{symbol-macrolet}

@subsubheading See Also:

@ref{*macroexpand-hook*},
@ref{defmacro},
@ref{setf} of @ref{macro-function},
@ref{macrolet},
@ref{symbol-macrolet},
@ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:

Neither @code{macroexpand} nor @code{macroexpand-1} 
makes any explicit attempt to expand @term{macro forms} that are
either @term{subforms} of the @param{form} 
or @term{subforms} of the @param{expansion}.
Such expansion might occur implicitly, however,
due to the semantics or implementation of the @term{macro function}.


@node define-symbol-macro
@heading define-symbol-macro (Macro)
@syindex define-symbol-macro
@cindex define-symbol-macro


@subsubheading Syntax:

@DefmacWithValuesNewline{define-symbol-macro, symbol expansion, symbol}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{expansion}---a @term{form}.

@subsubheading Description:

Provides a mechanism for globally affecting the @term{macro expansion}
of the indicated @param{symbol}.

Globally establishes an expansion function for the @term{symbol macro} 
named by @param{symbol}.
The only guaranteed property of an expansion @term{function} for a @term{symbol macro}
is that when it is applied to the @term{form} and the @term{environment} it returns
the correct expansion.  (In particular, it is @term{implementation-dependent} 
whether the expansion is conceptually stored in the expansion function,
the @term{environment}, or both.)

Each global reference to @param{symbol} (@ie{} not @term{shadowed}@sub2{} by a 
@term{binding} for a @term{variable} or @term{symbol macro} named by
the same @term{symbol}) is expanded by the normal macro expansion process;
see @ref{SymbolsAsForms, Section 3.1.2.1.1 (Symbols as Forms)}.
The expansion of a @term{symbol macro} is subject to further @term{macro expansion}
in the same @term{lexical environment} as the @term{symbol macro} reference,
exactly analogous to normal @term{macros}.

The consequences are unspecified if a @code{special} declaration is made for
@param{symbol} while in the scope of this definition (@ie{} when it is not 
@term{shadowed}@sub2{} by a @term{binding} for a @term{variable}
or @term{symbol macro} named by the same @term{symbol}).

Any use of @code{setq} to set the value of 
the @param{symbol}
while in the scope of this definition
is treated as if it were a @code{setf}.
@code{psetq} of @param{symbol}
is treated as if it were a @code{psetf}, and
@code{multiple-value-setq} 
is treated as if it were a @code{setf} of @code{values}.

A @term{binding} for a @term{symbol macro} can be @term{shadowed}@sub2{}
by @code{let} or @code{symbol-macrolet}.

@subsubheading Examples:

@lisp
(defvar *things* (list 'alpha 'beta 'gamma)) @EV{} *THINGS*

(define-symbol-macro thing1 (first *things*)) @EV{} THING1
(define-symbol-macro thing2 (second *things*)) @EV{} THING2
(define-symbol-macro thing3 (third *things*)) @EV{} THING3

thing1 @EV{} ALPHA
(setq thing1 'ONE) @EV{} ONE
*things* @EV{} (ONE BETA GAMMA)
(multiple-value-setq (thing2 thing3) (values 'two 'three)) @EV{} TWO
thing3 @EV{} THREE
*things* @EV{} (ONE TWO THREE)

(list thing2 (let ((thing2 2)) thing2)) @EV{} (TWO 2)
@end lisp


@subsubheading Exceptional Situations:

If @param{symbol} is already defined as a @term{global variable},
an error @oftype{program-error} is signaled.

@subsubheading See Also:

@ref{symbol-macrolet},
@ref{macroexpand}


@node symbol-macrolet
@heading symbol-macrolet (Special Operator)
@syindex symbol-macrolet
@cindex symbol-macrolet



@subsubheading Syntax:

@DefspecWithValuesNewline{symbol-macrolet, @paren{@starparen{symbol expansion}} @starparam{declaration}  @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{expansion}---a @term{form}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @param{forms}.

@subsubheading Description:


@code{symbol-macrolet} provides a mechanism for 
affecting the @term{macro expansion} environment for @term{symbols}.

@code{symbol-macrolet} lexically establishes expansion functions
for each of the @term{symbol macros} named by @param{symbols}.
The only guaranteed property of an expansion @term{function} for a @term{symbol macro}
is that when it is applied to the @term{form} and the @term{environment} it returns
the correct expansion.  (In particular, it is @term{implementation-dependent} 
whether the expansion is conceptually stored in the expansion function,
the @term{environment}, or both.)

Each reference to @param{symbol} as a variable within the lexical @term{scope}
of @code{symbol-macrolet} is expanded by the normal macro expansion process;
see @ref{SymbolsAsForms, Section 3.1.2.1.1 (Symbols as Forms)}.
The expansion of a symbol macro is subject to further macro expansion
in the same lexical environment as the symbol macro invocation, exactly 
analogous to normal @term{macros}.

Exactly the same @param{declarations} are allowed as for @code{let}
with one exception: @code{symbol-macrolet} signals an error
if a @code{special} declaration names one of the @term{symbols} 
being defined by @code{symbol-macrolet}.  

When the @param{forms} of the @code{symbol-macrolet} form are expanded, 
any use of @code{setq} to set the value of one of the specified variables 
is treated as if it were a @code{setf}.
@code{psetq} of a @term{symbol} defined as a symbol macro 
is treated as if it were a @code{psetf}, and
@code{multiple-value-setq} 
is treated as if it were a @code{setf} of @code{values}.

The use of @code{symbol-macrolet} can be shadowed by @code{let}.
In other words, @code{symbol-macrolet} only substitutes for occurrences
of @param{symbol} that would be in the @term{scope} of a lexical binding of
@param{symbol} surrounding the @param{forms}.

@subsubheading Examples:

@lisp
;;; The following is equivalent to
;;;   (list 'foo (let ((x 'bar)) x)),
;;; not
;;;   (list 'foo (let (('foo 'bar)) 'foo))
 (symbol-macrolet ((x 'foo))
   (list x (let ((x 'bar)) x))) 
@EV{} (foo bar)
@NV{} (foo foo) 
 
 (symbol-macrolet ((x '(foo x)))
   (list x))
@EV{} ((FOO X))
@end lisp


@subsubheading Exceptional Situations:
If an attempt is made to bind a @term{symbol} that is defined as a @term{global variable},
an error @oftype{program-error} is signaled.

If @param{declaration} contains a @code{special} declaration 
that names one of the @term{symbols} being bound by @code{symbol-macrolet},
an error @oftype{program-error} is signaled.

@subsubheading See Also:

@ref{with-slots}, @ref{macroexpand}

@subsubheading Notes:

The special form @code{symbol-macrolet} is the basic mechanism that is used to
implement @code{with-slots}.

If a @code{symbol-macrolet} @term{form} is a @term{top level form},
the @param{forms} are also processed as @term{top level forms}.
See @ref{File Compilation, Section 3.2.3 (File Compilation)}.



@node *macroexpand-hook*
@heading *macroexpand-hook* (Variable)
@syindex *macroexpand-hook*
@cindex *macroexpand-hook*



@subsubheading Value Type:

a @term{designator} for a @term{function} of three @term{arguments}:
a @term{macro function},
a @term{macro form},
and an @term{environment} @term{object}.

@subsubheading Initial Value:

a @term{designator} for a function that is equivalent to @thefunction{funcall},
but that might have additional @term{implementation-dependent} side-effects.

@subsubheading Description:

Used as the expansion interface hook by @code{macroexpand-1} to 
control the @term{macro expansion} process.
When a @term{macro form} is to be expanded,
this @term{function} is called with three arguments:
the @term{macro function},
the @term{macro form},
and the @term{environment} in which the @term{macro form} is to be expanded.
The @term{environment} @term{object} has @term{dynamic extent};
the consequences are undefined if the @term{environment} @term{object} is 
referred to outside the @term{dynamic extent} of the macro expansion function.

@subsubheading Examples:

@lisp
 (defun hook (expander form env)
    (format t "Now expanding: ~S~%" form)
    (funcall expander form env)) @EV{} HOOK 
 (defmacro machook (x y) `(/ (+ ,x ,y) 2)) @EV{} MACHOOK 
 (macroexpand '(machook 1 2)) @EV{} (/ (+ 1 2) 2), @term{true} 
 (let ((*macroexpand-hook* #'hook)) (macroexpand '(machook 1 2)))
@OUT{} Now expanding (MACHOOK 1 2) 
@EV{} (/ (+ 1 2) 2), @term{true}
@end lisp


@subsubheading See Also:

@ref{macroexpand}, @ref{macroexpand-1}, @ref{funcall}, @ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:

The net effect of the chosen initial value is to just invoke the
@term{macro function}, giving it the @term{macro form} and
@term{environment} as its two arguments.

Users or user programs can @term{assign} this @term{variable} to
customize or trace the @term{macro expansion} mechanism.  Note, however,
that this @term{variable} is a global resource, potentially shared by
multiple @term{programs}; as such, if any two @term{programs} depend for
their correctness on the setting of this @term{variable}, those
@term{programs} may not be able to run in the same @term{Lisp image}.
For this reason, it is frequently best to confine its uses to debugging
situations.

Users who put their own function into @code{*macroexpand-hook*}
should consider saving the previous value of the hook, and calling that
value from their own.



@node proclaim
@heading proclaim (Function)
@syindex proclaim
@cindex proclaim


@subsubheading Syntax:

@DefunWithValues{proclaim, declaration-specifier, @term{implementation-dependent}}

@subsubheading Arguments and Values:

@param{declaration-specifier}---a @term{declaration specifier}.

@subsubheading Description:

@term{Establishes} the @term{declaration} specified by @param{declaration-specifier}
in the @term{global environment}.

Such a @term{declaration}, sometimes called a @term{global declaration} 
or a @term{proclamation}, is always in force unless locally @term{shadowed}.

@term{Names} of @term{variables} and @term{functions} within 
@param{declaration-specifier} refer to @term{dynamic variables} 
and global @term{function} definitions, respectively.

@Thenextfigure{}@spc{}shows a list of @param{declaration identifiers} 
that can be used with @code{proclaim}.


@float Figure,fig3.22
@cartouche
@multitable{declaration}{notinline}{optimize}{type}

@item declaration @tab inline @tab optimize @tab type
@item ftype @tab notinline @tab special @tab 
@end multitable
@end cartouche
@caption{Global Declaration Specifiers}
@end float


An implementation is free to support other (@term{implementation-defined})
@term{declaration identifiers} as well.

@subsubheading Examples:

@lisp
 (defun declare-variable-types-globally (type vars)
   (proclaim `(type ,type ,@@vars))
   type)

 ;; Once this form is executed, the dynamic variable *TOLERANCE*
 ;; must always contain a float.
 (declare-variable-types-globally 'float '(*tolerance*))
@EV{} FLOAT
@end lisp


@subsubheading See Also:

@ref{declaim},
@ref{declare},
@ref{Compilation, Section 3.2 (Compilation)}

@subsubheading Notes:

Although the @term{execution} of a @code{proclaim} @term{form} 
has effects that might affect compilation, the compiler does not make
any attempt to recognize and specially process @code{proclaim} @term{forms}.
A @term{proclamation} such as the following, even if a @term{top level form},
does not have any effect until it is executed:

@lisp
(proclaim '(special *x*))
@end lisp


If compile time side effects are desired, @code{eval-when} may be useful.
For example:

@lisp
 (eval-when (:execute :compile-toplevel :load-toplevel)
   (proclaim '(special *x*)))
@end lisp


In most such cases, however, it is preferrable to use @code{declaim} for
this purpose.

Since @code{proclaim} @term{forms} are ordinary @term{function forms},
@term{macro forms} can expand into them.


@node declaim
@heading declaim (Macro)
@syindex declaim
@cindex declaim



@subsubheading Syntax:

@DefmacWithValues{declaim, @starparam{declaration-specifier}, @term{implementation-dependent}}

@subsubheading Arguments and Values:

@param{declaration-specifier}---a @term{declaration specifier}; @noeval{}.

@subsubheading Description:

Establishes the @term{declarations} specified by the @param{declaration-specifiers}.

If a use of this macro appears as a @term{top level form} in a @term{file} 
being processed by the @term{file compiler}, the proclamations are also made
at compile-time.  As with other defining macros, it is unspecified whether or
not the compile-time side-effects of a @code{declaim} persist after the
@term{file} has been @term{compiled}.

@subsubheading Examples:

@subsubheading See Also:

@ref{declare},
@ref{proclaim}



@node declare
@heading declare (Symbol)
@syindex declare
@cindex declare


@subsubheading Syntax:

@Defspec{declare, @starparam{declaration-specifier}}

@subsubheading Arguments:

@param{declaration-specifier}---a @term{declaration specifier}; @noeval{}.

@subsubheading Description:

A @t{declare} @term{expression}, sometimes called a @term{declaration},
can occur only at the beginning of the bodies of certain @term{forms};
that is, it may be preceded only by other @t{declare} @term{expressions},
or by a @term{documentation string} if the context permits.

A @t{declare} @term{expression} can occur in a @term{lambda expression}
or in any of the @term{forms} listed in @thenextfigure{}.


@float Figure,fig3.23
@cartouche
@multitable{define-method-combination}{pprint-logical-block}{with-hash-table-iterator}

@item defgeneric @tab do-external-symbols @tab prog
@item define-compiler-macro @tab do-symbols @tab prog*
@item define-method-combination @tab dolist @tab restart-case
@item define-setf-expander @tab dotimes @tab symbol-macrolet
@item defmacro @tab flet @tab with-accessors
@item defmethod @tab handler-case @tab with-hash-table-iterator
@item defsetf @tab labels @tab with-input-from-string
@item deftype @tab let @tab with-open-file
@item defun @tab let* @tab with-open-stream
@item destructuring-bind @tab locally @tab with-output-to-string
@item do @tab macrolet @tab with-package-iterator
@item do* @tab multiple-value-bind @tab with-slots
@item do-all-symbols @tab pprint-logical-block @tab 
@end multitable
@end cartouche
@caption{Standardized Forms In Which Declarations Can Occur}
@end float


A @t{declare} @term{expression} can only occur 
where specified by the syntax of these @term{forms}.
The consequences of attempting to evaluate a @t{declare} @term{expression} 
are undefined.  In situations where such @term{expressions} can appear, 
explicit checks are made for their presence and they are never actually evaluated;
it is for this reason that they
are called  ``@t{declare} @term{expressions}''
rather than ``@t{declare} @term{forms}.''

@term{Macro forms} cannot expand into declarations;
@t{declare} @term{expressions} must appear as actual @term{subexpressions} of
the @term{form} to which they refer.

@Thenextfigure{}@spc{}shows a list of @term{declaration identifiers} 
that can be used with @t{declare}.


@float Figure,fig3.24
@cartouche
@multitable{dynamic-extent}{notinline}{optimize}

@item dynamic-extent @tab ignore @tab optimize
@item ftype @tab inline @tab special
@item ignorable @tab notinline @tab type
@end multitable
@end cartouche
@caption{Local Declaration Specifiers}
@end float


An implementation is free to support other (@term{implementation-defined})
@term{declaration identifiers} as well.

@subsubheading Examples:

@lisp
 (defun nonsense (k x z)
   (foo z x)                     ;First call to foo
   (let ((j (foo k x))           ;Second call to foo
         (x (* k k)))
     (declare (inline foo) (special x z))
     (foo x j z)))               ;Third call to foo
@end lisp


In this example,
the @code{inline} declaration applies
only to the third call to @f{foo}, but not to the first or second ones.
The @code{special} declaration of @f{x} causes @code{let} 
to make a dynamic @term{binding} for @f{x}, and causes the reference to 
@f{x}
in the body of @code{let} to be a dynamic reference.
The reference to @f{x} in the second call to @f{foo} is a local reference
to the second parameter of @tt{nonsense}.
The reference to @f{x} in the first call to @f{foo} is a local
reference, not a @code{special} one.  The @code{special} declaration of @f{z}
causes the reference to @f{z} in the 
third
call
to @f{foo} to be a dynamic reference; it does not
refer to the parameter to @f{nonsense} named @f{z}, because that
parameter @term{binding} has not been declared to be @code{special}.
(The @code{special} declaration of @f{z} does not appear in the body
of @code{defun},  but in an inner @term{form}, and therefore does not
affect the @term{binding} of the @term{parameter}.)

@subsubheading Exceptional Situations:

The consequences  of trying to use a @t{declare} @term{expression} as 
a @term{form} to be @term{evaluated} are undefined.

@editornote{KMP: Probably we need to say something here about ill-formed 
declare expressions.}

@subsubheading See Also:

@ref{proclaim},
@ref{Type Specifiers, Section 4.2.3 (Type Specifiers)},
@ref{declaration},
@ref{dynamic-extent},
@ref{ftype},
@ref{ignorable},
@ref{ignore},
@ref{inline},
@ref{notinline},
@ref{optimize},
@ref{type}


@node ignore; ignorable
@heading ignore, ignorable (Declaration)
@syindex ignore
@cindex ignore
@syindex ignorable
@cindex ignorable
@anchor{ignore}
@anchor{ignorable}



@subsubheading Syntax:

@f{@paren{ignore @star{@curly{@param{var} | @paren{@t{function} @param{fn}}}}}}

@f{@paren{ignorable @star{@curly{@param{var} | @paren{@t{function} @param{fn}}}}}}

@subsubheading Arguments:

@param{var}---a @term{variable} @term{name}.

@param{fn}---a @term{function} @term{name}.

@subsubheading Valid Context:

@term{declaration}

@subsubheading Binding Types Affected:

@term{variable}, @term{function}

@subsubheading Description:

The @code{ignore} and @code{ignorable} declarations
refer to @term{for-value} @term{references} 
to @term{variable} @term{bindings} for the @param{vars}
and to @term{function} @term{bindings} for the @param{fns}.

An @code{ignore} @term{declaration} specifies that
@term{for-value} @term{references} to the indicated @term{bindings}
will not
occur within the scope of the @term{declaration}.
Within the @term{scope} of such a @term{declaration},
it is desirable
for a compiler to issue a warning about 
the presence of
either a @term{for-value} @term{reference} to any @param{var} or @param{fn},
or a @code{special} @term{declaration} for any @param{var}.

An @code{ignorable} @term{declaration} specifies that 
@term{for-value} @term{references} to the indicated @term{bindings}
might or might not
occur within the scope of the @term{declaration}.
Within the @term{scope} of such a @term{declaration},
it is not desirable
for a compiler to issue a warning about
the presence or absence of
either a @term{for-value} @term{reference} to any @param{var} or @param{fn},
or a @code{special} @term{declaration} for any @param{var}.

When not within the @term{scope} 
of a @code{ignore} or @code{ignorable} @term{declaration},
it is desirable
for a compiler to issue a warning about
any @param{var} for which there is 
neither a @term{for-value} @term{reference} 
nor a @code{special} @term{declaration},
or about
any @param{fn} for which there is 
no @term{for-value} @term{reference}.

Any warning about a ``used'' or ``unused'' @term{binding} must be @oftype{style-warning},
and may not affect program semantics.


The @term{stream variables} established by 
@code{with-open-file},
@code{with-open-stream},
@code{with-input-from-string},
and @code{with-output-to-string},
and all @term{iteration variables} are, by definition, always ``used''.
Using @f{(declare (ignore @param{v}))}, 
for such a @term{variable} @param{v} has unspecified consequences.



@subsubheading See Also:

@ref{declare}


@node dynamic-extent
@heading dynamic-extent (Declaration)
@syindex dynamic-extent
@cindex dynamic-extent


@subsubheading Syntax:

@f{(dynamic-extent @interleave{@starparam{var} |
@star{@paren{@t{function} @param{fn}}}})}

@subsubheading Arguments:

@param{var}---a @term{variable} @term{name}.

@param{fn}---a @term{function} @term{name}.

@subsubheading Valid Context:

@term{declaration}

@subsubheading Binding Types Affected:

@term{variable}, @term{function}

@subsubheading Description:


In some containing @term{form}, @param{F}, this declaration
asserts for each @param{var@mat{@subs1{i}}} (which need not be bound by @param{F}),
and for each @term{value} @param{v@mat{@subs{ij}}} that @param{var@mat{@subs1{i}}} takes on,
and for each @term{object} @param{x@mat{@subs{ijk}}} that 
is
an @term{otherwise inaccessible part} of @param{v@mat{@subs{ij}}} at any time when
@param{v@mat{@subs{ij}}}
becomes the value of @param{var@mat{@subs1{i}}},
that just after the execution of @param{F} terminates, 
@param{x@mat{@subs{ijk}}} is either @term{inaccessible}
(if @param{F} established a @term{binding} for @param{var@mat{@subs1{i}}})
or still an @term{otherwise inaccessible part} of the current value of 
@param{var@mat{@subs1{i}}} (if @param{F} did not establish a @term{binding} 
for @param{var@mat{@subs1{i}}}).
The same relation holds for each @param{fn@mat{@subs1{i}}}, 
except that the @term{bindings} are in the @term{function} @term{namespace}.

The compiler is permitted to use
this information in any way that is appropriate to the @term{implementation}
and that does not conflict with the semantics of @clisp{}.

@code{dynamic-extent} declarations can be @term{free declarations}
or @term{bound declarations}.

The @param{vars} and @param{fns} named in a @code{dynamic-extent} 
declaration must not refer to @term{symbol macro} or @term{macro} bindings.

@subsubheading Examples:

Since stack allocation of the initial value entails knowing at the
@term{object}'s creation time that the @term{object} can be 
@term{stack-allocated},  it is not generally useful to make a 
@code{dynamic-extent} @term{declaration} for @term{variables}
which have no lexically apparent initial value. 
For example, it is probably useful to write:

@lisp
 (defun f ()
   (let ((x (list 1 2 3)))
     (declare (dynamic-extent x))
         ...))
@end lisp


This would permit those compilers that wish to do so to @term{stack allocate}
the list held by the local variable @tt{x}.  It is permissible,
but in practice probably not as useful, to write:

@lisp
 (defun g (x) (declare (dynamic-extent x)) ...)
 (defun f () (g (list 1 2 3)))
@end lisp


Most compilers would probably not @term{stack allocate} the @term{argument}
to @tt{g} in @tt{f} because it would be a modularity violation for the compiler
to assume facts about @tt{g} from within @tt{f}.   Only an implementation that 
was willing to be responsible for recompiling @tt{f} if the definition of @tt{g} 
changed incompatibly could legitimately @term{stack allocate} the @term{list} 
argument to @tt{g} in @tt{f}.

Here is another example:

@lisp
 (declaim (inline g))
 (defun g (x) (declare (dynamic-extent x)) ...)
 (defun f () (g (list 1 2 3)))
 
 (defun f ()
   (flet ((g (x) (declare (dynamic-extent x)) ...))
     (g (list 1 2 3))))
 
@end lisp

In the previous example, some compilers might determine that optimization was 
possible and others might not.

A variant of this is the so-called ``stack allocated rest list''
that can be achieved (in implementations supporting the optimization) by:

@lisp
 (defun f (&rest x)
   (declare (dynamic-extent x))
   ...)
@end lisp


Note that although the initial value of @tt{x} is not explicit, the @tt{f}
function is responsible for assembling the list @tt{x} from the passed arguments,
so the @tt{f} function can be optimized by the compiler to construct a 
@term{stack-allocated} list instead of a heap-allocated list in implementations
that support such.

In the following example,

@lisp
 (let ((x (list 'a1 'b1 'c1))
       (y (cons 'a2 (cons 'b2 (cons 'c2 nil)))))
   (declare (dynamic-extent x y))
   ...)
@end lisp

The @term{otherwise inaccessible parts} of @tt{x} are three 
@term{conses},  and the @term{otherwise inaccessible parts}
of @tt{y} are three other @term{conses}.  
None of the symbols @tt{a1},  @tt{b1},  @tt{c1},  @tt{a2},
@tt{b2},  @tt{c2},  or @nil{}@spc{}is an
@term{otherwise inaccessible part} of @tt{x} or @tt{y} because each
is @term{interned} and hence @term{accessible} by the @term{package}
(or @term{packages}) in which it is @term{interned}.
However, if a freshly allocated @term{uninterned} @term{symbol} had
been used, it would have been an @term{otherwise inaccessible part} of
the @term{list} which contained it.

@lisp
;; In this example, the implementation is permitted to @term{stack allocate}
;; the list that is bound to X.
 (let ((x (list 1 2 3)))
   (declare (dynamic-extent x))
   (print x)
   :done)
@OUT{} (1 2 3)
@EV{} :DONE
 
;; In this example, the list to be bound to L can be @term{stack-allocated}.
 (defun zap (x y z)
   (do ((l (list x y z) (cdr l)))
       ((null l))
     (declare (dynamic-extent l))
     (prin1 (car l)))) @EV{} ZAP
 (zap 1 2 3)
@OUT{} 123
@EV{} NIL

;; Some implementations might open-code LIST-ALL-PACKAGES in a way
;; that permits using @term{stack allocation} of the list to be bound to L.
 (do ((l (list-all-packages) (cdr l)))
     ((null l))
   (declare (dynamic-extent l))
   (let ((name (package-name (car l))))
     (when (string-search "COMMON-LISP" name) (print name))))
@OUT{} "COMMON-LISP"
@OUT{} "COMMON-LISP-USER"
@EV{} NIL

;; Some implementations might have the ability to @term{stack allocate} 
;; rest lists.  A declaration such as the following should be a cue
;; to such implementations that stack-allocation of the rest list
;; would be desirable.
 (defun add (&rest x)
   (declare (dynamic-extent x))
   (apply #'+ x)) @EV{} ADD
 (add 1 2 3) @EV{} 6

 (defun zap (n m)
   ;; Computes (RANDOM (+ M 1)) at relative speed of roughly O(N).
   ;; It may be slow, but with a good compiler at least it
   ;; doesn't waste much heap storage.  :-@rcurly{}
   (let ((a (make-array n)))
     (declare (dynamic-extent a))
     (dotimes (i n) 
       (declare (dynamic-extent i))
       (setf (aref a i) (random (+ i 1))))
     (aref a m))) @EV{} ZAP
 (< (zap 5 3) 3) @EV{} @term{true}
@end lisp


The following are in error, since the value of @tt{x} is used outside of its
@term{extent}:

@lisp
 (length (list (let ((x (list 1 2 3)))  ; Invalid
                (declare (dynamic-extent x))
                x)))

 (progn (let ((x (list 1 2 3)))  ; Invalid
          (declare (dynamic-extent x))
          x)
        nil)
@end lisp


@subsubheading See Also:

@ref{declare}

@subsubheading Notes:

The most common optimization is to @term{stack allocate} the 
initial value of the @term{objects} named by the @param{vars}. 

It is permissible for an implementation to simply ignore this declaration.


@node type
@heading type (Declaration)
@syindex type
@cindex type


@subsubheading Syntax:

@f{(type @param{typespec} @starparam{var})}

@f{(@param{typespec} @starparam{var})}

@subsubheading Arguments:

@param{typespec}---a @term{type specifier}.

@param{var}---a @term{variable} @term{name}.

@subsubheading Valid Context:

@term{declaration} or @term{proclamation}

@subsubheading Binding Types Affected:

@term{variable}

@subsubheading Description:

Affects
only variable @term{bindings} and specifies that the
@param{vars} take on 
values only of the specified @param{typespec}.
In particular, values assigned to the variables by @code{setq},
as well as the initial values of the @param{vars} must be of
the specified @param{typespec}.
@code{type} declarations never apply to function @term{bindings} (see @code{ftype}).

A type declaration of a @term{symbol} 
defined by @code{symbol-macrolet} is equivalent
to wrapping a @code{the} 
expression around the expansion of that @term{symbol},
although the @term{symbol}'s @term{macro expansion} is not actually affected.


The meaning of a type declaration
is equivalent to changing each reference to 
a variable (@param{var}) within the scope of the
declaration to @tt{(the @param{typespec} @param{var})},
changing each expression assigned to the
variable (@param{new-value}) within the scope of the declaration to 
@tt{(the @param{typespec} @param{new-value})},
and executing 
@tt{(the @param{typespec} @param{var})} at the moment the scope of the declaration
is entered.

A @term{type} declaration is valid in all declarations. The interpretation
of a type declaration is as follows:

@enumerate 1
@item During the execution of any reference to the
declared variable within the scope of the declaration, the consequences
are 
undefined
if
the value of the declared variable is not of the declared @term{type}.

@item During the execution of any 
@code{setq} of the declared variable within the scope
of the declaration, the consequences are 
undefined
if the newly assigned value of the
declared variable is not of the declared @term{type}. 

@item At the moment the
scope of the declaration is entered, the consequences are 
undefined
if the value of the
declared variable is not of the declared @term{type}.
@end enumerate


A @term{type} declaration affects only variable references within
its scope.

If nested @term{type} declarations refer to the same variable,
then the value of the variable must be a member of the intersection of
the declared @term{types}.

If there is a local @tt{type} declaration for a dynamic
variable, and there is also a global @tt{type} proclamation for that same
variable, then the value of the variable within the scope of the local
declaration must be a member of the intersection of the two declared
@term{types}.

@code{type} declarations can  be @term{free declarations}
or @term{bound declarations}.

A @term{symbol} cannot be both the name of a @term{type} and the name of a
declaration.  Defining a @term{symbol} as the @term{name} of a @term{class},
@term{structure}, @term{condition}, or @term{type}, when the @term{symbol}
has been @term{declared} as a declaration name, or vice versa, signals an error.

Within the @term{lexical scope} of an @code{array} type declaration, 
all references to @term{array} @term{elements} are assumed to satisfy the
@term{expressed array element type} (as opposed to the @term{upgraded array element type}).
A compiler can treat
the code within the scope of the @code{array} type declaration as if each
@term{access} of an @term{array} @term{element} were surrounded by an appropriate 
@code{the} form.

@subsubheading Examples:

@lisp
 (defun f (x y)
   (declare (type fixnum x y))
   (let ((z (+ x y)))
     (declare (type fixnum z))
     z)) @EV{} F
 (f 1 2) @EV{} 3
 ;; The previous definition of F is equivalent to
 (defun f (x y)
   ;; This declaration is a shorthand form of the TYPE declaration
   (declare (fixnum x y))
   ;; To declare the type of a return value, it's not necessary to
   ;; create a named variable.  A THE special form can be used instead.
   (the fixnum (+ x y))) @EV{} F
 (f 1 2) @EV{} 3
@end lisp



@lisp
 (defvar *one-array* (make-array 10 :element-type '(signed-byte 5)))
 (defvar *another-array* (make-array 10 :element-type '(signed-byte 8)))
  
 (defun frob (an-array)
   (declare (type (array (signed-byte 5) 1) an-array))
   (setf (aref an-array 1) 31)
   (setf (aref an-array 2) 127)
   (setf (aref an-array 3) (* 2 (aref an-array 3)))
   (let ((foo 0))
     (declare (type (signed-byte 5) foo))
     (setf foo (aref an-array 0))))
  
 (frob *one-array*)
 (frob *another-array*)
@end lisp


@medbreak{}

The above definition of @f{frob} is equivalent to:

@lisp
 (defun frob (an-array)
   (setf (the (signed-byte 5) (aref an-array 1)) 31)
   (setf (the (signed-byte 5) (aref an-array 2)) 127)
   (setf (the (signed-byte 5) (aref an-array 3))
         (* 2 (the (signed-byte 5) (aref an-array 3))))
   (let ((foo 0))
     (declare (type (signed-byte 5) foo))
     (setf foo (the (signed-byte 5) (aref an-array 0)))))
@end lisp


Given an implementation in which 
@term{fixnums} are 29 bits but @code{fixnum} @term{arrays} 
are upgraded to signed 32-bit @term{arrays},
the following 
could be compiled with all @term{fixnum} arithmetic:

@lisp
 (defun bump-counters (counters)
   (declare (type (array fixnum *) bump-counters))
   (dotimes (i (length counters))
     (incf (aref counters i))))
@end lisp


@subsubheading See Also:

@ref{declare},
@ref{declaim},
@ref{proclaim}

@subsubheading Notes:

@f{(@param{typespec} @starparam{var})} 
is an abbreviation for @f{(type @param{typespec} @starparam{var})}.

A @code{type} declaration for the arguments to a function does not
necessarily imply anything about the type of the result.  The following
function is not permitted to be compiled using @term{implementation-dependent}
@term{fixnum}-only arithmetic:

@lisp
 (defun f (x y) (declare (fixnum x y)) (+ x y))
@end lisp


To see why, consider @f{(f most-positive-fixnum 1)}.
Common Lisp defines that @f{F} must return a @term{bignum} here, rather
than signal an error or produce a mathematically incorrect result.
If you have special knowledge such ``@term{fixnum} overflow'' cases will
not come up, you can declare the result value to be in the @term{fixnum}
range, enabling some compilers to use more efficient arithmetic:

@lisp
 (defun f (x y)
   (declare (fixnum x y))
   (the fixnum (+ x y)))
@end lisp


Note, however, that in the three-argument case, because of the possibility
of an implicit intermediate value growing too large, the following will not
cause @term{implementation-dependent} @term{fixnum}-only arithmetic to be used:

@lisp
 (defun f (x y)
   (declare (fixnum x y z))
   (the fixnum (+ x y z)))
@end lisp


To see why, consider @f{(f most-positive-fixnum 1 -1).}
Although the arguments and the result are all @term{fixnums}, an intermediate
value is not a @term{fixnum}.  If it is important that 
@term{implementation-dependent} @term{fixnum}-only arithmetic be selected
in @term{implementations} that provide it, 
consider writing something like this instead:

@lisp
 (defun f (x y)
   (declare (fixnum x y z))
   (the fixnum (+ (the fixnum (+ x y)) z)))
@end lisp



@node inline; notinline
@heading inline, notinline (Declaration)
@syindex inline
@cindex inline
@syindex notinline
@cindex notinline
@anchor{inline}
@anchor{notinline}


@subsubheading Syntax:

@tt{(inline @starparam{function-name})}

@tt{(notinline @starparam{function-name})}

@subsubheading Arguments:

@param{function-name}---a @term{function name}.

@subsubheading Valid Context:

@term{declaration} or @term{proclamation}

@subsubheading Binding Types Affected:

@term{function}

@subsubheading Description:

@code{inline} specifies that
it is desirable for the compiler to produce inline calls
to the @term{functions} named by @param{function-names}; 
that is, the code for a specified @param{function-name}
should be integrated into the calling routine, appearing ``in line''
in place of a procedure call.  
A compiler is free to ignore this declaration.
@code{inline} declarations never apply to variable @term{bindings}. 

If one of the @term{functions} mentioned has a lexically apparent local definition
(as made by @code{flet} or @code{labels}), then the declaration
applies to that local definition and not to the global function definition.

While no @term{conforming implementation} is required to perform inline expansion
of user-defined functions, those @term{implementations} that do attempt
to recognize the following paradigm:

To define a @term{function} @f{f} that is not @code{inline} by default
but for which @f{(declare (inline f))} will make @param{f} be locally inlined,
the proper definition sequence is:

@lisp
 (declaim (inline f))
 (defun f ...)
 (declaim (notinline f))
@end lisp


The @code{inline} proclamation preceding the @code{defun} @term{form}
ensures that the @term{compiler} has the opportunity save the information
necessary for inline expansion, and the @code{notinline} proclamation 
following the @code{defun} @term{form} prevents @f{f} from being expanded
inline everywhere.  

@code{notinline} specifies that it is
undesirable to compile the @term{functions}
named by @param{function-names} in-line.
A compiler is not free to ignore this declaration;
calls to the specified functions must be implemented as out-of-line subroutine calls.

If one of the @term{functions}
mentioned has a lexically apparent local definition
(as made by @code{flet} or @code{labels}), then the declaration
applies to that local definition and not to the global function definition.

In the presence of a @term{compiler macro} definition for 
@param{function-name}, a @code{notinline} declaration prevents that
@term{compiler macro} from being used.
An @code{inline} declaration may be used to encourage use of 
@term{compiler macro} definitions.  @code{inline} and @code{notinline}
declarations otherwise have no effect when the lexically visible definition
of @param{function-name} is a @term{macro} definition.

@code{inline} and @code{notinline} declarations can be @term{free declarations} or
@term{bound declarations}.                  
@code{inline} and @code{notinline} declarations of functions that
appear before the body of a 
@code{flet}
or  @code{labels}
@term{form} that defines that function are @term{bound declarations}.  
Such declarations in other contexts are @term{free declarations}.

@subsubheading Examples:

@lisp
 ;; The globally defined function DISPATCH should be open-coded,
 ;; if the implementation supports inlining, unless a NOTINLINE 
 ;; declaration overrides this effect.
 (declaim (inline dispatch))
 (defun dispatch (x) (funcall (get (car x) 'dispatch) x))
 ;; Here is an example where inlining would be encouraged.
 (defun top-level-1 () (dispatch (read-command)))
 ;; Here is an example where inlining would be prohibited.
 (defun top-level-2 ()
   (declare (notinline dispatch))
   (dispatch (read-command)))
 ;; Here is an example where inlining would be prohibited.
 (declaim (notinline dispatch))
 (defun top-level-3 () (dispatch (read-command)))
 ;; Here is an example where inlining would be encouraged.
 (defun top-level-4 () 
   (declare (inline dispatch))
   (dispatch (read-command)))
@end lisp


@subsubheading See Also:

@ref{declare},
@ref{declaim},
@ref{proclaim}


@node ftype
@heading ftype (Declaration)
@syindex ftype
@cindex ftype


@subsubheading Syntax:

@f{(ftype @param{type} @starparam{function-name})}

@subsubheading Arguments:

@param{function-name}---a @term{function name}.

@param{type}---a @term{type specifier}.

@subsubheading Valid Context:

@term{declaration} or @term{proclamation}

@subsubheading Binding Types Affected:

@term{function}

@subsubheading Description:

Specifies that the @term{functions} named by @param{function-names} are of
the functional type @param{type}.
For example:

@lisp
 (declare (ftype (function (integer list) t) ith)
          (ftype (function (number) float) sine cosine))
@end lisp

If one of the @term{functions} mentioned has a lexically apparent local definition
(as made by @code{flet} or @code{labels}), then the declaration
applies to that local definition and not to the global function definition.
@code{ftype} declarations never apply to variable @term{bindings} (see @tt{type}). 

The lexically apparent bindings of @param{function-names} must not be
@term{macro} definitions.  (This is because @code{ftype} declares the
functional definition of each @term{function name} to be of a particular
subtype of @code{function}, and @term{macros} do not denote 
@term{functions}.)

@code{ftype} 
declarations
can be @term{free declarations} or @term{bound declarations}.
@code{ftype} declarations of functions that appear before the body of a 
@code{flet}
or @code{labels}
@term{form} that defines that function are @term{bound declarations}.  
Such declarations in other contexts are @term{free declarations}.


@subsubheading See Also:

@ref{declare},
@ref{declaim},
@ref{proclaim}


@node declaration
@heading declaration (Declaration)
@syindex declaration
@cindex declaration


@subsubheading Syntax:

@f{(declaration @starparam{name})}

@subsubheading Arguments:

@param{name}---a @term{symbol}.

@subsubheading Valid Context:

@term{proclamation} only

@subsubheading Description:

Advises the compiler that each @param{name} is a valid but potentially
non-standard declaration name.  The purpose of this is to tell one
compiler not to issue warnings for declarations meant for another 
compiler or other program processor.

@subsubheading Examples:

@lisp
 (declaim (declaration author target-language target-machine))
 (declaim (target-language ada))
 (declaim (target-machine IBM-650))
 (defun strangep (x)
   (declare (author "Harry Tweeker"))
   (member x '(strange weird odd peculiar)))
@end lisp


@subsubheading See Also:

@ref{declaim},
@ref{proclaim}


@node optimize
@heading optimize (Declaration)
@syindex optimize
@cindex optimize


@subsubheading Syntax:

@f{(optimize @star{@curly{@param{quality} | (@param{quality} @param{value})}})}
@cindex compilation-speed
@cindex debug
@cindex safety
@cindex space
@cindex speed

@subsubheading Arguments:

@param{quality}---an @term{optimize quality}.

@param{value}---one of the @term{integers} @f{0}, @f{1}, @f{2}, or @f{3}.

@subsubheading Valid Context:

@term{declaration} or @term{proclamation}

@subsubheading Description:

Advises the compiler that each @param{quality} should be given attention
according to the specified corresponding @param{value}.
Each @param{quality} must be a @term{symbol} naming an @term{optimize quality}; 
the names and meanings of the standard @param{optimize qualities} are shown in 
@thenextfigure{}.


@float Figure,fig3.25
@cartouche
@multitable{@code{compilation-speed}}{both code size and run-time space}
@headitem Name @tab Meaning
@item @code{compilation-speed} @tab speed of the compilation process
@item @code{debug} @tab ease of debugging
@item @code{safety} @tab run-time error checking
@item @code{space} @tab both code size and run-time space
@item @code{speed} @tab speed of the object code
@end multitable
@end cartouche
@caption{Optimize qualities}
@end float


There may be other, @term{implementation-defined} @term{optimize qualities}.

A @param{value} @f{0} means that the corresponding @param{quality} is totally
unimportant, and @f{3} that the @param{quality} is extremely important;
@f{1} and @f{2} are intermediate values, with @f{1} the 
neutral value.
@f{(@param{quality} 3)} can be abbreviated to @param{quality}.

Note that @term{code} which has the optimization @f{(safety 3)},
or just @code{safety},
is called @term{safe} @term{code}.

The consequences are unspecified if a @param{quality} appears more than once
with @term{different} @param{values}.

@subsubheading Examples:

@lisp
 (defun often-used-subroutine (x y)
   (declare (optimize (safety 2)))
   (error-check x y)
   (hairy-setup x)
   (do ((i 0 (+ i 1))
        (z x (cdr z)))
       ((null z))
     ;; This inner loop really needs to burn.
     (declare (optimize speed))
     (declare (fixnum i))
     ))
@end lisp


@subsubheading See Also:

@ref{declare},
@ref{declaim},
@ref{proclaim},
@ref{Declaration Scope, Section 3.3.4 (Declaration Scope)}

@subsubheading Notes:

An @code{optimize} declaration never applies to either a @term{variable} or
a @term{function} @term{binding}.  An @code{optimize} declaration can only
be a @term{free declaration}.  For more information, see @ref{Declaration Scope, Section 3.3.4 (Declaration Scope)}.


@node special
@heading special (Declaration)
@syindex special
@cindex special


@subsubheading Syntax:

@f{(special @starparam{var})}

@subsubheading Arguments:

@param{var}---a @term{symbol}.

@subsubheading Valid Context:

@term{declaration} or @term{proclamation}

@subsubheading Binding Types Affected:

@term{variable}

@subsubheading Description:

Specifies that all of
the @param{vars} named are dynamic.
This specifier affects variable @term{bindings} and 
affects references.
All variable @term{bindings} affected are made to be dynamic @term{bindings},
and affected variable references refer to the current dynamic 
@term{binding}.
For example:

@lisp
 (defun hack (thing *mod*)    ;The binding of the parameter
   (declare (special *mod*))  ; *mod* is visible to hack1,
   (hack1 (car thing)))       ; but not that of thing.
 (defun hack1 (arg)
   (declare (special *mod*))  ;Declare references to *mod*
                              ;within hack1 to be special.
   (if (atom arg) *mod*
       (cons (hack1 (car arg)) (hack1 (cdr arg)))))
@end lisp


A @code{special} declaration does not affect inner @term{bindings} 
of a @param{var}; the inner @term{bindings} implicitly shadow
a @code{special} declaration and must be explicitly re-declared to
be @code{special}.
@code{special} declarations never apply to function @term{bindings}.

@code{special} declarations can be either @term{bound declarations},
affecting both a binding and references, or @term{free declarations},
affecting only references, depending on whether the declaration is 
attached to a variable binding.

When used in a @term{proclamation}, a @code{special} 
@term{declaration specifier}
applies to all @term{bindings} as well as to all references of the
mentioned variables.  For example, after

@lisp
 (declaim (special x))
@end lisp


then in a function definition such as

@lisp
 (defun example (x) ...)
@end lisp


the parameter @f{x} is bound as a dynamic variable
rather than as a lexical variable.  

@subsubheading Examples:

@lisp
(defun declare-eg (y)                 ;this y is special
 (declare (special y))
 (let ((y t))                         ;this y is lexical
      (list y
            (locally (declare (special y)) y)))) ;this y refers to the
                                                 ;special binding of y
@EV{} DECLARE-EG 
 (declare-eg nil) @EV{} (T NIL) 
@end lisp


@lisp
(setf (symbol-value 'x) 6)
(defun foo (x)                         ;a lexical binding of x
  (print x)
  (let ((x (1+ x)))                    ;a special binding of x
    (declare (special x))              ;and a lexical reference
    (bar))
  (1+ x))
(defun bar () 
  (print (locally (declare (special x))
           x)))
(foo 10) 
@OUT{} 10
@OUT{} 11
@EV{} 11
@end lisp


@lisp
(setf (symbol-value 'x) 6)
(defun bar (x y)            ;[1] 1st occurrence of x
  (let ((old-x x)           ;[2] 2nd occurrence of x -- same as 1st occurrence
        (x y))              ;[3] 3rd occurrence of x
    (declare (special x))
    (list old-x x)))
(bar 'first 'second) @EV{} (FIRST SECOND)
@end lisp


@lisp
 (defun few (x &optional (y *foo*))
   (declare (special *foo*))
   ...)
@end lisp

The reference to @f{*foo*}
in the first line of this example is not @code{special}
even though there is a @code{special} declaration in the second line.

@lisp
 (declaim (special prosp)) @EV{} @term{implementation-dependent}
 (setq prosp 1 reg 1) @EV{} 1
 (let ((prosp 2) (reg 2))         ;the binding of prosp is special
    (set 'prosp 3) (set 'reg 3)   ;due to the preceding proclamation,
    (list prosp reg))             ;whereas the variable reg is lexical
@EV{} (3 2)
 (list prosp reg) @EV{} (1 3)

 (declaim (special x))          ;x is always special.
 (defun example (x y)                                 
   (declare (special y))
   (let ((y 3) (x (* x 2)))
     (print (+ y (locally (declare (special y)) y)))
     (let ((y 4)) (declare (special y)) (foo x)))) @EV{} EXAMPLE
@end lisp

In the contorted code above, the outermost and innermost @term{bindings} of
@f{y} are dynamic,
but the middle
binding is lexical. The two arguments to @f{+} are different,
one being the value, which is @f{3}, of the lexical variable
@f{y}, and the other being the value of the dynamic variable named @f{y}
(a @term{binding} 
of which happens, coincidentally, to lexically surround it at
an outer level).  All the @term{bindings} 
of @f{x} and references to @f{x}
are dynamic, however, because of the proclamation that @f{x} is
always @code{special}.

@subsubheading See Also:

@ref{defparameter},
@ref{defvar}


@node locally
@heading locally (Special Operator)
@syindex locally
@cindex locally



@subsubheading Syntax:

@DefspecWithValues{locally, @starparam{declaration} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{Declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} of the @param{forms}.

@subsubheading Description:

Sequentially evaluates a body of @param{forms}
in a @term{lexical environment} where the given @param{declarations} have effect.

@subsubheading Examples:

@lisp
 (defun sample-function (y)  ;this y is regarded as special
   (declare (special y))                                
   (let ((y t))              ;this y is regarded as lexical
     (list y
           (locally (declare (special y))
             ;; this next y is regarded as special
             y))))
@EV{} SAMPLE-FUNCTION
 (sample-function nil) @EV{} (T NIL) 
 (setq x '(1 2 3) y '(4 . 5)) @EV{} (4 . 5)

;;; The following declarations are not notably useful in specific.
;;; They just offer a sample of valid declaration syntax using LOCALLY.
 (locally (declare (inline floor) (notinline car cdr))
          (declare (optimize space))
    (floor (car x) (cdr y))) @EV{} 0, 1
@end lisp


@lisp
;;; This example shows a definition of a function that has a particular set
;;; of OPTIMIZE settings made locally to that definition.
 (locally (declare (optimize (safety 3) (space 3) (speed 0)))
   (defun frob (w x y &optional (z (foo x y)))
     (mumble x y z w)))
@EV{} FROB

;;; This is like the previous example, except that the optimize settings
;;; remain in effect for subsequent definitions in the same compilation unit.
 (declaim (optimize (safety 3) (space 3) (speed 0)))
 (defun frob (w x y &optional (z (foo x y)))
   (mumble x y z w))
@EV{} FROB
@end lisp


@subsubheading See Also:

@ref{declare}

@subsubheading Notes:

The @code{special} declaration may be used with @code{locally}
to affect references to, rather than @term{bindings} of, @term{variables}.

If a @code{locally} @term{form} is a @term{top level form}, the body @param{forms}
are also processed as @term{top level forms}.  See @ref{File Compilation, Section 3.2.3 (File Compilation)}.



@node the
@heading the (Special Operator)
@syindex the
@cindex the


@subsubheading Syntax:

@DefspecWithValues{the, value-type form, @starparam{result}}

@subsubheading Arguments and Values:

@param{value-type}---a @term{type specifier}; @noeval{}.

@param{form}---a @term{form}; @eval{}.

@param{results}---the @term{values} resulting from the @term{evaluation} of @param{form}.
These @term{values} must conform to the @term{type} supplied by @param{value-type};
see below.

@subsubheading Description:

@code{the} specifies that the @term{values}[1a] returned by @param{form}
are of the @term{types} specified by @param{value-type}.
The consequences are undefined if any @param{result}
is not of the declared type.


It is permissible for @param{form} to @term{yield} a different number of @term{values} 
than are specified by @param{value-type}, provided that the values
for which @param{types} are declared are indeed of those @term{types}.
Missing values are treated as @nil{}@spc{}for the purposes of checking their @term{types}.

Regardless of number of @term{values} declared by @param{value-type},
the number of @term{values} returned by @thespecform{the} is the same as
the number of @term{values} returned by @param{form}. 

@subsubheading Examples:

@lisp
 (the symbol (car (list (gensym)))) @EV{} #:G9876
 (the fixnum (+ 5 7)) @EV{} 12
 (the (values) (truncate 3.2 2)) @EV{} 1, 1.2
 (the integer (truncate 3.2 2)) @EV{} 1, 1.2
 (the (values integer) (truncate 3.2 2)) @EV{} 1, 1.2
 (the (values integer float) (truncate 3.2 2))   @EV{} 1, 1.2
 (the (values integer float symbol) (truncate 3.2 2)) @EV{} 1, 1.2
 (the (values integer float symbol t null list) 
      (truncate 3.2 2)) @EV{} 1, 1.2
 (let ((i 100))
    (declare (fixnum i))
    (the fixnum (1+ i))) @EV{} 101
 (let* ((x (list 'a 'b 'c))
        (y 5))
    (setf (the fixnum (car x)) y)
    x) @EV{} (5 B C)
@end lisp


@subsubheading Exceptional Situations:

The consequences are undefined if
the @term{values} @term{yielded} by the @param{form} 
are not of the @term{type} specified by @param{value-type}.

@subsubheading See Also:

@ref{values (Type Specifier)}

@subsubheading Notes:

The @code{values} @term{type specifier} can be used to indicate the types
of @term{multiple values}:

@lisp
 (the (values integer integer) (floor x y))
 (the (values string t)
      (gethash the-key the-string-table))
@end lisp


@code{setf} can be used with @code{the} type declarations.
In this case the declaration is transferred to the form that
specifies  the new value.  The resulting @code{setf} @term{form}
is then analyzed.


@node special-operator-p
@heading special-operator-p (Function)
@syindex special-operator-p
@cindex special-operator-p



@subsubheading Syntax:

@DefunWithValues{special-operator-p, symbol, generalized-boolean}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@Predicate{symbol, a @term{special operator}}

@subsubheading Examples:

@lisp
 (special-operator-p 'if) @EV{} @term{true}
 (special-operator-p 'car) @EV{} @term{false}
 (special-operator-p 'one) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

Should signal @code{type-error} if its argument is not a @term{symbol}.

@subsubheading Notes:

Historically, this function was called @f{special-form-p}.  The name was
finally declared a misnomer and changed, since it returned true for
@term{special operators}, not @term{special forms}.



@node constantp
@heading constantp (Function)
@syindex constantp
@cindex constantp



@subsubheading Syntax:

@DefunWithValues{constantp, form @opt{} environment, generalized-boolean}

@subsubheading Arguments and Values:

@param{form}---a @term{form}.

@param{environment}---an @term{environment} @term{object}.
@Default{@nil{}}

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Returns @term{true} if @param{form} can be determined
by the @term{implementation} to be a @term{constant form} 
in the indicated @param{environment}; 
otherwise, it returns @term{false} indicating either 
that the @term{form} is not a @term{constant form}
or that it cannot be determined whether or not @term{form} is a @term{constant form}.

The following kinds of @term{forms} are considered @term{constant forms}:

@itemize @bullet{}
@item
@term{Self-evaluating objects} 
(such as @term{numbers}, 
@term{characters},
and the various kinds of @term{arrays})
are always considered @term{constant forms} 
and must be recognized as such by @code{constantp}.

@item
@term{Constant variables}, such as @term{keywords},
symbols defined by @clisp{}@spc{}as constant (such as @nil{}, @code{t}, and @code{pi}),
and symbols declared as constant by the user in the indicated @param{environment}
using @code{defconstant}
are always considered @term{constant forms}
and must be recognized as such by @code{constantp}.

@item
@code{quote} @term{forms} are always considered @term{constant forms}
and must be recognized as such by @code{constantp}.

@item 
An @term{implementation} is permitted, but not required, to detect
additional @term{constant forms}.  If it does, it is also permitted,
but not required, to make use of information in the @param{environment}.
Examples of @term{constant forms} for which @code{constantp} might
or might not return @term{true} are:
@f{(sqrt pi)},
@f{(+ 3 2)},
@f{(length '(a b c))},
and
@f{(let ((x 7)) (zerop x))}.
@end itemize


If an @term{implementation} chooses to make use of the @param{environment}
information, such actions as expanding @term{macros} or performing function
inlining are permitted to be used, but not required; 
however, expanding @term{compiler macros} is not permitted.

@subsubheading Examples:

@lisp
 (constantp 1) @EV{} @term{true}
 (constantp 'temp) @EV{} @term{false}
 (constantp ''temp)) @EV{} @term{true}
 (defconstant this-is-a-constant 'never-changing) @EV{} THIS-IS-A-CONSTANT 
 (constantp 'this-is-a-constant) @EV{} @term{true}
 (constantp "temp") @EV{} @term{true}
 (setq a 6) @EV{} 6 
 (constantp a) @EV{} @term{true}
 (constantp '(sin pi)) @EV{} @term{implementation-dependent}
 (constantp '(car '(x))) @EV{} @term{implementation-dependent}
 (constantp '(eql x x)) @EV{} @term{implementation-dependent}
 (constantp '(typep x 'nil)) @EV{} @term{implementation-dependent}
 (constantp '(typep x 't)) @EV{} @term{implementation-dependent}
 (constantp '(values this-is-a-constant)) @EV{} @term{implementation-dependent}
 (constantp '(values 'x 'y)) @EV{} @term{implementation-dependent}
 (constantp '(let ((a '(a b c))) (+ (length a) 6))) @EV{} @term{implementation-dependent}
@end lisp


@subsubheading Affected By:

The state of the global environment (@eg{} which @term{symbols} have been
declared to be the @term{names} of @term{constant variables}).

@subsubheading See Also:

@ref{defconstant}






@node Types and Classes
@chapter Types and Classes
@menu
* Introduction to Types and Classes::
* Types::
* Classes::

Dictionary

* nil (Type)::
* boolean::
* function (System Class)::
* compiled-function::
* generic-function::
* standard-generic-function::
* class::
* built-in-class::
* structure-class::
* standard-class::
* method::
* standard-method::
* structure-object::
* standard-object::
* method-combination::
* t (System Class)::
* satisfies::
* member (Type Specifier)::
* not (Type Specifier)::
* and (Type Specifier)::
* or (Type Specifier)::
* values (Type Specifier)::
* eql (Type Specifier)::
* coerce::
* deftype::
* subtypep::
* type-of::
* typep::
* type-error::
* type-error-datum; type-error-expected-type::
* simple-type-error::
@end menu

@node Introduction to Types and Classes
@section Introduction to Types and Classes

A @term{type} is a (possibly infinite) set of @term{objects}.
An @term{object} can belong to more than one @term{type}.  
@term{Types} are never explicitly represented as @term{objects} by @clisp{}.
Instead, they are referred to indirectly by the use of @term{type specifiers},
which are @term{objects} that denote @term{types}.

New @term{types} can be defined using @code{deftype}, @code{defstruct}, 
@code{defclass}, and @code{define-condition}.

@Thefunction{typep}, a set membership test, is used to determine
whether a given @term{object} is of a given @term{type}.  The function
@code{subtypep}, a subset test, is used to determine whether a
given @term{type} is a @term{subtype} of another given @term{type}.  The
function @code{type-of} returns a particular @term{type} to
which a given @term{object} belongs, even though that @term{object}
must belong to one or more other @term{types} as well.
(For example, every @term{object} is @oftype{t}, 
but @code{type-of} always returns a @term{type specifier}
for a @term{type} more specific than @code{t}.)

@term{Objects}, not @term{variables}, have @term{types}.
Normally, any @term{variable} can have any @term{object} as its @term{value}.
It is possible to declare that a @term{variable} takes on only 
values of a given @term{type} by making an explicit @term{type declaration}.
@term{Types} are arranged in a directed acyclic graph, except
for the presence of equivalences. 

@term{Declarations} can be made about @term{types} using @t{declare}, 
@code{proclaim}, @code{declaim}, or @code{the}.
For more information about @term{declarations},
see @ref{Declarations, Section 3.3 (Declarations)}.

Among the fundamental @term{objects} of the @CLOS{}@spc{}are @term{classes}.
A @term{class} determines the structure and behavior of a set of
other @term{objects}, which are called its @term{instances}. 
Every @term{object} is a @term{direct instance} of a @term{class}.
The @term{class} of an @term{object} determines the set of
operations that can be performed on the @term{object}.
For more information, see @ref{Classes, Section 4.3 (Classes)}.

It is possible to write @term{functions} that have behavior @term{specialized}
to the class of the @term{objects} which are their @term{arguments}.
For more information, see @ref{Generic Functions and Methods, Section 7.6 (Generic Functions and Methods)}.

The @term{class} of the @term{class} of an @term{object} 
is called its @newterm{metaclass}.
For more information about @term{metaclasses},
see @ref{Meta-Objects, Section 7.4 (Meta-Objects)}.

@node Types
@section Types


@menu
* Data Type Definition::
* Type Relationships::
* Type Specifiers::
@end menu
@node Data Type Definition
@subsection Data Type Definition

Information about @term{type} usage is located in 
the sections specified in @ref{TypeInfoXrefs, Figure 4.1}. 
@ref{ObjectSystemClasses, Figure 4.7}@spc{}lists some @term{classes} 
that are particularly relevant to the @CLOS{}.
@ref{StandardizedConditionTypes, Figure 9.1}@spc{}lists the defined @term{condition} @term{types}.



@float Figure,TypeInfoXrefs
@cartouche
@multitable{@ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}}{All types---read and print syntax}

@item @hfil{}@b{Section} @tab Data Type
@item @ref{Classes, Section 4.3 (Classes)} @tab Object System types
@item @ref{Slots, Section 7.5 (Slots)} @tab Object System types
@item @ref{Objects, Chapter 7 (Objects)} @tab Object System types
@item @ref{Generic Functions and Methods, Section 7.6 (Generic Functions and Methods)} @tab Object System types
@item @ref{Condition System Concepts, Section 9.1 (Condition System Concepts)} @tab Condition System types
@item @ref{Types and Classes, Chapter 4 (Types and Classes)} @tab Miscellaneous types
@item @ref{Syntax, Chapter 2 (Syntax)} @tab All types---read and print syntax
@item @ref{The Lisp Printer, Section 22.1 (The Lisp Printer)} @tab All types---print syntax
@item @ref{Compilation, Section 3.2 (Compilation)} @tab All types---compilation issues
@end multitable
@end cartouche
@caption{Cross-References to Data Type Information}
@end float



@node Type Relationships
@subsection Type Relationships


@itemize @bullet{}

@item
@Thetypes{cons}, @code{symbol}, @code{array}, @code{number},
@code{character}, @code{hash-table}, 
@code{function},
@code{readtable}, @code{package}, @code{pathname}, @code{stream}, 
@code{random-state}, @code{condition}, @code{restart},
and any single other @term{type} created by @code{defstruct},
@code{define-condition},
or @code{defclass} are @term{pairwise} @term{disjoint}, 
except for type relations explicitly established by specifying 
@term{superclasses} in @code{defclass} 
or @code{define-condition}
or the @kwd{include} option of @code{destruct}.



@item Any two @term{types} created by @code{defstruct} are 
@term{disjoint} unless
one is a @term{supertype} of the other by virtue of
the @code{defstruct} @kwd{include} option.

@editornote{KMP: The comments in the source say gray suggested some change
from ``common superclass'' to ``common subclass'' in the following, but the
result looks suspicious to me.}

@item
Any two @term{distinct} @term{classes} created by @code{defclass} 
or @code{define-condition}
are @term{disjoint} unless they have a common @term{subclass} or
one @term{class} is a @term{subclass} of the other.


@item 
An implementation may be extended to add other @term{subtype}
relationships between the specified @term{types}, as long as they do
not violate the type relationships and disjointness requirements
specified here.  An implementation may define additional @term{types}
that are @term{subtypes} or @term{supertypes} of any
specified @term{types}, as long as each additional @term{type} is
a @subtypeof{t} and a @supertypeof{nil} and the disjointness requirements
are not violated.

At the discretion of the implementation, either @code{standard-object}
or @code{structure-object} might appear in any class precedence list
for a @term{system class} that does not already specify either 
@code{standard-object} or @code{structure-object}.  If it does,
it must precede @theclass{t} and follow all other @term{standardized} @term{classes}.
@end itemize



@node Type Specifiers
@subsection Type Specifiers


@term{Type specifiers} can be @term{symbols}, @term{classes}, or @term{lists}.
@ref{StandardizedAtomicTypeSpecs, Figure 4.2}@spc{}lists @term{symbols} that are
@term{standardized} @term{atomic type specifiers}, and
@ref{StandardizedCompoundTypeSpecNames, Figure 4.3}@spc{}lists
@term{standardized} @term{compound type specifier} @term{names}.
For syntax information, see the dictionary entry for the corresponding @term{type specifier}.
It is possible to define new @term{type specifiers} using
@code{defclass},
@code{define-condition},
@code{defstruct}, 
or
@code{deftype}.




@float Figure,StandardizedAtomicTypeSpecs
@cartouche
@multitable{floating-point-invalid-operation}{method-combination}{standard-generic-function}

@item arithmetic-error @tab function @tab simple-condition
@item array @tab generic-function @tab simple-error
@item atom @tab hash-table @tab simple-string
@item base-char @tab integer @tab simple-type-error
@item base-string @tab keyword @tab simple-vector
@item bignum @tab list @tab simple-warning
@item bit @tab logical-pathname @tab single-float
@item bit-vector @tab long-float @tab standard-char
@item broadcast-stream @tab method @tab standard-class
@item built-in-class @tab method-combination @tab standard-generic-function
@item cell-error @tab nil @tab standard-method
@item character @tab null @tab standard-object
@item class @tab number @tab storage-condition
@item compiled-function @tab package @tab stream
@item complex @tab package-error @tab stream-error
@item concatenated-stream @tab parse-error @tab string
@item condition @tab pathname @tab string-stream
@item cons @tab print-not-readable @tab structure-class
@item control-error @tab program-error @tab structure-object
@item division-by-zero @tab random-state @tab style-warning
@item double-float @tab ratio @tab symbol
@item echo-stream @tab rational @tab synonym-stream
@item end-of-file @tab reader-error @tab t
@item error @tab readtable @tab two-way-stream
@item extended-char @tab real @tab type-error
@item file-error @tab restart @tab unbound-slot
@item file-stream @tab sequence @tab unbound-variable
@item fixnum @tab serious-condition @tab undefined-function
@item float @tab short-float @tab unsigned-byte
@item floating-point-inexact @tab signed-byte @tab vector
@item floating-point-invalid-operation @tab simple-array @tab warning
@item floating-point-overflow @tab simple-base-string @tab 
@item floating-point-underflow @tab simple-bit-vector @tab 
@end multitable
@end cartouche
@caption{Standardized Atomic Type Specifiers}
@end float



@indent{}               
If a @term{type specifier} is a @term{list}, the @term{car} of the @term{list} 
is a @term{symbol}, and the rest of the @term{list} is subsidiary
@term{type} information.  Such a @term{type specifier} is called 
a @newterm{compound type specifier}.
Except as explicitly stated otherwise,
the subsidiary items can be unspecified.
The unspecified subsidiary items are indicated
by writing @f{*}.  For example, to completely specify
a @term{vector}, the @term{type} of the elements
and the length of the @term{vector} must be present.

@lisp
 (vector double-float 100)
@end lisp

The following leaves the length unspecified:

@lisp
 (vector double-float *)
@end lisp

The following leaves the element type unspecified:

@lisp
 (vector * 100)                                      
@end lisp

Suppose that two @term{type specifiers} are the same except that the first
has a @f{*} where the second has a more explicit specification.
Then the second denotes a @term{subtype} 
of the @term{type} denoted by the first.

If a @term{list} has one or more unspecified items at the end, 
those items can be dropped.
If dropping all occurrences of @f{*} results in a @term{singleton} @term{list},
then the parentheses can be dropped as well (the list can be replaced
by the @term{symbol} in its @term{car}).  
For example,                       
@tt{(vector double-float *)}                    
can be abbreviated to @tt{(vector double-float)},               
and @tt{(vector * *)} can be abbreviated to @tt{(vector)} 
and then to 
@tt{vector}.



@float Figure,StandardizedCompoundTypeSpecNames
@cartouche
@multitable{double-float}{simple-array}{simple-base-string}

@item and @tab long-float @tab simple-base-string
@item array @tab member @tab simple-bit-vector
@item base-string @tab mod @tab simple-string
@item bit-vector @tab not @tab simple-vector
@item complex @tab or @tab single-float
@item cons @tab rational @tab string
@item double-float @tab real @tab unsigned-byte
@item eql @tab satisfies @tab values
@item float @tab short-float @tab vector
@item function @tab signed-byte @tab 
@item integer @tab simple-array @tab 
@end multitable
@end cartouche
@caption{Standardized Compound Type Specifier Names}
@end float


@Thenextfigure{}@spc{}show the @term{defined names} that can be used as 
@term{compound type specifier} @term{names}
but that cannot be used as @term{atomic type specifiers}.


@float Figure,fig4.4
@cartouche
@multitable{member}{mod}{satisfies}

@item and @tab mod @tab satisfies
@item eql @tab not @tab values
@item member @tab or @tab 
@end multitable
@end cartouche
@caption{Standardized Compound-Only Type Specifier Names}
@end float


New @term{type specifiers} can come into existence in two ways.

@itemize @bullet{}
@item 
Defining a structure by using @code{defstruct} without using
the @kwd{type} specifier or defining a @term{class} by using 
@code{defclass} 
or @code{define-condition}
automatically causes the name of the structure 
or class to be a new @term{type specifier} @term{symbol}.
@item 
@code{deftype} can be used to define 
@cindex derived type specifier
@dfn{derived type specifiers},
which act as `abbreviations' for other @term{type specifiers}.
@end itemize


A @term{class} @term{object} can be used as a @term{type specifier}. 
When used this way, it denotes the set of all members of that @term{class}.

@Thenextfigure{}@spc{}shows some @term{defined names} relating to 
@term{types} and @term{declarations}.



@float Figure,TypesAndDeclsNames
@cartouche
@multitable{define-condition}{defstruct}{subtypep}

@item coerce @tab defstruct @tab subtypep
@item declaim @tab deftype @tab the
@item declare @tab ftype @tab type
@item defclass @tab locally @tab type-of
@item define-condition @tab proclaim @tab typep
@end multitable
@end cartouche
@caption{Defined names relating to types and declarations.}
@end float


@Thenextfigure{}@spc{}shows all @term{defined names} that are @term{type specifier} @term{names},
whether for @term{atomic type specifiers} or @term{compound type specifiers};
this list is the union of the lists in @ref{StandardizedAtomicTypeSpecs, Figure 4.2}@spc{}
and @ref{StandardizedCompoundTypeSpecNames, Figure 4.3}.



@float Figure,StandardizedTypeSpecifierNames
@cartouche
@multitable{floating-point-invalid-operation}{method-combination}{standard-generic-function}

@item and @tab function @tab simple-array
@item arithmetic-error @tab generic-function @tab simple-base-string
@item array @tab hash-table @tab simple-bit-vector
@item atom @tab integer @tab simple-condition
@item base-char @tab keyword @tab simple-error
@item base-string @tab list @tab simple-string
@item bignum @tab logical-pathname @tab simple-type-error
@item bit @tab long-float @tab simple-vector
@item bit-vector @tab member @tab simple-warning
@item broadcast-stream @tab method @tab single-float
@item built-in-class @tab method-combination @tab standard-char
@item cell-error @tab mod @tab standard-class
@item character @tab nil @tab standard-generic-function
@item class @tab not @tab standard-method
@item compiled-function @tab null @tab standard-object
@item complex @tab number @tab storage-condition
@item concatenated-stream @tab or @tab stream
@item condition @tab package @tab stream-error
@item cons @tab package-error @tab string
@item control-error @tab parse-error @tab string-stream
@item division-by-zero @tab pathname @tab structure-class
@item double-float @tab print-not-readable @tab structure-object
@item echo-stream @tab program-error @tab style-warning
@item end-of-file @tab random-state @tab symbol
@item eql @tab ratio @tab synonym-stream
@item error @tab rational @tab t
@item extended-char @tab reader-error @tab two-way-stream
@item file-error @tab readtable @tab type-error
@item file-stream @tab real @tab unbound-slot
@item fixnum @tab restart @tab unbound-variable
@item float @tab satisfies @tab undefined-function
@item floating-point-inexact @tab sequence @tab unsigned-byte
@item floating-point-invalid-operation @tab serious-condition @tab values
@item floating-point-overflow @tab short-float @tab vector
@item floating-point-underflow @tab signed-byte @tab warning
@end multitable
@end cartouche
@caption{Standardized Type Specifier Names}
@end float




@node Classes
@section Classes


While the @CLOS{}@spc{}is general enough to describe all @term{standardized} @term{classes}
(including, for example, @code{number}, @code{hash-table}, and
@code{symbol}), @thenextfigure{}@spc{}contains a list of @term{classes} that are
especially relevant to understanding the @CLOS{}.



@float Figure,ObjectSystemClasses
@cartouche
@multitable{generic-function}{standard-generic-function}{structure-object}

@item built-in-class @tab method-combination @tab standard-object
@item class @tab standard-class @tab structure-class
@item generic-function @tab standard-generic-function @tab structure-object
@item method @tab standard-method @tab 
@end multitable
@end cartouche
@caption{Object System Classes}
@end float


@menu
* Introduction to Classes::
* Defining Classes::
* Creating Instances of Classes::
* Inheritance::
* Determining the Class Precedence List::
* Redefining Classes::
* Integrating Types and Classes::
@end menu
@node Introduction to Classes
@subsection Introduction to Classes

A @newterm{class} is an @term{object} that determines the structure and behavior 
of a set of other @term{objects}, which are called its 
@cindex instance
@dfn{instances}.   

A @term{class} can inherit structure and behavior from other @term{classes}.
A @term{class} whose definition refers to other @term{classes} for the purpose 
of inheriting from them is said to be a @term{subclass} of each of
those @term{classes}. The @term{classes} that are designated for purposes of
inheritance are said to be @term{superclasses} of the inheriting @term{class}.

A @term{class} can have a @term{name}. The @term{function} @code{class-name} 
takes a @term{class} @term{object} and returns its @term{name}. 
The @term{name} of an anonymous @term{class} is @nil{}.  A @term{symbol} 
can @term{name} a @term{class}. The @term{function} @code{find-class} takes a
@term{symbol} and returns the @term{class} that the @term{symbol} names.
A @term{class} has a @term{proper name} if the @term{name} is a @term{symbol}
and if the @term{name} of the @term{class} names that @term{class}.
That is, a @term{class}@tie{}@mat{C} has the @term{proper name}@tie{}@mat{S} if @mat{S=}
@f{(class-name @mat{C})} and @mat{C=} @f{(find-class @mat{S})}.
Notice that it is possible for 
@f{(find-class @mat{S@sub1{}})} @mat{=} @f{(find-class @mat{S@sub2{}})}
and @mat{S@sub1{}@neq{} S@sub2{}}.
If @mat{C=} @f{(find-class @mat{S})}, we say that @mat{C} is the @term{class} @term{named} @mat{S}.

A @term{class} @mat{C@sub1{}} is 
a @newterm{direct superclass} of a @term{class} @mat{C@sub2{}}
if @mat{C@sub2{}} explicitly designates @mat{C@sub1{}} 
as a @term{superclass} in its definition.
In this case @mat{C@sub2{}} is a @newterm{direct subclass} of @mat{C@sub1{}}.
A @term{class} @mat{C@subs1{n}} is a @newterm{superclass} of 
a @term{class} @mat{C@sub1{}} if there exists a series of
@term{classes} @mat{C@sub2{},@ldots{},C@subs{n-1}} such that 
@mat{C@subs{i+1}} is a @term{direct superclass} of @mat{C@subs1{i}} for @mat{1 @leq{} i<n}.
In this case, @mat{C@sub1{}} is a @newterm{subclass} of @mat{C@subs1{n}}.
A @term{class} is considered neither a @term{superclass} nor a @term{subclass} of itself.
That is, if @mat{C@sub1{}} is a @term{superclass} of @mat{C@sub2{}}, 
then @mat{C@sub1{} @neq{} C@sub2{}}.
The set of @term{classes} consisting of some given @term{class} @mat{C} 
along with all of its @term{superclasses} is called ``@mat{C} and its superclasses.''

Each @term{class} has a @newterm{class precedence list},
which is a total ordering on the set of the given @term{class} and its @term{superclasses}.
The total ordering is expressed as a list ordered from most specific to least specific.
The @term{class precedence list} is used in several ways.  In general, more
specific @term{classes} can @newterm{shadow}@sub1{} features that would
otherwise be inherited from less specific @term{classes}.
The @term{method} selection and combination process uses 
the @term{class precedence list} to order @term{methods} 
from most specific to least specific. 

When a @term{class} is defined, the order in which its direct @term{superclasses}
are mentioned in the defining form is important.  Each @term{class} has a
@newterm{local precedence order}, which is a @term{list} consisting of the
@term{class} followed by its @term{direct superclasses} in the order mentioned
in the defining @term{form}.

A @term{class precedence list} is always consistent with the
@term{local precedence order} of each @term{class} in the list.  
The @term{classes} in each @term{local precedence order} appear
within the @term{class precedence list} in the same order.  
If the @term{local precedence orders} are inconsistent with each other, 
no @term{class precedence list} can be constructed, and an error is signaled.
The @term{class precedence list} and its computation is discussed
in @ref{Determining the Class Precedence List, Section 4.3.5 (Determining the Class Precedence List)}.

@term{classes} are organized into a directed acyclic graph.
There are two distinguished @term{classes}, named @code{t} and @code{standard-object}.
The @term{class} named @code{t} has no @term{superclasses}. 
It is a @term{superclass} of every @term{class} except itself.  
The @term{class} named @code{standard-object} is an @term{instance} of 
@theclass{standard-class} and is a @term{superclass} of
every @term{class} that is an @term{instance} of @theclass{standard-class} except itself.

@reviewer{Barmar: This or something like it needs to be said in the introduction.}
There is a mapping from the object system @term{class} space into
the @term{type} space.  Many of the standard @term{types} specified 
in this document have a corresponding @term{class} that has the same 
@term{name} as the @term{type}. Some @term{types} do not have a
corresponding @term{class}. The integration of the @term{type} and @term{class}
systems is discussed in @ref{Integrating Types and Classes, Section 4.3.7 (Integrating Types and Classes)}.

@term{Classes} are represented by @term{objects} that are themselves
@term{instances} of @term{classes}. 
The @term{class} of the @term{class} of an @term{object} is termed
the @newterm{metaclass} of that @term{object}. When no misinterpretation is
possible, the term @term{metaclass} is used to refer to a @term{class}
that has @term{instances} that are themselves @term{classes}. The @term{metaclass}
determines the form of inheritance used by the @term{classes} that are its
@term{instances} and the representation of the @term{instances} of those @term{classes}.
The @CLOS{}@spc{}provides a default @term{metaclass}, @code{standard-class}, that is
appropriate for most programs.

Except where otherwise specified, all @term{classes} mentioned in this
standard are @term{instances} of @theclass{standard-class},
all @term{generic functions} are @term{instances} 
of @theclass{standard-generic-function},
and all @term{methods} are @term{instances} of @theclass{standard-method}.


@subsubsection Standard Metaclasses

The @CLOS{}@spc{}provides a number of predefined @term{metaclasses}. 
These include the @term{classes} @code{standard-class}, 
@code{built-in-class}, and @code{structure-class}:


@itemize @bullet{}

@item
@Theclass{standard-class} is the default @term{class} of 
@term{classes} defined by @code{defclass}.

@item @Theclass{built-in-class} is the @term{class} whose
@term{instances} are @term{classes} that have special implementations with
restricted capabilities.  Any @term{class} that corresponds to a standard
@term{type} might be an @term{instance} of @code{built-in-class}.
The predefined @term{type} specifiers that are required to have
corresponding @term{classes} are listed in @ref{ClassTypeCorrespondence, Figure 4.8}.  
It is @term{implementation-dependent} whether each of these @term{classes} 
is implemented as a @term{built-in class}.

@item                     
All @term{classes} defined by means of @code{defstruct} are
@term{instances} of @theclass{structure-class}.
@end itemize



@node Defining Classes
@subsection Defining Classes

The macro @code{defclass} is used to define a new named @term{class}.  

The definition of a @term{class} includes:


@itemize @bullet{}

@item The @term{name} of the new @term{class}. 
For newly-defined @term{classes} this @term{name} is a @term{proper name}.

@item The list of the direct @term{superclasses} of the new @term{class}. 

@item A set of 
@cindex slot specifier
@dfn{slot specifiers}.
Each @term{slot specifier} includes the @term{name} of the @term{slot} 
and zero or more @term{slot} options.  A @term{slot} option pertains 
only to a single @term{slot}.  If a @term{class} definition contains
two @term{slot specifiers} with the same @term{name}, an error is signaled.

@item A set of @term{class} options.  
Each @term{class} option pertains to the @term{class} as a whole.  
@end itemize


The @term{slot} options and @term{class} options of 
the @code{defclass} form provide mechanisms for the following:


@itemize @bullet{}

@item Supplying a default initial value @term{form} 
for a given @term{slot}.  

@item Requesting that @term{methods} for @term{generic functions}
be automatically generated for reading or writing @term{slots}. 

@item Controlling whether a given @term{slot} is shared by 
all @term{instances}
of the @term{class} or whether each 
@term{instance} of the @term{class} has its own @term{slot}.

@item Supplying a set of initialization arguments and initialization
argument defaults to be used in @term{instance} creation.

@item Indicating that the @term{metaclass} is to be other 
than the default.  The @kwd{metaclass} option is reserved for future use; 
an implementation can be extended to make use of the @kwd{metaclass}
option.

@item Indicating the expected @term{type} for the value stored
in the @term{slot}.

@item Indicating the @term{documentation string} for the @term{slot}.
@end itemize



@goodbreak{}

@node Creating Instances of Classes
@subsection Creating Instances of Classes

The generic function @code{make-instance} creates and returns a new
@term{instance} of a @term{class}.  
The @OS{}@spc{}provides several mechanisms for
specifying how a new @term{instance} is to be initialized.  For example, it
is possible to specify the initial values for @term{slots} in newly created
@term{instances} 
either by giving arguments to @code{make-instance} or by
providing default initial values.  Further initialization activities
can be performed by @term{methods} written for @term{generic functions} 
that are
part of the initialization protocol.  The complete initialization
protocol is described in @ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)}.


@node Inheritance
@subsection Inheritance


A @term{class} can inherit @term{methods}, @term{slots}, 
and some @code{defclass} options from its @term{superclasses}.  
Other sections describe the inheritance of @term{methods}, 
the inheritance of @term{slots} and @term{slot} options, 
and the inheritance of @term{class} options.


@subsubsection Examples of Inheritance

@lisp
 (defclass C1 () 
     ((S1 :initform 5.4 :type number) 
      (S2 :allocation :class)))
 
 (defclass C2 (C1) 
     ((S1 :initform 5 :type integer)
      (S2 :allocation :instance)
      (S3 :accessor C2-S3)))
@end lisp


@term{Instances} of the class @f{C1} have a @term{local slot} named @f{S1},
whose default initial value is 5.4 and
whose @term{value} should always be a @term{number}.
The class @f{C1} also has a @term{shared slot} named @f{S2}.

There is a @term{local slot} named @f{S1} in @term{instances} of @f{C2}.
The default initial value of @f{S1} is 5.
The value of @f{S1} should always be of type @f{(and integer number)}.
There are also @term{local slots} named @f{S2} and @f{S3} in @term{instances} of @f{C2}.
The class @f{C2} has a @term{method} for @f{C2-S3} for reading the value of slot @f{S3};
there is also a @term{method} for @f{(setf C2-S3)} that writes the value of @f{S3}.


@subsubsection Inheritance of Class Options

The @kwd{default-initargs} class option is inherited.  The set of
defaulted initialization arguments for a @term{class} is the union of the
sets of initialization arguments supplied in
the @kwd{default-initargs} class options of the @term{class} and its @term{superclasses}.
When more than one default initial value @term{form} is supplied for a given
initialization argument, the default initial value @term{form} that is used
is the one supplied by the @term{class} that is most specific according to
the @term{class precedence list}.

If a given @kwd{default-initargs} class option specifies an
initialization argument of the same @term{name} more than once, an
error @oftype{program-error} is signaled.



@node Determining the Class Precedence List
@subsection Determining the Class Precedence List

The @code{defclass} form for a @term{class} provides a total ordering
on that @term{class} and its direct @term{superclasses}.  This ordering is
called the @newterm{local precedence order}.  It is an ordered list of the
@term{class} and its direct @term{superclasses}. The
@newterm{class precedence list} for a class @mat{C} is a total ordering on
@mat{C} and its @term{superclasses} that is consistent with the
@term{local precedence orders} for each of @mat{C} and its @term{superclasses}.

A @term{class} precedes its direct @term{superclasses}, 
and a direct @term{superclass} precedes all other 
direct @term{superclasses} specified to its right 
in the @term{superclasses} list of the @code{defclass} form.  
For every class @mat{C}, define 
@quotation
@mat{R@subs1{C}=@lcurly{}(C,C@sub1{}),(C@sub1{},C@sub2{}),@ldots{},(C@subs{n-1},C@subs1{n})@rcurly{}}
@end quotation
 where @mat{C@sub1{},@ldots{},C@subs1{n}} are
the direct @term{superclasses} of @mat{C} in the order in which
they are mentioned in the @code{defclass} form. These ordered pairs
generate the total ordering on the class @mat{C} and its direct
@term{superclasses}.

Let @mat{S@subs1{C}} be the set of @mat{C} and its @term{superclasses}. Let @mat{R} be

@quotation
@mat{R=@bigcup{}@subs{c@in{} S@subs1{C}}R@subs1{c}}
@end quotation
.

@reviewer{Barmar: ``Consistent'' needs to be defined, or maybe we should say
``logically consistent''?}

The set @mat{R} might or might not generate a partial ordering, depending on
whether the @mat{R@subs1{c}}, @mat{c@in{} S@subs1{C}}, are 
consistent; it is assumed
that they are consistent and that @mat{R} generates a partial ordering.
When the @mat{R@subs1{c}} are not consistent, it is said that @mat{R} is inconsistent.

To compute the @term{class precedence list} for@tie{}@mat{C}@negthinspace{},
topologically sort the elements of @mat{S@subs1{C}} with respect to the
partial ordering generated by @mat{R}@negthinspace{}.  When the topological
sort must select a @term{class} from a set of two or more 
@term{classes}, none of
which are preceded by other @term{classes} with respect to@tie{}@mat{R}@negthinspace{},
the @term{class} selected is chosen deterministically, as described below.

If @mat{R} is inconsistent, an error is signaled.

@goodbreak{}

@subsubsection Topological Sorting

Topological sorting proceeds by finding a class @mat{C} in@tie{}@mat{S@subs1{C}} such
that no other @term{class} precedes that element according to the elements
in@tie{}@mat{R}@negthinspace{}.  The class @mat{C} is placed first in the result.
Remove @mat{C} from @mat{S@subs1{C}}, and remove all pairs of the form @mat{(C,D)},
@mat{D@in{} S@subs1{C}}, from @mat{R}@negthinspace{}. Repeat the process, adding
@term{classes} with no predecessors to the end of the result.  Stop when no
element can be found that has no predecessor.

If @mat{S@subs1{C}} is not empty and the process has stopped, the set @mat{R} is
inconsistent. If every @term{class} in the finite set of 
@term{classes} is preceded
by another, then @mat{R} contains a loop. That is, there is a chain of
classes @mat{C@sub1{},@ldots{},C@subs1{n}} such that @mat{C@subs1{i}} precedes
@mat{C@subs{i+1}}, @mat{1@leq{} i<n}, and @mat{C@subs1{n}} precedes @mat{C@sub1{}}.

Sometimes there are several @term{classes} from @mat{S@subs1{C}} with no
predecessors.  In this case select the one that has a direct
@term{subclass} rightmost in the @term{class precedence list} computed so far.
(If there is no such candidate @term{class}, @mat{R} does not generate 
a partial ordering---the @mat{R@subs1{c}}, @mat{c@in{} S@subs1{C}}, are inconsistent.)

In more precise terms, let @mat{@lcurly{}N@sub1{},@ldots{},N@subs1{m}@rcurly{}}, @mat{m@geq{} 2}, be
the @term{classes} from @mat{S@subs1{C}} with no predecessors.  Let @mat{(C@sub1{}@ldots{} C@subs1{n})}, @mat{n@geq{} 1}, be the @term{class precedence list}
constructed so far.  @mat{C@sub1{}} is the most specific @term{class}, and @mat{C@subs1{n}} is the least specific.  Let @mat{1@leq{} j@leq{} n} be the largest number
such that there exists an @mat{i} where @mat{1@leq{} i@leq{} m} and @mat{N@subs1{i}}
is a direct @term{superclass} of @mat{C@subs1{j}}; @mat{N@subs1{i}} is placed next.

The effect of this rule for selecting from a set of @term{classes} with no
predecessors is that the @term{classes} in a simple @term{superclass} chain are
adjacent in the @term{class precedence list} and that @term{classes} in each
relatively separated subgraph are adjacent in the @term{class precedence list}.
For example, let @mat{T@sub1{}} and @mat{T@sub2{}} be subgraphs whose only
element in common is the class @mat{J}@negthinspace{}.
Suppose that no superclass of @mat{J} appears in either @mat{T@sub1{}} or @mat{T@sub2{}},
and that @mat{J} is in the superclass chain of every class in both @mat{T@sub1{}} and @mat{T@sub2{}}.
Let @mat{C@sub1{}} be the bottom of @mat{T@sub1{}}; 
and let @mat{C@sub2{}} be the bottom of @mat{T@sub2{}}.
Suppose @mat{C} is a @term{class} whose direct @term{superclasses}
are @mat{C@sub1{}} and @mat{C@sub2{}} in that order, then the @term{class precedence list}
for @mat{C} starts with @mat{C} and is followed by
all @term{classes} in @mat{T@sub1{}} except @mat{J}. 
All the @term{classes} of @mat{T@sub2{}} are next.
The @term{class} @mat{J} and its @term{superclasses} appear last.


@subsubsection Examples of Class Precedence List Determination

This example determines a @term{class precedence list} for the
class @f{pie}.  The following @term{classes} are defined:

@lisp
 (defclass pie (apple cinnamon) ())
 
 (defclass apple (fruit) ())
 
 (defclass cinnamon (spice) ())
 
 (defclass fruit (food) ())

 (defclass spice (food) ())

 (defclass food () ())
@end lisp


The set @mat{S@subs{pie}}@tie{}@mat{=} @mat{@lcurly{}}@tt{pie, apple, cinnamon, fruit, spice, food,
standard-object, t}@mat{@rcurly{}}. The set @mat{R}@tie{}@mat{=} @mat{@lcurly{}}@tt{(pie, apple),
(apple, cinnamon), (apple, fruit), (cinnamon, spice), @hfil{}@break{}
(fruit, food), (spice, food), (food, standard-object), (standard-object,
t)}@mat{@rcurly{}}.

The class @f{pie} is not preceded by anything, so it comes first;
the result so far is @tt{(pie)}.  Remove @f{pie} from @mat{S} and pairs
mentioning @f{pie} from @mat{R} to get @mat{S}@tie{}@mat{=} @mat{@lcurly{}}@tt{apple, cinnamon,
fruit, spice, food, standard-object, t}@mat{@rcurly{}} and @mat{R}@tie{}@mat{=}@tie{}@mat{@lcurly{}}@tt{
(apple, cinnamon), (apple, fruit), (cinnamon, spice),@hfil{}@break{} (fruit,
food), (spice, food), (food, standard-object),
(standard-object, t)}@mat{@rcurly{}}.

The class @f{apple} is not preceded by anything, so it is next; the
result is @tt{(pie apple)}. Removing @f{apple} and the relevant
pairs results in @mat{S}@tie{}@mat{=} @mat{@lcurly{}}@tt{cinnamon, fruit, spice, food,
standard-object, t}@mat{@rcurly{}} and @mat{R}@tie{}@mat{=} @mat{@lcurly{}}@tt{(cinnamon, spice),
(fruit, food), (spice, food), (food, standard-object),@hfil{}@break{}
(standard-object, t)}@mat{@rcurly{}}.

The classes @f{cinnamon} and @tt{fruit} are not preceded by
anything, so the one with a direct @term{subclass} rightmost in the 
@term{class precedence list} computed so far goes next.  The class @f{apple} is a
direct @term{subclass} of @tt{fruit}, and the class @f{pie} is a direct
@term{subclass} of @f{cinnamon}.  Because @f{apple} appears to the right
of @f{pie} in the @term{class precedence list}, 
@tt{fruit} goes next, and the
result so far is @tt{(pie apple fruit)}.  @mat{S}@tie{}@mat{=} @mat{@lcurly{}}@tt{cinnamon,
spice, food, standard-object, t}@mat{@rcurly{}}; @mat{R}@tie{}@mat{=} @mat{@lcurly{}}@tt{(cinnamon,
spice), (spice, food),@hfil{}@break{} (food, standard-object),
(standard-object, t)}@mat{@rcurly{}}.

The class @f{cinnamon} is next, giving the result so far as @tt{
(pie apple fruit cinnamon)}.  At this point @mat{S}@tie{}@mat{=} @mat{@lcurly{}}@tt{spice,
food, standard-object, t}@mat{@rcurly{}}; @mat{R}@tie{}@mat{=} @mat{@lcurly{}}@tt{(spice, food), (food,
standard-object), (standard-object, t)}@mat{@rcurly{}}.

The classes @f{spice}, @f{food}, @code{standard-object}, and 
@code{t} are added in that order, and the @term{class precedence list} 
is @f{(pie apple fruit cinnamon spice food standard-object t)}.

It is possible to write a set of @term{class} definitions that cannot be 
ordered.   For example: 

@lisp
 (defclass new-class (fruit apple) ())
 
 (defclass apple (fruit) ())
@end lisp


The class @f{fruit} must precede @f{apple} 
because the local ordering of @term{superclasses} must be preserved.
The class @f{apple} must precede @f{fruit} 
because a @term{class} always precedes its own @term{superclasses}.
When this situation occurs, an error is signaled, as happens here
when the system tries to compute the @term{class precedence list} 
of @f{new-class}.

The following might appear to be a conflicting set of definitions:

@lisp
 (defclass pie (apple cinnamon) ())
 
 (defclass pastry (cinnamon apple) ())
 
 (defclass apple () ())
 
 (defclass cinnamon () ())
@end lisp


The @term{class precedence list} for @f{pie} is 
@f{(pie apple cinnamon standard-object t)}.

The @term{class precedence list} for @f{pastry} is  
@f{(pastry cinnamon apple standard-object t)}.

It is not a problem for @f{apple} to precede @f{cinnamon} in the
ordering of the @term{superclasses} of @f{pie} but not in the ordering for
@f{pastry}.  However, it is not possible to build a new @term{class} that
has both @f{pie} and @f{pastry} as @term{superclasses}.


@node Redefining Classes
@subsection Redefining Classes

A @term{class} that is a @term{direct instance} of @code{standard-class} can
be redefined if the new @term{class} is also
a @term{direct instance} of @code{standard-class}.
Redefining a @term{class} modifies the existing
@term{class} @term{object} to reflect the new @term{class} definition; it does not
create a new @term{class} @term{object} for the @term{class}.  
Any @term{method} @term{object} created by a @kwd{reader}, @kwd{writer}, 
or @kwd{accessor} option specified by the old @code{defclass} form is
removed from the corresponding @term{generic function}.
@term{Methods} specified by the new @code{defclass} form are added.

When the class @mat{C} is redefined, changes are propagated to its @term{instances}
and to @term{instances} of any of its @term{subclasses}.  Updating such an
@term{instance} occurs at an @term{implementation-dependent} time, but no later than
the next time a @term{slot} 
of that @term{instance} is read or written.  Updating an
@term{instance} 
does not change its identity as defined by @thefunction{eq}.
The updating process may change the @term{slots} of that
particular @term{instance}, 
but it does not create a new @term{instance}.  Whether
updating an @term{instance} consumes storage is @term{implementation-dependent}.

Note that redefining a @term{class} may cause @term{slots} to be added or 
deleted.  If a @term{class} is redefined in a way that changes the set of
@term{local slots} @term{accessible} in @term{instances}, the @term{instances} 
are updated.  It is @term{implementation-dependent} whether @term{instances} 
are updated if a @term{class} is redefined in a way that does not change 
the set of @term{local slots} @term{accessible} in @term{instances}.

The value of a @term{slot} 
that is specified as shared both in the old @term{class}
and in the new @term{class} is retained.  
If such a @term{shared slot} was unbound
in the old @term{class}, it is unbound in the new @term{class}.  
@term{Slots} that
were local in the old @term{class} and that are shared in the new 
@term{class} are
initialized.  Newly added @term{shared slots} are initialized.

Each newly added @term{shared slot} is set to the result of evaluating the
@term{captured initialization form} for the @term{slot} that was specified 
in the @code{defclass} @term{form} for the new @term{class}.  
If there was no @term{initialization form}, the @term{slot} is unbound.

If a @term{class} is redefined in such a way that the set of
@term{local slots} @term{accessible} in an @term{instance} of the @term{class} 
is changed, a two-step process of updating the @term{instances} of the
@term{class} takes place.  The process may be explicitly started by 
invoking the generic function @code{make-instances-obsolete}.  This
two-step process can happen in other circumstances in some implementations.
For example, in some implementations this two-step process is
triggered if the order of @term{slots} in storage is changed.

The first step modifies the structure of the @term{instance} by adding new
@term{local slots} and discarding @term{local slots} that are not
defined in the new version of the @term{class}.  The second step
initializes the newly-added @term{local slots} and performs any other
user-defined actions. These two steps are further specified
in the next two sections.

@subsubsection Modifying the Structure of Instances

@reviewer{Barmar: What about shared slots that are deleted?}

The first step modifies the structure of @term{instances} of the redefined
@term{class} to conform to its new @term{class} definition.  
@term{Local slots} specified
by the new @term{class} definition that are not specified as either local or
shared by the old @term{class} are added, and @term{slots} 
not specified as either
local or shared by the new @term{class} definition that are specified as
local by the old @term{class} are discarded. 
The @term{names} of these added and discarded
@term{slots} are passed as arguments 
to @code{update-instance-for-redefined-class}
as described in the next section.

The values of @term{local slots} specified by both the new and old
@term{classes} are retained. If such a @term{local slot} was unbound,
it remains unbound.

The value of a @term{slot} that is specified as shared in the old 
@term{class} and as local in the new @term{class} is retained.  If such 
a @term{shared slot} was unbound, the @term{local slot} is unbound.


@subsubsection Initializing Newly Added Local Slots

The second step initializes the newly added @term{local slots} and performs
any other user-defined actions.  This step is implemented by the generic
function @code{update-instance-for-redefined-class}, which is called after
completion of the first step of modifying the structure of the
@term{instance}.

The generic function @code{update-instance-for-redefined-class} takes
four required arguments: the @term{instance} being updated after it has
undergone the first step, a list of the names of @term{local slots} that were
added, a list of the names of @term{local slots} that were discarded, and a
property list containing the @term{slot} names and values of 
@term{slots} that were
discarded and had values.  Included among the discarded @term{slots} are
@term{slots} that were local in the old @term{class} and that are shared in the new
@term{class}.

The generic function @code{update-instance-for-redefined-class} also
takes any number of initialization arguments.  When it is called by
the system to update an @term{instance} whose @term{class} 
has been redefined, no
initialization arguments are provided.

There is a system-supplied primary @term{method} for 
@code{update-instance-for-redefined-class} whose @term{parameter specializer}
for its @term{instance} argument is @theclass{standard-object}.  
First this @term{method} checks the validity of initialization arguments and signals an
error if an initialization argument is supplied that is not declared
as valid.  (For more information, see @ref{Declaring the Validity of Initialization Arguments, Section 7.1.2 (Declaring the Validity of Initialization Arguments)}.)
Then it calls the generic function
@code{shared-initialize} with the following arguments: the 
@term{instance},
the list of @term{names} of 
the newly added @term{slots}, and the initialization
arguments it received.


@subsubsection Customizing Class Redefinition

@reviewer{Barmar: This description is hard to follow.}

@term{Methods} for @code{update-instance-for-redefined-class} may be 
defined to specify actions to be taken when an @term{instance} is updated.
If only @term{after methods} for @code{update-instance-for-redefined-class} are
defined, they will be run after the system-supplied primary @term{method} for
initialization and therefore will not interfere with the default
behavior of @code{update-instance-for-redefined-class}.  Because no
initialization arguments are passed to @code{update-instance-for-redefined-class}
when it is called by the system, the 
@term{initialization forms} for @term{slots} 
that are filled by @term{before methods} for @code{update-instance-for-redefined-class} 
will not be evaluated by @code{shared-initialize}.

@term{Methods} for @code{shared-initialize} may be defined to customize
@term{class} redefinition.  For more information, see @ref{Shared-Initialize, Section 7.1.5 (Shared-Initialize)}.


@node Integrating Types and Classes
@subsection Integrating Types and Classes

The @CLOS{}@spc{}maps the space of @term{classes} into the space of @term{types}.
Every @term{class} that has a proper name has a corresponding @term{type} 
with the same @term{name}.  

The proper name of every @term{class} is a valid @term{type specifier}.  In
addition, every @term{class} @term{object} is a valid @term{type specifier}.  
Thus the expression @f{(typep @param{object} @param{class})} evaluates to 
@term{true} if the @term{class} of @param{object} is @param{class} itself or 
a @term{subclass} of @term{class}.  The evaluation of the expression
@f{(subtypep class1 class2)} returns the values 
@term{true} and @term{true} if @f{class1} is a subclass of @f{class2} or if they are the
same @term{class}; otherwise it returns the values 
@term{false} and @term{true}.
If  @mat{I} is an @term{instance} of some @term{class} @mat{C} named @mat{S} 
and @mat{C} is an @term{instance} of @code{standard-class}, 
the evaluation of the expression @f{(type-of @mat{I})} returns @mat{S} 
if @mat{S} is the @term{proper name} of @mat{C}; 
otherwise, it returns @mat{C}.

Because the names of @term{classes} 
and @term{class} @term{objects} are @term{type specifiers}, they may
be used in the special form @code{the} and in type declarations.

Many but not all of the predefined @term{type specifiers} have a
corresponding @term{class} with 
the same proper name as the @term{type}.  These type
specifiers are listed in @ref{ClassTypeCorrespondence, Figure 4.8}.
For example, @thetype{array} has 
a corresponding @term{class} named @code{array}.  
No @term{type specifier} that is a
list, such as @tt{(vector double-float 100)}, has a corresponding @term{class}.
The @term{operator} @code{deftype} does not create any @term{classes}.

Each @term{class} that corresponds to a predefined @term{type specifier} can
be implemented in one of three ways, at the discretion of each implementation.
It can be a @term{standard class},
a @term{structure class},
or a @term{system class}.

A @term{built-in class} is one whose @term{generalized instances} have restricted capabilities 
or special representations.  Attempting to use @code{defclass} to define 
@term{subclasses} of a @code{built-in-class} signals an error.
Calling @code{make-instance} to create a @term{generalized instance} of a 
@term{built-in class} signals an error.  Calling @code{slot-value} on a
@term{generalized instance} of a @term{built-in class} signals an error.
Redefining a @term{built-in class} or using @code{change-class} to change
the @term{class} of an @term{object} to or from a @term{built-in class} signals an error.
However, @term{built-in classes} can be used as @term{parameter specializers} 
in @term{methods}.


It is possible to determine whether a @term{class} is a @term{built-in class}
by checking the @term{metaclass}.
A @term{standard class}  is an @term{instance} of @theclass{standard-class},
a @term{built-in class}  is an @term{instance} of @theclass{built-in-class}, and
a @term{structure class} is an @term{instance} of @theclass{structure-class}.

Each @term{structure} @term{type} created by @code{defstruct} without 
using the @kwd{type} option has a corresponding @term{class}.  
This @term{class} is a @term{generalized instance} of @theclass{structure-class}.  
The @kwd{include} option of @code{defstruct} creates a direct
@term{subclass} of the @term{class} 
that corresponds to the included @term{structure} 
@term{type}.

It is @term{implementation-dependent} whether @term{slots} are involved in the
operation of @term{functions} defined in this specification
on @term{instances} of @term{classes} defined in this specification,
except when @term{slots} are explicitly defined by this specification.

If in a particular @term{implementation} a @term{class} defined in this specification
has @term{slots} that are not defined by this specfication, the names of these @term{slots}
must not be @term{external symbols} of @term{packages} defined in this specification nor
otherwise @term{accessible} in the @code{CL-USER} @term{package}.


The purpose of specifying that many of the standard @term{type specifiers} have a
corresponding @term{class} is to enable users to write @term{methods} that
discriminate on these @term{types}.  @term{Method} selection requires that a 
@term{class precedence list} can be determined for each @term{class}. 

The hierarchical relationships among the @term{type specifiers} are mirrored by
relationships among the @term{classes} corresponding to those @term{types}.  

@ref{ClassTypeCorrespondence, Figure 4.8}@spc{}lists the set of @term{classes} 
that correspond to predefined @term{type specifiers}.



@float Figure,ClassTypeCorrespondence
@cartouche
@multitable{floating-point-invalid-operation}{method-combination}{standard-generic-function}

@item arithmetic-error @tab generic-function @tab simple-error
@item array @tab hash-table @tab simple-type-error
@item bit-vector @tab integer @tab simple-warning
@item broadcast-stream @tab list @tab standard-class
@item built-in-class @tab logical-pathname @tab standard-generic-function
@item cell-error @tab method @tab standard-method
@item character @tab method-combination @tab standard-object
@item class @tab null @tab storage-condition
@item complex @tab number @tab stream
@item concatenated-stream @tab package @tab stream-error
@item condition @tab package-error @tab string
@item cons @tab parse-error @tab string-stream
@item control-error @tab pathname @tab structure-class
@item division-by-zero @tab print-not-readable @tab structure-object
@item echo-stream @tab program-error @tab style-warning
@item end-of-file @tab random-state @tab symbol
@item error @tab ratio @tab synonym-stream
@item file-error @tab rational @tab t
@item file-stream @tab reader-error @tab two-way-stream
@item float @tab readtable @tab type-error
@item floating-point-inexact @tab real @tab unbound-slot
@item floating-point-invalid-operation @tab restart @tab unbound-variable
@item floating-point-overflow @tab sequence @tab undefined-function
@item floating-point-underflow @tab serious-condition @tab vector
@item function @tab simple-condition @tab warning
@end multitable
@end cartouche
@caption{Classes that correspond to pre-defined type specifiers}
@end float


The @term{class precedence list} information specified in the entries for
each of these @term{classes} are those that are required by the @OS{}.

Individual implementations may be extended to define other type
specifiers to have a corresponding @term{class}.  Individual implementations
may be extended to add other @term{subclass} relationships and to add other
@term{elements} to the @term{class precedence lists} as long as
they do not violate the type relationships and disjointness
requirements specified by this standard.
A standard @term{class} defined with no direct @term{superclasses} is guaranteed to
be disjoint from all of the @term{classes} in the table, except for the
class named @code{t}.


@node nil (Type)
@heading nil (Type)
@syindex nil
@cindex nil


@subsubheading Supertypes:
all @term{types}

@subsubheading Description:

@Thetype{nil} contains no @term{objects} and so is also
called the @term{empty type}.
@Thetype{nil} is a @term{subtype} of every @term{type}.
No @term{object} is @oftype{nil}.

@subsubheading Notes:

The @term{type} containing the @term{object} @nil{}@spc{}is @thetype{null},
not @thetype{nil}.


@node boolean
@heading boolean (Type)
@syindex boolean
@cindex boolean


@subsubheading Supertypes:

@code{boolean},
@code{symbol},
@code{t}

@subsubheading Description:

@Thetype{boolean} contains the @term{symbols} @t{t} and @t{nil},
which represent true and false, respectively.

@subsubheading See Also:

@ref{t (Constant Variable)},
@ref{nil (Constant Variable)},
@ref{if},
@ref{not (Function)},
@ref{complement}

@subsubheading Notes:

Conditional operations, such as @code{if},
permit the use of @term{generalized booleans},
not just @term{booleans};
any @term{non-nil} value,
not just @t{t},
counts as true for a @term{generalized boolean}.
However, as a matter of convention, 
the @term{symbol} @t{t} is considered the canonical value to use
even for a @term{generalized boolean} when no better choice presents itself.


@node function (System Class)
@heading function (System Class)
@syindex function
@cindex function



@subsubheading Class Precedence List:
@code{function},
@code{t}

@subsubheading Description:

A @term{function} is an @term{object} that represents code 
to be executed when an appropriate number of arguments is supplied.
A @term{function} is produced by 
@thespecform{function},
@thefunction{coerce},
or
@thefunction{compile}.
A @term{function} can be directly invoked by using it as the first argument to
@code{funcall}, @code{apply}, or @code{multiple-value-call}.

@subsubheading Compound Type Specifier Kind:

Specializing.

@subsubheading Compound Type Specifier Syntax:

@Deftype{function, @ttbrac{arg-typespec @brac{value-typespec}}}

@auxbnf{arg-typespec, @lparen{}@starparam{typespec} @CR{} @spc{}@ttbrac{@opt{} @starparam{typespec}} @CR{} @spc{}@ttbrac{@rest{} @param{typespec}} @CR{} @spc{}@ttbrac{@key{} @starparen{keyword typespec}}@rparen{}}

@subsubheading Compound Type Specifier Arguments:

@param{typespec}---a @term{type specifier}.

@param{value-typespec}---a @term{type specifier}.

@subsubheading Compound Type Specifier Description:

@editornote{KMP: Isn't there some context info about ftype declarations to be merged here?}

@editornote{KMP: This could still use some cleaning up.}

@editornote{Sandra: Still need clarification about what happens if the
number of arguments doesn't match the FUNCTION type declaration.}

The list form of the @code{function} @term{type-specifier}
can be used only for declaration and not for discrimination.
Every element of this @term{type} is
a @term{function} that accepts arguments of the
types   
specified by the  @param{argj-types} and returns values that are
members of the @term{types} specified by @param{value-type}. The
@keyref{optional}, @keyref{rest}, @keyref{key}, 
and @keyref{allow-other-keys} 
markers can appear in the list of argument types. 
The @term{type specifier} provided
with @keyref{rest} is the @term{type} 
of each actual argument, not the @term{type} of the
corresponding variable.

The @keyref{key} parameters 
should be supplied as lists of the form @tt{(@param{keyword} @param{type})}.  
The @param{keyword} must be a valid keyword-name symbol
as must be supplied in the actual arguments of a
call.
This is usually a @term{symbol} in the @code{KEYWORD} @term{package} but can be any @term{symbol}.
When @keyref{key} is given in a
@code{function} @term{type specifier} @term{lambda list},
the @term{keyword parameters} given
are exhaustive unless @keyref{allow-other-keys} is also present. 
@keyref{allow-other-keys} is an indication 
that other keyword arguments might actually be
supplied and, if supplied, can be used. 
For example,
the @term{type} of @thefunction{make-list} could be declared as follows:

@lisp
 (function ((integer 0) &key (:initial-element t)) list)
@end lisp


The @param{value-type} can be a @code{values} 
@term{type specifier} in order to indicate the
@term{types} of @term{multiple values}.


Consider a declaration of the following form:

@lisp
 (ftype (function (arg0-type arg1-type ...) val-type) f))
@end lisp


Any @term{form}
@tt{(f arg0 arg1 ...)}
within the scope of
that declaration is equivalent to the following:

@lisp
 (the val-type (f (the arg0-type arg0) (the arg1-type arg1) ...))
@end lisp


That is, the consequences are undefined if any of the arguments are
not of the specified @term{types} or the result is not of the
specified @term{type}. In particular, if any argument is not of the
correct @term{type}, the result is not guaranteed to be of the
specified @term{type}.

Thus, an @code{ftype} declaration for a @term{function}
describes @term{calls} to the @term{function}, not the actual definition
of the @term{function}.

Consider a declaration of the following form:

@lisp
 (type (function (arg0-type arg1-type ...) val-type) fn-valued-variable)
@end lisp


This declaration has the interpretation that, within the scope of the
declaration, the consequences are unspecified if the value of @tt{
fn-valued-variable} is called with arguments not of the specified
@term{types}; the value resulting from a valid call will be of type
@tt{val-type}.

As with variable type declarations, nested declarations
imply intersections of @term{types}, as follows:

@itemize @bullet{}
@item 
Consider the following two
declarations of @code{ftype}:

@lisp
 (ftype (function (arg0-type1 arg1-type1 ...) val-type1) f))
@end lisp

and

@lisp
 (ftype (function (arg0-type2 arg1-type2 ...) val-type2) f))
@end lisp


If both these declarations are in effect,
then within the shared scope of the declarations, calls to @tt{f} can be
treated as if @tt{f} were declared as follows:

@lisp
 (ftype (function ((and arg0-type1 arg0-type2) (and arg1-type1 arg1-type2 ...) ...)
                  (and val-type1 val-type2)) 
        f))
@end lisp


It is permitted to ignore one or all of the @code{ftype} declarations in force.

@item 
If two (or more) type declarations are in effect for a variable, and
they are both @tt{function} declarations, the declarations combine similarly.
@end itemize





@node compiled-function
@heading compiled-function (Type)
@syindex compiled-function
@cindex compiled-function



@subsubheading Supertypes:

@code{compiled-function},
@code{function},
@code{t}

@subsubheading Description:

Any @term{function} may be considered by an @term{implementation} to be a 
a @term{compiled function} if it contains no references to @term{macros} that
must be expanded at run time, and it contains no unresolved references 
to @term{load time values}.  See @ref{Compilation Semantics, Section 3.2.2 (Compilation Semantics)}.

@term{Functions} whose definitions appear lexically within a
@term{file} that has been @term{compiled} with @code{compile-file} and then
@term{loaded} with @code{load} are @oftype{compiled-function}.
@term{Functions} produced by the @code{compile} function
are @oftype{compiled-function}.
Other @term{functions} might also be @oftype{compiled-function}.



@node generic-function
@heading generic-function (System Class)
@syindex generic-function
@cindex generic-function


@subsubheading Class Precedence List:

@code{generic-function},
@code{function},
@code{t}

@subsubheading Description:

A @newterm{generic function} is a @term{function} whose behavior
depends on the @term{classes} or identities of the @term{arguments}
supplied to it.  A generic function object contains a set of
@term{methods}, a @term{lambda list}, a @term{method combination} @term{type}, 
and other information.  The @term{methods}
define the class-specific behavior and operations of the @term{generic function};
a @term{method} is said to @term{specialize} a @term{generic function}.
When invoked, a @term{generic function} executes a subset of its
@term{methods} based on the @term{classes} or identities of its @term{arguments}.

A @term{generic function} can be used in the same ways that an
ordinary @term{function} can be used; specifically, a @term{generic function} can
be used as an argument to @code{funcall} and @code{apply},
and can be given a global or a local name.


@node standard-generic-function
@heading standard-generic-function (System Class)
@syindex standard-generic-function
@cindex standard-generic-function


@subsubheading Class Precedence List:
@code{standard-generic-function},
@code{generic-function},
@code{function},
@code{t}

@subsubheading Description:

@Theclass{standard-generic-function} is the default @term{class} of
@term{generic functions} @term{established} by
@code{defmethod},
@code{ensure-generic-function},
@code{defgeneric},
and
@code{defclass} @term{forms}.


@node class
@heading class (System Class)
@syindex class
@cindex class


@subsubheading Class Precedence List:
@code{class},
@code{standard-object},
@code{t}

@subsubheading Description:

@Thetype{class} represents @term{objects} that determine the structure 
and behavior of their @term{instances}. Associated with an @term{object}
@oftype{class} is information describing its place in the 
directed acyclic graph of @term{classes}, its @term{slots}, and its options.


@node built-in-class
@heading built-in-class (System Class)
@syindex built-in-class
@cindex built-in-class


@subsubheading Class Precedence List:
@code{built-in-class},
@code{class},
@code{standard-object},
@code{t}

@subsubheading Description:

A @term{built-in class} is a @term{class} whose @term{instances} have 
restricted capabilities or special representations.
Attempting to use
@code{defclass} to define @term{subclasses} of a @term{built-in class}
signals an error @oftype{error}.
Calling @code{make-instance} to create an @term{instance} 
of a @term{built-in class} signals an error @oftype{error}.
Calling @code{slot-value} on an @term{instance} of a @term{built-in class}
signals an error @oftype{error}.  Redefining a @term{built-in class}
or using @code{change-class} to change the @term{class} of an @term{instance}
to or from a @term{built-in class} signals an error @oftype{error}.
However, @term{built-in classes} can be used as @term{parameter specializers}
in @term{methods}.


@node structure-class
@heading structure-class (System Class)
@syindex structure-class
@cindex structure-class


@subsubheading Class Precedence List:

@code{structure-class},
@code{class},
@code{standard-object},
@code{t}

@subsubheading Description:

All @term{classes} defined by means of @code{defstruct} 
are @instsofclass{structure-class}.


@node standard-class
@heading standard-class (System Class)
@syindex standard-class
@cindex standard-class


@subsubheading Class Precedence List:
@code{standard-class},
@code{class},
@code{standard-object},
@code{t}

@subsubheading Description:

@Theclass{standard-class} is the default @term{class} of @term{classes}
defined by @code{defclass}.


@node method
@heading method (System Class)
@syindex method
@cindex method


@subsubheading Class Precedence List:
@code{method},
@code{t}

@subsubheading Description:

A @term{method} is an @term{object} that represents a modular part of the behavior
of a @term{generic function}.

A @term{method} contains @term{code} to implement the @term{method}'s
behavior, a sequence of @term{parameter specializers} that specify when the
given @term{method} is applicable, and a sequence of @term{qualifiers}
that is used by the method combination facility to distinguish among
@term{methods}.  Each required parameter of each 
@term{method} has an associated @term{parameter specializer}, and the 
@term{method} will be invoked only on arguments that satisfy its 
@term{parameter specializers}.

The method combination facility controls the selection of 
@term{methods}, the order in which they are run, and the values that are
returned by the generic function.  The @CLOS{}@spc{}offers a default method
combination type and provides a facility for declaring new types of
method combination.

@subsubheading See Also:

@ref{Generic Functions and Methods, Section 7.6 (Generic Functions and Methods)}


@node standard-method
@heading standard-method (System Class)
@syindex standard-method
@cindex standard-method


@subsubheading Class Precedence List:
@code{standard-method},
@code{method},
@code{standard-object},
@code{t}

@subsubheading Description:

@Theclass{standard-method} is the default @term{class} of 
@term{methods} defined by the 
@code{defmethod} and
@code{defgeneric} @term{forms}.


@node structure-object
@heading structure-object (Class)
@syindex structure-object
@cindex structure-object


@subsubheading Class Precedence List:

@code{structure-object},
@code{t}

@subsubheading Description:

@Theclass{structure-object} is an @term{instance} of @code{structure-class}
and is a @term{superclass} of every @term{class} 
that is an @term{instance} of @code{structure-class}
except itself, and is a @term{superclass} of every @term{class} 
that is defined by @code{defstruct}.


@subsubheading See Also:

@ref{defstruct},
@ref{SharpsignS, Section 2.4.8.13 (Sharpsign S)},
@ref{PrintingStructures, Section 22.1.3.12 (Printing Structures)}


@node standard-object
@heading standard-object (Class)
@syindex standard-object
@cindex standard-object


@subsubheading Class Precedence List:
@code{standard-object},
@code{t}

@subsubheading Description:

@Theclass{standard-object} is an @term{instance} of @code{standard-class}
and is a @term{superclass} of every @term{class} that is an @term{instance} of
@code{standard-class} except itself.


@node method-combination
@heading method-combination (System Class)
@syindex method-combination
@cindex method-combination


@subsubheading Class Precedence List:
@code{method-combination},
@code{t}

@subsubheading Description:

Every @term{method combination} @term{object} is an 
@term{indirect instance} of the @term{class} @code{method-combination}.
A @term{method combination} @term{object} represents the information about
the @term{method combination} being used by a @term{generic function}.
A @term{method combination} @term{object} contains information about
both the type of @term{method combination} and the arguments being used
with that @term{type}.


@node t (System Class)
@heading t (System Class)
@syindex t
@cindex t


@subsubheading Class Precedence List:
@code{t}

@subsubheading Description:
The set of all @term{objects}.  
@Thetype{t} is a @term{supertype} of every @term{type}, 
including itself. Every @term{object} is @oftype{t}.



@node satisfies
@heading satisfies (Type Specifier)
@syindex satisfies
@cindex satisfies


@subsubheading Compound Type Specifier Kind:

Predicating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{satisfies, predicate-name}

@subsubheading Compound Type Specifier Arguments:

@param{predicate-name}---a @term{symbol}.

@subsubheading Compound Type Specifier Description:

This denotes the set of all @term{objects} that satisfy the
@term{predicate} @param{predicate-name}, which must be a @term{symbol}
whose global @term{function} definition is a one-argument
predicate.  A name is required for @param{predicate-name}; 
@term{lambda expressions} are not allowed.
For example, the @term{type specifier} @tt{(and integer (satisfies evenp))}
denotes the set of all even integers.
The form @tt{(typep @param{x} '(satisfies @param{p}))} is equivalent to
@tt{(if (@param{p} @param{x}) t nil)}.

The argument is required.
The @term{symbol} @t{*} can be the argument, but it
denotes itself (the @term{symbol} @t{*}),
and does not represent an unspecified value.

The symbol @code{satisfies} is not valid as a @term{type specifier}.


@node member (Type Specifier)
@heading member (Type Specifier)
@syindex member
@cindex member


@subsubheading Compound Type Specifier Kind:

Combining.

@subsubheading Compound Type Specifier Syntax:

@Deftype{member, @starparam{object}}

@subsubheading Compound Type Specifier Arguments:

@param{object}---an @term{object}.

@subsubheading Compound Type Specifier Description:

This denotes the set containing the named @param{objects}. An
@term{object} is of this @term{type} if and only if it is @code{eql}
to one of the specified @param{objects}.

The @term{type specifiers} @f{(member)} and @nil{}@spc{}are equivalent.
@t{*} can be among the @param{objects},
but if so it denotes itself (the symbol @t{*}) 
and does not represent an unspecified value.
The symbol @t{member} is not valid as a @term{type specifier};
and, specifically, it is not an abbreviation for either @f{(member)} or @f{(member *)}.

@subsubheading See Also:

@thetype{eql}


@node not (Type Specifier)
@heading not (Type Specifier)
@syindex not
@cindex not


@subsubheading Compound Type Specifier Kind:

Combining.

@subsubheading Compound Type Specifier Syntax:

@Deftype{not, typespec}

@subsubheading Compound Type Specifier Arguments:

@param{typespec}---a @term{type specifier}.

@subsubheading Compound Type Specifier Description:

This denotes the set of all @term{objects} that are not of the @term{type} @param{typespec}.

The argument is required, and cannot be @t{*}.

The symbol @code{not} is not valid as a @term{type specifier}.


@node and (Type Specifier)
@heading and (Type Specifier)
@syindex and
@cindex and


@subsubheading Compound Type Specifier Kind:

Combining.

@subsubheading Compound Type Specifier Syntax:

@Deftype{and, @starparam{typespec}}

@subsubheading Compound Type Specifier Arguments:

@param{typespec}---a @term{type specifier}.

@subsubheading Compound Type Specifier Description:

This denotes the set of all @term{objects} of the @term{type} 
determined by the intersection of the @param{typespecs}.

@t{*} is not permitted as an argument.

The @term{type specifiers} @f{(and)} and @code{t}@spc{}are equivalent.
The symbol @t{and} is not valid as a @term{type specifier},
and, specifically, it is not an abbreviation for @f{(and)}.


@node or (Type Specifier)
@heading or (Type Specifier)
@syindex or
@cindex or


@subsubheading Compound Type Specifier Kind:

Combining.

@subsubheading Compound Type Specifier Syntax:

@Deftype{or, @starparam{typespec}}

@subsubheading Compound Type Specifier Arguments:

@param{typespec}---a @term{type specifier}.

@subsubheading Compound Type Specifier Description:

This denotes the set of all @term{objects} of the
@term{type} determined by the union of the @param{typespecs}.
For example, @thetype{list} by definition is the same as @f{(or null cons)}.
Also, the value returned by @code{position} is an @objectoftype{(or null (integer 0 *))};
@ie{} either @nil{}@spc{}or a non-negative @term{integer}.

@t{*} is not permitted as an argument.

The @term{type specifiers} @f{(or)} and @nil{}@spc{}are equivalent.
The symbol @code{or} is not valid as a @term{type specifier};
and, specifically, it is not an abbreviation for @f{(or)}.


@node values (Type Specifier)
@heading values (Type Specifier)
@syindex values
@cindex values


@subsubheading Compound Type Specifier Kind:

Specializing.

@subsubheading Compound Type Specifier Syntax:

@Deftype{values, @down{value-typespec}}

@reviewer{Barmar: Missing @keyref{key}}

@auxbnf{value-typespec, @starparam{typespec} @ttbrac{@opt{} @starparam{typespec}} @ttbrac{@rest{} typespec} @ttbrac{@keyref{allow-other-keys}}}

@subsubheading Compound Type Specifier Arguments:

@param{typespec}---a @term{type specifier}.

@subsubheading Compound Type Specifier Description:

This @term{type specifier} can be used only as the @param{value-type} in a
@code{function} @term{type specifier} or a @code{the}
@term{special form}.  It is used to specify individual @term{types} 
when @term{multiple values} are involved.
The @keyref{optional} and @keyref{rest} markers can appear in the @param{value-type} list;
they indicate the parameter list of a @term{function} that, 
when given to @code{multiple-value-call} along with the values,
would correctly receive those values.

The symbol @t{*} may not be among the @param{value-types}.

The symbol @t{values} is not valid as a @term{type specifier};
and, specifically, it is not an abbreviation for @f{(values)}.


@node eql (Type Specifier)
@heading eql (Type Specifier)
@syindex eql
@cindex eql


@subsubheading Compound Type Specifier Kind:

Combining.

@subsubheading Compound Type Specifier Syntax:

@Deftype{eql, object}

@subsubheading Compound Type Specifier Arguments:

@param{object}---an @term{object}.

@subsubheading Compound Type Specifier Description:

Represents the @term{type} 
of all @param{x} for which @f{(eql @param{object} @param{x})} is true.

The argument @param{object} is required.  The @param{object} can be @t{*},
but if so it denotes itself (the symbol @t{*}) 
and does not represent an unspecified value.
The @term{symbol} @t{eql} is not valid as an @term{atomic type specifier}.


@node coerce
@heading coerce (Function)
@syindex coerce
@cindex coerce


@subsubheading Syntax:

@DefunWithValues{coerce, object result-type, result}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{result-type}---a @term{type specifier}.

@param{result}---an @term{object}, of @term{type} @param{result-type}
except in situations described in @ref{RuleOfCanonRepForComplexRationals, Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals)}.

@subsubheading Description:

@term{Coerces} the @param{object} to @term{type} @param{result-type}.

If @param{object} is already of @term{type} @param{result-type},
the @param{object} itself is returned, regardless of whether it
would have been possible in general to coerce an @term{object} of 
some other @term{type} to @param{result-type}.

Otherwise, the @param{object} is @term{coerced} to @term{type} @param{result-type}
according to the following rules:


@table @asis

@item @id{@code{sequence}}



If the @param{result-type} is a @term{recognizable subtype} of @code{list},
and the @term{object} is a @term{sequence},
then the @param{result} is a @term{list} 
that has the @term{same} @term{elements} as @param{object}.

If the @param{result-type} is a @term{recognizable subtype} of @code{vector},
and the @term{object} is a @term{sequence},
then the @param{result} is a @term{vector} 
that has the @term{same} @term{elements} as @param{object}.
If @param{result-type} is a specialized @term{type}, 
the @param{result} has an @term{actual array element type} that is the result of
@term{upgrading} the element type part of that @term{specialized} @term{type}.
If no element type is specified, the element type defaults to @code{t}.
If the @term{implementation} cannot determine the element type, an error is signaled.


@item @id{@code{character}}


If the @param{result-type} is @code{character}
and the @term{object} is a @term{character designator},
the @param{result} is the @term{character} it denotes.


@item @id{@code{complex}}


If the @param{result-type} is @code{complex} 
and the @term{object} is a @term{real},
then the @param{result} is obtained by constructing a @term{complex}
whose real part is the @term{object} and
whose imaginary part is the result of @term{coercing} an @term{integer} zero
to the @term{type} of the @term{object} (using @code{coerce}).
(If the real part is a @term{rational}, however, 
then the result must be represented as a @term{rational} rather
than a @term{complex}; see @ref{RuleOfCanonRepForComplexRationals, Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals)}.
So, for example, @f{(coerce 3 'complex)} is permissible,
but will return @f{3}, which is not a @term{complex}.)

@item @id{@code{float}}


If the @param{result-type} is any of @code{float},
@code{short-float}, 
@code{single-float}, 
@code{double-float}, 
@code{long-float},
and the @term{object} is a 
@term{real},
then the @param{result} is a @term{float} of @term{type} @param{result-type}
which is equal in sign and magnitude to the @term{object} to whatever degree of
representational precision is permitted by that @term{float} representation.
(If the @param{result-type} is @code{float}
and @param{object} is not already a @term{float}, 
then the @param{result} is a @term{single float}.)

@item @id{@code{function}}


If the @param{result-type} is @code{function},
and @param{object} is any 
@term{function name}
that is @term{fbound} 
but that is globally defined neither as a @term{macro name} nor as a @term{special operator},
then the @param{result} is the @term{functional value} of @param{object}.

If the @param{result-type} is @code{function},
and @param{object} is a @term{lambda expression},
then the @param{result} is a @term{closure} of @param{object}
in the @term{null lexical environment}.

@item @id{@code{t}}


Any @param{object} can be @term{coerced} to an @term{object} @oftype{t}.
In this case, the @param{object} is simply returned.
@end table


@subsubheading Examples:

@lisp
 (coerce '(a b c) 'vector) @EV{} #(A B C)
 (coerce 'a 'character) @EV{} #@bsl{}A
 (coerce 4.56 'complex) @EV{} #C(4.56 0.0)
 (coerce 4.5s0 'complex) @EV{} #C(4.5s0 0.0s0)
 (coerce 7/2 'complex) @EV{} 7/2
 (coerce 0 'short-float) @EV{} 0.0s0
 (coerce 3.5L0 'float) @EV{} 3.5L0
 (coerce 7/2 'float) @EV{} 3.5
 (coerce (cons 1 2) t) @EV{} (1 . 2)
@end lisp


All the following @term{forms} should signal an error:

@lisp
 (coerce '(a b c) '(vector * 4))
 (coerce #(a b c) '(vector * 4))
 (coerce '(a b c) '(vector * 2))
 (coerce #(a b c) '(vector * 2))
 (coerce "foo" '(string 2))
 (coerce #(#@bsl{}a #@bsl{}b #@bsl{}c) '(string 2))
 (coerce '(0 1) '(simple-bit-vector 3))
@end lisp


@subsubheading Exceptional Situations:

If a coercion is not possible, an error @oftype{type-error} is signaled.

@f{(coerce x 'nil)} always signals an error @oftype{type-error}.

An error
@oftype{error} is signaled
if the @param{result-type} is @code{function} but
@param{object} is a @term{symbol} that is not @term{fbound} or
if the @term{symbol} names a @term{macro} or a @term{special operator}.

An error @oftype{type-error} should be signaled if @param{result-type}
specifies the number of elements and @param{object} is of a different length.

@subsubheading See Also:

@ref{rational}, @ref{floor}, @ref{char-code}, @ref{char-int}

@subsubheading Notes:

Coercions from @term{floats} to @term{rationals} 
and from @term{ratios} to @term{integers} 
are not provided because of rounding problems.  

@lisp
 (coerce x 't) @EQ{} (identity x) @EQ{} x
@end lisp



@node deftype
@heading deftype (Macro)
@syindex deftype
@cindex deftype



@subsubheading Syntax:

@DefmacWithValues{deftype, name lambda-list @DeclsAndDoc{} @starparam{form}, name}

@subsubheading Arguments and Values:

@param{name}---a @term{symbol}.

@param{lambda-list}---a @term{deftype lambda list}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{documentation}---a @term{string}; @noeval{}.

@param{form}---a @term{form}.

@subsubheading Description:

@code{deftype} defines a @term{derived type specifier} named @param{name}.

The meaning of the new @term{type specifier} is given in terms of
a function which expands the @term{type specifier} into another
@term{type specifier}, which itself will be expanded if it contains
references to another @term{derived type specifier}.

The newly defined @term{type specifier} may be referenced as a list of
the form @tt{(@param{name} @param{arg_1} @param{arg_2} ...)}.
The number of arguments must be appropriate to the @param{lambda-list}.
If the new @term{type specifier} takes no arguments, 
or if all of its arguments are optional, 
the @term{type specifier} may be used as an @term{atomic type specifier}.

The @term{argument} @term{expressions} to the @term{type specifier},
@param{arg_1} @mat{@ldots{}} @param{arg_n}, are not @term{evaluated}.
Instead, these @term{literal objects} become the @term{objects} to which
corresponding @term{parameters} become @term{bound}.

The body of the @code{deftype} @term{form} 
(but not the @param{lambda-list})
is
implicitly enclosed in a @term{block} named @param{name},
and is evaluated as an @term{implicit progn}, 
returning a new @term{type specifier}.

The @term{lexical environment} of the body is the one which was current
at the time the @code{deftype} form was evaluated, augmented by the 
@term{variables} in the @param{lambda-list}.

Recursive expansion of the @term{type specifier} returned as the expansion
must terminate, including the expansion of @term{type specifiers} which
are nested within the expansion.

The consequences are undefined if the result of fully expanding a
@term{type specifier} contains any circular structure, except within
the @term{objects} referred to by @code{member} and @code{eql}
@term{type specifiers}.

@param{Documentation} is attached to @param{name} as a @term{documentation string}
of kind @t{type}.

If a @code{deftype} @term{form} appears as a @term{top level form},
the @term{compiler} must ensure that the @param{name} is recognized
in subsequent @term{type} declarations.  
The @term{programmer} must ensure that the body of a @code{deftype} form 
can be @term{evaluated} at compile time if the @param{name} is
referenced in subsequent @term{type} declarations.  
If the expansion of a @term{type specifier} is not defined fully at compile time
(perhaps because it expands into an unknown @term{type specifier} or a
@code{satisfies} of a named @term{function} that isn't defined in the
compile-time environment), an @term{implementation} may ignore any references to
this @term{type} in declarations and/or signal a warning.

@subsubheading Examples:
@lisp
 (defun equidimensional (a)
   (or (< (array-rank a) 2)
       (apply #'= (array-dimensions a)))) @EV{} EQUIDIMENSIONAL
 (deftype square-matrix (&optional type size)
   `(and (array ,type (,size ,size))
         (satisfies equidimensional))) @EV{} SQUARE-MATRIX
@end lisp


@subsubheading See Also:

@ref{declare},
@ref{defmacro},
@ref{documentation},
@ref{Type Specifiers, Section 4.2.3 (Type Specifiers)},
@ref{Syntactic Interaction of Documentation Strings and Declarations, Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)}



@node subtypep
@heading subtypep (Function)
@syindex subtypep
@cindex subtypep



@subsubheading Syntax:

@DefunWithValues{subtypep, type-1 type-2 @opt{} environment, subtype-p\, valid-p}

@subsubheading Arguments and Values:

@param{type-1}---a @term{type specifier}.

@param{type-2}---a @term{type specifier}.

@param{environment}---an @term{environment} @term{object}.
@Default{@nil{}, denoting the @term{null lexical environment}
and the current @term{global environment}}

@param{subtype-p}---a @term{generalized boolean}.

@param{valid-p}---a @term{generalized boolean}.

@subsubheading Description:

If @param{type-1} is a @term{recognizable subtype} of @param{type-2}, 
the first @term{value} is @term{true}.
Otherwise, the first @term{value} is @term{false},
indicating that either
@param{type-1} is not a @term{subtype} of @param{type-2}, or else
@param{type-1} is a @term{subtype} of @param{type-2} 
but is not a @term{recognizable subtype}.

A second @term{value} is also returned indicating the `certainty' of 
the first @term{value}.  If this value is @term{true}, then the first
value is an accurate indication of the @term{subtype} relationship.
(The second @term{value} is always @term{true} when the first @term{value}
is @term{true}.)

@Thenextfigure{}@spc{}summarizes the possible combinations of @term{values}
that might result.


@float Figure,fig4.9
@cartouche
@multitable{xxxxxxx}{xxxxxxx}{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}
@headitem Value 1 @tab Value 2 @tab Meaning
@item @term{true} @tab @term{true} @tab @param{type-1} is definitely a @term{subtype} of
@param{type-2}.
@item @term{false} @tab @term{true} @tab @param{type-1} is definitely not a @term{subtype} of
@param{type-2}.
@item @term{false} @tab @term{false} @tab @code{subtypep} could not determine the relationship,
@item  @tab  @tab so @param{type-1} might or might not be a @term{subtype} of
@param{type-2}.
@end multitable
@end cartouche
@caption{Result possibilities for subtypep}
@end float



@code{subtypep} is permitted to return the 
@term{values} @term{false} and @term{false} only when at least
one argument involves one of these @term{type specifiers}:
@code{and},
@code{eql},
the list form of @code{function},
@code{member},
@code{not},
@code{or},
@code{satisfies},
or
@code{values}.
(A @term{type specifier} `involves' such a @term{symbol} if, 
after being @term{type expanded},
it contains that @term{symbol} in a position that would call for
its meaning as a @term{type specifier} to be used.)
One consequence of this is that if neither @param{type-1} nor @param{type-2}
involves any of these @term{type specifiers}, then @code{subtypep} is obliged
to determine the relationship accurately.  In particular, @code{subtypep} 
returns the @term{values} @term{true} and @term{true}
if the arguments are @code{equal} and do not involve
any of these @term{type specifiers}.

@code{subtypep} never returns a second value of @nil{}@spc{}when both
@param{type-1} and @param{type-2} involve only
the names in @ref{StandardizedAtomicTypeSpecs, Figure 4.2}, or
names of @term{types} defined by @code{defstruct},
@code{define-condition},
or @code{defclass}, or
@term{derived types} that expand into only those names.
While @term{type specifiers} listed in @ref{StandardizedAtomicTypeSpecs, Figure 4.2}@spc{}and 
names of @code{defclass} and @code{defstruct} can in some cases be
implemented as @term{derived types}, @code{subtypep} regards them as primitive.

The relationships between @term{types} reflected by @code{subtypep}
are those specific to the particular implementation.  For example, if
an implementation supports only a single type of floating-point numbers,
in that implementation @f{(subtypep 'float 'long-float)} 
returns the @term{values} @term{true} and @term{true} 
(since the two @term{types} are identical).

For all @param{T1} and @param{T2} other than @f{*}, 
@f{(array @param{T1})} and @f{(array @param{T2})} 
are two different @term{type specifiers} that always refer to the same sets of
things if and only if they refer to @term{arrays}
of exactly the same specialized representation, @ie{}
if @f{(upgraded-array-element-type '@param{T1})}  and
@f{(upgraded-array-element-type '@param{T2})} 
return two different @term{type specifiers} that always refer to the same sets of
@term{objects}.
This is another way of saying that 
@f{`(array @param{type-specifier})}
and
@f{`(array ,(upgraded-array-element-type '@param{type-specifier}))} 
refer to the same
set of specialized @term{array} representations.
For all @param{T1} and @param{T2} other than @f{*}, 
the intersection of
@f{(array @param{T1})}
and @f{(array @param{T2})} is the empty set
if and only if they refer to @term{arrays} of different,
distinct specialized representations.  

Therefore,

@lisp
 (subtypep '(array T1) '(array T2)) @EV{} @term{true}
@end lisp

if and only if

@lisp
 (upgraded-array-element-type 'T1)  and
 (upgraded-array-element-type 'T2)  
@end lisp


return two different @term{type specifiers} that always refer to the same sets of
@term{objects}.

For all type-specifiers @param{T1} and @param{T2} other than @f{*}, 

@lisp
 (subtypep '(complex T1) '(complex T2)) @EV{} @term{true}, @term{true}
@end lisp


if:

@enumerate 1
@item @f{T1} is a @term{subtype} of @f{T2}, or
@item @f{(upgraded-complex-part-type '@param{T1})} and
@f{(upgraded-complex-part-type '@param{T2})} 
return two different @term{type specifiers} that always refer to the 
same sets of @term{objects}; in this case,
@f{(complex @param{T1})} and 
@f{(complex @param{T2})} both refer to the 
same specialized representation.
@end enumerate

The @term{values} are @term{false} and @term{true} otherwise.

The form

@lisp
 (subtypep '(complex single-float) '(complex float))
@end lisp

must return @term{true} in all implementations, but

@lisp
 (subtypep '(array single-float) '(array float))
@end lisp


returns @term{true} only in implementations that do not have a specialized @term{array}
representation for @term{single floats} distinct from that for other @term{floats}.



@subsubheading Examples:

@lisp
 (subtypep 'compiled-function 'function) @EV{} @term{true}, @term{true}
 (subtypep 'null 'list) @EV{} @term{true}, @term{true}
 (subtypep 'null 'symbol) @EV{} @term{true}, @term{true}
 (subtypep 'integer 'string) @EV{} @term{false}, @term{true}
 (subtypep '(satisfies dummy) nil) @EV{} @term{false}, @term{implementation-dependent}
 (subtypep '(integer 1 3) '(integer 1 4)) @EV{} @term{true}, @term{true}
 (subtypep '(integer (0) (0)) 'nil) @EV{} @term{true}, @term{true}
 (subtypep 'nil '(integer (0) (0))) @EV{} @term{true}, @term{true}
 (subtypep '(integer (0) (0)) '(member)) @EV{} @term{true}, @term{true} ;or @term{false}, @term{false}
 (subtypep '(member) 'nil) @EV{} @term{true}, @term{true} ;or @term{false}, @term{false}
 (subtypep 'nil '(member)) @EV{} @term{true}, @term{true} ;or @term{false}, @term{false}
@end lisp


Let @f{<aet-x>} and @f{<aet-y>} be two distinct @term{type specifiers} that 
do not always refer to the same sets of
@term{objects}
in a given implementation, but for which
@code{make-array}, will return an 
@term{object} of the same @term{array} @term{type}.

Thus, in each case, 

@lisp
  (subtypep (array-element-type (make-array 0 :element-type '<aet-x>))
            (array-element-type (make-array 0 :element-type '<aet-y>)))
@EV{} @term{true}, @term{true}
 
  (subtypep (array-element-type (make-array 0 :element-type '<aet-y>))
            (array-element-type (make-array 0 :element-type '<aet-x>)))
@EV{} @term{true}, @term{true}
@end lisp


If  @f{(array <aet-x>)} 
and @f{(array <aet-y>)} are different names for
exactly the same set of @term{objects}, 
these names should always refer to the same sets of
@term{objects}.
That implies that the following set of tests are also true:

@lisp
 (subtypep '(array <aet-x>) '(array <aet-y>)) @EV{} @term{true}, @term{true}
 (subtypep '(array <aet-y>) '(array <aet-x>)) @EV{} @term{true}, @term{true}
@end lisp


@subsubheading See Also:

@ref{Types, Section 4.2 (Types)}

@subsubheading Notes:

The small differences between the @code{subtypep} specification for
the @code{array} and @code{complex} types are necessary because there 
is no creation function for @term{complexes} which allows 
the specification of the resultant part type independently of
the actual types of the parts.  Thus in the case of @thetype{complex},
the actual type of the parts is referred to, although a @term{number} 
can be a member of more than one @term{type}.
For example, @f{17} is of @term{type} @f{(mod 18)} 
as well as @term{type} @f{(mod 256)} and @term{type} @code{integer};
and @f{2.3f5} is @oftype{single-float} 
as well as @term{type} @code{float}.



@node type-of
@heading type-of (Function)
@syindex type-of
@cindex type-of


@subsubheading Syntax:

@DefunWithValues{type-of, object, typespec}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{typespec}---a @term{type specifier}.

@subsubheading Description:


Returns a @term{type specifier}, @param{typespec}, for a @term{type} 
that has the @param{object} as an @term{element}.
The @param{typespec} satisfies the following:


@enumerate 1

@item
For any @param{object} that is an @term{element} of some @term{built-in type}:


@enumerate a
@item
the @term{type} returned is a @term{recognizable subtype} of that @term{built-in type}.

@item
the @term{type} returned does not involve 
@f{and},
@f{eql},
@f{member},
@f{not},
@f{or}, 
@f{satisfies},
or @f{values}.
@end enumerate


@item
For all @param{objects}, @f{(typep @param{object} (type-of @param{object}))} 
returns @term{true}.
Implicit in this is that @term{type specifiers} which are
not valid for use with @code{typep}, such as the @term{list} form of the
@code{function} @term{type specifier}, are never returned by @code{type-of}.

@item
The @term{type} returned by @code{type-of} is always a @term{recognizable subtype}
of the @term{class} returned by @code{class-of}.  That is,

@lisp
 (subtypep (type-of @param{object}) (class-of @param{object})) @EV{} @term{true}, @term{true}
@end lisp


@item
For @param{objects} of metaclass @code{structure-class} or @code{standard-class},
and for @term{conditions},
@code{type-of} returns the @term{proper name} of the @term{class} returned 
by @code{class-of} if it has a @term{proper name},
and otherwise returns the @term{class} itself.
In particular, for @param{objects} created by the constructor function
of a structure defined with @code{defstruct} without a @kwd{type} option,
@code{type-of} returns the structure name; and for @param{objects} created 
by @code{make-condition}, the @param{typespec} is the @term{name} of the
@term{condition} @term{type}.

@item
For each of the @term{types}
@code{short-float}, 
@code{single-float},
@code{double-float},
or @code{long-float}
of which the @param{object} is an @term{element},
the @param{typespec} is a @term{recognizable subtype} of that @term{type}.
@end enumerate




@subsubheading Examples:

@lisp
@end lisp


@lisp
 (type-of 'a) @EV{} SYMBOL          
 (type-of '(1 . 2))
@EV{} CONS
@OV{} (CONS FIXNUM FIXNUM)
 (type-of #c(0 1))
@EV{} COMPLEX
@OV{} (COMPLEX INTEGER)
 (defstruct temp-struct x y z) @EV{} TEMP-STRUCT
 (type-of (make-temp-struct)) @EV{} TEMP-STRUCT
 (type-of "abc")
@EV{} STRING
@OV{} (STRING 3)
 (subtypep (type-of "abc") 'string) @EV{} @term{true}, @term{true}
 (type-of (expt 2 40))
@EV{} BIGNUM
@OV{} INTEGER
@OV{} (INTEGER 1099511627776 1099511627776)
@OV{} SYSTEM::TWO-WORD-BIGNUM
@OV{} FIXNUM
 (subtypep (type-of 112312) 'integer) @EV{} @term{true}, @term{true}
 (defvar *foo* (make-array 5 :element-type t)) @EV{} *FOO*
 (class-name (class-of *foo*)) @EV{} VECTOR
 (type-of *foo*)
@EV{} VECTOR
@OV{} (VECTOR T 5)
@end lisp


@subsubheading See Also:

@ref{array-element-type},
@ref{class-of},
@ref{defstruct},
@ref{typecase},
@ref{typep},
@ref{Types, Section 4.2 (Types)}

@subsubheading Notes:

Implementors are encouraged to arrange for @code{type-of} to return
a portable value.


@node typep
@heading typep (Function)
@syindex typep
@cindex typep



@subsubheading Syntax:

@DefunWithValues{typep, object type-specifier @opt{} environment, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{type-specifier}---any @term{type specifier} except 
@t{values}, or a @term{type specifier} list
whose first element is either @t{function} or @t{values}.

@param{environment}---an @term{environment} @term{object}.
@Default{@nil{}, denoting the @term{null lexical environment}
and the and current @term{global environment}}

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@Predicate{object, of the @term{type} specified by @param{type-specifier}}

A @param{type-specifier} of the form @f{(satisfies fn)} 
is handled by applying the function @f{fn} to @param{object}.

@f{(typep @param{object} '(array @param{type-specifier}))}, 
where @param{type-specifier} is not @f{*},   
returns @term{true} if and only if @param{object} is an @term{array} 
that could be the result 
of supplying @param{type-specifier} 
as the @kwd{element-type} argument to @code{make-array}.
@f{(array *)} refers to all @term{arrays} 
regardless of element type, while @f{(array @param{type-specifier})}
refers only to those @term{arrays} 
that can result from giving @param{type-specifier} as the
@kwd{element-type} argument to @code{make-array}.  
A similar interpretation applies to @f{(simple-array @param{type-specifier})} 
and @f{(vector @param{type-specifier})}.
See @ref{ArrayUpgrading, Section 15.1.2.1 (Array Upgrading)}.

@f{(typep @param{object} '(complex @param{type-specifier}))}
returns @term{true} for all @term{complex} numbers that can result from 
giving @term{numbers} of type @param{type-specifier}
to @thefunction{complex}, plus all other @term{complex} numbers 
of the same specialized representation.      
Both the real and the imaginary parts of any such 
@term{complex} number must satisfy:

@lisp
 (typep realpart 'type-specifier)
 (typep imagpart 'type-specifier)
@end lisp


See the @term{function} @ref{upgraded-complex-part-type}.


@subsubheading Examples:

@lisp
 (typep 12 'integer) @EV{} @term{true}
 (typep (1+ most-positive-fixnum) 'fixnum) @EV{} @term{false}
 (typep nil t) @EV{} @term{true}
 (typep nil nil) @EV{} @term{false}
 (typep 1 '(mod 2)) @EV{} @term{true}
 (typep #c(1 1) '(complex (eql 1))) @EV{} @term{true}
;; To understand this next example, you might need to refer to
;; @ref{RuleOfCanonRepForComplexRationals, Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals)}.
 (typep #c(0 0) '(complex (eql 0))) @EV{} @term{false}
@end lisp


Let @f{A@sssx{}} and @f{A@sssy{}} be two @term{type specifiers} that 
denote different @term{types}, but for which

@lisp
 (upgraded-array-element-type 'A@sssx{})
@end lisp

and

@lisp
 (upgraded-array-element-type 'A@sssy{})
@end lisp

denote the same @term{type}.  Notice that

@lisp
 (typep (make-array 0 :element-type 'A@sssx{}) '(array A@sssx{})) @EV{} @term{true}
 (typep (make-array 0 :element-type 'A@sssy{}) '(array A@sssy{})) @EV{} @term{true}
 (typep (make-array 0 :element-type 'A@sssx{}) '(array A@sssy{})) @EV{} @term{true}
 (typep (make-array 0 :element-type 'A@sssy{}) '(array A@sssx{})) @EV{} @term{true}
@end lisp



@subsubheading Exceptional Situations:

An error @oftype{error} is signaled if @param{type-specifier} is @f{values}, 
or a @term{type specifier} list whose first element is either
@t{function} or @t{values}.

The consequences are undefined if
the @param{type-specifier} is not a @term{type specifier}.

@subsubheading See Also:

@ref{type-of},
@ref{upgraded-array-element-type},
@ref{upgraded-complex-part-type},
@ref{Type Specifiers, Section 4.2.3 (Type Specifiers)}

@subsubheading Notes:

@term{Implementations} are encouraged to recognize and optimize the case of 
@f{(typep @param{x} (the class @param{y}))},
since it does not involve any need for expansion 
of @code{deftype} information at runtime.

@lisp

@end lisp




@node type-error
@heading type-error (Condition Type)
@syindex type-error
@cindex type-error


@subsubheading Class Precedence List:
@code{type-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{type-error} represents a situation in which an @term{object} is not
of the expected type.  The ``offending datum'' and ``expected type'' are initialized 
by @theinitkeyargs{datum} and @kwd{expected-type} to @code{make-condition},
and are @term{accessed} by the functions 
@code{type-error-datum} and @code{type-error-expected-type}.

@subsubheading See Also:

@ref{type-error-datum}, @ref{type-error-expected-type}


@node type-error-datum; type-error-expected-type
@heading type-error-datum, type-error-expected-type (Function)
@syindex type-error-datum
@cindex type-error-datum
@syindex type-error-expected-type
@cindex type-error-expected-type
@anchor{type-error-datum}
@anchor{type-error-expected-type}


@subsubheading Syntax:

@DefunWithValues{type-error-datum, condition, datum}
@DefunWithValues{type-error-expected-type, condition, expected-type}

@subsubheading Arguments and Values:

@param{condition}---a @term{condition} @oftype{type-error}.

@param{datum}---an @term{object}.

@param{expected-type}---a @term{type specifier}.

@subsubheading Description:

@code{type-error-datum} returns the offending datum in the @term{situation}
represented by the @param{condition}.

@code{type-error-expected-type} returns the expected type of the
offending datum in the @term{situation} represented by the @param{condition}.

@subsubheading Examples:

@lisp
 (defun fix-digits (condition)
   (check-type condition type-error)
   (let* ((digits '(zero one two three four
                   five six seven eight nine))
         (val (position (type-error-datum condition) digits)))
     (if (and val (subtypep 'fixnum (type-error-expected-type condition)))
         (store-value 7))))
 
 (defun foo (x)
   (handler-bind ((type-error #'fix-digits))
     (check-type x number)
     (+ x 3)))
 
 (foo 'seven)
@EV{} 10
@end lisp


@subsubheading See Also:

@ref{type-error},
@ref{Conditions, Chapter 9 (Conditions)}


@node simple-type-error
@heading simple-type-error (Condition Type)
@syindex simple-type-error
@cindex simple-type-error


@subsubheading Class Precedence List:

@code{simple-type-error},
@code{simple-condition},
@code{type-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@term{Conditions} @oftype{simple-type-error} 
are like @term{conditions} @oftype{type-error}, 
except that they provide an alternate mechanism for specifying
how the @term{condition} is to be @term{reported};
see the @term{type} @ref{simple-condition}.

@subsubheading See Also:

@ref{simple-condition},
@ref{simple-condition-format-control},
@ref{simple-condition-format-arguments}, 
@ref{type-error-datum},
@ref{type-error-expected-type}




@node Data and Control Flow
@chapter Data and Control Flow
@menu
* Generalized Reference::
* Transfer of Control to an Exit Point::

Dictionary

* apply::
* defun::
* fdefinition::
* fboundp::
* fmakunbound::
* flet; labels; macrolet::
* funcall::
* function (Special Operator)::
* function-lambda-expression::
* functionp::
* compiled-function-p::
* call-arguments-limit::
* lambda-list-keywords::
* lambda-parameters-limit::
* defconstant::
* defparameter; defvar::
* destructuring-bind::
* let; let*::
* progv::
* setq::
* psetq::
* block::
* catch::
* go::
* return-from::
* return::
* tagbody::
* throw::
* unwind-protect::
* nil (Constant Variable)::
* not (Function)::
* t (Constant Variable)::
* eq::
* eql (Function)::
* equal::
* equalp::
* identity::
* complement::
* constantly::
* every; some; notevery; notany::
* and (Macro)::
* cond::
* if::
* or (Macro)::
* when; unless::
* case; ccase; ecase::
* typecase; ctypecase; etypecase::
* multiple-value-bind::
* multiple-value-call::
* multiple-value-list::
* multiple-value-prog1::
* multiple-value-setq::
* values (Accessor)::
* values-list::
* multiple-values-limit::
* nth-value::
* prog; prog*::
* prog1; prog2::
* progn::
* define-modify-macro::
* defsetf::
* define-setf-expander::
* get-setf-expansion::
* setf; psetf::
* shiftf::
* rotatef::
* control-error::
* program-error::
* undefined-function::
@end menu

@node Generalized Reference
@section Generalized Reference

@menu
* Overview of Places and Generalized Reference::
* Kinds of Places::
* Treatment of Other Macros Based on SETF::
@end menu
@node Overview of Places and Generalized Reference
@subsection Overview of Places and Generalized Reference

A @newterm{generalized reference} is the use of a @term{form},
sometimes called a @newterm{place},
as if it were a @term{variable} that could be read and written.
The @term{value} of a @term{place} is 
the @term{object} to which the @term{place} @term{form} evaluates.
The @term{value} of a @term{place} can be changed by using @code{setf}.
The concept of binding a @term{place} is not defined in @clisp{},
but an @term{implementation} is permitted to extend the language by defining this concept.

@Thenextfigure{}@spc{}contains examples of the use of @code{setf}.
Note that the values returned by evaluating the @term{forms} in column two 
are not necessarily the same as those obtained by evaluating the 
@term{forms} in column three.
In general, the exact @term{macro expansion} of a @code{setf} @term{form} is not guaranteed 
and can even be @term{implementation-dependent};
all that is guaranteed is 
that the expansion is an update form that works
for that particular @term{implementation},
that the left-to-right evaluation of @term{subforms} is preserved, 
and
that the ultimate result of evaluating @code{setf} is the value
or values being stored.


@float Figure,fig5.1
@cartouche
@multitable{@f{(symbol-value x)}}{@f{(rplaca x datum)}}{@f{(setf (symbol-value x) datum)}}
@headitem Access function @tab Update Function @tab Update using @code{setf}
@item @f{x} @tab @f{(setq x datum)} @tab @f{(setf x datum)}
@item @f{(car x)} @tab @f{(rplaca x datum)} @tab @f{(setf (car x) datum)}
@item @f{(symbol-value x)} @tab @f{(set x datum)} @tab @f{(setf (symbol-value x) datum)}
@end multitable
@end cartouche
@caption{Examples of setf}
@end float


@Thenextfigure{}@spc{}shows @term{operators} relating to
@term{places} and @term{generalized reference}.



@float Figure,fig5.2
@cartouche
@multitable{define-setf-expander}{get-setf-expansion}{rotatef}

@item assert @tab defsetf @tab push
@item ccase @tab get-setf-expansion @tab remf
@item ctypecase @tab getf @tab rotatef
@item decf @tab incf @tab setf
@item define-modify-macro @tab pop @tab shiftf
@item define-setf-expander @tab psetf @tab 
@end multitable
@end cartouche
@caption{Operators relating to places and generalized reference.}
@end float



Some of the @term{operators} above manipulate @term{places}
and some manipulate @term{setf expanders}.
A @term{setf expansion} can be derived from any @term{place}.
New @term{setf expanders} can be defined by using @code{defsetf} 
and @code{define-setf-expander}.

@subsubsection Evaluation of Subforms to Places
@anchor{GenRefSubFormEval}

The following rules apply to the @term{evaluation} of @term{subforms} in a
@term{place}:


@enumerate 1
@item
The evaluation ordering of @term{subforms} within a @term{place}
is determined by the order specified by the second value returned by
@code{get-setf-expansion}. 
For all @term{places} defined by this specification
(@eg{} @code{getf}, @code{ldb}, @mat{@ldots{}}),
this order of evaluation is left-to-right.
@cindex order of evaluation
@cindex evaluation order
When a @term{place} is derived from a macro expansion,
this rule is applied after the macro is expanded to find the appropriate @term{place}. 

@term{Places} defined by using @code{defmacro} or
@code{define-setf-expander}
use the evaluation order defined by those definitions.
For example, consider the following:

@lisp
 (defmacro wrong-order (x y) `(getf ,y ,x))
@end lisp


This following @term{form} evaluates @f{place2} first and
then @f{place1} because that is the order they are evaluated in
the macro expansion:

@lisp
 (push value (wrong-order place1 place2))
@end lisp


@item
For the @term{macros} that manipulate @term{places} 
(@code{push},
@code{pushnew},
@code{remf},
@code{incf},
@code{decf}, 
@code{shiftf},
@code{rotatef},
@code{psetf},
@code{setf},
@code{pop}, and those defined by @code{define-modify-macro})
the @term{subforms} of the macro call are evaluated exactly once
in left-to-right order, with the @term{subforms} of the @term{places}
evaluated in the order specified in (1).

@code{push}, @code{pushnew}, @code{remf}, 
@code{incf}, @code{decf}, @code{shiftf}, @code{rotatef}, 
@code{psetf}, @code{pop} evaluate all @term{subforms} before modifying
any of the @term{place} locations.
@code{setf} (in the case when @code{setf} has more than two arguments) 
performs its operation on each pair in sequence. For example, in 

@lisp
 (setf place1 value1 place2 value2 ...)
@end lisp

the @term{subforms} of @f{place1} and @f{value1} are evaluated, the location
specified by 
@f{place1} is modified to contain the value returned by 
@f{value1}, and
then the rest of the @code{setf} form is processed in a like manner.

@item
For @code{check-type}, @code{ctypecase}, and @code{ccase},
@term{subforms} of the @term{place} are evaluated once as in (1),
but might be evaluated again if the
type check fails in the case of @code{check-type} 
or none of the cases hold in
@code{ctypecase} and @code{ccase}.

@item
For @code{assert}, the order of evaluation of the generalized 
references is not specified.
@cindex order of evaluation
@cindex evaluation order
@end enumerate

Rules 2, 3 and 4 cover all @term{standardized} @term{macros} that manipulate @term{places}.

@unnumberedsubsubsec 5.1.1.1.1 Examples of Evaluation of Subforms to Places


@lisp
 (let ((ref2 (list '())))
   (push (progn (princ "1") 'ref-1)
         (car (progn (princ "2") ref2)))) 
@OUT{} 12
@EV{} (REF1)

 (let (x)
    (push (setq x (list 'a))
          (car (setq x (list 'b))))
     x)
@EV{} (((A) . B))
@end lisp


@code{push} first evaluates @tt{(setq x (list 'a)) @EV{}@spc{}(a)},
then evaluates @tt{(setq x (list 'b)) @EV{}@spc{}(b)},
then modifies the @term{car} of this latest value to be @tt{((a) . b)}.



@subsubsection Setf Expansions
@anchor{SetfExpansions}

Sometimes it is possible to avoid evaluating @term{subforms} of a 
@term{place} multiple times or in the wrong order.  A
@term{setf expansion}
for a given access form can be expressed as an ordered collection of five @term{objects}:


@table @asis
@item @id{@b{List of temporary variables}}


a list of symbols naming temporary variables to be bound
sequentially, as if by @code{let*}, to @term{values} 
resulting from value forms.

@item @id{@b{List of value forms}}


a list of forms (typically, @term{subforms} of the
@term{place}) which when evaluated 
yield the values to which the corresponding temporary 
variables should be bound.

@item @id{@b{List of store variables}}


a list of symbols naming temporary store variables which are
to hold the new values that will be assigned to the
@term{place}.

@item @id{@b{Storing form}}


a form which can reference both the temporary and the store variables,
and which changes the @term{value} of the @term{place}
and guarantees to return as its values the values of the store variables,
which are the correct values for @code{setf} to return.

@item @id{@b{Accessing form}}


a @term{form} which can reference the temporary variables,
and which returns the @term{value} of the @term{place}.
@end table


The value returned by the accessing form is
affected by execution of the storing form, but either of these
forms might be evaluated any number of times.

It is possible
to do more than one @code{setf} in parallel via
@code{psetf}, @code{shiftf}, and @code{rotatef}.  
Because of this, the 
@term{setf expander}
must produce new temporary 
and store variable names every time.  For examples of how to do this,
see @code{gensym}.

For each @term{standardized} accessor function @param{F},
unless it is explicitly documented otherwise,
it is @term{implementation-dependent} whether the ability to 
use an @param{F} @term{form} as a @code{setf} @term{place}
is implemented by a @term{setf expander} or a @term{setf function}.
Also, it follows from this that it is @term{implementation-dependent} 
whether the name @f{(setf @param{F})} is @term{fbound}.

@unnumberedsubsubsec 5.1.1.2.1 Examples of Setf Expansions


Examples of the contents of the constituents of @term{setf expansions}
follow.

For a variable @param{x}:


@float Figure,fig5.3
@cartouche
@multitable{@f{(setq @param{x} g0001)}}{;list of temporary variables}

@item @f{()} @tab ;list of temporary variables
@item @f{()} @tab ;list of value forms
@item @f{(g0001)} @tab ;list of store variables
@item @f{(setq @param{x} g0001)} @tab ;storing form
@item @param{x} @tab ;accessing form
@end multitable
@end cartouche
@caption{Sample Setf Expansion of a Variable}
@end float


For @tt{(car @param{exp})}:


@float Figure,fig5.4
@cartouche
@multitable{@f{(progn (rplaca g0002 g0003) g0003)}}{;list of temporary variables}

@item @f{(g0002)} @tab ;list of temporary variables
@item @f{(@param{exp})} @tab ;list of value forms
@item @f{(g0003)} @tab ;list of store variables
@item @f{(progn (rplaca g0002 g0003) g0003)} @tab ;storing form
@item @f{(car g0002)} @tab ;accessing form
@end multitable
@end cartouche
@caption{Sample Setf Expansion of a CAR Form}
@end float


For @f{(subseq @param{seq} @param{s} @param{e})}:


@float Figure,fig5.5
@cartouche
@multitable{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}{xxxxxxxxxxxxxxxxxxxxxxxxxxxx}

@item @f{(g0004 g0005 g0006)} @tab ;list of temporary variables
@item @f{(@param{seq} @param{s} @param{e})} @tab ;list of value forms
@item @f{(g0007)} @tab ;list of store variables
@item @f{(progn (replace g0004 g0007 :start1 g0005 :end1 g0006) g0007)} @span{} @tab 
@item  @tab ;storing form
@item @f{(subseq g0004 g0005 g0006)} @tab ; accessing form
@end multitable
@end cartouche
@caption{Sample Setf Expansion of a SUBSEQ Form}
@end float


In some cases, if a @term{subform} of a @term{place} is itself
a @term{place}, it is necessary to expand the @term{subform}
in order to compute some of the values in the expansion of the outer
@term{place}.  For @f{(ldb @param{bs} (car @param{exp}))}:


@float Figure,fig5.6
@cartouche
@multitable{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}{xxxxxxxxxxxxxxxxxxxxxxxxxxxx}

@item @f{(g0001 g0002)} @tab ;list of temporary variables
@item @f{(@param{bs} @param{exp})} @tab ;list of value forms
@item @f{(g0003)} @tab ;list of store variables
@item @f{(progn (rplaca g0002 (dpb g0003 g0001 (car g0002))) g0003)} @span{} @tab 
@item  @tab ;storing form
@item @f{(ldb g0001 (car g0002))} @tab ; accessing form
@end multitable
@end cartouche
@caption{Sample Setf Expansion of a LDB Form}
@end float






@node Kinds of Places
@subsection Kinds of Places

Several kinds of @term{places} are defined by @clisp{}; 
this section enumerates them.
This set can be extended by @term{implementations} and by @term{programmer code}.

@subsubsection Variable Names as Places

The name of a @term{lexical variable} or @term{dynamic variable} 
can be used as a @term{place}.


@subsubsection Function Call Forms as Places
@anchor{FnFormsAsGenRefs}

A @term{function form} can be used as a @term{place} if it falls
into one of the following categories:


@itemize @bullet{}

@item
A function call form whose first element is the name of
any one of the functions in @thenextfigure{}.


@editornote{KMP: Note that what are in some places still called `condition accessors'
are deliberately omitted from this table, and are not labeled as
accessors in their entries.  I have not yet had time to do a full
search for these items and eliminate stray references to them as `accessors',
which they are not, but I will do that at some point.}


@float Figure,fig5.7
@cartouche
@multitable{caaaar}{compiler-macro-function}{logical-pathname-translations}

@item aref @tab cdadr @tab get
@item bit @tab cdar @tab gethash
@item caaaar @tab cddaar @tab logical-pathname-translations
@item caaadr @tab cddadr @tab macro-function
@item caaar @tab cddar @tab ninth
@item caadar @tab cdddar @tab nth
@item caaddr @tab cddddr @tab readtable-case
@item caadr @tab cdddr @tab rest
@item caar @tab cddr @tab row-major-aref
@item cadaar @tab cdr @tab sbit
@item cadadr @tab char @tab schar
@item cadar @tab class-name @tab second
@item caddar @tab compiler-macro-function @tab seventh
@item cadddr @tab documentation @tab sixth
@item caddr @tab eighth @tab slot-value
@item cadr @tab elt @tab subseq
@item car @tab fdefinition @tab svref
@item cdaaar @tab fifth @tab symbol-function
@item cdaadr @tab fill-pointer @tab symbol-plist
@item cdaar @tab find-class @tab symbol-value
@item cdadar @tab first @tab tenth
@item cdaddr @tab fourth @tab third
@end multitable
@end cartouche
@caption{Functions that setf can be used with---1}
@end float


In the case of @code{subseq}, the replacement value must be a @term{sequence}
whose elements might be contained by the sequence argument to @code{subseq},
but does not have to be a @term{sequence} of the same @term{type} 
as the @term{sequence} of which the subsequence is specified.
If the length of the replacement value does not equal the length of
the subsequence to be replaced, then the shorter length determines
the number of elements to be stored, as for @code{replace}.


@item
A function call form whose first element is the name of
a selector function constructed by @code{defstruct}.
The function name must refer to the global function definition,
rather than a locally defined @term{function}.

@item
A function call form whose first element is the name of
any one of the functions in @thenextfigure{}, 
provided that the supplied argument
to that function is in turn a @term{place} form;
in this case the new @term{place} has stored back into it the
result of applying the supplied ``update'' function.


@float Figure,fig5.8
@cartouche
@multitable{@code{mask-field}}{Argument that is a @param{place}}{@term{implementation-dependent}}
@headitem Function name @tab Argument that is a @param{place} @tab Update function used
@item @code{ldb} @tab second @tab @code{dpb}
@item @code{mask-field} @tab second @tab @code{deposit-field}
@item @code{getf} @tab first @tab @term{implementation-dependent}
@end multitable
@end cartouche
@caption{Functions that setf can be used with---2}
@end float

During the @code{setf} expansion of these @term{forms}, it is necessary to call 
@code{get-setf-expansion} 
in order to figure out how the inner, nested generalized variable must be treated.  

The information from
@code{get-setf-expansion}
is used as follows.

@table @asis
@item @id{@code{ldb}}


In a form such as:

@tt{(setf (ldb @param{byte-spec} @param{place-form}) @param{value-form})}

the place referred to by the @param{place-form} must always be both @term{read} 
and @term{written};  note that the update is to the generalized variable 
specified by @param{place-form}, not to any object @oftype{integer}.

Thus this @code{setf} should generate code to do the following:


@enumerate 1
@item Evaluate @param{byte-spec} (and bind it into a temporary variable).
@item Bind the temporary variables for @param{place-form}.
@item Evaluate @param{value-form}  (and bind 
its value or values into the store variable).
@item Do the @term{read} from @param{place-form}.
@item Do the @term{write} into @param{place-form} with 
the given bits of the @term{integer}
fetched in step 4 replaced with the value from step 3.
@end enumerate

If the evaluation of @param{value-form} 
in step 3 alters what is found in @param{place-form},
such as setting different bits of @term{integer},
then the change of the bits denoted by 
@param{byte-spec} is to that 
altered @term{integer}, 
because step 4 is done after the @param{value-form}
evaluation.  Nevertheless, the 
evaluations required for @term{binding} 
the temporary variables are done in steps 1 and 
2, and thus the expected left-to-right evaluation order is seen.
For example:

@lisp
 (setq integer #x69) @EV{} #x69
 (rotatef (ldb (byte 4 4) integer) 
          (ldb (byte 4 0) integer))
 integer @EV{} #x96
;;; This example is trying to swap two independent bit fields 
;;; in an integer.  Note that the generalized variable of 
;;; interest here is just the (possibly local) program variable
;;; integer.
@end lisp


@item @id{@code{mask-field}}


This case is the same as @code{ldb} in all essential aspects.

@item @id{@code{getf}}


In a form such as:

@f{(setf (getf @param{place-form} @param{ind-form}) @param{value-form})}

the place referred to by @param{place-form} must always be both @term{read}
and @term{written};  note that the update is to the generalized variable 
specified by @param{place-form}, not necessarily to the particular 
@term{list}
that is the property list in question.

Thus this @code{setf} should generate code to do the following:

@enumerate 1
@item 
Bind the temporary variables for @param{place-form}.
@item 
Evaluate @param{ind-form} (and bind it into a temporary variable).
@item 
Evaluate @param{value-form} (and bind 
its value or values into the store variable).
@item 
Do the @term{read} from @param{place-form}.
@item 
Do the @term{write} into @param{place-form} with a possibly-new property list
obtained by combining the values from steps 2, 3, and 4.  
(Note that the phrase ``possibly-new property list'' can mean that 
the former property list is somehow destructively re-used, or it can 
mean partial or full copying of it.  
Since either copying or destructive re-use can occur, 
the treatment of the resultant value for the 
possibly-new property list must proceed as if it were a different copy
needing to be stored back into the generalized variable.)
@end enumerate

If the evaluation of @param{value-form} 
in step 3 alters what is found in
@param{place-form}, such as setting a different named property in the list,
then the change of the property denoted by @param{ind-form} 
is to that 
altered list, because step 4 is done after the 
@param{value-form}
evaluation.  Nevertheless, the 
evaluations required for @term{binding} 
the temporary variables  are done in steps 1 and 
2,  and thus the expected left-to-right evaluation order is seen.

For example:

@lisp
 (setq s (setq r (list (list 'a 1 'b 2 'c 3)))) @EV{} ((a 1 b 2 c 3))
 (setf (getf (car r) 'b) 
       (progn (setq r nil) 6)) @EV{} 6
 r @EV{} NIL
 s @EV{} ((A 1 B 6 C 3))
;;; Note that the (setq r nil) does not affect the actions of 
;;; the SETF because the value of R had already been saved in 
;;; a temporary variable as part of the step 1. Only the CAR
;;; of this value will be retrieved, and subsequently modified 
;;; after the value computation.
@end lisp

@end table
@end itemize




@subsubsection VALUES Forms as Places
@anchor{SETFofVALUES}

A @code{values} @term{form} can be used as a @term{place},
provided that each of its @term{subforms} is also a @term{place} form.

A form such as

@tt{(setf (values @param{place-1} @dots{} @param{place-n}) @param{values-form})}

does the following:


@enumerate 1
@item The @term{subforms} of each nested @param{place} are evaluated
in left-to-right order.
@item The @param{values-form} is evaluated, and the first store
variable from each @param{place} is bound to its return values as if by 
@code{multiple-value-bind}.  
@item If the @term{setf expansion} for any @param{place} 
involves more than one store variable, then the additional
store variables are bound to @nil{}.
@item The storing forms for each @param{place} are evaluated in
left-to-right order.
@end enumerate


The storing form in the @term{setf expansion} of @code{values}
returns as @term{multiple values}@sub2{} the values of the store
variables in step 2.  That is, the number of values returned is the
same as the number of @term{place} forms.  This may be more or fewer
values than are produced by the @param{values-form}.


@subsubsection THE Forms as Places

A @code{the} @term{form} can be used as a @term{place},
in which case the declaration is transferred to the @param{newvalue} form,
and the resulting @code{setf} is analyzed.  For example,

@lisp
 (setf (the integer (cadr x)) (+ y 3))
@end lisp

is processed as if it were

@lisp
 (setf (cadr x) (the integer (+ y 3)))
@end lisp



@subsubsection APPLY Forms as Places
@anchor{SETFofAPPLY}

The following situations involving @code{setf} of @code{apply} must be supported:


@itemize @bullet{}
@item @f{(setf (apply #'aref @param{array}
@starparam{subscript}
@param{more-subscripts})
@param{new-element})}
@item @f{(setf (apply #'bit @param{array} 
@starparam{subscript}
@param{more-subscripts})
@param{new-element})}
@item @f{(setf (apply #'sbit @param{array} 
@starparam{subscript}
@param{more-subscripts}) 
@param{new-element})}
@end itemize


In all three cases, the @term{element} of @param{array} designated
by the concatenation of @param{subscripts} and @param{more-subscripts}
(@ie{} the same @term{element} which would be @term{read} by the call to
@term{apply} if it were not part of a @code{setf} @term{form})
is changed to have the @term{value} given by @param{new-element}.
For these usages, the function name (@code{aref}, @code{bit}, or @code{sbit})
must refer to the global function definition, rather than a locally defined
@term{function}.

No other @term{standardized} @term{function} is required to be supported,
but an @term{implementation} may define such support.
An @term{implementation} may also define support 
for @term{implementation-defined} @term{operators}.

If a user-defined @term{function} is used in this context,
the following equivalence is true, except that care is taken
to preserve proper left-to-right evaluation of argument @term{subforms}:

@lisp
 (setf (apply #'@param{name} @starparam{arg}) @param{val})
 @EQ{} (apply #'(setf @param{name}) @param{val} @starparam{arg})
@end lisp



@subsubsection Setf Expansions and Places

Any @term{compound form} for which the @term{operator} has a
@term{setf expander}
defined can be used as a @term{place}.
The 
@term{operator}
must refer to the global function definition,
rather than a locally defined @term{function} or @term{macro}.



@subsubsection Macro Forms as Places

A @term{macro form} can be used as a @term{place}, 
in which case @clisp{}@spc{}expands the @term{macro form}
as if by @code{macroexpand-1}
and then uses the @term{macro expansion} in place of the original @term{place}.
Such @term{macro expansion} is attempted only after exhausting all other possibilities
other than expanding into a call to a function named @f{(setf @param{reader})}.


@subsubsection Symbol Macros as Places

A reference to a @term{symbol} that has been @term{established} as a @term{symbol macro} 
can be used as a @term{place}.  In this case,
@code{setf} expands the reference and then analyzes the resulting @term{form}.


@subsubsection Other Compound Forms as Places

For any other @term{compound form} for which the @term{operator} is a
@term{symbol} @param{f},
the @code{setf} @term{form} expands into a call 
to the @term{function} named @f{(setf @param{f})}.
The first @term{argument} in the newly constructed @term{function form}
is @param{newvalue} and the
remaining @term{arguments} are the remaining @term{elements} of
@param{place}.
This expansion occurs regardless of whether @param{f} or @f{(setf @param{f})}
is defined as a @term{function} locally, globally, or not at all.
For example,

@f{(setf (@param{f} @param{arg1} @param{arg2} ...) @param{new-value})}

expands into a form with the same effect and value as

@lisp
 (let ((#:temp-1 arg1)          ;force correct order of evaluation
       (#:temp-2 arg2)
       ...
       (#:temp-0 @param{new-value}))
   (funcall (function (setf @param{f})) #:temp-0 #:temp-1 #:temp-2...))
@end lisp


A @term{function} named @f{(setf @param{f})} must return its first argument
as its only value in order to preserve the semantics of @code{setf}.




@node Treatment of Other Macros Based on SETF
@subsection Treatment of Other Macros Based on SETF


For each of the ``read-modify-write'' @term{operators} in @thenextfigure{}, 
and for any additional @term{macros} 
defined by the @term{programmer} using @code{define-modify-macro},
an exception is made to the normal rule of left-to-right evaluation of arguments.
Evaluation of @term{argument} @term{forms} occurs in left-to-right order,
with the exception that for the @param{place} @term{argument}, the actual
@term{read} of the ``old value'' from that @param{place} happens 
after all of the @term{argument} @term{form} @term{evaluations}, 
and just before a ``new value'' is computed and @term{written} back into the @param{place}.

Specifically, each of these @term{operators} can be viewed as involving a
@term{form} with the following general syntax:

@lisp
 (@term{operator} @starparam{preceding-form} @param{place} @starparam{following-form})
@end lisp


The evaluation of each such @term{form} proceeds like this:


@enumerate 1
@item @term{Evaluate} each of the @param{preceding-forms}, in left-to-right order.
@item @term{Evaluate} the @term{subforms} of the @param{place},
in the order specified by the second value of the @term{setf expansion}
for that @param{place}.
@item @term{Evaluate} each of the @param{following-forms}, in left-to-right order.
@item @term{Read} the old value from @param{place}.
@item Compute the new value.
@item Store the new value into @param{place}.
@end enumerate



@float Figure,fig5.9
@cartouche
@multitable{decf}{push}{pushnew}

@item decf @tab pop @tab pushnew
@item incf @tab push @tab remf
@end multitable
@end cartouche
@caption{Read-Modify-Write Macros}
@end float




@node Transfer of Control to an Exit Point
@section Transfer of Control to an Exit Point

When a transfer of control is initiated by @code{go}, 
@code{return-from}, or @code{throw}
the following events occur in order to accomplish the transfer of control.
Note that for @code{go}, 
the @term{exit point} is the @term{form} within the @code{tagbody}
that is being executed at the time the @code{go} is performed;
for @code{return-from},
the @term{exit point} is the corresponding 
@code{block} @term{form};
and for @code{throw},
the @term{exit point} is the corresponding 
@code{catch} @term{form}. 


@enumerate 1
@item 
Intervening @term{exit points} are ``abandoned''
(@ie{} their @term{extent} ends 
and it is no longer valid to attempt to transfer control through them).

@item 
The cleanup clauses of any intervening @code{unwind-protect} clauses
are evaluated.

@item 
Intervening dynamic @term{bindings} of @code{special} variables,
@term{catch tags}, @term{condition handlers}, and @term{restarts}
are undone.

@item 
The @term{extent} of the @term{exit point} being invoked ends,
and control is passed to the target.
@end enumerate


The extent of an exit being ``abandoned'' because it is being passed over
ends as soon as the transfer of control is initiated. That is,
event 1 occurs at the beginning of the initiation of the transfer of
control. 
The consequences are undefined if an attempt is made to transfer control 
to an @term{exit point} whose @term{dynamic extent} has ended.

Events 2 and 3 are actually performed interleaved, in the order
corresponding to the reverse order in which they were established.
The effect of this is that the cleanup clauses of an @code{unwind-protect}
see the same dynamic @term{bindings} 
of variables and @term{catch tags} as were
visible when the @code{unwind-protect} was entered.

Event 4 occurs at the end of the transfer of control.


@node apply
@heading apply (Function)
@syindex apply
@cindex apply


@subsubheading Syntax:

@DefunWithValues{apply, function @rest{} @plus{args}, @starparam{result}}

@subsubheading Arguments and Values:

@param{function}---a @term{function designator}.

@param{args}---a @term{spreadable argument list designator}.

@param{results}---the @term{values} returned by @param{function}.

@subsubheading Description:

@term{Applies} the @param{function} to the @param{args}.

When the @param{function} receives its arguments via @keyref{rest}, it is 
permissible (but not required) for the @term{implementation} to @term{bind} 
the @term{rest parameter}
to an @term{object} that shares structure with the last argument to @code{apply}.
Because a @term{function} can neither detect whether it was called via @code{apply}
nor whether (if so) the last argument to @code{apply} was a @term{constant},
@term{conforming programs} must neither rely on the @term{list} structure 
of a @term{rest list} to be freshly consed, nor modify that @term{list} structure. 

@code{setf} can be used with @code{apply} in certain circumstances;
see @ref{SETFofAPPLY, Section 5.1.2.5 (APPLY Forms as Places)}.

@subsubheading Examples:

@lisp
 (setq f '+) @EV{} +
 (apply f '(1 2)) @EV{} 3
 (setq f #'-) @EV{} #<FUNCTION ->
 (apply f '(1 2)) @EV{} -1
 (apply #'max 3 5 '(2 7 3)) @EV{} 7
 (apply 'cons '((+ 2 3) 4)) @EV{} ((+ 2 3) . 4)
 (apply #'+ '()) @EV{} 0

 (defparameter *some-list* '(a b c))
 (defun strange-test (&rest x) (eq x *some-list*))
 (apply #'strange-test *some-list*) @EV{} @term{implementation-dependent}

 (defun bad-boy (&rest x) (rplacd x 'y))
 (bad-boy 'a 'b 'c) has undefined consequences.
 (apply #'bad-boy *some-list*) has undefined consequences.
@end lisp


@lisp
 (defun foo (size &rest keys &key double &allow-other-keys)
   (let ((v (apply #'make-array size :allow-other-keys t keys)))
     (if double (concatenate (type-of v) v v) v)))
 (foo 4 :initial-contents '(a b c d) :double t)
    @EV{} #(A B C D A B C D)
@end lisp


@subsubheading See Also:

@ref{funcall},
@ref{fdefinition},
@ref{function (Special Operator)},
@ref{Evaluation, Section 3.1 (Evaluation)},
@ref{SETFofAPPLY, Section 5.1.2.5 (APPLY Forms as Places)}


@node defun
@heading defun (Macro)
@syindex defun
@cindex defun



@subsubheading Syntax:

@DefmacWithValuesNewline{defun, function-name lambda-list @DeclsAndDoc{} @starparam{form}, function-name}

@subsubheading Arguments and Values:

@param{function-name}---a @term{function name}.

@param{lambda-list}---an @term{ordinary lambda list}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{documentation}---a @term{string}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{block-name}---the @term{function block name} of the @param{function-name}.

@subsubheading Description:

Defines a new @term{function} named @param{function-name} in the @term{global environment}.
The body of the @term{function} defined by @code{defun} consists 
of @param{forms}; they are executed as an @term{implicit progn}
when the @term{function} is called. 
@code{defun} can be used
to define a new @term{function},
to install a corrected version of an incorrect definition,
to redefine an already-defined @term{function},
or to redefine a @term{macro} as a @term{function}.

@code{defun} implicitly puts a @code{block} named @param{block-name}
around the body @param{forms} 
(but not the @term{forms} in the @param{lambda-list})
of the @term{function} defined.

@param{Documentation} is attached as a @term{documentation string} 
to @param{name} (as kind @code{function})
and to the @term{function} @term{object}.

Evaluating @code{defun} causes @param{function-name} to be a global name
for the @term{function} specified by the @term{lambda expression}

@lisp
 (lambda @param{lambda-list}
   @DeclsAndDoc{}
   (block @param{block-name} @starparam{form}))
@end lisp


processed in the @term{lexical environment} in which @code{defun} was executed.

(None of the arguments are evaluated at macro expansion time.)

@code{defun} is not required to perform any compile-time side effects.
In particular, @code{defun} does not make the @term{function} definition available
at compile time.  An @term{implementation} may choose to store information
about the @term{function} for the purposes of compile-time error-checking
(such as checking the number of arguments on calls),
or to enable the @term{function} to be expanded inline.

@subsubheading Examples:

@lisp
 (defun recur (x)
  (when (> x 0)
    (recur (1- x)))) @EV{} RECUR 
 (defun ex (a b &optional c (d 66) &rest keys &key test (start 0))
    (list a b c d keys test start)) @EV{} EX 
 (ex 1 2) @EV{} (1 2 NIL 66 NIL NIL 0)
 (ex 1 2 3 4 :test 'equal :start 50) 
@EV{} (1 2 3 4 (:TEST EQUAL :START 50) EQUAL 50)
 (ex :test 1 :start 2) @EV{} (:TEST 1 :START 2 NIL NIL 0)

 ;; This function assumes its callers have checked the types of the
 ;; arguments, and authorizes the compiler to build in that assumption.
 (defun discriminant (a b c)
   (declare (number a b c))
   "Compute the discriminant for a quadratic equation."
   (- (* b b) (* 4 a c))) @EV{} DISCRIMINANT
 (discriminant 1 2/3 -2) @EV{} 76/9

 ;; This function assumes its callers have not checked the types of the
 ;; arguments, and performs explicit type checks before making any assumptions. 
 (defun careful-discriminant (a b c)
   "Compute the discriminant for a quadratic equation."
   (check-type a number)
   (check-type b number)
   (check-type c number)
   (locally (declare (number a b c))
     (- (* b b) (* 4 a c)))) @EV{} CAREFUL-DISCRIMINANT
 (careful-discriminant 1 2/3 -2) @EV{} 76/9
@end lisp


@subsubheading See Also:

@ref{flet},
@ref{labels}, 
@ref{block},
@ref{return-from},
@ref{declare}, 
@ref{documentation},
@ref{Evaluation, Section 3.1 (Evaluation)},
@ref{Ordinary Lambda Lists, Section 3.4.1 (Ordinary Lambda Lists)},
@ref{Syntactic Interaction of Documentation Strings and Declarations, Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)}

@subsubheading Notes:
@code{return-from} can be used to return
prematurely from a @term{function} defined by @code{defun}.

Additional side effects might take place when additional information
(typically debugging information)
about the function definition is recorded. 



@node fdefinition
@heading fdefinition (Accessor)
@syindex fdefinition
@cindex fdefinition



@subsubheading Syntax:

@DefunWithValues{fdefinition, function-name, definition}
@Defsetf{fdefinition, function-name, new-definition}

@subsubheading Arguments and Values:

@param{function-name}---a @term{function name}.
In the non-@code{setf} case, 
the @term{name} must be @term{fbound} in the @term{global environment}.

@param{definition}---Current global function definition named by @param{function-name}.  

@param{new-definition}---a @term{function}.

@subsubheading Description:

@code{fdefinition} @term{accesses} the current global function definition
named by @param{function-name}.  The definition may be a
@term{function} or may be an @term{object} representing a 
@term{special form} or @term{macro}.
The value returned by @code{fdefinition} when @code{fboundp} returns true
but the @param{function-name} denotes a @term{macro} or 
@term{special form} is not well-defined, but @code{fdefinition} does not signal an error. 

@subsubheading Exceptional Situations:

@Shouldchecktype{function-name, a @term{function name}}

An error @oftype{undefined-function} is signaled 
in the non-@code{setf} case if @param{function-name} is not @term{fbound}.

@subsubheading See Also:

@ref{fboundp},
@ref{fmakunbound},
@ref{macro-function},
@ref{special-operator-p},
@ref{symbol-function}

@subsubheading Notes:

@code{fdefinition} cannot @term{access} the value of a lexical function name
produced by @code{flet} or @code{labels}; it can @term{access} only
the global function value.

@code{setf} can be used with 
@code{fdefinition} to replace a global function
definition when the @param{function-name}'s function definition 
does not represent a @term{special form}.
@code{setf} of @code{fdefinition} 
requires a @term{function} as the new value.
It is an error to set the @code{fdefinition} of a @param{function-name}
to a @term{symbol}, a @term{list}, or the value returned
by @code{fdefinition} on the name of a @term{macro} 
or @term{special form}.


@node fboundp
@heading fboundp (Function)
@syindex fboundp
@cindex fboundp


@subsubheading Syntax:

@DefunWithValues{fboundp, name, generalized-boolean}

@subsubheading Pronunciation:

@pronounced{@stress{ef}@Stress{ba\.und}p@harde{}}

@subsubheading Arguments and Values:

@param{name}---a @term{function name}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@Predicate{name, @term{fbound}}

@subsubheading Examples:

@lisp
 (fboundp 'car) @EV{} @term{true}
 (fboundp 'nth-value) @EV{} @term{false}
 (fboundp 'with-open-file) @EV{} @term{true}
 (fboundp 'unwind-protect) @EV{} @term{true}
 (defun my-function (x) x) @EV{} MY-FUNCTION
 (fboundp 'my-function) @EV{} @term{true}
 (let ((saved-definition (symbol-function 'my-function)))
   (unwind-protect (progn (fmakunbound 'my-function)
                          (fboundp 'my-function))
     (setf (symbol-function 'my-function) saved-definition)))
@EV{} @term{false}
 (fboundp 'my-function) @EV{} @term{true}
 (defmacro my-macro (x) `',x) @EV{} MY-MACRO
 (fboundp 'my-macro) @EV{} @term{true}
 (fmakunbound 'my-function) @EV{} MY-FUNCTION
 (fboundp 'my-function) @EV{} @term{false}
 (flet ((my-function (x) x))
   (fboundp 'my-function)) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{name, a @term{function name}}

@subsubheading See Also:

@ref{symbol-function}, @ref{fmakunbound}, @ref{fdefinition}

@subsubheading Notes:

It is permissible to call @code{symbol-function} on any @term{symbol}
that is @term{fbound}.

@code{fboundp} is sometimes used to ``guard''
an access to the @term{function cell}, as in:
@lisp
(if (fboundp x) (symbol-function x))
@end lisp


Defining a @term{setf expander} @param{F} does not cause the @term{setf function}
@f{(setf @param{F})} to become defined.


@node fmakunbound
@heading fmakunbound (Function)
@syindex fmakunbound
@cindex fmakunbound


@subsubheading Syntax:

@DefunWithValues{fmakunbound, name, name}

@subsubheading Pronunciation:

@pronounced{@stress{ef}@Stress{mak}@schwa{} n@stress{ba\.und}}
or @pronounced{@stress{ef}@Stress{m@harda{} k}@schwa{} n@stress{ba\.und}}

@subsubheading Arguments and Values:

@param{name}---a @term{function name}.

@subsubheading Description:

Removes the @term{function} or @term{macro} definition, if any, of @param{name} 
in the @term{global environment}.

@subsubheading Examples:

@lisp
(defun add-some (x) (+ x 19)) @EV{} ADD-SOME
 (fboundp 'add-some) @EV{} @term{true}
 (flet ((add-some (x) (+ x 37)))
    (fmakunbound 'add-some)
    (add-some 1)) @EV{} 38
 (fboundp 'add-some) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{name, a @term{function name}}

The consequences are undefined if @param{name} is a @term{special operator}.

@subsubheading See Also:

@ref{fboundp}, @ref{makunbound}


@node flet; labels; macrolet
@heading flet, labels, macrolet (Special Operator)
@syindex flet
@cindex flet
@syindex labels
@cindex labels
@syindex macrolet
@cindex macrolet
@anchor{flet}
@anchor{labels}
@anchor{macrolet}



@subsubheading Syntax:

@DefspecWithValuesNewline{flet, @vtop{@hbox{@paren{@starparen{@param{function-name}  @param{lambda-list} @LocalDeclsAndDoc{} @starparam{local-form}}}} @hbox{@starparam{declaration} @starparam{form}}}, @starparam{result}}

@DefspecWithValuesNewline{labels, @vtop{@hbox{@paren{@starparen{@param{function-name}  @param{lambda-list} @LocalDeclsAndDoc{} @starparam{local-form}}}} @hbox{@starparam{declaration} @starparam{form}}}, @starparam{result}}

@DefspecWithValuesNewline{macrolet, @vtop{@hbox{@paren{@starparen{@param{name}  @param{lambda-list} @LocalDeclsAndDoc{} @starparam{local-form}}}} @hbox{@starparam{declaration} @starparam{form}}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{function-name}---a @term{function name}.

@param{name}---a @term{symbol}.

@param{lambda-list}---a @term{lambda list}; 
for @code{flet} and @code{labels},
it is an @term{ordinary lambda list};
for @code{macrolet},
it is a @term{macro lambda list}.

@param{local-declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{local-documentation}---a @term{string}; @noeval{}.

@param{local-forms}, @param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} of the @param{forms}.

@subsubheading Description:

@code{flet}, @code{labels}, and @code{macrolet}
define local @term{functions} and @term{macros}, and execute
@param{forms} using the local definitions.
@param{Forms} are executed  in order of occurrence.

The body forms (but not the @term{lambda list})
of each @term{function} created by @code{flet} and @code{labels} 
and each @term{macro} created by @code{macrolet}
are enclosed in an @term{implicit block} whose name 
is the @term{function block name} of the @param{function-name} or @param{name}, 
as appropriate.

The scope of the @param{declarations}
between
the list of local function/macro definitions and the body @param{forms}
in @code{flet} and @code{labels} 
does not include the bodies of the
locally defined @term{functions}, except that for @code{labels},
any @code{inline}, @code{notinline}, or @code{ftype} declarations
that refer to the locally defined functions do apply to the local function
bodies. That is, their @term{scope} 
is the same as the function name that they
affect.  
The scope of these @param{declarations} 
does not include the bodies of the macro expander
functions defined by @code{macrolet}.  


@table @asis
@item @id{@bf{flet}}


@code{flet} defines locally named @term{functions} and executes a series of
@param{forms} with these definition @term{bindings}.  Any number of
such local @term{functions} can be defined.  

The @term{scope} of the name @term{binding} encompasses only the body.
Within the
body of @code{flet}, 
@param{function-names} matching those defined
by @code{flet} 
refer to the locally defined @term{functions} 
rather than to
the global function definitions of the same name.
Also, within the scope of @code{flet}, 
global @term{setf expander} definitions of the @param{function-name}
defined by @code{flet} do not apply. 
Note that this applies to 
@tt{(defsetf @i{f} ...)}, not
@tt{(defmethod (setf @i{f}) ...)}.

The names of @term{functions} defined by @code{flet} 
are in the @term{lexical environment}; they retain
their local definitions only within the body of @code{flet}.
The function definition bindings are visible only in
the body of @code{flet}, not the definitions themselves.  Within the
function definitions, local function names
that match those being
defined refer to @term{functions} or 
@term{macros} defined outside the @code{flet}.
@code{flet} can locally @term{shadow} a global function name,
and the new definition can refer to the global definition.

Any @param{local-documentation} is attached to the corresponding local @param{function}
(if one is actually created) as a @term{documentation string}.

@item @id{@bf{labels}}


@code{labels} is equivalent to @code{flet} except that
the scope of the defined function names for @code{labels} 
encompasses the function definitions themselves as well as the body.

@item @id{@bf{macrolet}}


@code{macrolet} 
establishes local @term{macro} definitions,
using the same format used by @code{defmacro}.

Within the body of @code{macrolet}, 
global @term{setf expander} definitions of the @param{names} defined by the 
@code{macrolet} do not apply; rather, @code{setf} expands the
@term{macro form} and recursively process the resulting @term{form}.

The macro-expansion functions defined by @code{macrolet} 
are defined in the 
@term{lexical environment} in which the @code{macrolet} form appears.
Declarations and @code{macrolet} and 
@code{symbol-macrolet} definitions
affect the local macro definitions in a @code{macrolet}, but the
consequences are undefined if the local macro definitions reference
any local @term{variable} or @term{function} @term{bindings} that are visible in that
@term{lexical environment}.

Any @param{local-documentation} is attached to the corresponding local @param{macro function}
as a @term{documentation string}.
@end table


@subsubheading Examples:

@lisp
 (defun foo (x flag)
   (macrolet ((fudge (z)
                 ;The parameters x and flag are not accessible
                 ; at this point; a reference to flag would be to
                 ; the global variable of that name.
                 @bq{}@spc{}(if flag (* ,z ,z) ,z)))
    ;The parameters x and flag are accessible here.
     (+ x
        (fudge x)
        (fudge (+ x 1)))))
 @EQ{}
 (defun foo (x flag)
   (+ x
      (if flag (* x x) x)
      (if flag (* (+ x 1) (+ x 1)) (+ x 1))))
@end lisp

after macro expansion.  The occurrences of @f{x} and @f{flag} legitimately
refer to the parameters of the function @f{foo} because those parameters are
visible at the site of the macro call which produced the expansion.


@lisp
 (flet ((flet1 (n) (+ n n)))
    (flet ((flet1 (n) (+ 2 (flet1 n))))
      (flet1 2))) @EV{} 6

 (defun dummy-function () 'top-level) @EV{} DUMMY-FUNCTION 
 (funcall #'dummy-function) @EV{} TOP-LEVEL 
 (flet ((dummy-function () 'shadow)) 
      (funcall #'dummy-function)) @EV{} SHADOW 
 (eq (funcall #'dummy-function) (funcall 'dummy-function))
@EV{} @term{true} 
 (flet ((dummy-function () 'shadow))
   (eq (funcall #'dummy-function)
       (funcall 'dummy-function)))
@EV{} @term{false} 

 (defun recursive-times (k n)
   (labels ((temp (n) 
              (if (zerop n) 0 (+ k (temp (1- n))))))
     (temp n))) @EV{} RECURSIVE-TIMES
 (recursive-times 2 3) @EV{} 6

 (defmacro mlets (x &environment env) 
    (let ((form `(babbit ,x)))
      (macroexpand form env))) @EV{} MLETS
 (macrolet ((babbit (z) `(+ ,z ,z))) (mlets 5)) @EV{} 10
@end lisp


@lisp
 (flet ((safesqrt (x) (sqrt (abs x))))
  ;; The safesqrt function is used in two places.
   (safesqrt (apply #'+ (map 'list #'safesqrt '(1 2 3 4 5 6)))))
@EV{} 3.291173
@end lisp


@lisp
 (defun integer-power (n k)     
   (declare (integer n))         
   (declare (type (integer 0 *) k))
   (labels ((expt0 (x k a)
              (declare (integer x a) (type (integer 0 *) k))
              (cond ((zerop k) a)
                    ((evenp k) (expt1 (* x x) (floor k 2) a))
                    (t (expt0 (* x x) (floor k 2) (* x a)))))
            (expt1 (x k a)
              (declare (integer x a) (type (integer 0 *) k))
              (cond ((evenp k) (expt1 (* x x) (floor k 2) a))
                    (t (expt0 (* x x) (floor k 2) (* x a))))))
    (expt0 n k 1))) @EV{} INTEGER-POWER
@end lisp


@lisp
 (defun example (y l)
   (flet ((attach (x)
            (setq l (append l (list x)))))
     (declare (inline attach))
     (dolist (x y)
       (unless (null (cdr x))
         (attach x)))
     l))

 (example '((a apple apricot) (b banana) (c cherry) (d) (e))
          '((1) (2) (3) (4 2) (5) (6 3 2)))
@EV{} ((1) (2) (3) (4 2) (5) (6 3 2) (A APPLE APRICOT) (B BANANA) (C CHERRY))
@end lisp


@subsubheading See Also:

@ref{declare},
@ref{defmacro},
@ref{defun},
@ref{documentation},
@ref{let},
@ref{Evaluation, Section 3.1 (Evaluation)},
@ref{Syntactic Interaction of Documentation Strings and Declarations, Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)}

@subsubheading Notes:

It is not possible to define recursive @term{functions} with @code{flet}.
@code{labels} can be used to define mutually recursive @term{functions}.

If a @code{macrolet} @term{form} is a @term{top level form},
the body @param{forms} are also processed as @term{top level forms}.
See @ref{File Compilation, Section 3.2.3 (File Compilation)}.



@node funcall
@heading funcall (Function)
@syindex funcall
@cindex funcall


@subsubheading Syntax:

@DefunWithValues{funcall, function @rest{} args, @starparam{result}}

@subsubheading Arguments and Values:

@param{function}---a @term{function designator}.

@param{args}---@term{arguments} to the @param{function}.

@param{results}---the @term{values} returned by the @param{function}.

@subsubheading Description:

@code{funcall} applies @param{function} to @param{args}.
If @param{function} is a @term{symbol},
it is coerced to a @term{function} as if by
finding its @term{functional value} in the @term{global environment}.

@subsubheading Examples:

@lisp
 (funcall #'+ 1 2 3) @EV{} 6
 (funcall 'car '(1 2 3)) @EV{} 1
 (funcall 'position 1 '(1 2 3 2 1) :start 1) @EV{} 4
 (cons 1 2) @EV{} (1 . 2)
 (flet ((cons (x y) `(kons ,x ,y)))
   (let ((cons (symbol-function '+)))
     (funcall #'cons
              (funcall 'cons 1 2)
              (funcall cons 1 2))))
@EV{} (KONS (1 . 2) 3)
@end lisp


@subsubheading Exceptional Situations:

An error @oftype{undefined-function} should be signaled if @param{function} 
is a @term{symbol} that does not have a global definition as a @term{function}
or that has a global definition as a @term{macro} or a @term{special operator}.

@subsubheading See Also:

@ref{apply}, @ref{function (Special Operator)}, @ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:

@lisp
 (funcall @param{function} @param{arg1} @param{arg2} ...)
 @EQ{} (apply @param{function} @param{arg1} @param{arg2} ... nil)
 @EQ{} (apply @param{function} (list @param{arg1} @param{arg2} ...))
@end lisp


The difference between @code{funcall} and an ordinary function call is that
in the former case the @param{function} is obtained by ordinary @term{evaluation}
of a @term{form}, and in the latter case it is obtained by the special 
interpretation of the function position that normally occurs.


@node function (Special Operator)
@heading function (Special Operator)
@syindex function
@cindex function



@subsubheading Syntax:

@DefspecWithValues{function, name, function}

@subsubheading Arguments and Values:

@param{name}---a @term{function name} or @term{lambda expression}.

@param{function}---a @term{function} @term{object}.

@subsubheading Description:

The @term{value} of @code{function} is the @term{functional value} of @param{name}
in the current @term{lexical environment}.

If @param{name} is a @term{function name}, the functional definition of that name
is that
established by the innermost lexically enclosing
@code{flet}, @code{labels}, or @code{macrolet} @term{form},
if there is one.  Otherwise the global functional definition of the
@term{function name}
is returned.

If @param{name} is a @term{lambda expression}, then a @term{lexical closure}
is returned.  In situations where a @term{closure} over the same set of
@term{bindings} might be produced more than once, the various resulting
@term{closures} might or might not be @code{eq}.

It is an error to use @code{function} on a @term{function name} 
that does not denote a @term{function} in the lexical environment in
which the @code{function} form appears. 
Specifically, it is an error to use @code{function} on a @term{symbol} 
that denotes a @term{macro} or @term{special form}.
An implementation may choose not to signal this error for
performance reasons, but implementations are forbidden from
defining the failure to signal an error as a useful behavior.

@subsubheading Examples:

@lisp
 (defun adder (x) (function (lambda (y) (+ x y))))
@end lisp

The result of @f{(adder 3)} is a function that adds @f{3} to its argument:

@lisp
 (setq add3 (adder 3))
 (funcall add3 5) @EV{} 8
@end lisp

This works because @code{function} creates a @term{closure} of
the @term{lambda expression} that is able to refer to the @term{value} @f{3}
of the variable @f{x} even after control has returned from the function @f{adder}.

@subsubheading See Also:

@ref{defun},
@ref{fdefinition},
@ref{flet},
@ref{labels},
@ref{symbol-function},
@ref{SymbolsAsForms, Section 3.1.2.1.1 (Symbols as Forms)},
@ref{SharpsignQuote, Section 2.4.8.2 (Sharpsign Single-Quote)},
@ref{PrintingOtherObjects, Section 22.1.3.13 (Printing Other Objects)}

@subsubheading Notes:

The notation @tt{#'@param{name}} may be used as an abbreviation
for @tt{(function @param{name})}.


@node function-lambda-expression
@heading function-lambda-expression (Function)
@syindex function-lambda-expression
@cindex function-lambda-expression



@subsubheading Syntax:

@DefunWithValuesNewline{function-lambda-expression, function, lambda-expression\, closure-p\, name}

@subsubheading Arguments and Values:

@param{function}---a @term{function}.

@param{lambda-expression}---a @term{lambda expression} or @nil{}.

@param{closure-p}---a @term{generalized boolean}.

@param{name}---an @term{object}.

@subsubheading Description:

Returns information about @param{function} as follows:

The @term{primary value}, @param{lambda-expression},
is @param{function}'s defining @term{lambda expression}, 
or @nil{}@spc{}if the information is not available.  The @term{lambda expression}
may have been pre-processed in some ways, but it should remain a suitable 
argument to @code{compile} or @code{function}.
Any @term{implementation} may legitimately return @nil{}@spc{}
as the @param{lambda-expression} of any @param{function}.

The @term{secondary value}, @param{closure-p},
is @nil{}@spc{}if @param{function}'s definition was enclosed
in the @term{null lexical environment} or something @term{non-nil} if
@param{function}'s definition might have been enclosed in some 
@term{non-null lexical environment}.
Any @term{implementation} may legitimately return @term{true}
as the @param{closure-p} of any @param{function}.

The @term{tertiary value}, @param{name},
is the ``name'' of @param{function}. 
The name is intended for debugging only and is not necessarily one that would
be valid for use as a name in @code{defun} or @code{function}, for example.
By convention, @nil{}@spc{}is used to mean that @param{function} has no name.
Any @term{implementation} may legitimately return @nil{}@spc{}
as the @param{name} of any @param{function}.


@subsubheading Examples:

The following examples illustrate some possible return values, but
are not intended to be exhaustive:

@lisp
 (function-lambda-expression #'(lambda (x) x))
@EV{} NIL, @term{false}, NIL
@OV{} NIL, @term{true}, NIL
@OV{} (LAMBDA (X) X), @term{true}, NIL
@OV{} (LAMBDA (X) X), @term{false}, NIL

 (function-lambda-expression
    (funcall #'(lambda () #'(lambda (x) x))))
@EV{} NIL, @term{false}, NIL
@OV{} NIL, @term{true}, NIL
@OV{} (LAMBDA (X) X), @term{true}, NIL
@OV{} (LAMBDA (X) X), @term{false}, NIL
 
 (function-lambda-expression 
    (funcall #'(lambda (x) #'(lambda () x)) nil))
@EV{} NIL, @term{true}, NIL
@OV{} (LAMBDA () X), @term{true}, NIL
@NV{} NIL, @term{false}, NIL
@NV{} (LAMBDA () X), @term{false}, NIL
  
 (flet ((foo (x) x))
   (setf (symbol-function 'bar) #'foo)
   (function-lambda-expression #'bar))
@EV{} NIL, @term{false}, NIL
@OV{} NIL, @term{true}, NIL
@OV{} (LAMBDA (X) (BLOCK FOO X)), @term{true}, NIL
@OV{} (LAMBDA (X) (BLOCK FOO X)), @term{false}, FOO
@OV{} (SI::BLOCK-LAMBDA FOO (X) X), @term{false}, FOO
 
 (defun foo ()
   (flet ((bar (x) x))
     #'bar))
 (function-lambda-expression (foo))
@EV{} NIL, @term{false}, NIL
@OV{} NIL, @term{true}, NIL
@OV{} (LAMBDA (X) (BLOCK BAR X)), @term{true}, NIL
@OV{} (LAMBDA (X) (BLOCK BAR X)), @term{true}, (:INTERNAL FOO 0 BAR)
@OV{} (LAMBDA (X) (BLOCK BAR X)), @term{false}, "BAR in FOO"
@end lisp


@subsubheading Notes:

Although @term{implementations} are free to return ``@nil{}, @term{true}, @nil{}'' in all cases, 
they are encouraged to return a @term{lambda expression} as the @term{primary value}
in the case where the argument was created by a call to @code{compile} 
or @code{eval} (as opposed to being created by @term{loading} a @term{compiled file}).



@node functionp
@heading functionp (Function)
@syindex functionp
@cindex functionp



@subsubheading Syntax:

@DefunWithValues{functionp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, function}

@subsubheading Examples:

@lisp
 (functionp 'append) @EV{} @term{false}
 (functionp #'append) @EV{} @term{true}
 (functionp (symbol-function 'append)) @EV{} @term{true}
 (flet ((f () 1)) (functionp #'f)) @EV{} @term{true}
 (functionp (compile nil '(lambda () 259))) @EV{} @term{true}
 (functionp nil) @EV{} @term{false}
 (functionp 12) @EV{} @term{false}
 (functionp '(lambda (x) (* x x))) @EV{} @term{false}
 (functionp #'(lambda (x) (* x x))) @EV{} @term{true}
@end lisp


@subsubheading Notes:

@lisp
 (functionp @param{object}) @EQ{} (typep @param{object} 'function)
@end lisp




@node compiled-function-p
@heading compiled-function-p (Function)
@syindex compiled-function-p
@cindex compiled-function-p


@subsubheading Syntax:

@DefunWithValues{compiled-function-p, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, compiled-function}

@subsubheading Examples:

@lisp
 (defun f (x) x) @EV{} F
 (compiled-function-p #'f)
@EV{} @term{false}
@OV{} @term{true}
 (compiled-function-p 'f) @EV{} @term{false}
 (compile 'f) @EV{} F
 (compiled-function-p #'f) @EV{} @term{true}
 (compiled-function-p 'f) @EV{} @term{false}
 (compiled-function-p (compile nil '(lambda (x) x)))
@EV{} @term{true}
 (compiled-function-p #'(lambda (x) x))
@EV{} @term{false}
@OV{} @term{true}
 (compiled-function-p '(lambda (x) x)) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{compile},
@ref{compile-file},
@ref{compiled-function}

@subsubheading Notes:

@lisp
 (compiled-function-p @param{object}) @EQ{} (typep @param{object} 'compiled-function)
@end lisp



@node call-arguments-limit
@heading call-arguments-limit (Constant Variable)
@syindex call-arguments-limit
@cindex call-arguments-limit


@subsubheading Constant Value:

An integer not smaller than @f{50} and at least as great as 
the @term{value} of @code{lambda-parameters-limit}, 
the exact magnitude of which is @term{implementation-dependent}.

@subsubheading Description:

The upper exclusive bound on the number of @term{arguments} that 
may be passed to a @term{function}.

@subsubheading See Also:

@ref{lambda-parameters-limit}, @ref{multiple-values-limit}


@node lambda-list-keywords
@heading lambda-list-keywords (Constant Variable)
@syindex lambda-list-keywords
@cindex lambda-list-keywords


@subsubheading Constant Value:

a @term{list}, the @term{elements} of which are @term{implementation-dependent}, 
but which must contain at least the @term{symbols} 
@keyref{allow-other-keys},
@keyref{aux},
@keyref{body},
@keyref{environment},
@keyref{key},
@keyref{optional},
@keyref{rest},
and
@keyref{whole}.

@subsubheading Description:

A @term{list} of all the @term{lambda list keywords} used 
in the @term{implementation}, including the additional ones
used only by @term{macro} definition @term{forms}.

@subsubheading See Also:

@ref{defun},
@ref{flet},
@ref{defmacro},
@ref{macrolet},
@ref{The Evaluation Model, Section 3.1.2 (The Evaluation Model)}


@node lambda-parameters-limit
@heading lambda-parameters-limit (Constant Variable)
@syindex lambda-parameters-limit
@cindex lambda-parameters-limit


@subsubheading Constant Value:

@term{implementation-dependent}, but not smaller than @f{50}.

@subsubheading Description:

A positive @term{integer} that is the upper exclusive bound on 
the number of @term{parameter} @term{names} that can appear 
in a single @term{lambda list}.

@subsubheading See Also:

@ref{call-arguments-limit}

@subsubheading Notes:

Implementors are encouraged to make the @term{value} of
@code{lambda-parameters-limit} as large as possible.


@node defconstant
@heading defconstant (Macro)
@syindex defconstant
@cindex defconstant


@subsubheading Syntax:

@DefmacWithValues{defconstant, name initial-value @brac{documentation}, name}

@subsubheading Arguments and Values:

@param{name}---a @term{symbol}; @noeval{}.

@param{initial-value}---a @term{form}; @eval{}.

@param{documentation}---a @term{string}; @noeval{}.

@subsubheading Description:

@code{defconstant} 
causes the global variable named by @param{name} to be 
given a value that is the result of evaluating @param{initial-value}.

A constant defined by @code{defconstant} can be redefined
with @code{defconstant}.
However, the consequences are undefined if an attempt is made to assign
a @term{value} to the @term{symbol} using another operator, or to
assign it to a @term{different}
@term{value} using a subsequent
@code{defconstant}.

If @param{documentation} is supplied, it is attached to @param{name} as a
@term{documentation string} of kind @t{variable}. 

@code{defconstant} 
normally appears as a @term{top level form}, but it is meaningful
for it to appear as a @term{non-top-level form}.
However, the compile-time side
effects described below
only take place when @code{defconstant} appears as a 
@term{top level form}.


The consequences are undefined if there are any 
@term{bindings}
of the variable named by @param{name} at the time @code{defconstant} 
is executed or if the value is not @code{eql} to the value of
@param{initial-value}.

The consequences are undefined when constant @term{symbols} are rebound
as either lexical or dynamic variables.  In other words, a reference to a
@term{symbol} declared with @code{defconstant} always refers to its global value.

The side effects of the execution of @code{defconstant} must
be equivalent to at least the side effects of the execution of the following
code:

@lisp
 (setf (symbol-value '@i{name}) @i{initial-value})
 (setf (documentation '@i{name} 'variable) '@i{documentation})
@end lisp


If a @code{defconstant} @term{form} appears as a @term{top level form},
the @term{compiler} must recognize that @param{name} names
a @term{constant variable}.  An implementation may choose to
evaluate the value-form at compile time, load time, or both.
Therefore, users must ensure that the @param{initial-value}
can be @term{evaluated} at compile time
(regardless of whether or not references to @param{name}
appear in the file) and that it always @term{evaluates}
to the same value.

@editornote{KMP: Does ``same value'' here mean eql or similar?}
@reviewer{Moon: Probably depends on whether load time is compared to compile time,
or two compiles.}

@subsubheading Examples:
@lisp
 (defconstant this-is-a-constant 'never-changing "for a test") @EV{} THIS-IS-A-CONSTANT
this-is-a-constant @EV{} NEVER-CHANGING
 (documentation 'this-is-a-constant 'variable) @EV{} "for a test"
 (constantp 'this-is-a-constant) @EV{} @term{true}
@end lisp


@subsubheading See Also:

@ref{declaim},
@ref{defparameter}, 
@ref{defvar},
@ref{documentation},
@ref{proclaim},
@ref{ConstantVars, Section 3.1.2.1.1.3 (Constant Variables)},
@ref{Compilation, Section 3.2 (Compilation)}


@node defparameter; defvar
@heading defparameter, defvar (Macro)
@syindex defparameter
@cindex defparameter
@syindex defvar
@cindex defvar
@anchor{defparameter}
@anchor{defvar}


@subsubheading Syntax:

@DefmacWithValues{defparameter, name         initial-value @brac{documentation} , name}
@DefmacWithValues{defvar, name @ttbrac{initial-value @brac{documentation}}, name}

@subsubheading Arguments and Values:

@param{name}---a @term{symbol}; @noeval{}.


@param{initial-value}---a @term{form}; 
for @code{defparameter}, it is always @term{evaluated},
but for @code{defvar} it is @term{evaluated} 
only if @param{name} is not already @term{bound}.

@param{documentation}---a @param{string}; @noeval{}.

@subsubheading Description:

@code{defparameter} and @code{defvar} @term{establish} @param{name} 
as a @term{dynamic variable}.

@code{defparameter} unconditionally
@term{assigns} the @param{initial-value} to the @term{dynamic variable} named @param{name}.
@code{defvar}, by contrast, @term{assigns} @param{initial-value} (if supplied) 
to the @term{dynamic variable} named @param{name} 
only if @param{name} is not already @term{bound}.

If no @param{initial-value} is supplied,
@code{defvar} leaves the @term{value cell} of 
the @term{dynamic variable} named @param{name} undisturbed;
if @param{name} was previously @term{bound}, its old @term{value} persists,
and if it was previously @term{unbound}, it remains @term{unbound}.

If @param{documentation} is supplied, it is attached to @param{name} as a
@term{documentation string} of kind @t{variable}. 

@code{defparameter} and @code{defvar} normally appear as a @term{top level form}, 
but it is meaningful for them to appear as @term{non-top-level forms}.  However,
the compile-time side effects described below only take place when
they appear as @term{top level forms}.

@subsubheading Examples:

@lisp
 (defparameter *p* 1) @EV{} *P*
 *p* @EV{} 1
 (constantp '*p*) @EV{} @term{false}
 (setq *p* 2) @EV{} 2
 (defparameter *p* 3) @EV{} *P*
 *p* @EV{} 3

 (defvar *v* 1) @EV{} *V*
 *v* @EV{} 1
 (constantp '*v*) @EV{} @term{false}
 (setq *v* 2) @EV{} 2
 (defvar *v* 3) @EV{} *V*
 *v* @EV{} 2

 (defun foo ()
   (let ((*p* 'p) (*v* 'v))
     (bar))) @EV{} FOO
 (defun bar () (list *p* *v*)) @EV{} BAR
 (foo) @EV{} (P V)
@end lisp


The principal operational distinction between @code{defparameter} and @code{defvar}
is that @code{defparameter} makes an unconditional assignment to @param{name},
while @code{defvar} makes a conditional one.  In practice, this means that
@code{defparameter} is useful in situations where loading or reloading the definition
would want to pick up a new value of the variable, while @code{defvar} is used in
situations where the old value would want to be retained if the file were loaded or reloaded.
For example, one might create a file which contained:

@lisp
 (defvar *the-interesting-numbers* '())
 (defmacro define-interesting-number (name n)
   `(progn (defvar ,name ,n)
           (pushnew ,name *the-interesting-numbers*)
           ',name))
 (define-interesting-number *my-height* 168) ;cm
 (define-interesting-number *my-weight* 13)  ;stones
@end lisp


Here the initial value, @f{()}, for the variable @f{*the-interesting-numbers*}
is just a seed that we are never likely to want to reset to something else
once something has been grown from it.  As such, we have used @code{defvar} 
to avoid having the @f{*interesting-numbers*} information reset if the file is
loaded a second time.  It is true that the two calls to
@code{define-interesting-number} here would be reprocessed, but
if there were additional calls in another file, they would not be and that 
information would be lost.  On the other hand, consider the following code:

@lisp
 (defparameter *default-beep-count* 3)
 (defun beep (&optional (n *default-beep-count*))
   (dotimes (i n) (si:%beep 1000. 100000.) (sleep 0.1)))
@end lisp


Here we could easily imagine editing the code to change the initial value of
@f{*default-beep-count*}, and then reloading the file to pick up the new value.
In order to make value updating easy, we have used @code{defparameter}.

On the other hand, there is potential value to using @code{defvar} in this
situation.  For example, suppose that someone had predefined an alternate
value for @f{*default-beep-count*}, or had loaded the file and then manually
changed the value.  In both cases, if we had used @code{defvar} instead of
@code{defparameter}, those user preferences would not be overridden by
(re)loading the file.

The choice of whether to use @code{defparameter} or @code{defvar} has
visible consequences to programs, but is nevertheless often made for subjective
reasons.

@subsubheading Side Effects:

If a @code{defvar} or @code{defparameter} @term{form} appears as a @term{top level form},
the @term{compiler} must recognize that the @param{name} has been
proclaimed @code{special}.  However, it must neither @term{evaluate} 
the @param{initial-value} @term{form} nor @term{assign} the 
@term{dynamic variable} named @param{name} at compile time.

There may be additional (@term{implementation-defined}) compile-time or 
run-time side effects, as long as such effects do not interfere with the
correct operation of @term{conforming programs}.

@subsubheading Affected By:

@code{defvar} is affected by whether @param{name} is already @term{bound}.

@subsubheading See Also:

@ref{declaim}, 
@ref{defconstant},
@ref{documentation},
@ref{Compilation, Section 3.2 (Compilation)}

@subsubheading Notes:

It is customary to name @term{dynamic variables} with an @term{asterisk}
at the beginning and end of the name.  e.g., @f{*foo*} is a good name for
a @term{dynamic variable}, but not for a @term{lexical variable};
@f{foo} is a good name for a @term{lexical variable}, 
but not for a @term{dynamic variable}.
This naming convention is observed for all @term{defined names} in @clisp{};
however, neither @term{conforming programs} nor @term{conforming implementations}
are obliged to adhere to this convention.

The intent of the permission for additional side effects is to allow
@term{implementations} to do normal ``bookkeeping'' that accompanies
definitions.  For example, the @term{macro expansion} of a @code{defvar}
or @code{defparameter} @term{form} might include code that arranges to
record the name of the source file in which the definition occurs.

@code{defparameter} and @code{defvar} might be defined as follows:

@lisp
 (defmacro defparameter (name initial-value 
                         &optional (documentation nil documentation-p))
   `(progn (declaim (special ,name))
           (setf (symbol-value ',name) ,initial-value)
           ,(when documentation-p
              `(setf (documentation ',name 'variable) ',documentation))
           ',name))
 (defmacro defvar (name &optional
                        (initial-value nil initial-value-p)
                        (documentation nil documentation-p))
   `(progn (declaim (special ,name))
           ,(when initial-value-p
              `(unless (boundp ',name)
                 (setf (symbol-value ',name) ,initial-value)))
           ,(when documentation-p
              `(setf (documentation ',name 'variable) ',documentation))
           ',name))
@end lisp



@node destructuring-bind
@heading destructuring-bind (Macro)
@syindex destructuring-bind
@cindex destructuring-bind



@subsubheading Syntax:

@DefmacWithValuesNewline{destructuring-bind, lambda-list expression @starparam{declaration} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{lambda-list}---a @term{destructuring lambda list}.

@param{expression}---a @term{form}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}. 

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @term{forms}.

@subsubheading Description:

@code{destructuring-bind} binds the variables specified in @param{lambda-list}
to the corresponding values in the tree structure resulting from the evaluation 
of @param{expression}; then @code{destructuring-bind} evaluates @param{forms}.


The @param{lambda-list} supports destructuring as described in
@ref{Destructuring Lambda Lists, Section 3.4.5 (Destructuring Lambda Lists)}.

@subsubheading Examples:
@lisp
 (defun iota (n) (loop for i from 1 to n collect i))       ;helper
 (destructuring-bind ((a &optional (b 'bee)) one two three)
     `((alpha) ,@@(iota 3))
   (list a b three two one)) @EV{} (ALPHA BEE 3 2 1)
@end lisp



@subsubheading Exceptional Situations:

If the result of evaluating the @param{expression} does not match the 
destructuring pattern, an error @oftype{error} should be signaled. 

@subsubheading See Also:

@ref{macrolet}, @ref{defmacro}



@node let; let*
@heading let, let* (Special Operator)
@syindex let
@cindex let
@syindex let*
@cindex let*
@anchor{let}



@subsubheading Syntax:

@DefspecWithValues{let, @paren{@star{@VarValue{}}} @starparam{declaration} @starparam{form}, @starparam{result}}

@DefspecWithValues{let*, @paren{@star{@VarValue{}}} @starparam{declaration} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{symbol}.

@param{init-form}---a @term{form}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{form}---a @term{form}.

@param{results}---the @term{values} returned by the @term{forms}.

@subsubheading Description:

@code{let} and @code{let*}
create new variable @term{bindings} and
execute a series of @param{forms} that use these @term{bindings}.
@code{let} performs the @term{bindings} in parallel and 
@code{let*} does them sequentially.


The form

@lisp
 (let ((@param{var1} @param{init-form-1})
       (@param{var2} @param{init-form-2})
       ...
       (@param{varm} @param{init-form-m}))
   @param{declaration1}
   @param{declaration2}
   ...
   @param{declarationp}
   @param{form1}
   @param{form2}
   ...
   @param{formn})
@end lisp

first evaluates the expressions @param{init-form-1}, @param{init-form-2}, and so on,
in that order, saving the resulting values.
Then all of the variables @param{varj} are bound to the corresponding
values; each @term{binding} is lexical unless
there is a @code{special} declaration to the contrary.
The expressions @param{formk} are then evaluated
in order; the values of all but the last are discarded
(that is, the body of a @code{let} 
is an @term{implicit progn}).

@code{let*}
is similar to @code{let}, but the @term{bindings} of variables
are performed sequentially rather than in parallel.  
The expression for the @param{init-form} of a 
@param{var} can refer to @param{vars}
previously bound in the @code{let*}.

The form

@lisp
 (let* ((@param{var1} @param{init-form-1})
        (@param{var2} @param{init-form-2})
        ...
        (@param{varm} @param{init-form-m}))
   @param{declaration1}
   @param{declaration2}
   ...
   @param{declarationp}
   @param{form1}
   @param{form2}
   ...
   @param{formn})
@end lisp

first evaluates the expression @param{init-form-1}, then binds the variable
@param{var1} to that value; then it evaluates @param{init-form-2} and binds 
@param{var2}, and so on.
The expressions @param{formj} are then evaluated
in order; the values of all but the last are discarded
(that is, the body of @code{let*} is an implicit @code{progn}).

For both @code{let} and @code{let*},
if there is not an @param{init-form} associated with a @param{var},
@param{var} is initialized to @nil{}.  

The special form @code{let} 
has the property that the @term{scope} 
of the name binding does not include any
initial value form.
For @code{let*}, a variable's @term{scope} also includes the 
remaining initial value forms for subsequent variable bindings.

@subsubheading Examples:

@lisp
 (setq a 'top) @EV{} TOP
 (defun dummy-function () a) @EV{} DUMMY-FUNCTION
 (let ((a 'inside) (b a))
    (format nil "~S ~S ~S" a b (dummy-function))) @EV{} "INSIDE TOP TOP" 
 (let* ((a 'inside) (b a))
    (format nil "~S ~S ~S" a b (dummy-function))) @EV{} "INSIDE INSIDE TOP" 
 (let ((a 'inside) (b a))
    (declare (special a))
    (format nil "~S ~S ~S" a b (dummy-function))) @EV{} "INSIDE TOP INSIDE"
@end lisp


@medbreak{}
The code

@lisp
 (let (x)
   (declare (integer x))
   (setq x (gcd y z))
   ...)
@end lisp

is incorrect; although @f{x} is indeed set before it is used,
and is set to a value of the declared type @term{integer}, nevertheless
@f{x} initially takes on the value @nil{}@spc{}in violation of the type
declaration.

@subsubheading See Also:

@ref{progv}



@node progv
@heading progv (Special Operator)
@syindex progv
@cindex progv


@subsubheading Syntax:

@DefspecWithValues{progv, @param{symbols} @param{values} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{symbols}---a @term{list} of @term{symbols}; @eval{}.

@param{values}---a @term{list} of @term{objects}; @eval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @term{forms}.

@subsubheading Description:

@code{progv} creates new dynamic variable @term{bindings} and
executes each @param{form} using those @term{bindings}.
Each @param{form} is evaluated in  order.

@code{progv} allows @term{binding} one or more dynamic
variables whose names may be determined at run time.  
Each @param{form} is evaluated in order 
with the dynamic variables whose names are in 
@param{symbols} bound to corresponding @param{values}.
If too few @param{values} 
are supplied, the remaining @term{symbols} are bound and then
made to have no value. If too many @param{values} are
supplied, the excess values are ignored.
The @term{bindings} of the dynamic variables are undone on
exit from @code{progv}. 

@subsubheading Examples:
@lisp
 (setq *x* 1) @EV{} 1
 (progv '(*x*) '(2) *x*) @EV{} 2
 *x* @EV{} 1

Assuming *x* is not globally special,

 (let ((*x* 3)) 
    (progv '(*x*) '(4) 
      (list *x* (symbol-value '*x*)))) @EV{} (3 4)
@end lisp


@subsubheading See Also:

@ref{let}, @ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:

Among other things, @code{progv} is useful when writing 
interpreters for languages embedded in @Lisp{}; it provides a handle
on the mechanism for @term{binding} @term{dynamic variables}.


@node setq
@heading setq (Special Form)
@syindex setq
@cindex setq


@subsubheading Syntax:

@DefspecWithValues{setq, @stardown{pair}, result}

@auxbnf{pair, var form}

@subsubheading Pronunciation:

@pronounced{@Stress{set}@stress{ky@uumlaut{}}}

@subsubheading Arguments and Values:

@param{var}---a @term{symbol} naming a @term{variable} other than a @term{constant variable}.

@param{form}---a @term{form}.

@param{result}---the @term{primary value} of the last @param{form},
or @nil{}@spc{}if no @param{pairs} were supplied.

@subsubheading Description:

Assigns values to @term{variables}.

@f{(setq @i{var1} @i{form1} @i{var2} @i{form2} ...)}
is the simple variable assignment statement of @Lisp{}.
First @param{form1} is evaluated
and the result is stored in the variable @param{var1}, then @param{form2}
is evaluated and the result stored in @param{var2}, and so forth.
@code{setq} may be used for assignment of both lexical
and dynamic variables.

If any @param{var} refers to a @term{binding} 
made by @code{symbol-macrolet},
then that @param{var} is treated as if @code{setf}
(not @code{setq}) had been used.

@subsubheading Examples:

@lisp
 ;; A simple use of SETQ to establish values for variables.
 (setq a 1 b 2 c 3) @EV{} 3
 a @EV{} 1
 b @EV{} 2
 c @EV{} 3

 ;; Use of SETQ to update values by sequential assignment.
 (setq a (1+ b) b (1+ a) c (+ a b)) @EV{} 7
 a @EV{} 3
 b @EV{} 4
 c @EV{} 7

 ;; This illustrates the use of SETQ on a symbol macro.
 (let ((x (list 10 20 30)))
   (symbol-macrolet ((y (car x)) (z (cadr x)))
     (setq y (1+ z) z (1+ y))
     (list x y z)))
@EV{} ((21 22 30) 21 22)
@end lisp


@subsubheading Side Effects:

The @term{primary value} of each @param{form} is assigned to the corresponding @param{var}.

@subsubheading See Also:

@ref{psetq},
@ref{set},
@ref{setf}


@node psetq
@heading psetq (Macro)
@syindex psetq
@cindex psetq


@subsubheading Syntax:

@DefmacWithValues{psetq, @stardown{pair}, @nil{}}

@auxbnf{pair, var form}

@subsubheading Pronunciation:

@code{psetq}: @pronounced{@maybeStress{p@harde{}}@Stress{set}@stress{ky@uumlaut{}}}

@subsubheading Arguments and Values:

@param{var}---a @term{symbol} naming a @term{variable} other than a @term{constant variable}.

@param{form}---a @term{form}.

@subsubheading Description:

Assigns values to @term{variables}.

This is just like @code{setq}, except that the assignments 
happen ``in parallel.''  That is, first all of the forms are
evaluated, and only then are the variables set to the resulting values.
In this way, the assignment to one variable does not affect the value
computation of another in the way that would occur with @code{setq}'s 
sequential assignment.

If any @param{var} refers to a @term{binding} 
made by @code{symbol-macrolet},
then that @param{var} is treated as if @code{psetf} (not @code{psetq})
had been used.

@subsubheading Examples:

@lisp
 ;; A simple use of PSETQ to establish values for variables.
 ;; As a matter of style, many programmers would prefer SETQ 
 ;; in a simple situation like this where parallel assignment
 ;; is not needed, but the two have equivalent effect.
 (psetq a 1 b 2 c 3) @EV{} NIL
 a @EV{} 1
 b @EV{} 2
 c @EV{} 3

 ;; Use of PSETQ to update values by parallel assignment.
 ;; The effect here is very different than if SETQ had been used.
 (psetq a (1+ b) b (1+ a) c (+ a b)) @EV{} NIL
 a @EV{} 3
 b @EV{} 2
 c @EV{} 3

 ;; Use of PSETQ on a symbol macro.
 (let ((x (list 10 20 30)))
   (symbol-macrolet ((y (car x)) (z (cadr x)))
     (psetq y (1+ z) z (1+ y))
     (list x y z)))
@EV{} ((21 11 30) 21 11)

 ;; Use of parallel assignment to swap values of A and B.
 (let ((a 1) (b 2))
   (psetq a b  b a)
   (values a b))
@EV{} 2, 1
@end lisp


@subsubheading Side Effects:

The values of @param{forms} are assigned to @param{vars}.

@subsubheading See Also:

@ref{psetf},
@ref{setq}


@node block
@heading block (Special Operator)
@syindex block
@cindex block


@subsubheading Syntax:

@DefspecWithValues{block, @param{name} @star{@param{form}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{name}---a @term{symbol}.

@param{form}---a @term{form}.

@param{results}---the @term{values} of the @term{forms} if a @term{normal return} occurs,
or else, if an @term{explicit return} occurs, the @term{values} that were transferred.

@subsubheading Description:

@code{block} @term{establishes} a @term{block} named @param{name}
and then evaluates @param{forms} as an @term{implicit progn}.

The @term{special operators} @code{block} and @code{return-from} work together to
provide a structured, lexical, non-local exit facility.  At any point lexically
contained within @term{forms}, @code{return-from} can be used with the
given @param{name} to return control and values from the @code{block} 
@term{form}, except when an intervening @term{block} with the same name
has been @term{established}, in which case the outer @term{block} is 
shadowed by the inner one.

The @term{block} named @term{name} has
@term{lexical scope} and @term{dynamic extent}.  

Once established, a @term{block} may only be exited once, 
whether by @term{normal return} or @term{explicit return}.

@subsubheading Examples:

@lisp
 (block empty) @EV{} NIL
 (block whocares (values 1 2) (values 3 4)) @EV{} 3, 4
 (let ((x 1)) 
   (block stop (setq x 2) (return-from stop) (setq x 3))
   x) @EV{} 2
 (block early (return-from early (values 1 2)) (values 3 4)) @EV{} 1, 2
 (block outer (block inner (return-from outer 1)) 2) @EV{} 1
 (block twin (block twin (return-from twin 1)) 2) @EV{} 2
 ;; Contrast behavior of this example with corresponding example of CATCH.
 (block b
   (flet ((b1 () (return-from b 1)))
     (block b (b1) (print 'unreachable))
     2)) @EV{} 1
@end lisp


@subsubheading See Also:

@ref{return}, @ref{return-from}, @ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:


@node catch
@heading catch (Special Operator)
@syindex catch
@cindex catch


@subsubheading Syntax:

@DefspecWithValues{catch, @param{tag} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{tag}---a @term{catch tag}; @eval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---if the @param{forms} exit normally,
the @term{values} returned by the @param{forms};
if a throw occurs to the @param{tag},
the @term{values} that are thrown.

@subsubheading Description:

@code{catch} is used as the destination of a non-local 
control transfer by @code{throw}.
@param{Tags} are used to find the @code{catch}
to which a @code{throw} is transferring control.
@f{(catch 'foo @i{form})} catches a 
@f{(throw 'foo @i{form})} but not a
@f{(throw 'bar @i{form})}.

The order of execution of @code{catch} follows:
@cindex order of evaluation
@cindex evaluation order


@enumerate 1
@item @param{Tag} is evaluated.
It serves as the name of the
@code{catch}.  

@item @param{Forms} are then evaluated as an implicit @code{progn},
and the results of the last @param{form} are returned unless a 
@code{throw} occurs.

@item If a @code{throw} occurs 
during the execution of one of the @param{forms}, control
is transferred  to the @code{catch} @term{form} whose @param{tag} 
is @code{eq} to
the tag argument of the @code{throw}
and which is the most recently established @code{catch} with that 
@param{tag}.
No further evaluation of @param{forms} occurs.

@item The @param{tag} @term{established} 
by @code{catch} is @term{disestablished}
just before the results are returned.
@end enumerate


If during the execution of one of the @param{forms}, a @code{throw}
is executed whose tag is @code{eq} to the @code{catch} tag, 
then the values specified by the @code{throw} are
returned as the result of the dynamically most recently established
@code{catch} form with that tag.

The mechanism for @code{catch} and @code{throw} works even
if @code{throw} is not within the lexical scope of @code{catch}.
@code{throw} must occur within the @term{dynamic extent} 
of the @term{evaluation} of the body of a @code{catch} with a corresponding @param{tag}.

@subsubheading Examples:
@lisp
 (catch 'dummy-tag 1 2 (throw 'dummy-tag 3) 4) @EV{} 3
 (catch 'dummy-tag 1 2 3 4) @EV{} 4
 (defun throw-back (tag) (throw tag t)) @EV{} THROW-BACK
 (catch 'dummy-tag (throw-back 'dummy-tag) 2) @EV{} T

 ;; Contrast behavior of this example with corresponding example of BLOCK.
 (catch 'c
   (flet ((c1 () (throw 'c 1)))
     (catch 'c (c1) (print 'unreachable))
     2)) @EV{} 2
@end lisp


@subsubheading Exceptional Situations:
An error @oftype{control-error} is signaled
if @code{throw} is done
when there is no suitable @code{catch} @param{tag}. 
@subsubheading See Also:

@ref{throw}, @ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:

It is customary for @term{symbols} to be used
as @param{tags}, but any @term{object} is permitted.  
However, numbers should not be
used because the comparison is done using @code{eq}.

@code{catch} differs from @code{block} in that 
@code{catch}
tags have dynamic @term{scope} while 
@code{block} names have @term{lexical scope}.


@node go
@heading go (Special Operator)
@syindex go
@cindex go


@subsubheading Syntax:

@DefspecNoReturn{go, tag}

@subsubheading Arguments and Values:

@param{tag}---a @term{go tag}.

@subsubheading Description:

@code{go} transfers control to the point in the body 
of an enclosing @code{tagbody} form labeled by a
tag @code{eql} to @param{tag}.  
If there is no such @param{tag}  in the body, the
bodies of lexically containing @code{tagbody} @term{forms}
(if any) are examined as well.
If several tags are @code{eql} 
to @param{tag}, control is transferred to
whichever matching @param{tag} 
is contained in the innermost @code{tagbody} form that
contains the @code{go}.
The consequences are undefined
if there is no matching @param{tag} lexically visible
to the point of the @code{go}.

The transfer of control initiated by @code{go} is performed
as described in @ref{Transfer of Control to an Exit Point, Section 5.2 (Transfer of Control to an Exit Point)}.

@subsubheading Examples:
@lisp
 (tagbody
   (setq val 2)
   (go lp)
   (incf val 3)
   lp (incf val 4)) @EV{} NIL
 val @EV{} 6 
@end lisp





The following is in error because there is a normal exit 
of the @code{tagbody} before the 
@code{go} is executed.

@lisp
 (let ((a nil)) 
   (tagbody t (setq a #'(lambda () (go t))))
   (funcall a))
@end lisp


The following is in error because the @code{tagbody} is passed over
before the @code{go} @term{form} is executed.

@lisp
 (funcall (block nil
            (tagbody a (return #'(lambda () (go a))))))
@end lisp


@subsubheading See Also:

@ref{tagbody}


@node return-from
@heading return-from (Special Operator)
@syindex return-from
@cindex return-from


@subsubheading Syntax:

@DefspecNoReturn{return-from, @param{name} @brac{@param{result}}}

@subsubheading Arguments and Values:

@param{name}---a @term{block tag}; @noeval{}.

@param{result}---a @term{form}; @eval{}.
@Default{@nil{}}

@subsubheading Description:

Returns control and @term{multiple values}@sub2{} from a lexically enclosing @term{block}.

A @code{block} @term{form} named @param{name} must lexically enclose
the occurrence of @code{return-from};  any @term{values} @term{yielded}
by the @term{evaluation} of @param{result} are immediately returned from
the innermost such lexically enclosing @term{block}.

The transfer of control initiated by @code{return-from} is performed
as described in @ref{Transfer of Control to an Exit Point, Section 5.2 (Transfer of Control to an Exit Point)}.

@subsubheading Examples:

@lisp
 (block alpha (return-from alpha) 1) @EV{} NIL
 (block alpha (return-from alpha 1) 2) @EV{} 1
 (block alpha (return-from alpha (values 1 2)) 3) @EV{} 1, 2
 (let ((a 0))
    (dotimes (i 10) (incf a) (when (oddp i) (return)))
    a) @EV{} 2
 (defun temp (x)
    (if x (return-from temp 'dummy))
    44) @EV{} TEMP
 (temp nil) @EV{} 44
 (temp t) @EV{} DUMMY
 (block out
   (flet ((exit (n) (return-from out n)))
     (block out (exit 1)))
   2) @EV{} 1
 (block nil   
   (unwind-protect (return-from nil 1)
     (return-from nil 2)))
@EV{} 2
 (dolist (flag '(nil t))
   (block nil
     (let ((x 5))
       (declare (special x))
       (unwind-protect (return-from nil)
         (print x))))
   (print 'here))
@OUT{} 5
@OUT{} HERE
@OUT{} 5
@OUT{} HERE
@EV{} NIL
 (dolist (flag '(nil t))
   (block nil
     (let ((x 5))
       (declare (special x))
       (unwind-protect
           (if flag (return-from nil))
         (print x))))
   (print 'here))
@OUT{} 5
@OUT{} HERE
@OUT{} 5
@OUT{} HERE
@EV{} NIL
@end lisp


The following has undefined consequences because the @code{block} @term{form}
exits normally before the @code{return-from} @term{form} is attempted.

@lisp
 (funcall (block nil #'(lambda () (return-from nil)))) is an error.
@end lisp



@subsubheading See Also:

@ref{block},
@ref{return},
@ref{Evaluation, Section 3.1 (Evaluation)}


@node return
@heading return (Macro)
@syindex return
@cindex return


@subsubheading Syntax:

@DefmacNoReturn{return, @brac{@param{result}}}

@subsubheading Arguments and Values:

@param{result}---a @term{form}; @eval{}.
@Default{@nil{}}

@subsubheading Description:

Returns, as if by @code{return-from}, from the @term{block} named @nil{}.

@subsubheading Examples:

@lisp
 (block nil (return) 1) @EV{} NIL
 (block nil (return 1) 2) @EV{} 1
 (block nil (return (values 1 2)) 3) @EV{} 1, 2
 (block nil (block alpha (return 1) 2)) @EV{} 1
 (block alpha (block nil (return 1)) 2) @EV{} 2
 (block nil (block nil (return 1) 2)) @EV{} 1
@end lisp


@subsubheading See Also:

@ref{block},
@ref{return-from},
@ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:

@lisp
 (return) @EQ{} (return-from nil)
 (return @param{form}) @EQ{} (return-from nil @param{form})
@end lisp


The @term{implicit blocks} @term{established} by @term{macros} such as @code{do}
are often named @nil{}, so that @code{return} can be used to exit from
such @term{forms}.


@node tagbody
@heading tagbody (Special Operator)
@syindex tagbody
@cindex tagbody


@subsubheading Syntax:

@DefspecWithValues{tagbody, @star{@curly{@param{tag} | @param{statement}}}, @nil{}}

@subsubheading Arguments and Values:

@param{tag}---a @term{go tag}; @noeval{}.

@param{statement}---a @term{compound form}; @evalspecial{}.

@subsubheading Description:

Executes zero or more @term{statements} in a 
@term{lexical environment}
that provides for control transfers to labels indicated by the @param{tags}.

The @param{statements} in a @code{tagbody} are @term{evaluated} in order
from left to right, and their @term{values} are discarded.  If at any time
there are no remaining @param{statements}, @code{tagbody} returns @nil{}.
However, if @f{(go @param{tag})} is @term{evaluated}, control jumps to the
part of the body labeled with the @param{tag}.  (Tags are compared with @code{eql}.)

A @param{tag} established by @code{tagbody} has @term{lexical scope}
and has @term{dynamic extent}.  Once @code{tagbody} has been exited,
it is no longer valid to @code{go} to a @param{tag} in its body.
It is permissible for @code{go} to jump to a @code{tagbody} that is 
not the innermost @code{tagbody} containing that @code{go};
the @param{tags} established by a @code{tagbody} only shadow
other @param{tags} of like name.

The determination of which elements of the body are @param{tags} 
and which are @param{statements} is made prior to any @term{macro expansion}
of that element.  If a @param{statement} is a @term{macro form} and
its @term{macro expansion} is an @term{atom}, that @term{atom} is treated
as a @param{statement}, not a @param{tag}.

@subsubheading Examples:

@lisp
 (let (val)
    (tagbody
      (setq val 1)
      (go point-a)
      (incf val 16)
     point-c
      (incf val 04)
      (go point-b)
      (incf val 32)
     point-a
      (incf val 02)
      (go point-c)
      (incf val 64)
     point-b
      (incf val 08))
    val)
@EV{} 15
 (defun f1 (flag)
   (let ((n 1))
     (tagbody 
       (setq n (f2 flag #'(lambda () (go out))))
      out
       (prin1 n))))
@EV{} F1
 (defun f2 (flag escape)
   (if flag (funcall escape) 2))
@EV{} F2
 (f1 nil)
@OUT{} 2
@EV{} NIL
 (f1 t)
@OUT{} 1
@EV{} NIL
@end lisp


@subsubheading See Also:

@ref{go}

@subsubheading Notes:

The @term{macros} in @thenextfigure{}@spc{}have @term{implicit tagbodies}.


@float Figure,fig5.10
@cartouche
@multitable{do-all-symbols}{do-external-symbols}{dotimes}

@item do @tab do-external-symbols @tab dotimes
@item do* @tab do-symbols @tab prog
@item do-all-symbols @tab dolist @tab prog*
@end multitable
@end cartouche
@caption{Macros that have implicit tagbodies.}
@end float



@node throw
@heading throw (Special Operator)
@syindex throw
@cindex throw


@subsubheading Syntax:

@DefspecNoReturn{throw, tag result-form}

@subsubheading Arguments and Values:

@param{tag}---a @term{catch tag}; @eval{}.

@param{result-form}---a @term{form}; @evalspecial{}.

@subsubheading Description:

@code{throw} causes a non-local control transfer
to a @code{catch} whose tag is @code{eq} to @param{tag}. 

@param{Tag} is evaluated first to produce an @term{object}
called the throw tag; then @param{result-form} is evaluated,
and its results are saved. If the @param{result-form} produces
multiple values, then all the values are saved.
The most recent outstanding @code{catch} 
whose @param{tag} is @code{eq} to the throw tag
is exited; the saved results are returned as the value or 
values of @code{catch}.

The transfer of control initiated by @code{throw} is performed
as described in @ref{Transfer of Control to an Exit Point, Section 5.2 (Transfer of Control to an Exit Point)}.

@subsubheading Examples:

@lisp
 (catch 'result
    (setq i 0 j 0)
    (loop (incf j 3) (incf i)
          (if (= i 3) (throw 'result (values i j))))) @EV{} 3, 9

@end lisp


@lisp
 (catch nil 
   (unwind-protect (throw nil 1)
     (throw nil 2))) @EV{} 2
@end lisp


The consequences of the following are undefined 
because the @code{catch} of @f{b} 
is passed over by the first @code{throw}, 
hence portable programs must assume that 
its @term{dynamic extent} is terminated. 
The @term{binding} of the @term{catch tag} is not yet @term{disestablished}
and therefore it is the target of the second @code{throw}.

@lisp
 (catch 'a
   (catch 'b
     (unwind-protect (throw 'a 1)
       (throw 'b 2))))
@end lisp


The following prints ``@f{The inner catch returns :SECOND-THROW}''
and then returns @f{:outer-catch}.

@lisp
 (catch 'foo
         (format t "The inner catch returns ~s.~%"
                 (catch 'foo
                     (unwind-protect (throw 'foo :first-throw)
                         (throw 'foo :second-throw))))
         :outer-catch)
@OUT{} The inner catch returns :SECOND-THROW
@EV{} :OUTER-CATCH
@end lisp




@subsubheading Exceptional Situations:

If there is no outstanding @term{catch tag} that matches the throw tag,
no unwinding of the stack is performed,
and an error @oftype{control-error} is signaled.
When the error is signaled, 
the @term{dynamic environment} is that which was
in force at the point of the @code{throw}.

@subsubheading See Also:

@ref{block},
@ref{catch},
@ref{return-from},
@ref{unwind-protect},
@ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:

@code{catch} and @code{throw} are normally used when the @term{exit point}
must have @term{dynamic scope} (@eg{} the @code{throw} is not lexically enclosed
by the @code{catch}), while @code{block} and @code{return} are used 
when @term{lexical scope} is sufficient.


@node unwind-protect
@heading unwind-protect (Special Operator)
@syindex unwind-protect
@cindex unwind-protect


@subsubheading Syntax:

@DefspecWithValues{unwind-protect, @param{protected-form} @starparam{cleanup-form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{protected-form}---a @term{form}.

@param{cleanup-form}---a @term{form}.

@param{results}---the @term{values} of the @term{protected-form}.

@subsubheading Description:
@code{unwind-protect} evaluates @param{protected-form}
and guarantees that @param{cleanup-forms} are executed
before @code{unwind-protect} exits,
whether it terminates
normally or is aborted by a control transfer of some kind. 
@code{unwind-protect} is intended to be used
to make sure that
certain side effects take place after the evaluation of 
@param{protected-form}.

If a @term{non-local exit} occurs during execution of @param{cleanup-forms},
no special action is taken.  The @param{cleanup-forms} of 
@code{unwind-protect}
are not protected by that @code{unwind-protect}.

@code{unwind-protect} protects against all attempts to exit 
from @param{protected-form}, including
@code{go},
@code{handler-case},
@code{ignore-errors},
@code{restart-case},
@code{return-from},
@code{throw},
and @code{with-simple-restart}.

Undoing of @term{handler} and @term{restart} @term{bindings} during an exit
happens in parallel with the undoing of the bindings of @term{dynamic variables}
and @code{catch} tags, in the reverse order in which they were established.
The effect of this is that @param{cleanup-form} sees the same @term{handler}
and @term{restart} @term{bindings}, as well as @term{dynamic variable} @term{bindings}
and @code{catch} tags, as were visible when the @code{unwind-protect} was entered.

@subsubheading Examples:
@lisp
 (tagbody
   (let ((x 3))
     (unwind-protect
       (if (numberp x) (go out))
       (print x)))
  out
   ...)
@end lisp

When @code{go} is executed, the call to @code{print} is executed first,
and then the transfer of control to the tag @f{out} is completed.

@lisp
 (defun dummy-function (x)
    (setq state 'running)
    (unless (numberp x) (throw 'abort 'not-a-number))
    (setq state (1+ x))) @EV{} DUMMY-FUNCTION
 (catch 'abort (dummy-function 1)) @EV{} 2
 state @EV{} 2
 (catch 'abort (dummy-function 'trash)) @EV{} NOT-A-NUMBER
 state @EV{} RUNNING
 (catch 'abort (unwind-protect (dummy-function 'trash) 
                  (setq state 'aborted))) @EV{} NOT-A-NUMBER
 state @EV{} ABORTED
@end lisp


The following code
is not correct:

@lisp
 (unwind-protect
   (progn (incf *access-count*)
          (perform-access))
   (decf *access-count*))
@end lisp

If an exit occurs before completion of @code{incf},
the @code{decf} @term{form} is executed anyway, resulting in an
incorrect value for @f{*access-count*}.
The correct way to code this is as follows:

@lisp
 (let ((old-count *access-count*))
   (unwind-protect
     (progn (incf *access-count*)
            (perform-access))
     (setq *access-count* old-count)))
@end lisp



@lisp
;;; The following returns 2.
 (block nil   
   (unwind-protect (return 1)
     (return 2)))
 
;;; The following has undefined consequences.
 (block a    
   (block b
     (unwind-protect (return-from a 1)
       (return-from b 2))))
 
;;; The following returns 2.
 (catch nil 
   (unwind-protect (throw nil 1)
     (throw nil 2)))
 
;;; The following has undefined consequences because the catch of B is 
;;; passed over by the first THROW, hence portable programs must assume 
;;; its dynamic extent is terminated.  The binding of the catch tag is not
;;; yet disestablished and therefore it is the target of the second throw.
 (catch 'a
   (catch 'b
     (unwind-protect (throw 'a 1)
       (throw 'b 2))))
 
;;; The following prints "The inner catch returns :SECOND-THROW"
;;; and then returns :OUTER-CATCH.
 (catch 'foo
         (format t "The inner catch returns ~s.~%"
                 (catch 'foo
                     (unwind-protect (throw 'foo :first-throw)
                         (throw 'foo :second-throw))))
         :outer-catch)
 
 
;;; The following returns 10. The inner CATCH of A is passed over, but 
;;; because that CATCH is disestablished before the THROW to A is executed,
;;; it isn't seen.
 (catch 'a
   (catch 'b
     (unwind-protect (1+ (catch 'a (throw 'b 1)))
       (throw 'a 10))))
 
 
;;; The following has undefined consequences because the extent of
;;; the (CATCH 'BAR ...) exit ends when the (THROW 'FOO ...)
;;; commences.
 (catch 'foo
   (catch 'bar
       (unwind-protect (throw 'foo 3)
         (throw 'bar 4)
         (print 'xxx))))
 
 
;;; The following returns 4; XXX is not printed.
;;; The (THROW 'FOO ...) has no effect on the scope of the BAR
;;; catch tag or the extent of the (CATCH 'BAR ...) exit.
 (catch 'bar
   (catch 'foo
       (unwind-protect (throw 'foo 3)
         (throw 'bar 4)
         (print 'xxx))))
 
 
;;; The following prints 5.
 (block nil
   (let ((x 5))
     (declare (special x))
     (unwind-protect (return)
       (print x))))          
@end lisp


@subsubheading See Also:

@ref{catch},
@ref{go},
@ref{handler-case},
@ref{restart-case},
@ref{return}, 
@ref{return-from},
@ref{throw},
@ref{Evaluation, Section 3.1 (Evaluation)}


@node nil (Constant Variable)
@heading nil (Constant Variable)
@syindex nil
@cindex nil


@subsubheading Constant Value:

@nil{}.

@subsubheading Description:

@nil{}@spc{}represents both @term{boolean} (and @term{generalized boolean}) @term{false}
and the @term{empty list}.

@subsubheading Examples:
@lisp
 nil @EV{} NIL 
@end lisp


@subsubheading See Also:

@ref{t (Constant Variable)}


@node not (Function)
@heading not (Function)
@syindex not
@cindex not



@subsubheading Syntax:

@DefunWithValues{not, x, boolean}

@subsubheading Arguments and Values:

@param{x}---a @term{generalized boolean} (@ie{} any @term{object}).

@param{boolean}---a @term{boolean}.

@subsubheading Description:

@StrictPredicate{x, @term{false}}

@subsubheading Examples:

@lisp
 (not nil) @EV{} T
 (not '()) @EV{} T
 (not (integerp 'sss)) @EV{} T
 (not (integerp 1)) @EV{} NIL
 (not 3.7) @EV{} NIL
 (not 'apple) @EV{} NIL
@end lisp



@subsubheading See Also:

@ref{null (Function)}

@subsubheading Notes:

@code{not} is intended to be used to invert the `truth value' of a @term{boolean}
(or @term{generalized boolean})
whereas @code{null} is intended to be used to test for the @term{empty list}.
Operationally, @code{not} and @code{null} compute the same result;
which to use is a matter of style.


@node t (Constant Variable)
@heading t (Constant Variable)
@syindex t
@cindex t


@subsubheading Constant Value:

@t{t}.

@subsubheading Description:

The @term{boolean} representing true, 
and the canonical @term{generalized boolean} representing true.
Although any @term{object} 
other than @nil{}@spc{}is considered @term{true},
@code{t}@spc{}is generally used when there is no special reason 
to prefer one such @term{object} over another.

The @term{symbol} @code{t}@spc{}is also sometimes used for other purposes as well.
For example,
as the @term{name} of a @term{class},
as a @term{designator} (@eg{} a @term{stream designator})
or as a special symbol for some syntactic reason 
(@eg{} in @code{case} and @code{typecase} to label the @param{otherwise-clause}).

@subsubheading Examples:

@lisp
 t @EV{} T 
 (eq t 't) @EV{} @term{true}
 (find-class 't) @EV{} #<CLASS T 610703333>
 (case 'a (a 1) (t 2)) @EV{} 1
 (case 'b (a 1) (t 2)) @EV{} 2
 (prin1 'hello t)
@OUT{} HELLO
@EV{} HELLO
@end lisp


@subsubheading See Also:

@ref{nil (Constant Variable)}


@node eq
@heading eq (Function)
@syindex eq
@cindex eq


@subsubheading Syntax:

@DefunWithValues{eq, x y, generalized-boolean}

@subsubheading Arguments and Values:

@param{x}---an @term{object}.

@param{y}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Returns @term{true} if its @term{arguments} are the same, identical @term{object};
otherwise, returns @term{false}.

@subsubheading Examples:
@lisp
 (eq 'a 'b) @EV{} @term{false}
 (eq 'a 'a) @EV{} @term{true}
 (eq 3 3)
@EV{} @term{true}
@OV{} @term{false}
 (eq 3 3.0) @EV{} @term{false}
 (eq 3.0 3.0)
@EV{} @term{true}
@OV{} @term{false}
 (eq #c(3 -4) #c(3 -4))
@EV{} @term{true}
@OV{} @term{false}
 (eq #c(3 -4.0) #c(3 -4)) @EV{} @term{false}
 (eq (cons 'a 'b) (cons 'a 'c)) @EV{} @term{false}
 (eq (cons 'a 'b) (cons 'a 'b)) @EV{} @term{false}
 (eq '(a . b) '(a . b))
@EV{} @term{true}
@OV{} @term{false}
 (progn (setq x (cons 'a 'b)) (eq x x)) @EV{} @term{true}
 (progn (setq x '(a . b)) (eq x x)) @EV{} @term{true}
 (eq #@bsl{}A #@bsl{}A)
@EV{} @term{true}
@OV{} @term{false}
 (let ((x "Foo")) (eq x x)) @EV{} @term{true}
 (eq "Foo" "Foo")
@EV{} @term{true}
@OV{} @term{false}
 (eq "Foo" (copy-seq "Foo")) @EV{} @term{false}
 (eq "FOO" "foo") @EV{} @term{false}
 (eq "string-seq" (copy-seq "string-seq")) @EV{} @term{false}
 (let ((x 5)) (eq x x))
@EV{} @term{true}
@OV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{eql (Function)},
@ref{equal},
@ref{equalp},
@ref{=},
@ref{Compilation, Section 3.2 (Compilation)}

@subsubheading Notes:
@term{Objects} that appear the same when printed are not necessarily
@code{eq} to each other.  @term{Symbols} that print the same 
usually are @code{eq} to each other because of the use of the
@code{intern} function.  However, @term{numbers} with the 
same value need not be @code{eq}, and two similar
@term{lists} are usually not @term{identical}.

An implementation is permitted to make ``copies'' of 
@term{characters} and @term{numbers} at any time.  
The effect is that @clisp{}@spc{}makes no guarantee that @code{eq} 
is true even when both its arguments are ``the same thing'' if 
that thing is a @term{character} or @term{number}.

Most @clisp{}@spc{}@term{operators} use @code{eql} rather than
@code{eq} to compare objects, or else they default to @code{eql}
and only use @code{eq} if specifically requested to do so.
However, the following @term{operators} are defined to use @code{eq}
rather than @code{eql} in a way that cannot be overridden by the
@term{code} which employs them:


@float Figure,fig5.11
@cartouche
@multitable{get-properties}{remprop}{throw}

@item catch @tab getf @tab throw
@item get @tab remf @tab 
@item get-properties @tab remprop @tab 
@end multitable
@end cartouche
@caption{Operators that always prefer EQ over EQL}
@end float



@node eql (Function)
@heading eql (Function)
@syindex eql
@cindex eql


@subsubheading Syntax:

@DefunWithValues{eql, x y, generalized-boolean}

@subsubheading Arguments and Values:

@param{x}---an @term{object}.

@param{y}---an @term{object}. 

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

The value of @code{eql} is @term{true} of two objects, @param{x} and
@param{y}, in the folowing cases:

@enumerate 1
@item If @param{x} and @param{y} are @code{eq}.
@item If @param{x} and @param{y} are both @term{numbers} 
of the same @term{type} and the same value.
@item If they are both @term{characters} that represent the 
same character.
@end enumerate


Otherwise the value of @code{eql} is @term{false}.

If an implementation supports positive and negative zeros as @term{distinct} values,
then @f{(eql 0.0 -0.0)} returns @term{false}.
Otherwise, when the syntax @f{-0.0} is read it is interpreted as the value @f{0.0},
and so @f{(eql 0.0 -0.0)} returns @term{true}.  

@subsubheading Examples:

@lisp
 (eql 'a 'b) @EV{} @term{false}
 (eql 'a 'a) @EV{} @term{true}
 (eql 3 3) @EV{} @term{true}
 (eql 3 3.0) @EV{} @term{false}
 (eql 3.0 3.0) @EV{} @term{true}
 (eql #c(3 -4) #c(3 -4)) @EV{} @term{true}
 (eql #c(3 -4.0) #c(3 -4)) @EV{} @term{false}
 (eql (cons 'a 'b) (cons 'a 'c)) @EV{} @term{false}
 (eql (cons 'a 'b) (cons 'a 'b)) @EV{} @term{false}
 (eql '(a . b) '(a . b))
@EV{} @term{true}
@OV{} @term{false}
 (progn (setq x (cons 'a 'b)) (eql x x)) @EV{} @term{true}
 (progn (setq x '(a . b)) (eql x x)) @EV{} @term{true}
 (eql #@bsl{}A #@bsl{}A) @EV{} @term{true}
 (eql "Foo" "Foo")
@EV{} @term{true}
@OV{} @term{false}
 (eql "Foo" (copy-seq "Foo")) @EV{} @term{false}
 (eql "FOO" "foo") @EV{} @term{false}
@end lisp


Normally @f{(eql 1.0s0 1.0d0)} is false, under the assumption
that @f{1.0s0} and @f{1.0d0} are of distinct data types.
However, implementations that do not provide four distinct floating-point
formats are permitted to ``collapse'' the four formats into some
smaller number of them; in such an implementation @f{(eql 1.0s0 1.0d0)}
might be true.  

@subsubheading See Also:

@ref{eq},
@ref{equal},
@ref{equalp},
@ref{=},
@ref{char=}

@subsubheading Notes:

@code{eql} is the same as @code{eq}, except that if the
arguments are @term{characters} or @term{numbers} 
of the same type then their
values are compared.  Thus @code{eql} tells whether two @term{objects}
are conceptually the same, whereas @code{eq} tells whether two
@term{objects} are implementationally identical.  It is for this reason
that @code{eql}, not @code{eq}, is the default comparison predicate
for @term{operators} that take @term{sequences}
as arguments.

@code{eql} may not be true of two @term{floats}
even when they represent the same
value.  @code{=} is used to compare
mathematical values.

Two @term{complex} numbers are considered to be @code{eql}
if their real parts are @code{eql} 
and their imaginary parts are @code{eql}.
For example, @f{(eql #C(4 5) #C(4 5))} is @term{true} and
@f{(eql #C(4 5) #C(4.0 5.0))} is @term{false}.
Note that while @f{(eql #C(5.0 0.0) 5.0)} is @term{false},
@f{(eql #C(5 0) 5)} is @term{true}.
In the case of @f{(eql #C(5.0 0.0) 5.0)} the
two arguments are of different types,
and so cannot satisfy @code{eql}.
In the case of @f{(eql #C(5 0) 5)}, 
@f{#C(5 0)} is not a @term{complex} number, but
is automatically reduced 
to the @term{integer} @f{5}.


@node equal
@heading equal (Function)
@syindex equal
@cindex equal


@subsubheading Syntax:

@DefunWithValues{equal, x y, generalized-boolean}

@subsubheading Arguments and Values:

@param{x}---an @term{object}.

@param{y}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Returns @term{true} if @param{x} and @param{y} are structurally similar
(isomorphic) @term{objects}.  @term{Objects} are treated as follows by
@code{equal}.


@table @asis
@item @id{@term{Symbols}, @term{Numbers}, and @term{Characters}}


@code{equal} is @term{true} of two @term{objects} 
if they are @term{symbols} that are @code{eq},
if they are @term{numbers} that are @code{eql}, or
if they are @term{characters} that are @code{eql}.

@item @id{@term{Conses}}


For @term{conses}, @code{equal} is defined recursively as
the two @term{cars} being @code{equal} 
and the two @term{cdrs} being @code{equal}.

@item @id{@term{Arrays}}


Two @term{arrays} are @code{equal} only if they are @code{eq},
with one exception:
@term{strings} and @term{bit vectors} are compared element-by-element (using @code{eql}).
If either @param{x} or @param{y} has a @term{fill pointer}, the 
@term{fill pointer} limits
the number of elements examined by @code{equal}.
Uppercase and lowercase letters in @term{strings} are considered by
@code{equal} to be different.  

@item @id{@term{Pathnames}}


Two @term{pathnames} are @code{equal} if and only if
all the corresponding components
(host, device, and so on) are 
equivalent.  Whether or not
uppercase and lowercase letters are considered equivalent
in @term{strings} appearing in components is @term{implementation-dependent}.
@term{pathnames}
that are @code{equal} should be functionally equivalent.

@item @id{@bf{Other (Structures, hash-tables, instances, @mat{@ldots{}})}}


Two other @term{objects} are @code{equal} only if they are @code{eq}.

@end table


@code{equal} does not descend any @term{objects} other than the
ones explicitly specified above.
@Thenextfigure{}@spc{}summarizes the information given in the previous list.
In addition, the figure specifies the priority of the behavior of @code{equal},
with upper
entries taking priority over lower ones.


@float Figure,fig5.12
@cartouche
@multitable{Other @term{object}}{``functionally equivalent''}
@headitem Type @tab Behavior
@item @term{number} @tab uses @code{eql}
@item @term{character} @tab uses @code{eql}
@item @term{cons} @tab descends
@item @term{bit vector} @tab descends
@item @term{string} @tab descends
@item @term{pathname} @tab ``functionally equivalent''
@item @term{structure} @tab uses @code{eq}
@item Other @term{array} @tab uses @code{eq}
@item @term{hash table} @tab uses @code{eq}
@item Other @term{object} @tab uses @code{eq}
@end multitable
@end cartouche
@caption{Summary and priorities of behavior of @code{equal}}
@end float


Any two @term{objects} that are @code{eql} are also @code{equal}. 

@code{equal} may fail to terminate if @param{x} or @param{y} is circular.

@subsubheading Examples:

@lisp
 (equal 'a 'b) @EV{} @term{false}
 (equal 'a 'a) @EV{} @term{true}
 (equal 3 3) @EV{} @term{true}
 (equal 3 3.0) @EV{} @term{false}
 (equal 3.0 3.0) @EV{} @term{true}
 (equal #c(3 -4) #c(3 -4)) @EV{} @term{true}
 (equal #c(3 -4.0) #c(3 -4)) @EV{} @term{false}
 (equal (cons 'a 'b) (cons 'a 'c)) @EV{} @term{false}
 (equal (cons 'a 'b) (cons 'a 'b)) @EV{} @term{true}
 (equal #@bsl{}A #@bsl{}A) @EV{} @term{true}
 (equal #@bsl{}A #@bsl{}a) @EV{} @term{false}
 (equal "Foo" "Foo") @EV{} @term{true}
 (equal "Foo" (copy-seq "Foo")) @EV{} @term{true}
 (equal "FOO" "foo") @EV{} @term{false}
 (equal "This-string" "This-string") @EV{} @term{true}
 (equal "This-string" "this-string") @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{eq}, @ref{eql (Function)}, @ref{equalp}, @ref{=}, 
@ref{string=}, @ref{string-equal}, @ref{char=}, 
@ref{char-equal}, @ref{tree-equal}

@subsubheading Notes:

@term{Object} equality is not a concept for which there is a uniquely
determined correct algorithm. The appropriateness of an equality
predicate can be judged only in the context of the needs of some
particular program. Although these functions take any type of
argument and their names sound very generic, 
@code{equal} and @code{equalp} are
not appropriate for every application. 

A rough rule of thumb is that two @term{objects} are @code{equal} 
if and only if their printed representations are the same.


@node equalp
@heading equalp (Function)
@syindex equalp
@cindex equalp


@subsubheading Syntax:

@DefunWithValues{equalp, x y, generalized-boolean}

@subsubheading Arguments and Values:

@param{x}---an @term{object}.

@param{y}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Returns @term{true} if @param{x} and @param{y} are @code{equal},
or if they have components that are of the same @term{type} as each other
and if those components are @code{equalp};
specifically, @code{equalp} returns @term{true} in the following cases:

@table @asis
@item @id{@term{Characters}}


If two @term{characters} are @code{char-equal}.

@item @id{@term{Numbers}}


If two @term{numbers} are the @term{same} under @code{=}. 

@item @id{@term{Conses}}


If the two @term{cars} in the @term{conses} are @code{equalp} 
and the two @term{cdrs} in the @term{conses} are @code{equalp}.

@item @id{@term{Arrays}}


If two @term{arrays} have the same
number of dimensions, the dimensions match,
and the corresponding
@term{active elements} 
are @code{equalp}.
The @term{types} for which the @term{arrays} are @term{specialized} need not match; 
for example, a @term{string} and a general @term{array} that happens to contain the same 
@term{characters} are @code{equalp}.
Because @code{equalp} performs @term{element}-by-@term{element} comparisons
of @term{strings} and ignores the @term{case} of @term{characters},
@term{case} distinctions are ignored when @code{equalp} compares @term{strings}.

@item @id{@term{Structures}}


If two @term{structures} @mat{S@sub1{}} and @mat{S@sub2{}} have the same @term{class}
and the value of each @term{slot} in @mat{S@sub1{}} is the @term{same} under @code{equalp}
as the value of the corresponding @term{slot} in @mat{S@sub2{}}.

@item @id{@term{Hash Tables}}


@code{equalp} descends @term{hash-tables} by first comparing the count of entries
and the @kwd{test} function; if those are the same, it compares the
keys of the tables using the @kwd{test} function and then the values
of the matching keys using @code{equalp} recursively.
@end table


@code{equalp} does not descend any @term{objects}
other than the ones explicitly specified above.
@Thenextfigure{}@spc{}summarizes the information given in the previous list.
In addition, the figure specifies the priority of the behavior of @code{equalp},
with upper
entries taking priority over lower ones.


@float Figure,fig5.13
@cartouche
@multitable{Other @term{object}}{descends, as described above}
@headitem Type @tab Behavior
@item @term{number} @tab uses @code{=}
@item @term{character} @tab uses @code{char-equal}
@item @term{cons} @tab descends
@item @term{bit vector} @tab descends
@item @term{string} @tab descends
@item @term{pathname} @tab same as @code{equal}
@item @term{structure} @tab descends, as described above
@item Other @term{array} @tab descends
@item @term{hash table} @tab descends, as described above
@item Other @term{object} @tab uses @code{eq}
@end multitable
@end cartouche
@caption{Summary and priorities of behavior of @code{equalp}}
@end float


@subsubheading Examples:

@lisp
 (equalp 'a 'b) @EV{} @term{false}
 (equalp 'a 'a) @EV{} @term{true}
 (equalp 3 3) @EV{} @term{true}
 (equalp 3 3.0) @EV{} @term{true}
 (equalp 3.0 3.0) @EV{} @term{true}
 (equalp #c(3 -4) #c(3 -4)) @EV{} @term{true}
 (equalp #c(3 -4.0) #c(3 -4)) @EV{} @term{true}
 (equalp (cons 'a 'b) (cons 'a 'c)) @EV{} @term{false}
 (equalp (cons 'a 'b) (cons 'a 'b)) @EV{} @term{true}
 (equalp #@bsl{}A #@bsl{}A) @EV{} @term{true}
 (equalp #@bsl{}A #@bsl{}a) @EV{} @term{true}
 (equalp "Foo" "Foo") @EV{} @term{true}
 (equalp "Foo" (copy-seq "Foo")) @EV{} @term{true}
 (equalp "FOO" "foo") @EV{} @term{true}
@end lisp

@lisp
 (setq array1 (make-array 6 :element-type 'integer
                            :initial-contents '(1 1 1 3 5 7))) 
@EV{} #(1 1 1 3 5 7)
 (setq array2 (make-array 8 :element-type 'integer
                            :initial-contents '(1 1 1 3 5 7 2 6)
                            :fill-pointer 6))
@EV{} #(1 1 1 3 5 7)
 (equalp array1 array2) @EV{} @term{true}
 (setq vector1 (vector 1 1 1 3 5 7)) @EV{} #(1 1 1 3 5 7)
 (equalp array1 vector1) @EV{} @term{true} 
@end lisp


@subsubheading See Also:

@ref{eq}, @ref{eql (Function)}, @ref{equal}, @ref{=}, 
@ref{string=}, @ref{string-equal}, @ref{char=}, 
@ref{char-equal}

@subsubheading Notes:

@term{Object} equality is not a concept for which there is a uniquely
determined correct algorithm. The appropriateness of an equality
predicate can be judged only in the context of the needs of some
particular program. Although these functions take any type of
argument and their names sound very generic, 
@code{equal} and @code{equalp} are
not appropriate for every application. 


@node identity
@heading identity (Function)
@syindex identity
@cindex identity


@subsubheading Syntax:

@DefunWithValues{identity, object, object}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@subsubheading Description:

Returns its argument @param{object}.

@subsubheading Examples:

@lisp
 (identity 101) @EV{} 101
 (mapcan #'identity (list (list 1 2 3) '(4 5 6))) @EV{} (1 2 3 4 5 6)
@end lisp


@subsubheading Notes:

@code{identity} is intended for use with functions that require
a @term{function} as an argument.

@f{(eql x (identity x))} returns @term{true} for all possible values of @param{x},
but @f{(eq x (identity x))} might return @term{false} when @param{x} is a @term{number}
or @term{character}.

@code{identity} could be defined by

@lisp
(defun identity (x) x)
@end lisp



@node complement
@heading complement (Function)
@syindex complement
@cindex complement



@subsubheading Syntax:

@DefunWithValues{complement, function, complement-function}

@subsubheading Arguments and Values:

@param{function}---a @term{function}.

@param{complement-function}---a @term{function}.

@subsubheading Description:

Returns a @term{function} that
takes the same @term{arguments} as @param{function},
and has the same side-effect behavior as @param{function},
but returns only a single value:
a @term{generalized boolean} with the opposite truth value of that
which would be returned as the @term{primary value} of @param{function}.
That is, when the @param{function} would have returned
@term{true} as its @term{primary value}
the @param{complement-function} returns @term{false},
and when the @param{function} would have returned
@term{false} as its @term{primary value}
the @param{complement-function} returns @term{true}.

@subsubheading Examples:

@lisp
 (funcall (complement #'zerop) 1) @EV{} @term{true}
 (funcall (complement #'characterp) #@bsl{}A) @EV{} @term{false}
 (funcall (complement #'member) 'a '(a b c)) @EV{} @term{false}
 (funcall (complement #'member) 'd '(a b c)) @EV{} @term{true}
@end lisp


@subsubheading See Also:

@ref{not (Function)}

@subsubheading Notes:

@lisp
 (complement @i{x}) @EQ{} #'(lambda (&rest arguments) (not (apply @i{x} arguments)))
@end lisp


In @clisp{}, functions with names like ``@f{@i{xxx}-if-not}''
are related to functions with names like ``@f{@it xxx-if}'' 
in that

@lisp
(@i{xxx}-if-not @i{f} . @i{arguments}) @EQ{} (@i{xxx}-if (complement @i{f}) . @i{arguments})
@end lisp


For example,

@lisp
 (find-if-not #'zerop '(0 0 3)) @EQ{}
 (find-if (complement #'zerop) '(0 0 3)) @EV{} 3
@end lisp


Note that since the ``@f{@i{xxx}-if-not}'' @term{functions}
and the @kwd{test-not} arguments have been deprecated,
uses of ``@f{@i{xxx}-if}'' @term{functions} or 
@kwd{test} arguments with @code{complement} are preferred.


@node constantly
@heading constantly (Function)
@syindex constantly
@cindex constantly



@subsubheading Syntax:

@DefunWithValues{constantly, value, function}

@subsubheading Arguments and Values:

@param{value}---an @term{object}.

@param{function}---a @term{function}.

@subsubheading Description:

@code{constantly} returns a @term{function} that accepts any number of
arguments, that has no side-effects, and that always returns @param{value}.

@subsubheading Examples:

@lisp
 (mapcar (constantly 3) '(a b c d)) @EV{} (3 3 3 3)
 (defmacro with-vars (vars &body forms)
   `((lambda ,vars ,@@forms) ,@@(mapcar (constantly nil) vars)))
@EV{} WITH-VARS
 (macroexpand '(with-vars (a b) (setq a 3 b (* a a)) (list a b)))
@EV{} ((LAMBDA (A B) (SETQ A 3 B (* A A)) (LIST A B)) NIL NIL), @term{true}
@end lisp


@subsubheading See Also:

@ref{identity}

@subsubheading Notes:

@code{constantly} could be defined by:

@lisp
 (defun constantly (object)
   #'(lambda (&rest arguments) object))
@end lisp




@node every; some; notevery; notany
@heading every, some, notevery, notany (Function)
@syindex every
@cindex every
@syindex some
@cindex some
@syindex notevery
@cindex notevery
@syindex notany
@cindex notany
@anchor{every}
@anchor{some}


@subsubheading Syntax:

@DefunWithValues{every, predicate @rest{} @plus{sequences}, generalized-boolean}
@DefunWithValues{some, predicate @rest{} @plus{sequences}, result}
@DefunWithValues{notevery, predicate @rest{} @plus{sequences}, generalized-boolean} 
@DefunWithValues{notany, predicate @rest{} @plus{sequences}, generalized-boolean}

@subsubheading Arguments and Values:

@param{predicate}---a @term{designator} for a @term{function} of
as many @term{arguments} as there are @param{sequences}.

@param{sequence}---a @term{sequence}.

@param{result}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}. 

@subsubheading Description:

@code{every}, @code{some}, @code{notevery}, and @code{notany}
test @term{elements} of @param{sequences} for satisfaction of a given @param{predicate}.
The first argument to @param{predicate} is an @term{element} of the first @param{sequence};
each succeeding argument is an @term{element} of a succeeding @param{sequence}.

@param{Predicate} is first applied to the elements
with index @f{0} in each of the @param{sequences}, and possibly then to
the elements with index @f{1}, and so on, until a termination
criterion is met or the end of the shortest of the @param{sequences} is reached.

@code{every} returns @term{false} as soon 
as any invocation of @param{predicate} returns @term{false}.
If the end of a @param{sequence} is reached,
@code{every} returns @term{true}.
Thus, @code{every} returns @term{true} if and only if
every invocation of @param{predicate} returns @term{true}.

@code{some} returns the first @term{non-nil} value 
which is returned by an invocation of @param{predicate}.
If the end of a @param{sequence} is reached without any invocation of the
@param{predicate} returning @term{true}, @code{some} returns @term{false}.
Thus, @code{some} returns @term{true} if and only if
some invocation of @param{predicate} returns @term{true}.

@code{notany} returns @term{false} 
as soon as any invocation of @param{predicate} returns @term{true}.
If the end of a @param{sequence} is reached,
@code{notany} returns @term{true}.
Thus, @code{notany} returns @term{true} if and only if 
it is not the case that any invocation of @param{predicate} returns @term{true}.

@code{notevery} returns @term{true} as soon as any invocation of
@param{predicate} returns @term{false}.
If the end of a @param{sequence} is reached,
@code{notevery} returns @term{false}.
Thus, @code{notevery} returns @term{true} if and only if 
it is not the case that every invocation of @param{predicate} returns @term{true}.

@subsubheading Examples:

@lisp
 (every #'characterp "abc") @EV{} @term{true}
 (some #'= '(1 2 3 4 5) '(5 4 3 2 1)) @EV{} @term{true}
 (notevery #'< '(1 2 3 4) '(5 6 7 8) '(9 10 11 12)) @EV{} @term{false}
 (notany #'> '(1 2 3 4) '(5 6 7 8) '(9 10 11 12)) @EV{} @term{true} 
@end lisp


@subsubheading Exceptional Situations:

Should signal @code{type-error} if its first argument is neither a
@term{symbol} nor a @term{function} or if any subsequent
argument is not a @term{proper sequence}.

Other exceptional situations are possible, depending on the nature
of the @param{predicate}.

@subsubheading See Also:

@ref{and (Macro)},
@ref{or (Macro)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

@lisp
 (notany @param{predicate} @starparam{sequence}) @EQ{} (not (some @param{predicate} @starparam{sequence}))
 (notevery @param{predicate} @starparam{sequence}) @EQ{} (not (every @param{predicate} @starparam{sequence}))
@end lisp



@node and (Macro)
@heading and (Macro)
@syindex and
@cindex and


@subsubheading Syntax:

@DefmacWithValues{and, @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{form}---a @term{form}.

@param{results}---the @term{values} resulting from the evaluation of 
the last @param{form}, or the symbols @nil{}@spc{}or @code{t}.

@subsubheading Description:

The macro @code{and} evaluates each @param{form} one at a time from left to right. 
As soon as any @param{form} evaluates to @nil{}, @code{and} returns
@nil{}@spc{}without evaluating the remaining @param{forms}.  If all @param{forms}
but the last evaluate to @term{true} values, @code{and} returns the results
produced by evaluating the last @param{form}.

If no @param{forms} are supplied, @f{(and)} returns @code{t}.

@code{and} passes back multiple values from the last @term{subform}
but not from subforms other than the last.

@subsubheading Examples:

@lisp
 (if (and (>= n 0)
          (< n (length a-simple-vector))
          (eq (elt a-simple-vector n) 'foo))
     (princ "Foo!"))
@end lisp

The above expression prints @f{Foo!} if element @f{n} of @f{a-simple-vector}
is the symbol @f{foo}, provided also that @f{n} is indeed a valid index
for @f{a-simple-vector}.  Because @code{and} guarantees 
left-to-right testing
of its parts, @code{elt} is not called if @f{n} is out of range.

@lisp
 (setq temp1 1 temp2 1 temp3 1) @EV{} 1 
 (and (incf temp1) (incf temp2) (incf temp3)) @EV{} 2 
 (and (eql 2 temp1) (eql 2 temp2) (eql 2 temp3)) @EV{} @term{true}
 (decf temp3) @EV{} 1 
 (and (decf temp1) (decf temp2) (eq temp3 'nil) (decf temp3)) @EV{} NIL 
 (and (eql temp1 temp2) (eql temp2 temp3)) @EV{} @term{true}
 (and) @EV{} T 
@end lisp


@subsubheading See Also:

@ref{cond},
@ref{every},
@ref{if},
@ref{or (Macro)},
@ref{when}

@subsubheading Notes:

@lisp
 (and @param{form}) @EQ{} (let () @param{form})
 (and @param{form1} @param{form2} ...) @EQ{} (when @param{form1} (and @param{form2} ...))
@end lisp



@node cond
@heading cond (Macro)
@syindex cond
@cindex cond
                                         

@subsubheading Syntax:

@DefmacWithValues{cond, @stardown{clause}, @starparam{result}}

@auxbnf{clause, @paren{test-form @starparam{form}}}

@subsubheading Arguments and Values:

@param{test-form}---a @term{form}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} of the @param{forms} 
in the first @param{clause} whose @param{test-form} @term{yields} @term{true},
or the @term{primary value} of the @param{test-form}
if there are no @param{forms} in that @param{clause},
or else @nil{}@spc{}if no @param{test-form} @term{yields} @term{true}.

@subsubheading Description:

@code{cond} allows the execution of @param{forms} to be dependent
on @param{test-form}.

@param{Test-forms} are evaluated one at a time in the order in which
they are given in the argument list until a @param{test-form} is found that
evaluates to @term{true}.

If there are no @term{forms} in that clause, the @term{primary value} 
of the @param{test-form} is returned by the @code{cond} @term{form}.
Otherwise, the @param{forms} associated with this @param{test-form} are
evaluated in order, left to right, as an @term{implicit progn}, and the
@term{values} returned by the last @param{form} 
are returned by the @code{cond} @term{form}.

Once one @param{test-form} has @term{yielded} @term{true},
no additional @param{test-forms} are @term{evaluated}.
If no @param{test-form} @term{yields} @term{true}, @nil{}@spc{}is returned.

@subsubheading Examples:

@lisp
 (defun select-options ()
   (cond ((= a 1) (setq a 2))
         ((= a 2) (setq a 3))
         ((and (= a 3) (floor a 2)))
         (t (floor a 3)))) @EV{} SELECT-OPTIONS
 (setq a 1) @EV{} 1
 (select-options) @EV{} 2
 a @EV{} 2
 (select-options) @EV{} 3
 a @EV{} 3
 (select-options) @EV{} 1
 (setq a 5) @EV{} 5
 (select-options) @EV{} 1, 2
@end lisp


@subsubheading See Also:

@ref{if}, @ref{case}.


@node if
@heading if (Special Operator)
@syindex if
@cindex if


@subsubheading Syntax:

@DefspecWithValues{if, @param{test-form} @param{then-form} @brac{@param{else-form}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{Test-form}---a @term{form}.

@param{Then-form}---a @term{form}.

@param{Else-form}---a @term{form}.
@Default{@nil{}}

@param{results}---if the @param{test-form} @term{yielded} @term{true},
the @term{values} returned by the @param{then-form}; otherwise,
the @term{values} returned by the @param{else-form}.

@subsubheading Description:

@code{if} allows the execution of a @term{form} to be dependent
on a single @param{test-form}.

First @param{test-form} is evaluated.
If the result is @term{true}, then @param{then-form} is selected;
otherwise @param{else-form} is selected.
Whichever form is selected is then evaluated.

@subsubheading Examples:

@lisp
 (if t 1) @EV{} 1
 (if nil 1 2) @EV{} 2 
 (defun test ()
   (dolist (truth-value '(t nil 1 (a b c)))
     (if truth-value (print 'true) (print 'false))
     (prin1 truth-value))) @EV{} TEST
 (test)
@OUT{} TRUE T
@OUT{} FALSE NIL
@OUT{} TRUE 1
@OUT{} TRUE (A B C)
@EV{} NIL
@end lisp


@subsubheading See Also:

@ref{cond},
@ref{unless},
@ref{when}

@subsubheading Notes:

@lisp
 (if @param{test-form} @param{then-form} @param{else-form})
 @EQ{} (cond (@param{test-form} @param{then-form}) (t @param{else-form}))
@end lisp



@node or (Macro)
@heading or (Macro)
@syindex or
@cindex or


@subsubheading Syntax:

@DefmacWithValues{or, @starparam{form}, @starparam{results}}

@subsubheading Arguments and Values:

@param{form}---a @term{form}.

@param{results}---the @term{values} or @term{primary value} (see below)
resulting from the evaluation of
the last @param{form} executed or @nil{}.

@subsubheading Description:

@code{or} evaluates each @param{form}, one at a time, from left to right.  
The evaluation of all @param{forms} terminates when a @param{form} evaluates
to @term{true} (@ie{} something other than @nil{}).

If the @term{evaluation} of any @param{form} other than the last returns a
@term{primary value} that is @term{true}, @code{or} immediately returns
that @term{value} (but no additional @term{values}) without evaluating the
remaining @param{forms}.
If every @param{form} but the last returns @term{false} as its @term{primary value},
@code{or} returns all @term{values} returned by the last @param{form}.
If no @param{forms} are supplied, @code{or} returns @nil{}.

@subsubheading Examples:

@lisp
 (or) @EV{} NIL 
 (setq temp0 nil temp1 10 temp2 20 temp3 30) @EV{} 30
 (or temp0 temp1 (setq temp2 37)) @EV{} 10
 temp2 @EV{} 20
 (or (incf temp1) (incf temp2) (incf temp3)) @EV{} 11
 temp1 @EV{} 11
 temp2 @EV{} 20
 temp3 @EV{} 30
 (or (values) temp1) @EV{} 11
 (or (values temp1 temp2) temp3) @EV{} 11
 (or temp0 (values temp1 temp2)) @EV{} 11, 20
 (or (values temp0 temp1) (values temp2 temp3)) @EV{} 20, 30
@end lisp


@subsubheading See Also:

@ref{and (Macro)},
@ref{some},
@ref{unless}


@node when; unless
@heading when, unless (Macro)
@syindex when
@cindex when
@syindex unless
@cindex unless
@anchor{when}
@anchor{unless}


@subsubheading Syntax:

@DefmacWithValues{when, test-form @starparam{form}, @starparam{result}}

@DefmacWithValues{unless, test-form @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{test-form}---a @term{form}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} of the @term{forms}
in a  @code{when}   @term{form} if the @param{test-form} @term{yields} @term{true} 
or in an @code{unless} @term{form} if the @param{test-form} @term{yields} @term{false};
otherwise @nil{}.

@subsubheading Description:

@code{when} and @code{unless} allow the execution of @param{forms} 
to be dependent on a single @param{test-form}.

In a @code{when} @term{form},
if the @param{test-form} @term{yields} @term{true},
the @param{forms} are @term{evaluated} in order from left to right
and the @term{values} returned by the @param{forms} 
are returned from the @code{when} @term{form}. 
Otherwise, if the @param{test-form} @term{yields} @term{false},
the @param{forms} are not @term{evaluated},
and the @code{when} @term{form} returns @nil{}.

In an @code{unless} @term{form},
if the @param{test-form} @term{yields} @term{false},
the @param{forms} are @term{evaluated} in order from left to right
and the @term{values} returned by the @param{forms} 
are returned from the @code{unless} @term{form}. 
Otherwise, if the @param{test-form} @term{yields} @term{false},
the @param{forms} are not @term{evaluated},
and the @code{unless} @term{form} returns @nil{}.

@subsubheading Examples:

@lisp
 (when t 'hello) @EV{} HELLO
 (unless t 'hello) @EV{} NIL
 (when nil 'hello) @EV{} NIL
 (unless nil 'hello) @EV{} HELLO
 (when t) @EV{} NIL
 (unless nil) @EV{} NIL
 (when t (prin1 1) (prin1 2) (prin1 3))
@OUT{} 123
@EV{} 3
 (unless t (prin1 1) (prin1 2) (prin1 3)) @EV{} NIL
 (when nil (prin1 1) (prin1 2) (prin1 3)) @EV{} NIL
 (unless nil (prin1 1) (prin1 2) (prin1 3))
@OUT{} 123
@EV{} 3
 (let ((x 3))
   (list (when (oddp x) (incf x) (list x))
         (when (oddp x) (incf x) (list x))
         (unless (oddp x) (incf x) (list x))
         (unless (oddp x) (incf x) (list x))
         (if (oddp x) (incf x) (list x)) 
         (if (oddp x) (incf x) (list x)) 
         (if (not (oddp x)) (incf x) (list x)) 
         (if (not (oddp x)) (incf x) (list x))))
@EV{} ((4) NIL (5) NIL 6 (6) 7 (7))
@end lisp


@subsubheading See Also:

@ref{and (Macro)},
@ref{cond},
@ref{if},
@ref{or (Macro)}

@subsubheading Notes:

@lisp
 (when @param{test} @plus{@curly{@param{form}}}) @EQ{} (and @param{test} (progn @plus{@curly{@param{form}}}))
 (when @param{test} @plus{@curly{@param{form}}}) @EQ{} (cond (@param{test} @plus{@curly{@param{form}}}))
 (when @param{test} @plus{@curly{@param{form}}}) @EQ{} (if @param{test} (progn @plus{@curly{@param{form}}}) nil)
 (when @param{test} @plus{@curly{@param{form}}}) @EQ{} (unless (not @param{test}) @plus{@curly{@param{form}}})
 (unless @param{test} @plus{@curly{@param{form}}}) @EQ{} (cond ((not @param{test}) @plus{@curly{@param{form}}}))
 (unless @param{test} @plus{@curly{@param{form}}}) @EQ{} (if @param{test} nil (progn @plus{@curly{@param{form}}}))
 (unless @param{test} @plus{@curly{@param{form}}}) @EQ{} (when (not @param{test}) @plus{@curly{@param{form}}})
@end lisp



@node case; ccase; ecase
@heading case, ccase, ecase (Macro)
@syindex case
@cindex case
@syindex ccase
@cindex ccase
@syindex ecase
@cindex ecase
@anchor{case}
@anchor{ccase}


@subsubheading Syntax:

@DefmacWithValues{case, keyform  @stardown{normal-clause} @brac{@down{otherwise-clause}}, @starparam{result}}
@DefmacWithValues{ccase, keyplace @stardown{normal-clause}, @starparam{result}}
@DefmacWithValues{ecase, keyform  @stardown{normal-clause}, @starparam{result}}

@auxbnf{normal-clause, @paren{keys @starparam{form}}}
@auxbnf{otherwise-clause, @paren{@curly{otherwise | t} @starparam{form}}}
@auxbnf{clause, normal-clause | otherwise-clause}
@cindex otherwise
@cindex t

@subsubheading Arguments and Values:

@param{keyform}---a @term{form}; evaluated to produce a @param{test-key}.

@param{keyplace}---a @term{form}; evaluated initially to produce a @param{test-key}.
Possibly also used later as a @term{place} if no @param{keys} match.

@param{test-key}---an object produced by evaluating @param{keyform} or @param{keyplace}.

@param{keys}---a @term{designator} for a @term{list} of @term{objects}.
In the case of @code{case}, the @term{symbols} @code{t}@spc{}and @t{otherwise} may
not be used as the @param{keys} @term{designator}.  To refer to these @term{symbols}
by themselves as @param{keys}, the designators @f{(t)} and @f{(otherwise)}, respectively,
must be used instead.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @param{forms} 
in the matching @param{clause}.

@subsubheading Description:

These @term{macros} allow the conditional execution of a body of @param{forms}
in a @param{clause} that is selected by matching the @param{test-key} on the
basis of its identity.

The @param{keyform} or @param{keyplace} is @term{evaluated} to produce the
@param{test-key}.

Each of the @param{normal-clauses} is then considered in turn.
If the @param{test-key} is the @term{same} as any @term{key} for 
that @param{clause}, the @param{forms} in that @param{clause} are
@param{evaluated} as an @term{implicit progn}, and the @term{values}
it returns are returned as the value of the @code{case},
@code{ccase}, or @code{ecase} @term{form}.

These @term{macros} differ only in their @term{behavior} when 
no @param{normal-clause} matches; specifically:


@table @asis

@item @id{@code{case}}


If no @param{normal-clause} matches, and there is an @param{otherwise-clause},
then that @param{otherwise-clause} automatically matches; the @param{forms} in
that @param{clause} are @param{evaluated} as an @term{implicit progn}, 
and the @term{values} it returns are returned as the value of the @code{case}.

If there is no @param{otherwise-clause}, @code{case} returns @nil{}.

@item @id{@code{ccase}}


If no @param{normal-clause} matches,
a @term{correctable} @term{error} @oftype{type-error} is signaled.
The offending datum is the @param{test-key} and
the expected type is @term{type equivalent} to @f{(member @param{key1} @param{key2} ...)}.
@Therestart{store-value} can be used to correct the error.

If @therestart{store-value} is invoked, its @term{argument} becomes the 
new @param{test-key}, and is stored in @param{keyplace} as if by
@f{(setf @param{keyplace} @param{test-key})}.
Then @code{ccase} starts over, considering each @param{clause} anew.

@reviewer{Barmar: Will it prompt for multiple values if keyplace is a VALUES general ref?}

The subforms of @param{keyplace} might be evaluated again if
none of the cases holds.

@item @id{@code{ecase}}


If no @param{normal-clause} matches,
a @term{non-correctable} @term{error} @oftype{type-error} is signaled.
The offending datum is the @param{test-key} and
the expected type is @term{type equivalent} to @f{(member @param{key1} @param{key2} ...)}.

Note that in contrast with @code{ccase},
the caller of @code{ecase} may rely on the fact that @code{ecase} 
does not return if a @param{normal-clause} does not match.
@end table


@subsubheading Examples:

@lisp
 (dolist (k '(1 2 3 :four #@bsl{}v () t 'other))
    (format t "~S "
       (case k ((1 2) 'clause1)
               (3 'clause2)
               (nil 'no-keys-so-never-seen)
               ((nil) 'nilslot)
               ((:four #@bsl{}v) 'clause4)
               ((t) 'tslot)
               (otherwise 'others)))) 
@OUT{} CLAUSE1 CLAUSE1 CLAUSE2 CLAUSE4 CLAUSE4 NILSLOT TSLOT OTHERS 
@EV{} NIL
 (defun add-em (x) (apply #'+ (mapcar #'decode x)))
@EV{} ADD-EM
 (defun decode (x)
   (ccase x
     ((i uno) 1)
     ((ii dos) 2)
     ((iii tres) 3)
     ((iv cuatro) 4)))
@EV{} DECODE
 (add-em '(uno iii)) @EV{} 4
 (add-em '(uno iiii))
@OUT{} Error: The value of X, IIII, is not I, UNO, II, DOS, III,
@OUT{}        TRES, IV, or CUATRO.
@OUT{}  1: Supply a value to use instead.
@OUT{}  2: Return to Lisp Toplevel.
@OUT{} Debug> @IN{:CONTINUE 1}
@OUT{} Value to evaluate and use for X: @IN{'IV}
@EV{} 5
@end lisp


@subsubheading Side Effects:

The debugger might be entered.
If @therestart{store-value} is invoked,
the @term{value} of @param{keyplace} might be changed.

@subsubheading Affected By:

@code{ccase} and @code{ecase}, since they might signal an error,
are potentially affected by existing @param{handlers} and @code{*debug-io*}.

@subsubheading Exceptional Situations:

@code{ccase} and @code{ecase} signal an error @oftype{type-error}
if no @param{normal-clause} matches.

@subsubheading See Also:

@ref{cond},
@ref{typecase},
@ref{setf},
@ref{Generalized Reference, Section 5.1 (Generalized Reference)}

@subsubheading Notes:

@lisp
(case @param{test-key}
  @star{@curly{((@starparam{key}) @starparam{form})}})
@EQ{}
(let ((#1=#:g0001 @param{test-key}))
  (cond @star{@curly{((member #1# '(@starparam{key})) @starparam{form})}}))
@end lisp


The specific error message used by @code{ecase} and @code{ccase} can vary
between implementations.  In situations where control of the specific wording 
of the error message is important, it is better to use @code{case} with an
@param{otherwise-clause} that explicitly signals an error with an appropriate 
message.


@node typecase; ctypecase; etypecase
@heading typecase, ctypecase, etypecase (Macro)
@syindex typecase
@cindex typecase
@syindex ctypecase
@cindex ctypecase
@syindex etypecase
@cindex etypecase
@anchor{typecase}
@anchor{ctypecase}


@subsubheading Syntax:

@DefmacWithValues{typecase, keyform  @stardown{normal-clause} @brac{@down{otherwise-clause}}, @starparam{result}}
@DefmacWithValues{ctypecase, keyplace @stardown{normal-clause}, @starparam{result}}
@DefmacWithValues{etypecase, keyform  @stardown{normal-clause}, @starparam{result}}

@auxbnf{normal-clause, @paren{type @starparam{form}}}
@auxbnf{otherwise-clause, @paren{@curly{otherwise | t} @starparam{form}}}
@auxbnf{clause, normal-clause | otherwise-clause}
@cindex otherwise
@cindex t

@subsubheading Arguments and Values:

@param{keyform}---a @term{form}; evaluated to produce a @param{test-key}.

@param{keyplace}---a @term{form}; evaluated initially to produce a @param{test-key}.
Possibly also used later as a @term{place} if no @param{types} match.

@param{test-key}---an object produced by evaluating @param{keyform} or @param{keyplace}.

@param{type}---a @term{type specifier}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @param{forms} 
in the matching @param{clause}.

@subsubheading Description:

These @term{macros} allow the conditional execution of a body of @param{forms}
in a @param{clause} that is selected by matching the @param{test-key} on the basis 
of its @term{type}.

The @param{keyform} or @param{keyplace} is @term{evaluated} to produce the
@param{test-key}.

Each of the @param{normal-clauses} is then considered in turn.
If the @param{test-key} is of the @term{type} 
given by the @param{clauses}'s @param{type},
the @param{forms} in that @param{clause} are
@param{evaluated} as an @term{implicit progn}, and the @term{values}
it returns are returned as the value of the @code{typecase},
@code{ctypecase}, or @code{etypecase} @term{form}.

These @term{macros} differ only in their @term{behavior} when 
no @param{normal-clause} matches; specifically:


@table @asis

@item @id{@code{typecase}}


If no @param{normal-clause} matches, and there is an @param{otherwise-clause},
then that @param{otherwise-clause} automatically matches; the @param{forms} in
that @param{clause} are @param{evaluated} as an @term{implicit progn}, 
and the @term{values} it returns are returned as the value of the @code{typecase}.

If there is no @param{otherwise-clause}, @code{typecase} returns @nil{}.

@item @id{@code{ctypecase}}


If no @param{normal-clause} matches,
a @term{correctable} @term{error} @oftype{type-error} is signaled.
The offending datum is the @param{test-key} and
the expected type is @term{type equivalent} to @f{(or @param{type1} @param{type2} ...)}.
@Therestart{store-value} can be used to correct the error.

If @therestart{store-value} is invoked, its @term{argument} becomes the 
new @param{test-key}, and is stored in @param{keyplace} as if by
@f{(setf @param{keyplace} @param{test-key})}.
Then @code{ctypecase} starts over, considering each @param{clause} anew.

If @therestart{store-value} is invoked interactively, 
the user is prompted for a new @param{test-key} to use.

The subforms of @param{keyplace} might be evaluated again if
none of the cases holds.

@item @id{@code{etypecase}}


If no @param{normal-clause} matches,
a @term{non-correctable} @term{error} @oftype{type-error} is signaled.
The offending datum is the @param{test-key} and
the expected type is @term{type equivalent} to @f{(or @param{type1} @param{type2} ...)}.

Note that in contrast with @code{ctypecase},
the caller of @code{etypecase} may rely on the fact that @code{etypecase} 
does not return if a @param{normal-clause} does not match.
@end table


In all three cases, is permissible for more than one @param{clause} to specify a
matching @term{type}, particularly if one is a @term{subtype} of another;
the earliest applicable @param{clause} is chosen.

@subsubheading Examples:

@lisp
;;; (Note that the parts of this example which use TYPE-OF 
;;;  are implementation-dependent.)
 (defun what-is-it (x)
   (format t "~&~S is ~A.~%"
           x (typecase x
               (float "a float")
               (null "a symbol, boolean false, or the empty list")
               (list "a list")
               (t (format nil "a(n) ~(~A~)" (type-of x))))))
@EV{} WHAT-IS-IT
 (map 'nil #'what-is-it '(nil (a b) 7.0 7 box))
@OUT{} NIL is a symbol, boolean false, or the empty list.
@OUT{} (A B) is a list.
@OUT{} 7.0 is a float.
@OUT{} 7 is a(n) integer.
@OUT{} BOX is a(n) symbol.
@EV{} NIL
 (setq x 1/3)
@EV{} 1/3
 (ctypecase x
     (integer (* x 4))
     (symbol  (symbol-value x)))
@OUT{} Error: The value of X, 1/3, is neither an integer nor a symbol.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Specify a value to use instead.
@OUT{}  2: Return to Lisp Toplevel.
@OUT{} Debug> @IN{:CONTINUE 1}
@OUT{} Use value: @IN{3.7}
@OUT{} Error: The value of X, 3.7, is neither an integer nor a symbol.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Specify a value to use instead.
@OUT{}  2: Return to Lisp Toplevel.
@OUT{} Debug> @IN{:CONTINUE 1}
@OUT{} Use value: @IN{12}
@EV{} 48
 x @EV{} 12
@end lisp


@subsubheading Affected By:

@code{ctypecase} and @code{etypecase}, since they might signal an error,
are potentially affected by existing @param{handlers} and @code{*debug-io*}.

@subsubheading Exceptional Situations:

@code{ctypecase} and @code{etypecase} signal an error @oftype{type-error}
if no @param{normal-clause} matches.

The @term{compiler} may choose to issue a warning @oftype{style-warning}
if a @param{clause} will never be selected because it is completely 
shadowed by earlier clauses.

@subsubheading See Also:

@ref{case},
@ref{cond},
@ref{setf},
@ref{Generalized Reference, Section 5.1 (Generalized Reference)}

@subsubheading Notes:

@lisp
(typecase @param{test-key}
  @star{@curly{(@param{type} @starparam{form})}})
@EQ{}
(let ((#1=#:g0001 @param{test-key}))
  (cond @star{@curly{((typep #1# '@param{type}) @starparam{form})}}))
@end lisp


The specific error message used by @code{etypecase} and @code{ctypecase} can vary
between implementations.  In situations where control of the specific wording 
of the error message is important, it is better to use @code{typecase} with an
@param{otherwise-clause} that explicitly signals an error with an appropriate 
message.




@node multiple-value-bind
@heading multiple-value-bind (Macro)
@syindex multiple-value-bind
@cindex multiple-value-bind



@subsubheading Syntax:

@DefmacWithValuesNewline{multiple-value-bind, @paren{@starparam{var}} @param{values-form} @starparam{declaration} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{symbol} naming a variable; @noeval{}.

@param{values-form}---a @term{form}; @eval{}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @param{forms}.

@subsubheading Description:

Creates new variable @term{bindings} for the @param{vars} and
executes a series of @param{forms} that use these @term{bindings}.

The variable @term{bindings} created are lexical unless
@code{special} declarations are specified.  

@param{Values-form} is evaluated, and each of the @param{vars} is
bound to the respective value returned by that @term{form}.  If there are more
@param{vars} than values returned, extra values of @nil{}@spc{}are given to the
remaining @param{vars}. If there are more values than 
@param{vars}, the excess
values are discarded.  The @param{vars} are bound to the values over
the execution of the @param{forms}, which make up an implicit @code{progn}.
The consequences are unspecified if a type @param{declaration} is specified 
for a @param{var}, but the value to which
that @param{var} is bound  is not consistent with 
the type @param{declaration}.

The @term{scopes} of the name binding and @param{declarations}
do not include the @param{values-form}.

@subsubheading Examples:

@lisp
 (multiple-value-bind (f r) 
     (floor 130 11)
   (list f r)) @EV{} (11 9)
@end lisp


@subsubheading See Also:

@ref{let},
@ref{multiple-value-call}

@subsubheading Notes:

@lisp
 (multiple-value-bind (@starparam{var}) @param{values-form} @starparam{form})
 @EQ{} (multiple-value-call #'(lambda (&optional @starparam{var} &rest #1=#:ignore)
                             (declare (ignore #1#))
                             @starparam{form})
                         @param{values-form})
@end lisp




@node multiple-value-call
@heading multiple-value-call (Special Operator)
@syindex multiple-value-call
@cindex multiple-value-call


@subsubheading Syntax:

@DefspecWithValues{multiple-value-call, @param{function-form} @star{@param{form}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{function-form}---a @term{form}; evaluated to produce @param{function}.

@param{function}---a @term{function designator} 
resulting from the evaluation of @param{function-form}.

@param{form}---a @term{form}.

@param{results}---the @term{values} returned by the @param{function}.

@subsubheading Description:

Applies @param{function} to a @term{list} of the @term{objects} collected from groups of 
@term{multiple values}@sub2{}.

@code{multiple-value-call} first evaluates the @param{function-form}
to obtain @param{function}, and then evaluates each @param{form}.
All the values
of each @param{form} are gathered together (not just one value from each)
and given as arguments to the @param{function}.  

@subsubheading Examples:
@lisp
 (multiple-value-call #'list 1 '/ (values 2 3) '/ (values) '/ (floor 2.5))
@EV{} (1 / 2 3 / / 2 0.5)
 (+ (floor 5 3) (floor 19 4)) @EQ{} (+ 1 4)
@EV{} 5
 (multiple-value-call #'+ (floor 5 3) (floor 19 4)) @EQ{} (+ 1 2 4 3)
@EV{} 10
@end lisp


@subsubheading See Also:

@ref{multiple-value-list}, @ref{multiple-value-bind}


@node multiple-value-list
@heading multiple-value-list (Macro)
@syindex multiple-value-list
@cindex multiple-value-list


@subsubheading Syntax:

@DefmacWithValues{multiple-value-list, form, list}

@subsubheading Arguments and Values:

@param{form}---a @term{form}; @evalspecial{}.

@param{list}---a @term{list} of the @term{values} returned by @param{form}.

@subsubheading Description:

@code{multiple-value-list} evaluates @param{form} 
and creates a @term{list} of the @term{multiple values}@sub2{} it returns.

@subsubheading Examples:

@lisp
 (multiple-value-list (floor -3 4)) @EV{} (-1 1)
@end lisp


@subsubheading See Also:

@ref{values-list},
@ref{multiple-value-call}

@subsubheading Notes:

@code{multiple-value-list} and @code{values-list} are inverses
of each other.

@lisp
 (multiple-value-list form) @EQ{} (multiple-value-call #'list form)
@end lisp



@node multiple-value-prog1
@heading multiple-value-prog1 (Special Operator)
@syindex multiple-value-prog1
@cindex multiple-value-prog1


@subsubheading Syntax:

@DefspecWithValues{multiple-value-prog1, first-form @starparam{form}, first-form-results}

@subsubheading Arguments and Values:

@param{first-form}---a @term{form}; @evalspecial{}.

@param{form}---a @term{form}; @evalspecial{}.

@param{first-form-results}---the @term{values} resulting from
the @term{evaluation} of @param{first-form}.      

@subsubheading Description:

@code{multiple-value-prog1} evaluates @param{first-form} and saves
all the values produced by that @term{form}. It then evaluates each 
@param{form} from left to right, discarding their values.  

@subsubheading Examples:

@lisp
 (setq temp '(1 2 3)) @EV{} (1 2 3)
 (multiple-value-prog1
    (values-list temp)
    (setq temp nil)
    (values-list temp)) @EV{} 1, 2, 3
@end lisp


@subsubheading See Also:

@ref{prog1}


@node multiple-value-setq
@heading multiple-value-setq (Macro)
@syindex multiple-value-setq
@cindex multiple-value-setq


@subsubheading Syntax:

@DefmacWithValues{multiple-value-setq, vars form, result}

@subsubheading Arguments and Values:

@param{vars}---a @term{list} of @term{symbols}
that are either @term{variable} @term{names}
or @term{names} of @term{symbol macros}.

@param{form}---a @term{form}.

@param{result}---The @term{primary value} returned by the @param{form}.

@subsubheading Description:

@code{multiple-value-setq} assigns values to @param{vars}.

The @param{form} is evaluated,
and each @param{var} is @term{assigned} 
to the corresponding @term{value} returned by that @term{form}. 
If there are more @param{vars} than @term{values} returned,
@nil{}@spc{}is @term{assigned} to the extra @param{vars}.
If there are more @term{values} than @param{vars},
the extra @term{values} are discarded.

If any @param{var} is the @term{name} of a @term{symbol macro},
then it is @term{assigned} as if by @code{setf}.  Specifically,

@begingroup{}
@lisp
 (multiple-value-setq (@i{symbol}@subOne{} ... @i{symbol}@subN{}) @i{value-producing-form})
@end lisp

is defined to always behave in the same way as

@lisp
 (values (setf (values @i{symbol}@subOne{} ... @i{symbol}@subN{}) @i{value-producing-form}))
@end lisp

@endgroup{}
in order that the rules for order of evaluation and side-effects be consistent
with those used by @code{setf}.
@cindex order of evaluation
@cindex evaluation order
See @ref{SETFofVALUES, Section 5.1.2.3 (VALUES Forms as Places)}.

@subsubheading Examples:

@lisp
 (multiple-value-setq (quotient remainder) (truncate 3.2 2)) @EV{} 1
 quotient @EV{} 1
 remainder @EV{} 1.2
 (multiple-value-setq (a b c) (values 1 2)) @EV{} 1
 a @EV{} 1
 b @EV{} 2
 c @EV{} NIL
 (multiple-value-setq (a b) (values 4 5 6)) @EV{} 4
 a @EV{} 4
 b @EV{} 5
@end lisp


@subsubheading See Also:

@ref{setq},
@ref{symbol-macrolet}


@node values (Accessor)
@heading values (Accessor)
@syindex values
@cindex values


@subsubheading Syntax:

@DefunWithValues{values, @rest{} object, @starparam{object}}
@Defsetf{values, @rest{} place, new-values}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{place}---a @term{place}.

@param{new-value}---an @term{object}.

@subsubheading Description:

@code{values} 
returns the @param{objects} as @term{multiple values}@sub2{}.

@code{setf} of @code{values} is used to store the
@term{multiple values}@sub2{} @param{new-values} into the @param{places}.  
See @ref{SETFofVALUES, Section 5.1.2.3 (VALUES Forms as Places)}.

@subsubheading Examples:

@lisp
 (values) @EV{} @novalues{}
 (values 1) @EV{} 1
 (values 1 2) @EV{} 1, 2
 (values 1 2 3) @EV{} 1, 2, 3
 (values (values 1 2 3) 4 5) @EV{} 1, 4, 5
 (defun polar (x y)
   (values (sqrt (+ (* x x) (* y y))) (atan y x))) @EV{} POLAR
 (multiple-value-bind (r theta) (polar 3.0 4.0)
   (vector r theta))
@EV{} #(5.0 0.927295)
@end lisp


Sometimes it is desirable to indicate explicitly that a function returns
exactly one value.  For example, the function

@lisp
 (defun foo (x y)
   (floor (+ x y) y)) @EV{} FOO
@end lisp

returns two values because @code{floor} returns
two values.  It may be that the second value makes no sense,
or that for efficiency reasons it is desired not to compute the
second value.  @code{values} is the standard idiom
for indicating that only one value is to be returned:

@lisp
 (defun foo (x y)
   (values (floor (+ x y) y))) @EV{} FOO
@end lisp

This works because @code{values} 
returns exactly one value for each of
@param{args}; as for any function call,
if any of @param{args} produces more than one value, all but the
first are discarded.

@subsubheading See Also:

@ref{values-list},
@ref{multiple-value-bind},
@ref{multiple-values-limit},
@ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:

Since @code{values} is a @term{function}, not a @term{macro} or @term{special form},
it receives as @term{arguments} only the @term{primary values} of 
its @term{argument} @term{forms}.


@node values-list
@heading values-list (Function)
@syindex values-list
@cindex values-list


@subsubheading Syntax:

@DefunWithValues{values-list, list, @starparam{element}}

@subsubheading Arguments and Values:

@param{list}---a @term{list}.

@param{elements}---the @term{elements} of the @param{list}.

@subsubheading Description:

Returns the @term{elements} of the @param{list} as @term{multiple values}@sub2{}.

@subsubheading Examples:

@lisp
 (values-list nil) @EV{} @novalues{}
 (values-list '(1)) @EV{} 1
 (values-list '(1 2)) @EV{} 1, 2
 (values-list '(1 2 3)) @EV{} 1, 2, 3
@end lisp


@subsubheading Exceptional Situations:

Should signal @code{type-error} if its argument is not a @term{proper list}.

@subsubheading See Also:

@ref{multiple-value-bind},
@ref{multiple-value-list},
@ref{multiple-values-limit},
@ref{values (Accessor)}

@subsubheading Notes:

@lisp
 (values-list @param{list}) @EQ{} (apply #'values @param{list})
@end lisp


@f{(equal @param{x} (multiple-value-list (values-list @param{x})))}
returns @term{true} for all @term{lists} @param{x}.


@node multiple-values-limit
@heading multiple-values-limit (Constant Variable)
@syindex multiple-values-limit
@cindex multiple-values-limit


@subsubheading Constant Value:

An @term{integer} not smaller than @f{20}, 
the exact magnitude of which is @term{implementation-dependent}.

@subsubheading Description:

The upper exclusive bound on the number of @term{values} that may be
returned from a @term{function},
bound or assigned by @code{multiple-value-bind} or @code{multiple-value-setq},
or passed as a first argument to @code{nth-value}.
(If these individual limits might differ, the minimum value is used.)

@subsubheading See Also:

@ref{lambda-parameters-limit}, @ref{call-arguments-limit}

@subsubheading Notes:

Implementors are encouraged to make this limit as large as possible.


@node nth-value
@heading nth-value (Macro)
@syindex nth-value
@cindex nth-value
                         


@subsubheading Syntax:

@DefmacWithValues{nth-value, n form, object}

@subsubheading Arguments and Values:

@param{n}---a non-negative @term{integer}; @eval{}.

@param{form}---a @term{form}; @evalspecial{}.

@param{object}---an @term{object}.

@subsubheading Description:

Evaluates @param{n} and then @param{form},
returning as its only value the @param{n}th value @term{yielded} by @param{form},
or @nil{}@spc{}if @param{n} is greater than or equal to the number of @term{values}
returned by @param{form}.  (The first returned value is numbered @f{0}.)

@subsubheading Examples:

@lisp
 (nth-value 0 (values 'a 'b)) @EV{} A
 (nth-value 1 (values 'a 'b)) @EV{} B
 (nth-value 2 (values 'a 'b)) @EV{} NIL
 (let* ((x 83927472397238947423879243432432432)
        (y 32423489732)
        (a (nth-value 1 (floor x y)))
        (b (mod x y)))
   (values a b (= a b)))
@EV{} 3332987528, 3332987528, @term{true}
@end lisp


@subsubheading See Also:

@ref{multiple-value-list},
@ref{nth}

@subsubheading Notes:

Operationally, the following relationship is true, although @code{nth-value} 
might be more efficient in some @term{implementations} 
because, for example, some @term{consing} might be avoided.

@lisp
 (nth-value @param{n} @param{form}) @EQ{} (nth @param{n} (multiple-value-list @param{form}))
@end lisp



@node prog; prog*
@heading prog, prog* (Macro)
@syindex prog
@cindex prog
@syindex prog*
@cindex prog*



@subsubheading Syntax:

@DefmacWithValuesNewline{prog, @paren{@star{@curly{@param{var} @mat{@vert{}}  @paren{@param{var} @brac{@param{init-form}}}}}} @starparam{declaration} @star{@curly{@param{tag} @mat{@vert{}} @param{statement}}}, @starparam{result}}

@DefmacWithValuesNewline{prog*, @paren{@star{@curly{@param{var} @mat{@vert{}}  @paren{@param{var} @brac{@param{init-form}}}}}} @starparam{declaration}  @star{@curly{@param{tag} @mat{@vert{}} @param{statement}}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---variable name.

@param{init-form}---a @term{form}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{tag}---a @term{go tag}; @noeval{}.

@param{statement}---a @term{compound form}; @evalspecial{}.

@param{results}---@nil{}@spc{}if a @term{normal return} occurs,
or else, if an @term{explicit return} occurs, the @term{values} that were transferred.

@subsubheading Description:

Three distinct operations are performed by @code{prog} and 
@code{prog*}:  
they bind local variables,
they permit use of the @code{return} 
statement, and they permit use of the @code{go}
statement.
A typical @code{prog} looks like this:

@lisp
 (prog (var1 var2 (var3 init-form-3) var4 (var5 init-form-5))
       @starparam{declaration}
       statement1
  tag1
       statement2
       statement3
       statement4
  tag2
       statement5
       ...
       )
@end lisp


For @code{prog},
@param{init-forms} are evaluated first, in the order in which they are
supplied. The @param{vars} are then bound to the corresponding values in
parallel.  If no @param{init-form} 
is supplied for a given @param{var}, 
that @param{var} is  bound to @nil{}.

The body of @code{prog} is executed as if it were a @code{tagbody} @term{form};
the @code{go} statement can be used to transfer control
to a @param{tag}.
@param{Tags} label @param{statements}.

@code{prog} implicitly establishes a @code{block} named @nil{}@spc{}around
the entire @code{prog} @term{form}, so that @code{return} can be used
at any time to exit from the @code{prog} @term{form}.

The difference between @code{prog*} and @code{prog} is that
in @code{prog*} the @term{binding} and initialization of the @param{vars} 
is done @term{sequentially}, so that the @param{init-form} for each
one can use the values of previous ones.

@subsubheading Examples:
@lisp
(prog* ((y z) (x (car y)))
       (return x))
@end lisp

returns the @term{car} of the value of @f{z}.

@lisp
 (setq a 1) @EV{} 1
 (prog ((a 2) (b a)) (return (if (= a b) '= '/=))) @EV{} /=
 (prog* ((a 2) (b a)) (return (if (= a b) '= '/=))) @EV{} =
 (prog () 'no-return-value) @EV{} NIL
@end lisp

@lisp
 (defun king-of-confusion (w)
   "Take a cons of two lists and make a list of conses.
    Think of this function as being like a zipper."
   (prog (x y z)          ;Initialize x, y, z to NIL
        (setq y (car w) z (cdr w))
    loop
        (cond ((null y) (return x))
              ((null z) (go err)))
    rejoin
        (setq x (cons (cons (car y) (car z)) x))
        (setq y (cdr y) z (cdr z))
        (go loop)
    err
        (cerror "Will self-pair extraneous items"
                "Mismatch - gleep!  ~S" y)
        (setq z y)
        (go rejoin))) @EV{} KING-OF-CONFUSION 
@end lisp

This can be accomplished more perspicuously as follows:

@lisp
 (defun prince-of-clarity (w)
   "Take a cons of two lists and make a list of conses.
    Think of this function as being like a zipper."
   (do ((y (car w) (cdr y))
        (z (cdr w) (cdr z))
        (x '@empty{} (cons (cons (car y) (car z)) x)))
       ((null y) x)
     (when (null z)
       (cerror "Will self-pair extraneous items"
              "Mismatch - gleep!  ~S" y)
       (setq z y)))) @EV{} PRINCE-OF-CLARITY 
@end lisp


@subsubheading See Also:

@ref{block}, @ref{let}, @ref{tagbody}, @ref{go}, 
@ref{return}, @ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:
@code{prog} can be explained in terms of 
@code{block}, @code{let}, and @code{tagbody} as
follows:

@lisp
 (prog @param{variable-list} @param{declaration} . @param{body})
    @EQ{} (block nil (let @param{variable-list} @param{declaration} (tagbody . @param{body})))
@end lisp




@node prog1; prog2
@heading prog1, prog2 (Macro)
@syindex prog1
@cindex prog1
@syindex prog2
@cindex prog2
@anchor{prog1}
@anchor{prog2}


@subsubheading Syntax:

@DefmacWithValues{prog1, first-form             @starparam{form}, result-1}
@DefmacWithValues{prog2, first-form second-form @starparam{form}, result-2}

@subsubheading Arguments and Values:

@param{first-form}---a @term{form}; @evalspecial{}.

@param{second-form}---a @term{form}; @evalspecial{}.

@param{forms}---an @term{implicit progn}; @evalspecial{}.

@param{result-1}---the @term{primary value} resulting from 
the @term{evaluation} of @param{first-form}.

@param{result-2}---the @term{primary value} resulting from 
the @term{evaluation} of @param{second-form}.

@subsubheading Description:

@code{prog1} @term{evaluates} @param{first-form} 
and then @param{forms},
@term{yielding} as its only @term{value}
the @term{primary value} @term{yielded} by @param{first-form}.

@code{prog2} @term{evaluates} @param{first-form},
then @param{second-form},
and then @param{forms},
@term{yielding} as its only @term{value}
the @term{primary value} @term{yielded} by @param{first-form}.

@subsubheading Examples:

@lisp
 (setq temp 1) @EV{} 1
 (prog1 temp (print temp) (incf temp) (print temp))
@OUT{} 1
@OUT{} 2
@EV{} 1
 (prog1 temp (setq temp nil)) @EV{} 2
 temp @EV{} NIL
 (prog1 (values 1 2 3) 4) @EV{} 1 
 (setq temp (list 'a 'b 'c))
 (prog1 (car temp) (setf (car temp) 'alpha)) @EV{} A
 temp @EV{} (ALPHA B C)
 (flet ((swap-symbol-values (x y)
          (setf (symbol-value x) 
                (prog1 (symbol-value y)
                       (setf (symbol-value y) (symbol-value x))))))
   (let ((*foo* 1) (*bar* 2))
     (declare (special *foo* *bar*))
     (swap-symbol-values '*foo* '*bar*)
     (values *foo* *bar*)))
@EV{} 2, 1
 (setq temp 1) @EV{} 1
 (prog2 (incf temp) (incf temp) (incf temp)) @EV{} 3
 temp @EV{} 4
 (prog2 1 (values 2 3 4) 5) @EV{} 2
@end lisp


@subsubheading See Also:

@ref{multiple-value-prog1},
@ref{progn}

@subsubheading Notes:

@code{prog1} and @code{prog2} are typically used to @term{evaluate} 
one or more @term{forms} with side effects and return a @term{value} that
must be computed before some or all of the side effects happen.

@lisp
 (prog1 @starparam{form}) @EQ{} (values (multiple-value-prog1 @starparam{form}))
 (prog2 @param{form1} @starparam{form}) @EQ{} (let () @param{form1} (prog1 @starparam{form}))
@end lisp



@node progn
@heading progn (Special Operator)
@syindex progn
@cindex progn


@subsubheading Syntax:

@DefspecWithValues{progn, @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} of the @term{forms}.

@subsubheading Description:

@code{progn} evaluates @param{forms},
in the order in which they are given.

The values of each @param{form} but the last are discarded.

If @code{progn} appears as a @term{top level form}, then all @term{forms}
within that @code{progn} are considered by the compiler to be 
@term{top level forms}.

@subsubheading Examples:
@lisp
 (progn) @EV{} NIL
 (progn 1 2 3) @EV{} 3
 (progn (values 1 2 3)) @EV{} 1, 2, 3
 (setq a 1) @EV{} 1
 (if a
      (progn (setq a nil) 'here)
      (progn (setq a t) 'there)) @EV{} HERE
 a @EV{} NIL
@end lisp


@subsubheading See Also:

@ref{prog1}, @ref{prog2}, @ref{Evaluation, Section 3.1 (Evaluation)}

@subsubheading Notes:

Many places in @clisp{}@spc{}involve syntax that uses @term{implicit progns}.
That is, part of their syntax allows many @term{forms} to be written
that are to be evaluated sequentially, discarding the results
of all @term{forms} but the last and returning the results of the last @term{form}.
Such places include, but are not limited to, the following:
the body of a @term{lambda expression};
the bodies of various control and conditional @term{forms}
(@eg{} @code{case}, @code{catch}, @code{progn}, and @code{when}).


@node define-modify-macro
@heading define-modify-macro (Macro)
@syindex define-modify-macro
@cindex define-modify-macro


@subsubheading Syntax:

@DefmacWithValues{define-modify-macro, name lambda-list function @brac{documentation}, name}

@subsubheading Arguments and Values:

@param{name}---a @term{symbol}.

@param{lambda-list}---a @term{define-modify-macro lambda list} 

@param{function}---a @term{symbol}.

@param{documentation}---a @term{string}; @noeval{}.

@subsubheading Description:

@code{define-modify-macro} defines a @term{macro} named
@param{name} to @term{read} and @term{write} a @term{place}.

The arguments to the new @term{macro} are a @term{place},
followed
by the arguments that are supplied in @param{lambda-list}.
@term{Macros} defined with @code{define-modify-macro} 
correctly pass the @term{environment parameter} to 
@code{get-setf-expansion}.

When the @term{macro} is invoked, @param{function} 
is applied to the old contents of the @term{place}
and the @param{lambda-list} arguments to obtain the new value,
and the @term{place} is updated to contain the result.

Except for the issue of avoiding multiple evaluation (see below), the expansion
of a @code{define-modify-macro} is equivalent to the following:

@lisp
 (defmacro @param{name} (reference . @param{lambda-list})
   @param{documentation}
   @bq{}(setf ,reference
          (@param{function} ,reference ,@i{arg1} ,@i{arg2} ...)))
@end lisp


where @i{arg1}, @i{arg2}, ..., 
are the parameters appearing in @param{lambda-list};
appropriate provision is made for a @term{rest parameter}.

The @term{subforms} of the macro calls defined by @code{define-modify-macro}
are evaluated as specified in @ref{GenRefSubFormEval, Section 5.1.1.1 (Evaluation of Subforms to Places)}.

@param{Documentation} is attached as a @term{documentation string} 
to @param{name} (as kind @code{function})
and to the @term{macro function}.

If a @code{define-modify-macro} @term{form} appears as a @term{top level form},
the @term{compiler} must store the @term{macro} definition at compile time,
so that occurrences of the macro later on in the file can be expanded correctly.

@subsubheading Examples:
@lisp
 (define-modify-macro appendf (&rest args) 
    append "Append onto list") @EV{} APPENDF
 (setq x '(a b c) y x) @EV{} (A B C)
 (appendf x '(d e f) '(1 2 3)) @EV{} (A B C D E F 1 2 3)
 x @EV{} (A B C D E F 1 2 3)
 y @EV{} (A B C)
 (define-modify-macro new-incf (&optional (delta 1)) +)
 (define-modify-macro unionf (other-set &rest keywords) union)
@end lisp


@subsubheading Side Effects:

A macro definition is assigned to @param{name}.

@subsubheading See Also:

@ref{defsetf},
@ref{define-setf-expander},
@ref{documentation},
@ref{Syntactic Interaction of Documentation Strings and Declarations, Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)}


@node defsetf
@heading defsetf (Macro)
@syindex defsetf
@cindex defsetf



@subsubheading Syntax:

The ``short form'':

@DefmacWithValuesNewline{defsetf, access-fn update-fn @brac{documentation}, access-fn}

The ``long form'':

@DefmacWithValuesNewline{defsetf, access-fn lambda-list @paren{@starparam{store-variable}} @DeclsAndDoc{} @starparam{form}, access-fn}

@subsubheading Arguments and Values:

@param{access-fn}---a @term{symbol} which names a @term{function} or a @term{macro}.

@param{update-fn}---a @term{symbol} naming a @term{function} or @term{macro}.

@param{lambda-list}---a @term{defsetf lambda list}.

@param{store-variable}---a @term{symbol} (a @term{variable} @term{name}).

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{documentation}---a @term{string}; @noeval{}.

@param{form}---a @term{form}.

@subsubheading Description:

@code{defsetf} defines how to 
@code{setf} a @term{place}
of the form @f{(@i{access-fn} ...)} for relatively simple cases.
(See @code{define-setf-expander} for more general access to this facility.)
It must be the case that the @term{function} or @term{macro} named by @param{access-fn} 
evaluates all of its arguments.

@code{defsetf} may take one of two forms, called the ``short form'' and the ``long form,''
which are distinguished by the @term{type} of the second @term{argument}.

When the short form is used, 
@param{update-fn} must name 
a @term{function} (or @term{macro}) that takes one more argument
than @param{access-fn} takes.  When @code{setf} is given a @term{place}
that is a call on @param{access-fn}, it expands into
a call on @param{update-fn} that is given all the arguments to
@param{access-fn} and also, as its last argument, the new value
(which must be returned by @param{update-fn} as its value).

The long form @code{defsetf} 
resembles @code{defmacro}.
The @param{lambda-list} describes the arguments of @param{access-fn}. 
The @param{store-variables} describe the
value 
or values 
to be stored into the @term{place}.
The @param{body} must
compute the expansion of a @code{setf} of a call on @param{access-fn}.
The expansion function is defined in the same @term{lexical environment}
in which the @code{defsetf} @term{form} appears.

During the evaluation of the
@param{forms}, the variables in the @param{lambda-list} and the
@param{store-variables}
are bound to names of temporary variables,
generated as if by @code{gensym}
or @code{gentemp},
that will be bound by the
expansion of @code{setf} 
to the values of those @term{subforms}.  This binding
permits the
@param{forms} to be written without regard for order-of-evaluation
issues.  @code{defsetf} arranges for the temporary variables to be
optimized out of the final result in cases where that is possible.  

The body code in @code{defsetf} is implicitly enclosed in a 
@term{block} whose name is 
@param{access-fn}

@code{defsetf} 
ensures that @term{subforms} 
of the @term{place} are evaluated exactly once.

@param{Documentation} is attached to @param{access-fn} as a @term{documentation string}
of kind @t{setf}.

If a @code{defsetf} @term{form} appears as a @term{top level form},
the @term{compiler} must make the @term{setf expander} available so that
it may be used to expand calls to @code{setf} later on in the @term{file}.
Users must ensure that the @param{forms}, if any, can be evaluated
at compile time if the @param{access-fn} is used in a @term{place}
later in the same @term{file}.
The @term{compiler} must make these @term{setf expanders} available to 
compile-time calls to @code{get-setf-expansion} when its @param{environment} 
argument is a value received as the @term{environment parameter} of a @term{macro}.

@subsubheading Examples:
The effect of

@lisp
 (defsetf symbol-value set)
@end lisp

is built into the @clisp{}@spc{}system.
This causes the form @f{(setf (symbol-value foo) fu)}
to expand into @f{(set foo fu)}.

Note that

@lisp
 (defsetf car rplaca)
@end lisp

would be incorrect because @code{rplaca} does not return its last argument.

@lisp
 (defun middleguy (x) (nth (truncate (1- (list-length x)) 2) x)) @EV{} MIDDLEGUY
 (defun set-middleguy (x v)
    (unless (null x)
      (rplaca (nthcdr (truncate (1- (list-length x)) 2) x) v))
    v) @EV{} SET-MIDDLEGUY
 (defsetf middleguy set-middleguy) @EV{} MIDDLEGUY
 (setq a (list 'a 'b 'c 'd)
       b (list 'x)
       c (list 1 2 3 (list 4 5 6) 7 8 9)) @EV{} (1 2 3 (4 5 6) 7 8 9)
 (setf (middleguy a) 3) @EV{} 3
 (setf (middleguy b) 7) @EV{} 7
 (setf (middleguy (middleguy c)) 'middleguy-symbol) @EV{} MIDDLEGUY-SYMBOL
 a @EV{} (A 3 C D)
 b @EV{} (7)
 c @EV{} (1 2 3 (4 MIDDLEGUY-SYMBOL 6) 7 8 9)
@end lisp


An example of the use of the long form of @code{defsetf}:

@lisp
 (defsetf subseq (sequence start &optional end) (new-sequence)
   `(progn (replace ,sequence ,new-sequence
                    :start1 ,start :end1 ,end)
           ,new-sequence)) @EV{} SUBSEQ
@end lisp


@lisp
 (defvar *xy* (make-array '(10 10)))
 (defun xy (&key ((x x) 0) ((y y) 0)) (aref *xy* x y)) @EV{} XY
 (defun set-xy (new-value &key ((x x) 0) ((y y) 0))
   (setf (aref *xy* x y) new-value)) @EV{} SET-XY
 (defsetf xy (&key ((x x) 0) ((y y) 0)) (store)
   `(set-xy ,store 'x ,x 'y ,y)) @EV{} XY
 (get-setf-expansion '(xy a b))
@EV{} (#:t0 #:t1),
   (a b),
   (#:store),
   ((lambda (&key ((x #:x)) ((y #:y))) 
      (set-xy #:store 'x #:x 'y #:y))
    #:t0 #:t1),
   (xy #:t0 #:t1)
 (xy 'x 1) @EV{} NIL
 (setf (xy 'x 1) 1) @EV{} 1
 (xy 'x 1) @EV{} 1
 (let ((a 'x) (b 'y))
   (setf (xy a 1 b 2) 3)
   (setf (xy b 5 a 9) 14))
@EV{} 14
 (xy 'y 0 'x 1) @EV{} 1
 (xy 'x 1 'y 2) @EV{} 3
@end lisp


@subsubheading See Also:

@ref{documentation},
@ref{setf},
@ref{define-setf-expander},
@ref{get-setf-expansion},
@ref{Generalized Reference, Section 5.1 (Generalized Reference)},
@ref{Syntactic Interaction of Documentation Strings and Declarations, Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)}

@subsubheading Notes:

@param{forms} must include provision
for returning the correct value (the value 
or values 
of @param{store-variable}).  
This is
handled by @param{forms} rather than by @code{defsetf} because
in many cases this value can be returned at no extra cost, by calling a
function that simultaneously stores into the @term{place} and 
returns the correct value.

A @code{setf} of a call on @param{access-fn} also evaluates
all of @param{access-fn}'s arguments; it cannot treat any of them specially.
This means that @code{defsetf} 
cannot be used to describe how to store into
a @term{generalized reference} to a byte, such as @f{(ldb field reference)}.
@code{define-setf-expander}
is used to handle situations that 
do not fit the restrictions imposed by @code{defsetf}
and gives the user additional control.



@node define-setf-expander
@heading define-setf-expander (Macro)
@syindex define-setf-expander
@cindex define-setf-expander



@subsubheading Syntax:

@DefmacWithValuesNewline{define-setf-expander, @vtop{@hbox{access-fn lambda-list} @hbox{@DeclsAndDoc{} @starparam{form}}}, access-fn}

@subsubheading Arguments and Values:

@param{access-fn}---a @term{symbol} that @term{names} a @term{function} or @term{macro}.

@param{lambda-list}---@term{macro lambda list}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{documentation}---a @term{string}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@subsubheading Description:

@code{define-setf-expander} specifies the means by which @code{setf} 
updates a @term{place} that is referenced by @param{access-fn}.

When @code{setf} is given a @term{place} that is
specified in terms of @param{access-fn} and a new value for the 
@term{place}, it is expanded into a form that performs
the appropriate update. 

The @param{lambda-list} supports destructuring.
See @ref{Macro Lambda Lists, Section 3.4.4 (Macro Lambda Lists)}.

@param{Documentation} is attached to @param{access-fn} as a @term{documentation string}
of kind @t{setf}.

@param{Forms} constitute the body of the 
@term{setf expander} 
definition and must compute the @term{setf expansion} for a call on @code{setf} 
that references the @term{place} by means of the given
@param{access-fn}.
The @term{setf expander} function is defined in the same @term{lexical environment}
in which the @code{define-setf-expander} @term{form} appears.
While @param{forms} are being executed,
the variables in @param{lambda-list} are bound to parts of the @term{place} @term{form}.
The body @param{forms} (but not the @param{lambda-list})
in a @code{define-setf-expander} @term{form} are implicitly enclosed in a 
@term{block} whose name is 
@param{access-fn}.

The evaluation of @param{forms} must result in the five values
described in @ref{SetfExpansions, Section 5.1.1.2 (Setf Expansions)}.

If a @code{define-setf-expander} @term{form} appears as a @term{top level form},
the @term{compiler} must make the @term{setf expander} available so that
it may be used to expand calls to @code{setf} later on in the @term{file}.
@term{Programmers} must ensure that the @param{forms} can be evaluated
at compile time if the @param{access-fn} is used in a @term{place}
later in the same @term{file}.
The @term{compiler} must make these @term{setf expanders} available to 
compile-time calls to @code{get-setf-expansion} when its @param{environment} 
argument is a value received as the @term{environment parameter} of a @term{macro}.

@subsubheading Examples:
@lisp
 (defun lastguy (x) (car (last x))) @EV{} LASTGUY
 (define-setf-expander lastguy (x &environment env)
   "Set the last element in a list to the given value."
   (multiple-value-bind (dummies vals newval setter getter)
       (get-setf-expansion x env)
     (let ((store (gensym)))
       (values dummies
               vals
               `(,store)
               `(progn (rplaca (last ,getter) ,store) ,store)
               `(lastguy ,getter))))) @EV{} LASTGUY
 (setq a (list 'a 'b 'c 'd)
       b (list 'x)
       c (list 1 2 3 (list 4 5 6))) @EV{} (1 2 3 (4 5 6))
 (setf (lastguy a) 3) @EV{} 3
 (setf (lastguy b) 7) @EV{} 7
 (setf (lastguy (lastguy c)) 'lastguy-symbol) @EV{} LASTGUY-SYMBOL
 a @EV{} (A B C 3)
 b @EV{} (7)
 c @EV{} (1 2 3 (4 5 LASTGUY-SYMBOL))
@end lisp


@lisp
;;; Setf expander for the form (LDB bytespec int).
;;; Recall that the int form must itself be suitable for SETF.
 (define-setf-expander ldb (bytespec int &environment env)
   (multiple-value-bind (temps vals stores
                          store-form access-form)
       (get-setf-expansion int env);Get setf expansion for int.
     (let ((btemp (gensym))     ;Temp var for byte specifier.
           (store (gensym))     ;Temp var for byte to store.
           (stemp (first stores))) ;Temp var for int to store.
       (if (cdr stores) (error "Can't expand this."))
;;; Return the setf expansion for LDB as five values.
       (values (cons btemp temps)       ;Temporary variables.
               (cons bytespec vals)     ;Value forms.
               (list store)             ;Store variables.
               @bq{}(let ((,stemp (dpb ,store ,btemp ,access-form)))
                  ,store-form
                  ,store)               ;Storing form.
               @bq{}(ldb ,btemp ,access-form) ;Accessing form.
              ))))
@end lisp


@subsubheading See Also:

@ref{setf},
@ref{defsetf},
@ref{documentation},
@ref{get-setf-expansion},
@ref{Syntactic Interaction of Documentation Strings and Declarations, Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)}

@subsubheading Notes:

@code{define-setf-expander} differs from the long form of @code{defsetf}
in that while the body is being executed the @term{variables}
in @param{lambda-list} are bound to parts of the @term{place} @term{form},
not to temporary variables that will be bound to the values of such parts.
In addition, @code{define-setf-expander} does not have @code{defsetf}'s
restriction that @param{access-fn} must be a @term{function} 
or a function-like @term{macro}; an arbitrary @code{defmacro} destructuring
pattern is permitted in @param{lambda-list}.



@node get-setf-expansion
@heading get-setf-expansion (Function)
@syindex get-setf-expansion
@cindex get-setf-expansion



@subsubheading Syntax:

@DefunWithValuesNewline{get-setf-expansion, place @opt{} environment, vars\, vals\, store-vars\, writer-form\, reader-form}

@subsubheading Arguments and Values:

@param{place}---a @term{place}.

@param{environment}---an @term{environment} @term{object}.

@param{vars, vals, store-vars, writer-form, reader-form}---a @term{setf expansion}.

@subsubheading Description:

Determines
five values constituting the @term{setf expansion} for @param{place}
in @param{environment}; see @ref{SetfExpansions, Section 5.1.1.2 (Setf Expansions)}.



If @param{environment} is not supplied or @nil{},
the environment is the @term{null lexical environment}. 

@subsubheading Examples:

@lisp
 (get-setf-expansion 'x)
@EV{} NIL, NIL, (#:G0001), (SETQ X #:G0001), X 
@end lisp


@lisp
;;; This macro is like POP 

 (defmacro xpop (place &environment env)
   (multiple-value-bind (dummies vals new setter getter)
                        (get-setf-expansion place env)
      `(let* (,@@(mapcar #'list dummies vals) (,(car new) ,getter))
         (if (cdr new) (error "Can't expand this."))
         (prog1 (car ,(car new))
                (setq ,(car new) (cdr ,(car new)))
                ,setter))))
 
 (defsetf frob (x) (value) 
     `(setf (car ,x) ,value)) @EV{} FROB
;;; The following is an error; an error might be signaled at macro expansion time
 (flet ((frob (x) (cdr x)))  ;Invalid
   (xpop (frob z)))
 
@end lisp




@subsubheading See Also:

@ref{defsetf},
@ref{define-setf-expander},
@ref{setf}

@subsubheading Notes:

Any @term{compound form} is a valid @term{place},
since any @term{compound form} whose @term{operator} @param{f} has no @term{setf expander}
are expanded into a call to @f{(setf @param{f})}.



@node setf; psetf
@heading setf, psetf (Macro)
@syindex setf
@cindex setf
@syindex psetf
@cindex psetf
@anchor{setf}
@anchor{psetf}


@subsubheading Syntax:

@DefmacWithValues{setf, @stardown{pair}, @starparam{result}}
@DefmacWithValues{psetf, @stardown{pair}, @nil{}}

@auxbnf{pair, place newvalue}

@subsubheading Arguments and Values:

@param{place}---a @term{place}.

@param{newvalue}---a @term{form}.

@param{results}---the @term{multiple values}@sub2{} 
returned by the storing form for the last @param{place},
or @nil{}@spc{}if there are no @param{pairs}.

@subsubheading Description:

@code{setf} changes the @term{value} of @param{place} to be @param{newvalue}.

@f{(setf place newvalue)} 
expands into an update form that stores the 
result 
of evaluating
@param{newvalue} into the location referred to by @param{place}.
Some @param{place} forms 
involve uses of accessors that take optional arguments. 
Whether those optional arguments are permitted by 
@code{setf}, or what their use
is, is up to the 
@code{setf} expander function and is not under the control
of @code{setf}. 
The documentation for any @term{function} 
that accepts @keyref{optional}, @keyref{rest},
or @tt{&key} arguments and that 
claims to be usable with @code{setf} must specify
how those arguments are treated.


If more than one @param{pair} is supplied,
the @param{pairs} are processed sequentially; that is,

@lisp
 (setf place-1 newvalue-1
       place-2 newvalue-2
       ...
       place-N newvalue-N)
@end lisp

is precisely equivalent to

@lisp
 (progn (setf place-1 newvalue-1)
        (setf place-2 newvalue-2)
        ...
        (setf place-N newvalue-N))
@end lisp

For @code{psetf}, 
if more than one @param{pair} is supplied then the assignments of new values to places are
done in parallel.  More precisely, all @term{subforms} (in both the @param{place}
and @param{newvalue} @term{forms}) that are to be evaluated
are evaluated from left to right; after all evaluations have been performed,
all of the assignments are performed in an unpredictable order.

For detailed treatment of the expansion of @code{setf} and @code{psetf},
see @ref{Kinds of Places, Section 5.1.2 (Kinds of Places)}.

@subsubheading Examples:

@lisp
 (setq x (cons 'a 'b) y (list 1 2 3)) @EV{} (1 2 3) 
 (setf (car x) 'x (cadr y) (car x) (cdr x) y) @EV{} (1 X 3) 
 x @EV{} (X 1 X 3) 
 y @EV{} (1 X 3) 
 (setq x (cons 'a 'b) y (list 1 2 3)) @EV{} (1 2 3) 
 (psetf (car x) 'x (cadr y) (car x) (cdr x) y) @EV{} NIL 
 x @EV{} (X 1 A 3) 
 y @EV{} (1 A 3) 
@end lisp


@subsubheading Affected By:

@code{define-setf-expander},
@code{defsetf},
@code{*macroexpand-hook*}

@subsubheading See Also:

@ref{define-setf-expander},
@ref{defsetf},
@ref{macroexpand-1},
@ref{rotatef},
@ref{shiftf},
@ref{Generalized Reference, Section 5.1 (Generalized Reference)}


@node shiftf
@heading shiftf (Macro)
@syindex shiftf
@cindex shiftf


@subsubheading Syntax:

@DefmacWithValues{shiftf, @plusparam{place} newvalue, old-value-1}

@subsubheading Arguments and Values:

@param{place}---a @term{place}.

@param{newvalue}---a @term{form}; @eval{}.

@param{old-value-1}---an @term{object} (the old @term{value} of the first @param{place}).

@subsubheading Description:

@code{shiftf} modifies the values of each
@param{place} by storing @param{newvalue}
into the last @param{place}, and shifting the 
values of the second through the last @param{place}
into the remaining @param{places}.

If @param{newvalue} produces more values than there
are store variables, the extra values are ignored. If @param{newvalue}
produces fewer values than there are store variables, the missing values
are set to @nil{}.

In the form @tt{(shiftf @i{place1} @i{place2} ... @i{placen} @i{newvalue})}, 
the values in @i{place1} through @i{placen} are @term{read} and saved,
and @i{newvalue} is evaluated, for a total of @f{n}+1 values in all.
Values 2 through @f{n}+1 are then stored into @i{place1} through @i{placen}, respectively.
It is as if all the @param{places} form a shift register; the @param{newvalue}
is shifted in from the right, all values shift over to the left one place,
and the value shifted out of @i{place1} is returned. 

For information about the @term{evaluation} of @term{subforms} of @param{places},
see @ref{GenRefSubFormEval, Section 5.1.1.1 (Evaluation of Subforms to Places)}.  

@subsubheading Examples:

@lisp
 (setq x (list 1 2 3) y 'trash) @EV{} TRASH
 (shiftf y x (cdr x) '(hi there)) @EV{} TRASH
 x @EV{} (2 3)
 y @EV{} (1 HI THERE)

 (setq x (list 'a 'b 'c)) @EV{} (A B C)
 (shiftf (cadr x) 'z) @EV{} B
 x @EV{} (A Z C)
 (shiftf (cadr x) (cddr x) 'q) @EV{} Z
 x @EV{} (A (C) . Q)
 (setq n 0) @EV{} 0
 (setq x (list 'a 'b 'c 'd)) @EV{} (A B C D)
 (shiftf (nth (setq n (+ n 1)) x) 'z) @EV{} B
 x @EV{} (A Z C D)
@end lisp


@subsubheading Affected By:

@code{define-setf-expander},
@code{defsetf},
@code{*macroexpand-hook*}

@subsubheading See Also:

@ref{setf}, @ref{rotatef}, @ref{Generalized Reference, Section 5.1 (Generalized Reference)}

@subsubheading Notes:

The effect of
@f{(shiftf @param{place1} @param{place2} ... @param{placen} @param{newvalue})}
is roughly equivalent to

@lisp
 (let ((var1 @param{place1})
       (var2 @param{place2})
       ...
       (varn @param{placen})
       (var0 @param{newvalue}))
   (setf @param{place1} var2)
   (setf @param{place2} var3)
   ...
   (setf @param{placen} var0)
   var1)
@end lisp

except that the latter would evaluate any @term{subforms} 
of each @f{place} twice, whereas @code{shiftf} evaluates them once.
For example, 

@lisp
 (setq n 0) @EV{} 0
 (setq x (list 'a 'b 'c 'd)) @EV{} (A B C D)
 (prog1 (nth (setq n (+ n 1)) x)
        (setf (nth (setq n (+ n 1)) x) 'z)) @EV{} B
 x @EV{} (A B Z D)
@end lisp



@node rotatef
@heading rotatef (Macro)
@syindex rotatef
@cindex rotatef


@subsubheading Syntax:

@DefmacWithValues{rotatef, @starparam{place}, @nil{}}

@subsubheading Arguments and Values:

@param{place}---a @term{place}.

@subsubheading Description:

@code{rotatef} modifies the values of each @param{place} by
rotating values from one @param{place} into another.

If a @param{place} produces more values than there
are store variables, the extra values are ignored. If a @param{place}
produces fewer values than there are store variables, the missing values
are set to @nil{}.

In the form @f{(rotatef @i{place1} @i{place2} ... @i{placen})}, 
the values in @i{place1} through @i{placen} are @term{read} and @term{written}.
Values 2 through @i{n} 
and value 1 are then stored into @i{place1} through @i{placen}.
It is as if all the places form an end-around shift register
that is rotated one place to the left, with the value of @i{place1}
being shifted around the end to @i{placen}.

For information about the @term{evaluation} of @term{subforms} of @param{places},
see @ref{GenRefSubFormEval, Section 5.1.1.1 (Evaluation of Subforms to Places)}.  

@subsubheading Examples:
@lisp
 (let ((n 0)
        (x (list 'a 'b 'c 'd 'e 'f 'g)))
    (rotatef (nth (incf n) x)
             (nth (incf n) x)
             (nth (incf n) x))
    x) @EV{} (A C D B E F G)
@end lisp


@subsubheading See Also:

@ref{define-setf-expander},
@ref{defsetf},
@ref{setf},
@ref{shiftf},
@ref{*macroexpand-hook*},
@ref{Generalized Reference, Section 5.1 (Generalized Reference)}

@subsubheading Notes:

The effect of
@f{(rotatef @param{place1} @param{place2} ... @param{placen})}
is roughly equivalent to

@lisp
 (psetf @param{place1} @param{place2}
        @param{place2} @param{place3}
        ...
        @param{placen} @param{place1})
@end lisp

except that the latter would evaluate any @term{subforms}
of each @f{place} twice, whereas @code{rotatef} evaluates them once.


@node control-error
@heading control-error (Condition Type)
@syindex control-error
@cindex control-error


@subsubheading Class Precedence List:
@code{control-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{control-error} consists of error conditions that result from
invalid dynamic transfers of control in a program.  The errors that
result from giving @code{throw} a tag that is not active or from
giving @code{go} or @code{return-from} a tag that is no longer
dynamically available are @oftype{control-error}.


@node program-error
@heading program-error (Condition Type)
@syindex program-error
@cindex program-error


@subsubheading Class Precedence List:
@code{program-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{program-error}
consists of error conditions related to incorrect program syntax.  The
errors that result from naming a @term{go tag} or a @term{block tag}
that is not lexically apparent are @oftype{program-error}.


@node undefined-function
@heading undefined-function (Condition Type)
@syindex undefined-function
@cindex undefined-function


@subsubheading Class Precedence List:
@code{undefined-function},
@code{cell-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{undefined-function} consists of @term{error} @term{conditions}
that represent attempts to @term{read} the definition of an @term{undefined function}.

The name of the cell (see @code{cell-error}) is the @term{function name}
which was @term{funbound}.

@subsubheading See Also:

@ref{cell-error-name}




@node Iteration
@chapter Iteration
@menu
* The LOOP Facility::

Dictionary

* do; do*::
* dotimes::
* dolist::
* loop::
* loop-finish::
@end menu

@node The LOOP Facility
@section The LOOP Facility

@menu
* Overview of the Loop Facility::
* Variable Initialization and Stepping Clauses::
* Value Accumulation Clauses::
* Termination Test Clauses::
* Unconditional Execution Clauses::
* Conditional Execution Clauses::
* Miscellaneous Clauses::
* Examples of Miscellaneous Loop Features::
* Notes about Loop::
@end menu
@node Overview of the Loop Facility
@subsection Overview of the Loop Facility

@Themacro{loop} performs iteration.

@subsubsection Simple vs Extended Loop

@code{loop} @term{forms} are partitioned into two categories: 
simple @code{loop} @term{forms} 
and extended @code{loop} @term{forms}.

@unnumberedsubsubsec 6.1.1.1.1 Simple Loop

@anchor{SimpleLoop}

A simple @code{loop} @term{form} is one that has a body containing
only @term{compound forms}.
Each @term{form} is @term{evaluated} in turn from left to right.
When the last @param{form} has been @term{evaluated}, 
then the first @param{form} is evaluated again, and so on, in a never-ending cycle.
A simple @code{loop} @term{form} establishes an @term{implicit block} named @nil{}.
The execution of a simple @code{loop} can be terminated by explicitly
transfering control to the @term{implicit block} (using @code{return} or
@code{return-from}) or to some @term{exit point} outside of the @term{block} 
(@eg{} using @code{throw}, @code{go}, or @code{return-from}).

@unnumberedsubsubsec 6.1.1.1.2 Extended Loop


An extended @code{loop} @term{form} is one that has a body containing
@term{atomic} @term{expressions}.  When @themacro{loop} processes such a
@term{form}, it invokes a facility that is commonly called ``the Loop Facility.''

The Loop Facility provides standardized access to mechanisms commonly used 
in iterations through Loop schemas, which are introduced by @term{loop keywords}.

The body of an extended @code{loop} @term{form} is divided into @code{loop} clauses,
each which is in turn made up of @term{loop keywords} and @term{forms}. 



@subsubsection Loop Keywords

@term{Loop keywords} are not true @term{keywords}@sub1{}; 
they are special @term{symbols}, recognized by @term{name} rather than @term{object} identity,
that are meaningful only to the @code{loop} facility.
A @term{loop keyword} is a @term{symbol} but is recognized by its @term{name}
(not its identity), regardless of the @term{packages} in which it is @term{accessible}.  

In general, @term{loop keywords} are not @term{external symbols} of the @code{COMMON-LISP} @term{package},
except in the coincidental situation that a @term{symbol} with the same name as a
@term{loop keyword} was needed for some other purpose in @clisp{}.  For example,
there is a @term{symbol} in the @code{COMMON-LISP} @term{package} whose @term{name} is @f{"UNLESS"} but
not one whose @term{name} is @f{"UNTIL"}.

If no @term{loop keywords} are supplied in a @code{loop} @term{form},
the Loop Facility executes the loop body repeatedly; see @ref{SimpleLoop, Section 6.1.1.1.1 (Simple Loop)}.


@subsubsection Parsing Loop Clauses

The syntactic parts of an extended @code{loop} @term{form} are called clauses; 
the rules for parsing are determined by 
that clause's keyword.
The following example shows a @code{loop} @term{form} with six clauses:

@lisp
 (loop for i from 1 to (compute-top-value)       ; first clause
       while (not (unacceptable i))              ; second clause
       collect (square i)                        ; third clause
       do (format t "Working on ~D now" i)       ; fourth clause
       when (evenp i)                            ; fifth clause
         do (format t "~D is a non-odd number" i)
       finally (format t "About to exit!"))      ; sixth clause
@end lisp


Each @term{loop keyword} introduces 
either a compound loop clause or a simple loop clause
that can consist of a @term{loop keyword} followed by a single @term{form}.
The number of @term{forms} in a clause is determined by the @term{loop keyword} 
that begins the clause and by the auxiliary keywords in the clause.
The keywords @loopref{do}, 
@loopref{doing},
@loopref{initially}, and @loopref{finally} 
are the only loop keywords that can take any number of @term{forms} and 
group them as an @term{implicit progn}.

Loop clauses can contain auxiliary keywords, which are sometimes
called prepositions.  For example, the first clause in the code
above includes the prepositions @loopref{from} and @loopref{to}, 
which mark the value from which stepping begins and the value at which stepping
ends.

For detailed information about @code{loop} syntax,
see the @term{macro} @ref{loop}.


@subsubsection Expanding Loop Forms

A @code{loop} @term{macro form} expands into a @term{form} containing
one or more binding forms (that @term{establish} @term{bindings} of loop variables)
and a @code{block} and a @code{tagbody} (that express a looping control 
structure). The variables established in @code{loop} are bound as
if by @code{let} or @t{lambda}.  

Implementations can interleave the setting of initial values with the @term{bindings}.  
However, the assignment of the initial values is always calculated in the order
specified by the user.  A variable is thus sometimes bound to a meaningless value 
of the correct @term{type}, and then later in the prologue it is set to the true
initial value by using @code{setq}.
One implication of this interleaving is that it is @term{implementation-dependent}
whether the @term{lexical environment} in which the initial value @term{forms}
(variously called the @param{form1}, @param{form2}, @param{form3}, @param{step-fun},
@param{vector}, @param{hash-table}, and @param{package}) in any @param{for-as-subclause},
except @param{for-as-equals-then},
are @term{evaluated} includes only the loop variables preceding that @term{form}
or includes more or all of the loop variables;
the @param{form1} and @param{form2} in a @param{for-as-equals-then} form
includes the @term{lexical environment} of all the loop variables.

After the @term{form} is expanded, it consists of three basic parts in the 
@code{tagbody}: 
the loop prologue,
the loop body,
and the loop epilogue.


@table @asis
@item @id{@b{Loop prologue}}


The loop prologue contains @term{forms} 
that are executed before iteration begins, such as
any automatic variable initializations prescribed 
by the @param{variable} clauses, along with any @loopref{initially} clauses
in the order they appear in the source.

@item @id{@b{Loop body}}


The loop body contains those @term{forms} that are executed during iteration, 
including application-specific calculations, termination tests,
and variable @term{stepping}@sub1{}.

@item @id{@b{Loop epilogue}}


The loop epilogue contains @term{forms} that are executed after iteration 
terminates, such as @loopref{finally} clauses, if any, along
with any implicit return value from an @param{accumulation} clause or
an @param{termination-test} clause.
@end table


Some clauses from the source @term{form}
contribute code only to the loop prologue; these clauses must
come before other clauses that are in the main body of the @code{loop} form.            
Others contribute code only to the loop epilogue.
All other clauses contribute to the final 
translated @term{form} in the same 
order given in the original source @term{form} of the @code{loop}.

Expansion of the @code{loop} macro produces an @term{implicit block} named @nil{}@spc{}
unless @loopref{named} is supplied.
Thus, @code{return-from} (and sometimes @code{return})
can be used to return values from @code{loop} or to exit @code{loop}.


@subsubsection Summary of Loop Clauses

Loop clauses fall into one of the following categories:

@unnumberedsubsubsec 6.1.1.5.1 Summary of Variable Initialization and Stepping Clauses


The @loopref{for} and @loopref{as} constructs provide iteration control clauses
that establish a variable to be initialized.
@loopref{for} and @loopref{as} clauses can be combined with the loop
keyword @loopref{and} to get @term{parallel} initialization and @term{stepping}@sub1{}.
Otherwise, the initialization and @term{stepping}@sub1{} are @term{sequential}.

The @loopref{with} construct is similar to a single @code{let} clause.
@loopref{with} clauses can be combined using the @term{loop keyword} @loopref{and}
to get @term{parallel} initialization.

For more information, see @ref{Variable Initialization and Stepping Clauses, Section 6.1.2 (Variable Initialization and Stepping Clauses)}.


@unnumberedsubsubsec 6.1.1.5.2 Summary of Value Accumulation Clauses


The @loopref{collect} (or @loopref{collecting}) construct
takes one @term{form} in its clause
and adds the value of that @term{form} to the end of a @term{list} 
of values.  By default, the @term{list} of values is returned 
when the @code{loop} finishes.

The @loopref{append} (or @loopref{appending}) construct 
takes one @term{form} in its clause
and appends the value of that @term{form} to the end of a @term{list}
of values.  By default, the @term{list} of values is returned when the 
@code{loop} finishes.

The @loopref{nconc} (or @loopref{nconcing}) construct 
is similar to the @loopref{append} construct,  
but its @term{list} values are concatenated as if by the function
@loopref{nconc}.  By default, the @term{list} of values is returned when 
the @code{loop} finishes.

The @loopref{sum} (or @loopref{summing}) construct 
takes one @term{form} in its clause 
that must evaluate to a @term{number} and accumulates the sum of all these
@term{numbers}.  By default, the cumulative sum is returned when the
@code{loop} finishes.

The @loopref{count} (or @loopref{counting}) construct 
takes one @term{form} in its clause 
and counts the number of times that the @term{form} evaluates to @term{true}.
By default, the count is returned when the @code{loop} finishes.

The @loopref{minimize} (or @loopref{minimizing}) construct
takes one @term{form} in its clause 
and determines the minimum value obtained by evaluating that @term{form}.
By default, the minimum value is returned when the @code{loop} finishes.

The @loopref{maximize} (or @loopref{maximizing}) construct
takes one @term{form} in its clause 
and determines the maximum value obtained by evaluating that @term{form}.
By default, the maximum value is returned when the @code{loop} finishes.

For more information, see @ref{Value Accumulation Clauses, Section 6.1.3 (Value Accumulation Clauses)}.


@unnumberedsubsubsec 6.1.1.5.3 Summary of Termination Test Clauses


The @loopref{for} and @loopref{as} constructs provide a termination test
that is determined by the iteration control clause.

The @loopref{repeat} construct causes termination after a specified
number of iterations.
(It uses an internal variable to keep track of the number of iterations.)

The @loopref{while} construct takes one @term{form}, a @param{test}, 
and terminates the iteration if the @param{test} evaluates to @term{false}.
A @loopref{while} clause is equivalent to the expression 
@f{(if (not @param{test}) (loop-finish))}.

The @loopref{until} construct is the inverse of @loopref{while};
it terminates the iteration if the @param{test} evaluates to
any @term{non-nil} value.
An @loopref{until} clause is equivalent to the expression
@hbox{@f{(if @param{test} (loop-finish))}}.

The @loopref{always} construct takes one @term{form} and
terminates the @code{loop} if the @term{form} ever evaluates to @term{false};
in this case, the @code{loop} @term{form} returns @nil{}.
Otherwise, it provides a default return value of @code{t}.

The @loopref{never} construct takes one @term{form} and
terminates the @code{loop} if the @term{form} ever evaluates to @term{true};
in this case, the @code{loop} @term{form} returns @nil{}.
Otherwise, it provides a default return value of @code{t}.

The @loopref{thereis} construct takes one @term{form} and
terminates the @code{loop} if the @term{form} ever evaluates to
a @term{non-nil} @term{object};
in this case, the @code{loop} @term{form} returns that @term{object}.
Otherwise, it provides a default return value of @nil{}.

If multiple termination test clauses are specified, 
the @code{loop} @term{form} terminates if any are satisfied.


For more information, see @ref{Termination Test Clauses, Section 6.1.4 (Termination Test Clauses)}.


@unnumberedsubsubsec 6.1.1.5.4 Summary of Unconditional Execution Clauses


The @loopref{do} (or @loopref{doing}) construct evaluates all @term{forms} in its clause.

The @loopref{return} construct takes one 
@term{form}. Any @term{values} returned by the @term{form} are
immediately returned by the @code{loop} form.
It is equivalent to the clause
@f{do (return-from @i{block-name} @i{value})},
where @i{block-name} is the name specified in a @loopref{named}
clause, or @nil{}@spc{}if there is no @loopref{named} clause.

For more information, see @ref{Unconditional Execution Clauses, Section 6.1.5 (Unconditional Execution Clauses)}.


@unnumberedsubsubsec 6.1.1.5.5 Summary of Conditional Execution Clauses


The @loopref{if} and @loopref{when} constructs take one @term{form} as a test 
and a clause that is executed when the test @term{yields} @term{true}.
The clause can be a value accumulation, unconditional, or 
another conditional clause; it can also be any combination
of such clauses connected by @theloopkeyword{and}.

@Theloopconstruct{unless} is similar to @theloopconstruct{when}
except that it complements the test result.

@Theloopconstruct{else} provides an optional component of @loopref{if},
@loopref{when}, and @loopref{unless} clauses that is executed 
when an @loopref{if} or @loopref{when} test @term{yields} @term{false}
or when an @loopref{unless} test @term{yields} @term{true}.
The component is one of the clauses described under @loopref{if}.

@Theloopconstruct{end} provides an optional component to mark the
end of a conditional clause.

For more information, see @ref{Conditional Execution Clauses, Section 6.1.6 (Conditional Execution Clauses)}.


@unnumberedsubsubsec 6.1.1.5.6 Summary of Miscellaneous Clauses


@Theloopconstruct{named} gives a name for the @term{block} of the loop.

@Theloopconstruct{initially} causes its @term{forms} to be
evaluated in the loop prologue, which precedes all @code{loop} code
except for initial settings supplied by the constructs @loopref{with},
@loopref{for}, or @loopref{as}.

@Theloopconstruct{finally} causes its @term{forms} to
be evaluated in the loop epilogue after normal iteration terminates.

For more information, see @ref{Miscellaneous Clauses, Section 6.1.7 (Miscellaneous Clauses)}.



@subsubsection Order of Execution


With the exceptions listed below, clauses are executed in the loop body
in the order in which they appear in the source.  Execution is repeated 
until a clause
terminates the @code{loop} or until a @code{return}, @code{go},
or @code{throw} form is encountered 
which transfers control to a point outside of the loop.
The following actions are
exceptions to the linear order of execution:


@itemize @bullet{}

@item  All variables are initialized first, 
regardless of where the establishing clauses appear in the
source.  The order of initialization follows the order of these clauses.

@item  The code for any @loopref{initially} clauses is collected
into one @code{progn} in the order in which the clauses appear in
the source.  The collected code is executed once in the loop prologue
after any implicit variable initializations.

@item    The code for any @loopref{finally} clauses is collected 
into one @code{progn} in the order in which the clauses appear in
the source.  The collected code is executed once in the loop epilogue
before any implicit values from the accumulation clauses are returned.
Explicit returns anywhere in the source, however, will exit the 
@code{loop} without executing the epilogue code.

@item  A @loopref{with} clause introduces a variable @term{binding}
and an optional initial value.  The initial values are calculated 
in the order in which the @loopref{with} clauses occur.

@item  
Iteration control clauses implicitly perform the following actions:


@itemize --
@item  initialize variables;

@item  @term{step} variables, generally 
between each execution of the loop body;

@item perform termination tests, 
generally just before the execution of the
loop body.
@end itemize
@end itemize



@subsubsection Destructuring
@anchor{DestructuringLOOPVars}

The @param{d-type-spec} argument is used for destructuring.
If the
@param{d-type-spec} argument consists solely of @thetype{fixnum},
@code{float}, @code{t}, or @nil{}, the @loopref{of-type} keyword is optional.
The @loopref{of-type} construct is optional in these cases to provide backwards
compatibility; thus, the following two expressions are the same:

@lisp
;;; This expression uses the old syntax for type specifiers.
 (loop for i fixnum upfrom 3 ...)
 
;;; This expression uses the new syntax for type specifiers.
 (loop for i of-type fixnum upfrom 3 ...)

;; Declare X and Y to be of type VECTOR and FIXNUM respectively.
 (loop for (x y) of-type (vector fixnum) 
       in l do ...)
@end lisp


A @term{type specifier} for a destructuring pattern is a @term{tree} of 
@term{type specifiers} with the same shape as the @term{tree} of
@term{variable} @term{names}, with the following exceptions:


@itemize @bullet{}
@item
When aligning the @term{trees}, an @term{atom} in the
@term{tree} of @term{type specifiers} that matches a @term{cons} 
in the variable tree declares the same @term{type} for each variable
in the subtree rooted at the @term{cons}.

@item 
A @term{cons} in the @term{tree} of @term{type specifiers} that 
matches an @term{atom} in the @term{tree} of @term{variable} @term{names}
is a @term{compound type specifer}.
@end itemize


Destructuring allows @term{binding} of a set of variables to a corresponding
set of values anywhere that a value can normally be bound to a single
variable.  During @code{loop} expansion, 
each variable in the variable list
is matched with the values in the values list.  If there are more variables
in the variable list than there are values in the values list, the 
remaining variables are given a value of @nil{}.  If there are more
values than variables listed, the extra values are discarded.


To assign values from a list to the variables @f{a},
@f{b}, and @f{c}, the @loopref{for} clause could be used to
bind the variable @f{numlist} to the 
@term{car} of the supplied @param{form},
and then another @loopref{for} clause could be used to bind the variables
@f{a}, @f{b}, and @f{c} @term{sequentially}.  

@lisp
;; Collect values by using FOR constructs.
 (loop for numlist in '((1 2 4.0) (5 6 8.3) (8 9 10.4))
       for a of-type integer = (first numlist)
       and b of-type integer = (second numlist)
       and c of-type float = (third numlist)
       collect (list c b a))
@EV{} ((4.0 2 1) (8.3 6 5) (10.4 9 8))
@end lisp


Destructuring makes this process easier by allowing the variables to
be bound in each loop iteration.  
@term{Types} can be declared by using a 
list of @param{type-spec} arguments.  If 
all the @term{types}
are the same, a shorthand destructuring syntax can be used, as the second
example illustrates.

@lisp
;; Destructuring simplifies the process.
 (loop for (a b c) of-type (integer integer float) in
       '((1 2 4.0) (5 6 8.3) (8 9 10.4))
       collect (list c b a))
@EV{} ((4.0 2 1) (8.3 6 5) (10.4 9 8))
 

;; If all the types are the same, this way is even simpler.
 (loop for (a b c) of-type float in
       '((1.0 2.0 4.0) (5.0 6.0 8.3) (8.0 9.0 10.4))
       collect (list c b a))
@EV{} ((4.0 2.0 1.0) (8.3 6.0 5.0) (10.4 9.0 8.0))
@end lisp




If destructuring is used to declare or initialize a number of groups
of variables into @term{types}, the @term{loop keyword} @loopref{and} can be used
to simplify the process further.
@lisp
;; Initialize and declare variables in parallel by using the AND construct.
 (loop with (a b) of-type float = '(1.0 2.0)
       and (c d) of-type integer = '(3 4)
       and (e f)
       return (list a b c d e f))
@EV{} (1.0 2.0 3 4 NIL NIL)
@end lisp



If @nil{}@spc{}is used in a destructuring list, no variable is provided for
its place.

@lisp
 (loop for (a nil b) = '(1 2 3)
       do (return (list a b)))
@EV{} (1 3)
@end lisp


Note that 
@term{dotted lists}
can specify destructuring.

@lisp
 (loop for (x . y) = '(1 . 2)
       do (return y))
@EV{} 2
 (loop for ((a . b) (c . d)) of-type ((float . float) (integer . integer)) in
       '(((1.2 . 2.4) (3 . 4)) ((3.4 . 4.6) (5 . 6)))
       collect (list a b c d))
@EV{} ((1.2 2.4 3 4) (3.4 4.6 5 6))
@end lisp


An error @oftype{program-error} is signaled (at macro expansion time)
if the same variable is bound twice in any variable-binding
clause of a single @code{loop} expression.  Such variables include
local variables, iteration control variables, and variables found by
destructuring.


@subsubsection Restrictions on Side-Effects

See @ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}.



@node Variable Initialization and Stepping Clauses
@subsection Variable Initialization and Stepping Clauses

@subsubsection Iteration Control

Iteration control clauses allow direction of @code{loop} iteration.
The @term{loop keywords} @loopref{for} and @loopref{as}
designate iteration control clauses.
Iteration control clauses differ with respect to the specification of
termination tests and to the initialization and @term{stepping}@sub1{}
of loop variables.  Iteration clauses by themselves
do not cause the Loop Facility to return values, but they
can be used in conjunction with value-accumulation clauses to
return values.  

All variables are initialized in the loop prologue.  
A @term{variable} @term{binding} has @term{lexical scope}
unless it is proclaimed @code{special};
thus, by default, the variable can be @term{accessed} only by @term{forms} 
that lie textually within the @code{loop}.
Stepping assignments are made in the loop body before any other @term{forms}
are evaluated in the body.  

The variable argument in iteration control clauses can be a 
destructuring list.  A destructuring list
is a @term{tree} whose @term{non-nil} @term{atoms} are @term{variable} @term{names}.
See @ref{DestructuringLOOPVars, Section 6.1.1.7 (Destructuring)}.

The iteration control clauses @loopref{for}, @loopref{as},  and @loopref{repeat} 
must precede any other loop clauses, except
@loopref{initially}, @loopref{with}, and @loopref{named},
since they establish variable @term{bindings}.  
When iteration control clauses are
used in a @code{loop},
the corresponding
termination tests in the loop body are evaluated
before any other loop body code is executed.


If multiple iteration clauses are used to control iteration, variable
initialization and @term{stepping}@sub1{} occur @term{sequentially} by default.  
The @loopref{and} construct can be used to connect two or more
iteration clauses when @term{sequential} @term{binding} and 
@term{stepping}@sub1{} are not necessary.
The iteration behavior of clauses joined by @loopref{and}
is analogous to the behavior of the macro @code{do} with
respect to @code{do*}.

The @loopref{for} and @loopref{as} clauses iterate by using one or more local 
loop  variables that are initialized to some value and that 
can be modified or @term{stepped}@sub1{} after each iteration.  
For these clauses, iteration terminates when a local
variable reaches some supplied value or when some other loop clause
terminates iteration.
At each iteration, variables can be 
@term{stepped}@sub1{} by an increment or a decrement
or can be assigned a new value by the evaluation of a @term{form}).
Destructuring can be used to assign 
values to variables during iteration. 

The @loopref{for} and @loopref{as} keywords are synonyms; they can be used
interchangeably.  There are seven syntactic formats for these constructs.
In each syntactic format, the @term{type} of
@param{var} can be supplied by the optional @param{type-spec}
argument.  If @param{var} is a destructuring list, the @term{type}
supplied by the @param{type-spec} argument must appropriately match
the elements of the list.  
By convention, @loopref{for} introduces new iterations and @loopref{as}
introduces iterations that depend on a previous iteration specification.

@unnumberedsubsubsec 6.1.2.1.1 The for-as-arithmetic subclause


In the @i{for-as-arithmetic} subclause, the @loopref{for} 
or @loopref{as} construct iterates from the value supplied by
@param{form1} to the value supplied by @param{form2} in increments or
decrements denoted by @param{form3}. Each
expression is evaluated only once and must evaluate to a @term{number}.  
The variable @param{var} is bound to the value of 
@param{form1} in the first iteration and is @term{stepped}@sub1{}
by the value of @param{form3} in each succeeding iteration,
or by 1 if @param{form3} is not provided.  
The following @term{loop keywords} serve as valid prepositions within this 
syntax.
At least one of the 
prepositions must be used; 
and at most one from each line may be used in a single subclause.


@table @asis

@item @id{@tt{from | downfrom | upfrom}}


@item @id{@tt{to | downto | upto | below | above}}


@item @id{@tt{by}}
@end table


The prepositional phrases in each subclause may appear in any order.
For example, either ``@f{from x by y}'' or ``@f{by y from x}'' is permitted.
However, because left-to-right order of evaluation is preserved,
the effects will be different in the case of side effects.
@cindex order of evaluation
@cindex evaluation order
Consider:

@lisp
(let ((x 1)) (loop for i from x by (incf x) to 10 collect i))
@EV{} (1 3 5 7 9)
(let ((x 1)) (loop for i by (incf x) from x to 10 collect i))
@EV{} (2 4 6 8 10)
@end lisp


The descriptions of the prepositions follow:


@table @asis
@item @id{@tt{from}}


The @term{loop keyword} @loopref{from} specifies the value from which
@term{stepping}@sub1{} begins, as supplied by @param{form1}.  
@term{Stepping}@sub1{} is incremental by default.  If 
decremental @term{stepping}@sub1{} is desired, 
the preposition @loopref{downto} 
or @loopref{above} must be used with @param{form2}.  For incremental
@term{stepping}@sub1{}, the default @loopref{from} value is 0.

@item @id{@tt{downfrom, upfrom}}


The @term{loop keyword} @loopref{downfrom} 
indicates that the variable @param{var} is decreased in decrements
supplied by @param{form3}; the @term{loop keyword} @loopref{upfrom} indicates that 
@param{var} is increased in increments supplied by @param{form3}.

@item @id{@tt{to}}


The @term{loop keyword} @loopref{to} marks the end value
for @term{stepping}@sub1{} supplied in @param{form2}.
@term{Stepping}@sub1{} is incremental by default.
If decremental @term{stepping}@sub1{} is desired, 
the preposition @loopref{downfrom} must be used with @param{form1},
or else the preposition @loopref{downto} or @loopref{above} should be used instead
of @loopref{to} with @param{form2}.

@item @id{@tt{downto, upto}}


The @term{loop keyword} @loopref{downto} specifies decremental @term{stepping};
the @term{loop keyword} @loopref{upto} specifies incremental @term{stepping}.
In both cases, the amount of change on each step is specified by @param{form3},
and the @code{loop} terminates when the variable @param{var} passes 
the value of @param{form2}.
Since there is no default for @param{form1} in decremental @term{stepping}@sub1{},
a @param{form1} value must be supplied (using @loopref{from} or @loopref{downfrom})
when @loopref{downto} is supplied.

@item @id{@tt{below, above}}


The @term{loop keywords} @loopref{below} and @loopref{above} are analogous to
@loopref{upto} and @loopref{downto} respectively.  These keywords stop
iteration just before the value of the variable @param{var} reaches the value 
supplied by @param{form2}; the end value of @param{form2} is not included.
Since there is no default for @param{form1} in decremental @term{stepping}@sub1{},
a @param{form1} value must be supplied (using @loopref{from} or @loopref{downfrom})
when @loopref{above} is supplied.

@item @id{@tt{by}}


The @term{loop keyword} @loopref{by} marks the increment or decrement supplied by
@param{form3}.  The value of @param{form3} can be any 
positive 
@term{number}.
The default value is 1.
@end table


In an iteration control clause, the @loopref{for} or @loopref{as} construct
causes termination when the supplied limit is reached.  That is,
iteration continues until the value @param{var} is stepped to the
exclusive or inclusive limit supplied by @param{form2}.  The range is
exclusive if @param{form3} increases or decreases @param{var}
to the value of @param{form2} without reaching that value; the loop
keywords @loopref{below} and @loopref{above} provide exclusive limits.  An
inclusive limit allows @param{var} to attain the value of
@param{form2}; @loopref{to}, @loopref{downto}, and @loopref{upto} provide inclusive
limits.  

@unnumberedsubsubsec 6.1.2.1.1.1 Examples of for-as-arithmetic subclause


@lisp
;; Print some numbers.
 (loop for i from 1 to 3
       do (print i))
@OUT{} 1
@OUT{} 2
@OUT{} 3
@EV{} NIL
 
;; Print every third number.
 (loop for i from 10 downto 1 by 3
       do (print i))
@OUT{} 10 
@OUT{} 7 
@OUT{} 4 
@OUT{} 1 
@EV{} NIL
 
;; Step incrementally from the default starting value.
 (loop for i below 3
       do (print i))
@OUT{} 0
@OUT{} 1
@OUT{} 2
@EV{} NIL
@end lisp




@unnumberedsubsubsec 6.1.2.1.2 The for-as-in-list subclause


In the @i{for-as-in-list} subclause,
the @loopref{for} 
or @loopref{as} construct iterates over the contents of a 
@term{list}.  It checks for 
the end of the @term{list} as if by using @code{endp}.  
The variable @param{var} is bound to the successive elements  of 
the @term{list} in @param{form1} before each
iteration.  At the end of each iteration, the function @param{step-fun}
is applied to the @term{list}; the default value for @param{step-fun} is
@code{cdr}.
The @term{loop keywords} @loopref{in} and @loopref{by} serve as valid prepositions in
this syntax.
The @loopref{for} or @loopref{as} construct causes termination when the
end of the @term{list} is reached.

@unnumberedsubsubsec 6.1.2.1.2.1 Examples of for-as-in-list subclause


@lisp
;; Print every item in a list.
 (loop for item in '(1 2 3) do (print item))
@OUT{} 1
@OUT{} 2
@OUT{} 3
@EV{} NIL
 
;; Print every other item in a list.
 (loop for item in '(1 2 3 4 5) by #'cddr
       do (print item))
@OUT{} 1
@OUT{} 3
@OUT{} 5
@EV{} NIL
 
;; Destructure a list, and sum the x values using fixnum arithmetic.
 (loop for (item . x) of-type (t . fixnum) in '((A . 1) (B . 2) (C . 3))
       unless (eq item 'B) sum x)
@EV{} 4
@end lisp




@unnumberedsubsubsec 6.1.2.1.3 The for-as-on-list subclause


In the @i{for-as-on-list} subclause, the @loopref{for} or @loopref{as}
construct iterates over
a @term{list}. It checks for the
end of the @term{list} as if by using @code{atom}.
The variable @param{var} is bound to the successive tails of the 
@term{list} in 
@param{form1}.  At the end of each iteration, the function @param{step-fun}
is applied to the @term{list}; the default value for @param{step-fun} is @code{cdr}.
The @term{loop keywords} @loopref{on} and @loopref{by} serve as valid
prepositions in this syntax.
The @loopref{for} or @loopref{as} construct causes termination when the
end of the @term{list} is reached.

@unnumberedsubsubsec 6.1.2.1.3.1 Examples of for-as-on-list subclause


@lisp
;; Collect successive tails of a list.
 (loop for sublist on '(a b c d)
       collect sublist)
@EV{} ((A B C D) (B C D) (C D) (D))
 
;; Print a list by using destructuring with the loop keyword ON.
 (loop for (item) on '(1 2 3)
       do (print item))
@OUT{} 1 
@OUT{} 2 
@OUT{} 3 
@EV{} NIL
 
@end lisp




@unnumberedsubsubsec 6.1.2.1.4 The for-as-equals-then subclause


In the @i{for-as-equals-then} subclause
the @loopref{for} 
or @loopref{as} construct 
initializes the variable @param{var} by setting it to the
result of evaluating @param{form1} on the first iteration, then setting
it to the result of evaluating @param{form2} on the second and
subsequent iterations.  If @param{form2} is omitted, the construct
uses @param{form1} on the second and
subsequent iterations.  
The @term{loop keywords} @mat{=} and @loopref{then} serve as valid prepositions
in this syntax. 
This construct does not provide any termination tests.

@unnumberedsubsubsec 6.1.2.1.4.1 Examples of for-as-equals-then subclause


@lisp
;; Collect some numbers.
 (loop for item = 1 then (+ item 10)
       for iteration from 1 to 5
       collect item)
@EV{} (1 11 21 31 41)
@end lisp




@unnumberedsubsubsec 6.1.2.1.5 The for-as-across subclause


In the @i{for-as-across} subclause the @loopref{for} 
or @loopref{as} construct binds the variable @param{var} to the value of
each element in the array @param{vector}.
The @term{loop keyword} @loopref{across} marks the array @param{vector}; @loopref{across}
is used as a preposition in this syntax.
Iteration stops when there are no more elements in the supplied
@term{array} that can be referenced.
Some implementations might recognize a @code{the} special form
in the @param{vector} form to produce more efficient code.

@unnumberedsubsubsec 6.1.2.1.5.1 Examples of for-as-across subclause


@lisp
 (loop for char across (the simple-string (find-message channel))
       do (write-char char stream))
@end lisp




@unnumberedsubsubsec 6.1.2.1.6 The for-as-hash subclause


In the @i{for-as-hash} subclause
the @loopref{for} 
or @loopref{as} construct 
iterates over the elements, keys, and values of a @term{hash-table}.
In this syntax, a compound preposition is used to designate access to a
@term{hash table}.
The variable @param{var} takes on the value of each hash key
or hash value in the supplied @param{hash-table}. 
The following @term{loop keywords} serve as valid prepositions within this syntax:


@table @asis

@item @id{@loopref{being}}


The keyword @loopref{being} introduces either the Loop schema 
@loopref{hash-key} or @loopref{hash-value}.

@item @id{@loopref{each}, @loopref{the}}


The @term{loop keyword} @loopref{each}
follows the @term{loop keyword} @loopref{being} when @loopref{hash-key} or
@loopref{hash-value} is used.  The @term{loop keyword} @tt{the} is used with
@loopref{hash-keys} and @loopref{hash-values} only for ease of reading.
This agreement isn't required.

@item @id{@loopref{hash-key}, @loopref{hash-keys}}


These @term{loop keywords} access each key entry of the @term{hash table}.  If 
the name @loopref{hash-value} is supplied in a @loopref{using} construct with one
of these Loop schemas, the iteration can optionally access the keyed
value. The order in which the keys are accessed is undefined; empty
slots in the @term{hash table} are ignored.  

@item @id{@loopref{hash-value}, @loopref{hash-values}}


These @term{loop keywords} access each value entry of a 
@term{hash table}.  If 
the name @loopref{hash-key} is supplied in a @loopref{using} construct with one of
these Loop schemas, the iteration can optionally access the key that
corresponds to the value.  The order in which the keys are accessed is
undefined; empty slots in the @term{hash table} are ignored. 

@item @id{@loopref{using}}


The @term{loop keyword} @loopref{using} introduces 
the optional key or the keyed value to
be accessed.  It allows access to the hash key if iteration is over
the hash values, and the hash value if 
iteration is over the hash keys.

@item @id{@loopref{in}, @loopref{of}}


These loop prepositions introduce @param{hash-table}.
@end table


In effect 

@loopref{being}
@curly{@loopref{each} | @loopref{the}}
@curly{@loopref{hash-value}  |
@loopref{hash-values} |
@loopref{hash-key}    |
@loopref{hash-keys}}
@curly{@loopref{in} | @loopref{of}}

is a compound preposition.

Iteration stops when there are no more hash keys or hash values to be
referenced in the supplied @param{hash-table}.


@unnumberedsubsubsec 6.1.2.1.7 The for-as-package subclause


In the @i{for-as-package} subclause
the @loopref{for} 
or @loopref{as} construct                    
iterates over the @term{symbols} in a @term{package}.
In this syntax, a compound preposition is used to designate access to a
@term{package}.
The variable @param{var} takes on the value of each @term{symbol}
in the supplied @term{package}.  
The following @term{loop keywords} serve as valid prepositions within this syntax:


@table @asis

@item @id{@loopref{being}}


The keyword @loopref{being} introduces either the Loop schema 
@loopref{symbol}, @loopref{present-symbol},  or @loopref{external-symbol}.

@item @id{@loopref{each}, @loopref{the}}


The @term{loop keyword} @loopref{each}
follows the @term{loop keyword} @loopref{being} when @loopref{symbol}, 
@loopref{present-symbol}, or @loopref{external-symbol} is used.  
The @term{loop keyword} @loopref{the} is used with @loopref{symbols}, 
@loopref{present-symbols}, and @loopref{external-symbols} only for ease of reading.
This agreement isn't required.

@item @id{@loopref{present-symbol}, @loopref{present-symbols}}


These Loop schemas iterate over the @term{symbols} 
that are @term{present} in a @term{package}.
The @param{package} to be iterated over is supplied in the same way
that @term{package} arguments to @code{find-package} are supplied.  
If the @param{package} for the iteration is not supplied, 
the @term{current package} is used.  
If a @param{package} that does not exist is supplied, 
an error @oftype{package-error} is signaled.

@item @id{@loopref{symbol}, @loopref{symbols}}


These Loop schemas iterate over @term{symbols} that are
@term{accessible} in a given @param{package}.  
The @param{package} to be iterated over is supplied in the same way
that @term{package} arguments to @code{find-package} are supplied.
If the @param{package} for the iteration is not supplied, 
the @term{current package} is used.
If a @param{package} that does not exist is supplied, 
an error @oftype{package-error} is signaled.

@item @id{@loopref{external-symbol}, @loopref{external-symbols}}


These Loop schemas iterate over the @term{external symbols} of a @param{package}.
The @param{package} to be iterated over is supplied in the same way
that @term{package} arguments to @code{find-package} are supplied.
If the @param{package} for the iteration is not supplied, 
the @term{current package} is used.
If a @param{package} that does not exist is supplied, 
an error @oftype{package-error} is signaled.

@item @id{@loopref{in}, @loopref{of}}


These loop prepositions introduce @param{package}.
@end table


In effect 

@loopref{being}
@curly{@loopref{each} | @loopref{the}}
@curly{@loopref{symbol}          |
@loopref{symbols}         |
@loopref{present-symbol}  |
@loopref{present-symbols} |
@loopref{external-symbol} |
@loopref{external-symbols}}
@curly{@loopref{in} | @loopref{of}}

is a compound preposition.

Iteration stops when there are no more @term{symbols} to be referenced 
in the supplied @param{package}.

@unnumberedsubsubsec 6.1.2.1.7.1 Examples of for-as-package subclause


@lisp
 (let ((*package* (make-package "TEST-PACKAGE-1")))
   ;; For effect, intern some symbols
   (read-from-string "(THIS IS A TEST)")
   (export (intern "THIS"))
   (loop for x being each present-symbol of *package*
          do (print x)))
@OUT{} A 
@OUT{} TEST 
@OUT{} THIS
@OUT{} IS 
@EV{} NIL
@end lisp





@subsubsection Local Variable Initializations

When a @code{loop} @term{form} is executed, the local variables are bound and are
initialized to some value.  These local variables exist until @code{loop}
iteration terminates, at which point they cease to exist.  
Implicit variables are also established by iteration control clauses and the
@loopref{into} preposition of accumulation clauses.

The @loopref{with} construct initializes variables that are local to 
a loop.  The variables are initialized one time only.
If the optional @param{type-spec} argument is supplied for the variable 
@param{var}, but there is no related expression to be evaluated, @param{var}
is initialized to an appropriate default value for its @term{type}.
For example, for the types @code{t}, @code{number}, 
and @code{float},
the default values are @nil{}, @f{0}, and @f{0.0} respectively.
The consequences are undefined if a 
@param{type-spec} argument is supplied for @param{var} if
the related expression returns a value that is not of the supplied 
@term{type}.
By default, the @loopref{with} construct initializes variables
@term{sequentially}; that is, one variable is assigned a value before the
next expression is evaluated.  However, by using the @term{loop keyword} @loopref{and}
to join several @loopref{with} clauses, 
initializations can be forced to occur in @term{parallel}; that 
is, all of the supplied
@param{forms} are evaluated, and the results are bound to the respective
variables simultaneously.

@term{Sequential} @term{binding} is used when it is desireable for the initialization of
some variables to depend on the values of previously bound variables.
For example, suppose the variables @f{a}, @f{b}, and @f{c} are to be bound in sequence:

@lisp
 (loop with a = 1 
       with b = (+ a 2) 
       with c = (+ b 3)
       return (list a b c))
@EV{} (1 3 6)
@end lisp


The execution of the above @code{loop} is equivalent to the execution of
the following code:

@lisp
 (block nil
   (let* ((a 1)
          (b (+ a 2))
          (c (+ b 3)))
     (tagbody
         (next-loop (return (list a b c))
                    (go next-loop)
                    end-loop))))
@end lisp


If the values of previously bound variables are not needed
for the initialization of other local variables, an 
@loopref{and} clause can be used to 
specify that the bindings are to occur in @term{parallel}:

@lisp
 (loop with a = 1 
       and b = 2 
       and c = 3
       return (list a b c))
@EV{} (1 2 3)
@end lisp


The execution of the above loop is equivalent to the execution of
the following code:

@lisp
 (block nil
   (let ((a 1)
         (b 2)
         (c 3))
     (tagbody
         (next-loop (return (list a b c))
                    (go next-loop)
                    end-loop))))
@end lisp


@unnumberedsubsubsec 6.1.2.2.1 Examples of WITH clause


@lisp
;; These bindings occur in sequence.
 (loop with a = 1 
       with b = (+ a 2) 
       with c = (+ b 3)
       return (list a b c))
@EV{} (1 3 6)
 
;; These bindings occur in parallel.
 (setq a 5 b 10)
@EV{} 10
 (loop with a = 1
       and b = (+ a 2)
       and c = (+ b 3)
       return (list a b c))
@EV{} (1 7 13)
 
;; This example shows a shorthand way to declare local variables 
;; that are of different types.
 (loop with (a b c) of-type (float integer float)
       return (format nil "~A ~A ~A" a b c))
@EV{} "0.0 0 0.0"
 
;; This example shows a shorthand way to declare local variables 
;; that are the same type.
 (loop with (a b c) of-type float 
       return (format nil "~A ~A ~A" a b c))
@EV{} "0.0 0.0 0.0"
@end lisp





@node Value Accumulation Clauses
@subsection Value Accumulation Clauses


The constructs @loopref{collect}, @loopref{collecting},
@loopref{append}, @loopref{appending},
@loopref{nconc}, @loopref{nconcing},
@loopref{count}, @loopref{counting},
@loopref{maximize}, @loopref{maximizing},
@loopref{minimize}, @loopref{minimizing},
@loopref{sum}, and @loopref{summing},
allow values to be accumulated in a @code{loop}.



The constructs @loopref{collect}, 
@loopref{collecting}, @loopref{append}, @loopref{appending}, 
@loopref{nconc}, and @loopref{nconcing}, 
designate clauses that
accumulate values in @term{lists} and return them.
The constructs @loopref{count}, @loopref{counting}, 
@loopref{maximize}, @loopref{maximizing}, @loopref{minimize}, @loopref{minimizing},
@loopref{sum}, and @loopref{summing} designate clauses that accumulate and
return numerical values.

During each iteration,  the constructs
@loopref{collect} and @loopref{collecting}
collect the value of the supplied
@param{form} into a @term{list}. 
When iteration terminates, the @term{list} is returned.
The argument @param{var} is 
set to the @term{list} 
of collected values; if @param{var} is supplied, the @code{loop}
does not return the final @term{list} automatically.  If 
@param{var} is not
supplied, it is equivalent to supplying an internal name for
@param{var} and returning its value in a @loopref{finally} clause.
The @param{var} argument
is bound as if by the construct @loopref{with}.
No mechanism is provided for declaring the @term{type} of @param{var};
it must be @oftype{list}.


The constructs @loopref{append}, @loopref{appending}, 
@loopref{nconc}, and  @loopref{nconcing}
are similar to @loopref{collect} except that the
values of the supplied @param{form} must be @term{lists}.  


@itemize @bullet{}
@item
The @loopref{append} keyword causes its @term{list} values to be concatenated 
into a single @term{list}, as if 
they were arguments to @thefunction{append}.

@item
The @loopref{nconc} keyword causes its @term{list} values to be concatenated
into a single @term{list},
as if they were arguments to @thefunction{nconc}.  
@end itemize


The argument @param{var} is 
set to the @term{list} of 
concatenated values; if @param{var} is supplied, 
@code{loop}
does not return the final @term{list} automatically.  
The @param{var} argument
is bound as if by the construct @loopref{with}.
A @term{type} cannot be supplied for @param{var}; 
it must be @oftype{list}.
The construct @loopref{nconc} 
destructively modifies its argument @term{lists}.

The @loopref{count} construct counts the number of times 
that the supplied @param{form} returns @term{true}.
The argument @param{var} accumulates the number of occurrences; 
if @param{var} is supplied, 
@code{loop} does not return the final count automatically.
The @param{var} argument is bound as if by the construct @loopref{with} 
to a zero of the appropriate type.
Subsequent values (including any necessary coercions) 
are computed as if by the function @code{1+}.
If @loopref{into} @param{var} is used,
a @term{type} can be supplied  for @param{var} with the @param{type-spec} argument;
the consequences are unspecified if a nonnumeric @term{type} is supplied.           
If there is no @loopref{into} variable,
the optional @param{type-spec} argument
applies to the internal variable that is keeping the count.  
The default @term{type} is @term{implementation-dependent}; 
but it must be
a @supertypeof{fixnum}.

The @loopref{maximize} and 
@loopref{minimize} 
constructs compare
the value of the supplied @param{form} obtained during the first 
iteration with values obtained in successive iterations.
The maximum (for @loopref{maximize}) or minimum (for @loopref{minimize}) 
value encountered is determined 
(as if by @thefunction{max} for @loopref{maximize} and
as if by @thefunction{min} for @loopref{minimize})
and returned.
If the @loopref{maximize} or @loopref{minimize} clause
is never executed, the accumulated value is unspecified.
The argument @param{var} accumulates the maximum or minimum value;
if @param{var} is supplied,
@code{loop} does not return the maximum or minimum automatically.
The @param{var} argument is bound as if by the construct @loopref{with}.
If @loopref{into} @param{var} is used,
a @term{type} can be supplied for @param{var} with the @param{type-spec} argument;
the consequences are unspecified if a nonnumeric @term{type} is supplied.           
If there is no @loopref{into} variable,
the optional @param{type-spec} argument applies to the internal variable 
that is keeping the maximum or minimum value.  
The default @term{type} 
is @term{implementation-dependent}; but it
must be a @supertypeof{real}.

The @loopref{sum} construct forms a cumulative sum 
of the successive @term{primary values} of the supplied @param{form}
at each iteration.
The argument @param{var} is used to accumulate the sum;
if @param{var} is supplied,
@code{loop} does not return the final sum automatically.
The @param{var} argument is bound as if by the construct @loopref{with}
to a zero of the appropriate type.
Subsequent values (including any necessary coercions) are computed as if by @thefunction{+}.
If @loopref{into} @param{var} is used,
a @term{type} can be supplied for @param{var} with the @param{type-spec} argument;
the consequences are unspecified if a nonnumeric @term{type} is supplied.           
If there is no @loopref{into} variable,
the optional @param{type-spec} argument applies to the internal variable
that is keeping the sum.
The default @term{type}
is @term{implementation-dependent}; but it
must be a @supertypeof{number}.

If @loopref{into} is used,
the construct does not provide a default return value;
however, the variable is available
for use in any @loopref{finally} clause.  


Certain kinds of accumulation clauses can be combined in a @code{loop} 
if their destination is the same 
(the result of @code{loop} or an @loopref{into} @param{var}) 
because they are considered to accumulate conceptually compatible quantities.
In particular, 
any elements of following sets of accumulation clauses can be mixed
with other elements of the same set for the same destination 
in a @code{loop} @term{form}:


@itemize @bullet{}
@item @loopref{collect}, @loopref{append}, @loopref{nconc}

@item @loopref{sum}, @loopref{count}

@item @loopref{maximize}, @loopref{minimize}
@end itemize


@lisp
;; Collect every name and the kids in one list by using 
;; COLLECT and APPEND.
 (loop for name in '(fred sue alice joe june)
       for kids in '((bob ken) () () (kris sunshine) ())
       collect name
       append kids)
@EV{} (FRED BOB KEN SUE ALICE JOE KRIS SUNSHINE JUNE)
@end lisp


Any two
clauses that do not accumulate the same @term{type} of 
@term{object} 
can coexist in a @code{loop} only 
if each clause accumulates its values into 
a different
@term{variable}.  


@subsubsection Examples of COLLECT clause

@lisp
;; Collect all the symbols in a list.
 (loop for i in '(bird 3 4 turtle (1 . 4) horse cat)
       when (symbolp i) collect i)
@EV{} (BIRD TURTLE HORSE CAT)
 
;; Collect and return odd numbers.
 (loop for i from 1 to 10
       if (oddp i) collect i)
@EV{} (1 3 5 7 9)
 
;; Collect items into local variable, but don't return them.
 (loop for i in '(a b c d) by #'cddr
       collect i into my-list
       finally (print my-list))
@OUT{} (A C) 
@EV{} NIL
@end lisp



@subsubsection Examples of APPEND and NCONC clauses

@lisp
;; Use APPEND to concatenate some sublists.
  (loop for x in '((a) (b) ((c)))
        append x)
@EV{} (A B (C))
 
;; NCONC some sublists together.  Note that only lists made by the
;; call to LIST are modified.
  (loop for i upfrom 0 
        as x in '(a b (c))
        nconc (if (evenp i) (list x) nil))
@EV{} (A (C))
@end lisp



@subsubsection Examples of COUNT clause

@lisp
 (loop for i in '(a b nil c nil d e)
       count i)
@EV{} 5
@end lisp



@subsubsection Examples of MAXIMIZE and MINIMIZE clauses

@lisp
 (loop for i in '(2 1 5 3 4)
       maximize i)
@EV{} 5
 (loop for i in '(2 1 5 3 4)
       minimize i)
@EV{} 1
 
;; In this example, FIXNUM applies to the internal variable that holds
;; the maximum value.
 (setq series '(1.2 4.3 5.7))
@EV{} (1.2 4.3 5.7)
 (loop for v in series 
       maximize (round v) of-type fixnum)
@EV{} 6
 
;; In this example, FIXNUM applies to the variable RESULT.
 (loop for v of-type float in series
       minimize (round v) into result of-type fixnum
       finally (return result))
@EV{} 1
@end lisp



@subsubsection Examples of SUM clause

@lisp
 (loop for i of-type fixnum in '(1 2 3 4 5)
       sum i)
@EV{} 15
 (setq series '(1.2 4.3 5.7))
@EV{} (1.2 4.3 5.7)
 (loop for v in series 
       sum (* 2.0 v))
@EV{} 22.4
@end lisp




@node Termination Test Clauses
@subsection Termination Test Clauses

The @loopref{repeat} construct causes iteration to terminate after a
specified number of times.
The loop body executes @i{n} times, where @i{n} is the value 
of the expression @param{form}.  The @param{form} argument is evaluated one time
in the loop prologue.  If the expression evaluates to 0 or 
to a negative @term{number}, the loop body is not evaluated.

The constructs @loopref{always},
@loopref{never},
@loopref{thereis},
@loopref{while},
@loopref{until},
and the macro @code{loop-finish}
allow conditional termination of iteration within
a @code{loop}.

The constructs @loopref{always}, @loopref{never}, and @loopref{thereis} provide
specific values to be returned when a @code{loop} terminates.  
Using @loopref{always}, @loopref{never}, or @loopref{thereis} in a loop with 
value accumulation clauses that are not @loopref{into} causes 
an error @oftype{program-error} to be signaled (at macro expansion time).
Since @loopref{always}, @loopref{never}, and @loopref{thereis}
use 
@thespecop{return-from}
to terminate iteration,
any @loopref{finally} clause that is supplied is not evaluated
when exit occurs due to any of these constructs.
In all other respects these
constructs behave like the @loopref{while} and @loopref{until} constructs.

The @loopref{always} construct takes one @term{form} and terminates the 
@code{loop}
if the @term{form} ever evaluates to @nil{}; in this case, it returns
@nil{}.  Otherwise, it provides a default return value of @code{t}.
If the value of the supplied @term{form} is never @nil{}, some other construct
can terminate the iteration.

The @loopref{never} construct terminates iteration the first time that
the value of the supplied @param{form} is @term{non-nil}; the @code{loop} returns 
@nil{}.                                         
If the value of the supplied @param{form} is always  @nil{}, some other 
construct can terminate the iteration.  
Unless some other clause contributes 
a return value, the default value returned is @code{t}.

The @loopref{thereis} construct terminates iteration the first time that the
value of the supplied @param{form} is @term{non-nil}; the @code{loop} returns the
value of the supplied @param{form}.
If the value of the supplied @param{form} 
is always  @nil{}, some other
construct can terminate the iteration.  Unless some other clause contributes a 
return value, the default value returned is @nil{}.


There are two differences between the @loopref{thereis} and @loopref{until}
constructs: 


@itemize @bullet{}
@item The @loopref{until} construct does not return a value or 
@nil{}@spc{}based on the value of the supplied @param{form}.

@item The @loopref{until} construct executes 
any @loopref{finally} clause.
Since @loopref{thereis} uses
@thespecop{return-from}
to terminate iteration,
any @loopref{finally} clause that is supplied is not evaluated
when exit occurs due to @loopref{thereis}.
@end itemize




The @loopref{while} construct allows iteration to continue until the 
supplied @param{form} 
evaluates to @term{false}.  The supplied @param{form} 
is reevaluated at the location of the @loopref{while} clause.

The @loopref{until} construct is equivalent to 
@f{while (not @param{form})@dots{}}.  If the value of the
supplied @param{form} is @term{non-nil}, iteration terminates.

Termination-test control constructs can be used anywhere within the loop body.
The termination tests are used in the order in which they appear.
If an @loopref{until} or @loopref{while} clause causes
termination, any clauses that precede it in the source
are still evaluated.  
If the @loopref{until} and @tt{while} constructs cause termination,
control is passed to the loop epilogue, where any @loopref{finally}
clauses will be executed.  

There are two differences between the @loopref{never} and @loopref{until}
constructs: 


@itemize @bullet{}
@item The @loopref{until} construct does not return 
@code{t}@spc{}or @nil{}@spc{}based on the value of the supplied @param{form}.

@item 
The @loopref{until} construct 
does not bypass any @loopref{finally} clauses.
Since @loopref{never} uses 
@thespecop{return-from}
to terminate iteration,
any @loopref{finally} clause that is supplied is not evaluated
when exit occurs due to @loopref{never}. 
@end itemize


In most cases it is not necessary to use @code{loop-finish}
because other loop control clauses terminate the @code{loop}.  
The macro @code{loop-finish} is used to provide a normal exit
from a nested conditional inside a @code{loop}.
Since @code{loop-finish} transfers control to the loop epilogue,
using @code{loop-finish} within a @loopref{finally} expression can cause
infinite looping.

@subsubsection Examples of REPEAT clause

@lisp
 (loop repeat 3
       do (format t "~&What I say three times is true.~%"))
@OUT{} What I say three times is true.
@OUT{} What I say three times is true.
@OUT{} What I say three times is true.
@EV{} NIL
 (loop repeat -15
   do (format t "What you see is what you expect~%"))
@EV{} NIL
@end lisp



@subsubsection Examples of ALWAYS, NEVER, and THEREIS clauses

@lisp
;; Make sure I is always less than 11 (two ways).
;; The FOR construct terminates these loops.
 (loop for i from 0 to 10
       always (< i 11))
@EV{} T
 (loop for i from 0 to 10
       never (> i 11))
@EV{} T
 
;; If I exceeds 10 return I; otherwise, return NIL.
;; The THEREIS construct terminates this loop.
 (loop for i from 0
       thereis (when (> i 10) i) )
@EV{} 11

;;; The FINALLY clause is not evaluated in these examples.
 (loop for i from 0 to 10
       always (< i 9)
       finally (print "you won't see this"))
@EV{} NIL
 (loop never t
       finally (print "you won't see this"))
@EV{} NIL
 (loop thereis "Here is my value"
       finally (print "you won't see this"))
@EV{} "Here is my value"
 
;; The FOR construct terminates this loop, so the FINALLY clause 
;; is evaluated.
 (loop for i from 1 to 10
       thereis (> i 11)
       finally (prin1 'got-here))
@OUT{} GOT-HERE
@EV{} NIL
 
;; If this code could be used to find a counterexample to Fermat's
;; last theorem, it would still not return the value of the
;; counterexample because all of the THEREIS clauses in this example
;; only return T.  But if Fermat is right, that won't matter
;; because this won't terminate.
 
 (loop for z upfrom 2
       thereis
         (loop for n upfrom 3 below (log z 2)
               thereis
                 (loop for x below z
                       thereis
                         (loop for y below z
                               thereis (= (+ (expt x n) (expt y n))
                                          (expt z n))))))
@end lisp



@subsubsection Examples of WHILE and UNTIL clauses

@lisp
 (loop while (hungry-p) do (eat))
 
;; UNTIL NOT is equivalent to WHILE.
 (loop until (not (hungry-p)) do (eat))
 
;; Collect the length and the items of STACK.
 (let ((stack '(a b c d e f)))
   (loop for item = (length stack) then (pop stack)
         collect item
         while stack))
@EV{} (6 A B C D E F)
 
;; Use WHILE to terminate a loop that otherwise wouldn't terminate.
;; Note that WHILE occurs after the WHEN.
 (loop for i fixnum from 3
       when (oddp i) collect i
       while (< i 5))
@EV{} (3 5)
@end lisp




@node Unconditional Execution Clauses
@subsection Unconditional Execution Clauses

The @loopref{do} and @loopref{doing} constructs 
evaluate the 
supplied @param{forms} 
wherever they occur in the expanded form of @code{loop}.
The @param{form} argument can be any @term{compound form}.
Each @param{form} is evaluated in every iteration.
Because every loop clause must begin with a @term{loop keyword}, 
the keyword @loopref{do} is used when no control action other than execution is 
required.

The @loopref{return} construct takes one @term{form}. 
Any @term{values} returned by the @term{form} 
are immediately returned by the @code{loop} form.
It is equivalent to the clause
@f{do (return-from @i{block-name} @i{value})},
where @i{block-name} is the name specified in a @loopref{named}
clause, or @nil{}@spc{}if there is no @loopref{named} clause.

@subsubsection Examples of unconditional execution

@lisp
;; Print numbers and their squares.
;; The DO construct applies to multiple forms.
 (loop for i from 1 to 3
       do (print i)
          (print (* i i)))
@OUT{} 1 
@OUT{} 1 
@OUT{} 2 
@OUT{} 4 
@OUT{} 3 
@OUT{} 9 
@EV{} NIL

@end lisp




@node Conditional Execution Clauses
@subsection Conditional Execution Clauses


The @loopref{if}, @loopref{when}, and @loopref{unless} constructs
establish conditional control in a @code{loop}. If the test
passes, the succeeding loop clause is executed. If the test does
not pass, the succeeding clause is skipped, and program control
moves to the clause that follows the @term{loop keyword}
@loopref{else}. If the test does not pass and no @loopref{else}
clause is supplied, control is transferred to the clause or
construct following the entire conditional clause.

If conditional clauses are nested, each @loopref{else} is paired
with the closest preceding conditional clause that has no
associated @loopref{else} or @loopref{end}. 

In the @loopref{if} and @loopref{when} clauses, which are
synonymous, the test passes if the value of @param{form} is
@term{true}.

In the @loopref{unless} clause,
the test passes if the value of @param{form} is @term{false}.


Clauses that follow the test expression can be grouped by using 
the @term{loop keyword} @loopref{and} to produce a conditional block consisting of 
a compound clause.

The @term{loop keyword} @loopref{it} can be used to refer to the result
of the test expression in a clause.
Use the @term{loop keyword} @loopref{it} in place of the form in a
@loopref{return} clause or an @i{accumulation} clause that is
inside a conditional execution clause.
If multiple clauses are connected with @loopref{and}, the @loopref{it}
construct must be in the first clause in the block.

The optional @term{loop keyword} @loopref{end} marks the end of the clause.  If this
keyword is not supplied, the next @term{loop keyword} marks the end.  The construct
@loopref{end} can be used to distinguish the scoping of compound clauses.

@subsubsection Examples of WHEN clause

@lisp
;; Signal an exceptional condition.
 (loop for item in '(1 2 3 a 4 5)
       when (not (numberp item))
        return (cerror "enter new value" "non-numeric value: ~s" item))
Error: non-numeric value: A
 
;; The previous example is equivalent to the following one.
 (loop for item in '(1 2 3 a 4 5)
       when (not (numberp item))
        do (return 
            (cerror "Enter new value" "non-numeric value: ~s" item)))
Error: non-numeric value: A
@end lisp


@lisp
;; This example parses a simple printed string representation from 
;; BUFFER (which is itself a string) and returns the index of the
;; closing double-quote character.
 (let ((buffer "@bsl{}"a@bsl{}" @bsl{}"b@bsl{}""))
   (loop initially (unless (char= (char buffer 0) #@bsl{}")
                     (loop-finish))
         for i of-type fixnum from 1 below (length (the string buffer))
         when (char= (char buffer i) #@bsl{}")
          return i))
@EV{} 2
 
;; The collected value is returned.
 (loop for i from 1 to 10
       when (> i 5)
         collect i
       finally (prin1 'got-here))
@OUT{} GOT-HERE
@EV{} (6 7 8 9 10) 

;; Return both the count of collected numbers and the numbers.
 (loop for i from 1 to 10
       when (> i 5)
         collect i into number-list
         and count i into number-count
       finally (return (values number-count number-list)))
@EV{} 5, (6 7 8 9 10)
@end lisp




@node Miscellaneous Clauses
@subsection Miscellaneous Clauses

@subsubsection Control Transfer Clauses

The @loopref{named} construct
establishes a name for an @term{implicit block} surrounding the 
entire
@code{loop} so that @thespecop{return-from} can be used to return 
values from or to exit @code{loop}.   
Only one name per @code{loop} @term{form} can be assigned.
If used, the @loopref{named} construct must be the first clause in the loop expression.

The @loopref{return} construct takes one @term{form}. 
Any @term{values} returned by the @term{form} 
are immediately returned by the @code{loop} form.
This construct is similar to @thespecop{return-from} and @themacro{return}.
The @loopref{return} construct 
does not execute any @loopref{finally} clause that 
the @code{loop} @term{form}
is given.

@unnumberedsubsubsec 6.1.7.1.1 Examples of NAMED clause


@lisp
;; Just name and return.
 (loop named max
       for i from 1 to 10
       do (print i)
       do (return-from max 'done))
@OUT{} 1 
@EV{} DONE
@end lisp




@subsubsection Initial and Final Execution

The @loopref{initially} and @loopref{finally} constructs
evaluate forms that occur before and after the loop body.

The @loopref{initially} construct causes the supplied
@param{compound-forms}
to be evaluated
in the loop prologue, which precedes all loop code except for 
initial settings supplied by constructs @loopref{with}, @loopref{for}, or
@loopref{as}.
The code for any @loopref{initially} clauses is 
executed
in the order in which the clauses appeared in
the @code{loop}.  

The @loopref{finally} construct causes the supplied
@param{compound-forms}
to be evaluated
in the loop epilogue after normal iteration terminates.
The code for any @loopref{finally} clauses is 
executed
in the order in which the clauses appeared in
the @code{loop}.  The collected code is executed once in the loop epilogue
before any implicit values are returned from the accumulation clauses.
An explicit transfer of control (@eg{} by @code{return}, @code{go}, or @code{throw})
from the loop body, however, will exit the 
@code{loop} without executing the epilogue code.

Clauses such as @loopref{return}, @loopref{always}, @loopref{never}, and 
@loopref{thereis}
can bypass the @loopref{finally} clause.
@code{return} (or @code{return-from}, if the @loopref{named} option was supplied)
can be used after @loopref{finally} to return values from a @code{loop}.  
Such an @term{explicit return}
inside the
@loopref{finally} clause takes precedence over returning the accumulation
from clauses supplied by such keywords as @loopref{collect}, @loopref{nconc}, 
@loopref{append}, @loopref{sum}, @loopref{count}, @loopref{maximize}, and 
@loopref{minimize}; 
the accumulation values for these preempted clauses are not returned by 
@code{loop} if @code{return} or @code{return-from} is used.




@node Examples of Miscellaneous Loop Features
@subsection Examples of Miscellaneous Loop Features

@lisp
 (let ((i 0))                     ; no loop keywords are used
    (loop (incf i) (if (= i 3) (return i)))) @EV{} 3
 (let ((i 0)(j 0))
    (tagbody
      (loop (incf j 3) (incf i) (if (= i 3) (go exit)))
      exit)
    j) @EV{} 9
@end lisp


In the following example, the variable @f{x} is stepped
before @f{y} is stepped; thus, the value of @f{y}
reflects the updated value of @f{x}:

@lisp
 (loop for x from 1 to 10 
       for y = nil then x 
       collect (list x y))
@EV{} ((1 NIL) (2 2) (3 3) (4 4) (5 5) (6 6) (7 7) (8 8) (9 9) (10 10))
@end lisp


In this example, @f{x} and @f{y} are stepped in @term{parallel}:

@lisp
 (loop for x from 1 to 10 
       and y = nil then x 
       collect (list x y))
@EV{} ((1 NIL) (2 1) (3 2) (4 3) (5 4) (6 5) (7 6) (8 7) (9 8) (10 9))
@end lisp


@subsubsection Examples of clause grouping
@lisp
;; Group conditional clauses.
 (loop for i in '(1 324 2345 323 2 4 235 252)
       when (oddp i)
         do (print i)
         and collect i into odd-numbers
         and do (terpri)
       else                              ; I is even.
         collect i into even-numbers
       finally
         (return (values odd-numbers even-numbers)))
@OUT{} 1 
@OUT{} 
@OUT{} 2345 
@OUT{} 
@OUT{} 323 
@OUT{} 
@OUT{} 235 
@EV{} (1 2345 323 235), (324 2 4 252)

;; Collect numbers larger than 3.
 (loop for i in '(1 2 3 4 5 6)
       when (and (> i 3) i)
       collect it)                      ; IT refers to (and (> i 3) i).
@EV{} (4 5 6)
 
;; Find a number in a list.
 (loop for i in '(1 2 3 4 5 6)
       when (and (> i 3) i)
       return it)
@EV{} 4
     
;; The above example is similar to the following one.
 (loop for i in '(1 2 3 4 5 6)
       thereis (and (> i 3) i))
@EV{} 4

@medbreak{}
;; Nest conditional clauses.
 (let ((list '(0 3.0 apple 4 5 9.8 orange banana)))
   (loop for i in list
         when (numberp i)
           when (floatp i)
             collect i into float-numbers
           else                                  ; Not (floatp i)
             collect i into other-numbers
         else                                    ; Not (numberp i)
           when (symbolp i) 
             collect i into symbol-list
           else                                  ; Not (symbolp i)
             do (error "found a funny value in list ~S, value ~S~%" list i)
         finally (return (values float-numbers other-numbers symbol-list))))
@EV{} (3.0 9.8), (0 4 5), (APPLE ORANGE BANANA)

;; Without the END preposition, the last AND would apply to the
;; inner IF rather than the outer one.
 (loop for x from 0 to 3 
       do (print x)
       if (zerop (mod x 2))
         do (princ " a")
          and if (zerop (floor x 2))
                do (princ " b")
                end
          and do (princ " c"))
@OUT{} 0  a b c
@OUT{} 1 
@OUT{} 2  a c
@OUT{} 3 
@EV{} NIL
@end lisp




@node Notes about Loop
@subsection Notes about Loop

@term{Types} can be supplied for loop variables.  
It is not necessary to supply a @term{type} for any variable,
but supplying the @term{type} 
can ensure that the variable has a correctly typed initial value,
and it can also enable compiler optimizations 
(depending on the @term{implementation}).

The clause @loopref{repeat} @i{n} ... is roughly equivalent to a clause such as 

@lisp
 (loop for @i{internal-variable} downfrom (- @i{n} 1) to 0 ...)
@end lisp


but in some @term{implementations},
the @loopref{repeat} construct might be more efficient.

Within the executable parts of the loop clauses and around the entire
@code{loop} form, variables can be bound by using @code{let}.

Use caution when using a variable named @tt{IT} (in any @term{package})
in connection with @code{loop}, since @loopref{it} is a @term{loop keyword} 
that can be used in place of a @term{form} in certain contexts.

There is
no
@term{standardized}
mechanism for users to add
extensions to @code{loop}.


@node do; do*
@heading do, do* (Macro)
@syindex do
@cindex do
@syindex do*
@cindex do*
@anchor{do}



@subsubheading Syntax:

@DefmacWithValuesNewline{do, @vtop{@hbox{@paren{@star{@VarInitStep{}}}} @hbox{@paren{end-test-form @starparam{result-form}}} @hbox{@starparam{declaration} @star{@curly{tag @mat{@vert{}} statement}}}}, @starparam{result}}

@DefmacWithValuesNewline{do*, @vtop{@hbox{@paren{@star{@VarInitStep{}}}} @hbox{@paren{end-test-form @starparam{result-form}}} @hbox{@starparam{declaration} @star{@curly{tag @mat{@vert{}} statement}}}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{symbol}.

@param{init-form}---a @term{form}.

@param{step-form}---a @term{form}.

@param{end-test-form}---a @term{form}.

@param{result-forms}---an @term{implicit progn}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{tag}---a @term{go tag}; @noeval{}.

@param{statement}---a @term{compound form}; @evalspecial{}.

@param{results}---if a @code{return} or @code{return-from} form is executed,
the @term{values} passed from that @term{form};
otherwise, the @term{values} returned by the @param{result-forms}.

@subsubheading Description:

@code{do} iterates over a group of @param{statements}
while a test condition holds.
@code{do} accepts an arbitrary number of iteration @param{vars}
which are bound within the iteration and stepped in parallel.
An initial value may be supplied for each iteration variable by use of
an @param{init-form}.
@param{Step-forms} may be used to specify how the
@param{vars} should be updated on succeeding iterations through the loop.  
@param{Step-forms} may be used both to generate successive
values or to accumulate results.
If the @param{end-test-form} condition 
is met prior to an execution of the body, the iteration terminates.
@param{Tags} label @param{statements}.

@code{do*} is exactly like @code{do} 
except that the @term{bindings} and steppings
of the @param{vars} are performed sequentially rather than in parallel.

Before the first iteration, all the @param{init-forms} are evaluated, and
each @param{var} is bound to the value of its respective @param{init-form},
if supplied.
This is a @term{binding}, not an assignment; when the loop terminates,
the old values of those variables will be restored.
For @code{do}, all 
of the @param{init-forms} are evaluated before any @param{var}
is bound. The
@param{init-forms} can refer to the @term{bindings} of the @param{vars}
visible before beginning execution of
@code{do}.
For @code{do*}, the first @param{init-form} is evaluated, then the first
@param{var} is bound to that value, then the second @param{init-form} 
is evaluated, then the second @param{var} is bound, and so on;
in general, the @i{k}th @param{init-form} can refer to the new binding 
of the @i{j}th @param{var} if @i{j} < @i{k}, and otherwise to the 
old binding of the @i{j}th @param{var}.

At the beginning of each iteration, after processing the variables,
the @param{end-test-form} is evaluated.  If the result is
@term{false}, execution proceeds with the body of the @code{do} 
(or @code{do*}) form.
If the result is @term{true}, the @param{result-forms} are evaluated in order
as an @term{implicit progn},
and then @code{do} or @code{do*} returns.  

At the beginning of each iteration other than the first, 
@param{vars} are updated as follows.  All the @param{step-forms}, if supplied,
are evaluated, from left to right, and the resulting values are
assigned to the respective @param{vars}.
Any @param{var} that has no associated @param{step-form} is not assigned to.
For @code{do}, all the @param{step-forms} are evaluated before any @param{var}
is updated; the assignment of values to @param{vars} is done in parallel,
as if by @code{psetq}.
Because all of the @param{step-forms} are evaluated before any
of the @param{vars} are altered, a @param{step-form} when evaluated always has
access to the old values of all the @param{vars}, even if other @param{step-forms}
precede it.
For @code{do*}, the first @param{step-form} is evaluated, then the
value is assigned to the first @param{var}, then the second @param{step-form} 
is evaluated, then the value is assigned to the second @param{var}, and so on;
the assignment of values to variables is done sequentially,
as if by @code{setq}.
For either @code{do} or @code{do*},
after the @param{vars} have been updated,
the @param{end-test-form} 
is evaluated as described above, and the iteration continues.

The remainder of the @code{do} (or @code{do*}) form constitutes 
an @term{implicit tagbody}.
@param{Tags} may appear within the body of a @code{do} loop
for use by @code{go} statements appearing in the body (but such @code{go}
statements may not appear in the variable specifiers, the @param{end-test-form},
or the @param{result-forms}).
When the end of a @code{do} body is reached, the next iteration cycle
(beginning with the evaluation of @param{step-forms}) occurs.

An @term{implicit block} named @nil{}@spc{}surrounds the entire @code{do} 
(or @code{do*}) form.
A @code{return} statement may be used at any point to exit the loop
immediately.

@param{Init-form}  is an
initial value for the @param{var} with which it is associated.
If @param{init-form} is omitted, the initial value of @param{var} is @nil{}.
If a @param{declaration} is supplied for a @param{var}, @param{init-form} 
must be consistent with the @param{declaration}.

@param{Declarations} can appear at the beginning of a @code{do} 
(or @code{do*}) body.
They apply to code in the @code{do} (or @code{do*}) body, 
to the @term{bindings} of the @code{do} (or @code{do*}) 
@param{vars}, 
to the @param{step-forms},
to the @param{end-test-form}, and to the @param{result-forms}.

@subsubheading Examples:
@lisp
 (do ((temp-one 1 (1+ temp-one))
       (temp-two 0 (1- temp-two)))
      ((> (- temp-one temp-two) 5) temp-one)) @EV{} 4

 (do ((temp-one 1 (1+ temp-one))
       (temp-two 0 (1+ temp-one)))     
      ((= 3 temp-two) temp-one)) @EV{} 3

 (do* ((temp-one 1 (1+ temp-one))
        (temp-two 0 (1+ temp-one)))
       ((= 3 temp-two) temp-one)) @EV{} 2                     

 (do ((j 0 (+ j 1)))
     (nil)                       ;Do forever.
   (format t "~%Input ~D:" j)
   (let ((item (read)))
     (if (null item) (return)   ;Process items until NIL seen.
         (format t "~&Output ~D: ~S" j item))))
@OUT{} Input 0: @IN{banana}
@OUT{} Output 0: BANANA
@OUT{} Input 1: @IN{(57 boxes)}
@OUT{} Output 1: (57 BOXES)
@OUT{} Input 2: @IN{NIL}
@EV{} NIL

 (setq a-vector (vector 1 nil 3 nil))
 (do ((i 0 (+ i 1))     ;Sets every null element of a-vector to zero.
      (n (array-dimension a-vector 0)))
     ((= i n))
   (when (null (aref a-vector i))
     (setf (aref a-vector i) 0))) @EV{} NIL
a-vector @EV{} #(1 0 3 0)
@end lisp


@lisp
 (do ((x e (cdr x))
      (oldx x x))
     ((null x))
   body)
@end lisp

is an example of parallel assignment to index variables.  On the first
iteration, the value of @f{oldx} is whatever value @f{x} had before
the @code{do} was entered.  On succeeding iterations, @f{oldx} contains
the value that @f{x} had on the previous iteration. 

@lisp
 (do ((x foo (cdr x))
      (y bar (cdr y))
      (z '() (cons (f (car x) (car y)) z)))
     ((or (null x) (null y))
      (nreverse z)))
@end lisp

does the same thing as @f{(mapcar #'f foo bar)}.  The step
computation for @f{z} is an example of the fact that variables 
are stepped in parallel.
Also, the body of the loop is empty.  

@lisp
 (defun list-reverse (list)
        (do ((x list (cdr x))
             (y '() (cons (car x) y)))
            ((endp x) y)))
@end lisp


As an example of nested iterations, consider a data structure that is a 
@term{list} of @term{conses}. The @term{car} of each @term{cons} is a 
@term{list} of @term{symbols},
and the @term{cdr} of each @term{cons} is a 
@term{list} of equal length containing
corresponding values.  Such a data structure is similar to an association
list,
but is divided into ``frames''; the overall structure resembles a rib-cage.
A lookup function on such a data structure might be:

@lisp
 (defun ribcage-lookup (sym ribcage)           
        (do ((r ribcage (cdr r)))
            ((null r) nil)
          (do ((s (caar r) (cdr s))
               (v (cdar r) (cdr v))) 
              ((null s))
            (when (eq (car s) sym)
              (return-from ribcage-lookup (car v)))))) @EV{} RIBCAGE-LOOKUP
@end lisp


@subsubheading See Also:

other iteration functions
(@ref{dolist}, @ref{dotimes}, and @ref{loop})
and more primitive functionality 
(@ref{tagbody}, @ref{go}, @ref{block}, @ref{return}, 
@ref{let}, and @ref{setq})

@subsubheading Notes:
If @param{end-test-form} is @nil{}, the test will never succeed.
This provides an idiom for ``do forever'':
the body of the @code{do} or @code{do*} 
is executed repeatedly.
The infinite loop can be terminated by the use of @code{return},
@code{return-from}, @code{go} to an outer level, or @code{throw}.

A @code{do} @term{form} may be explained in terms of the more primitive @term{forms}
@code{block}, @code{return}, 
@code{let}, @code{loop}, @code{tagbody},
and @code{psetq} as follows:

@lisp
 (block nil        
   (let ((var1 init1)
         (var2 init2)
         ...
         (varn initn))
     @i{declarations}
     (loop (when end-test (return (progn . result)))
           (tagbody . tagbody)
           (psetq var1 step1
                  var2 step2
                  ...
                  varn stepn))))
@end lisp


@code{do*} is similar, except that @code{let*} and @code{setq} replace
the @code{let} and @code{psetq}, respectively.



@node dotimes
@heading dotimes (Macro)
@syindex dotimes
@cindex dotimes



@subsubheading Syntax:

@DefmacWithValuesNewline{dotimes, @paren{var count-form @brac{result-form}} @starparam{declaration} @star{@curly{tag | statement}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{symbol}.

@param{count-form}---a @term{form}.

@param{result-form}---a @term{form}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{tag}---a @term{go tag}; @noeval{}.

@param{statement}---a @term{compound form}; @evalspecial{}.

@param{results}---if a @code{return} or @code{return-from} form is executed,
the @term{values} passed from that @term{form};
otherwise, the @term{values} returned by the @param{result-form}
or @nil{}@spc{}if there is no @param{result-form}.

@subsubheading Description:

@code{dotimes} iterates over a series of @term{integers}.

@code{dotimes} evaluates @param{count-form},
which should produce an @term{integer}. 
If @param{count-form} is zero or negative,
the body is not executed.
@code{dotimes} then executes the body once for each @term{integer} from 0 up to
but not including
the value of @param{count-form},
in the order in which the
@param{tags} and @param{statements} occur, with
@param{var} bound to each @term{integer}.
Then @param{result-form} 
is evaluated.
At the time @param{result-form} is processed, @param{var} is bound to
the number of times the body was executed.
@param{Tags} label
@param{statements}.

An @term{implicit block}  
named @nil{}@spc{}surrounds @code{dotimes}.
@code{return} may be used to terminate the loop immediately without
performing any further iterations, returning zero or more @term{values}.

The body of the loop is an @term{implicit tagbody}; 
it may contain tags to serve as the targets of @code{go} statements.
Declarations may appear before the body of the loop.

The @term{scope} of the binding of @param{var}
does not include the @param{count-form},
but the @param{result-form} is included.

It is @term{implementation-dependent} whether @code{dotimes}
@term{establishes} a new @term{binding} of @param{var} on each iteration
or whether it @term{establishes} a binding for @param{var} once at the
beginning and then @param{assigns} it on any subsequent iterations.

@subsubheading Examples:

@lisp
 (dotimes (temp-one 10 temp-one)) @EV{} 10
 (setq temp-two 0) @EV{} 0
 (dotimes (temp-one 10 t) (incf temp-two)) @EV{} T
 temp-two @EV{} 10
@end lisp


Here is an example of the use of @f{dotimes} in processing strings:

@lisp
;;; True if the specified subsequence of the string is a
;;; palindrome (reads the same forwards and backwards).
 (defun palindromep (string @optional{}
                           (start 0)
                           (end (length string)))
   (dotimes (k (floor (- end start) 2) t)
    (unless (char-equal (char string (+ start k))
                        (char string (- end k 1)))
      (return nil))))
 (palindromep "Able was I ere I saw Elba") @EV{} T
 (palindromep "A man, a plan, a canal--Panama!") @EV{} NIL
 (remove-if-not #'alpha-char-p          ;Remove punctuation.
               "A man, a plan, a canal--Panama!")
@EV{} "AmanaplanacanalPanama"
 (palindromep
  (remove-if-not #'alpha-char-p
                "A man, a plan, a canal--Panama!")) @EV{} T
 (palindromep
  (remove-if-not
   #'alpha-char-p
   "Unremarkable was I ere I saw Elba Kramer, nu?")) @EV{} T
 (palindromep
  (remove-if-not
   #'alpha-char-p
   "A man, a plan, a cat, a ham, a yak,
                  a yam, a hat, a canal--Panama!")) @EV{} T
@end lisp


@subsubheading See Also:

@ref{do}, @ref{dolist}, @ref{tagbody}

@subsubheading Notes:

@code{go} may be used within the body of
@code{dotimes} to transfer control to a statement labeled by a @param{tag}.



@node dolist
@heading dolist (Macro)
@syindex dolist
@cindex dolist



@subsubheading Syntax:

@DefmacWithValuesNewline{dolist, @paren{var list-form @brac{result-form}} @starparam{declaration} @star{@curly{tag | statement}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{symbol}.

@param{list-form}---a @term{form}.

@param{result-form}---a @term{form}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{tag}---a @term{go tag}; @noeval{}.

@param{statement}---a @term{compound form}; @evalspecial{}.

@param{results}---if a @code{return} or @code{return-from} form is executed,
the @term{values} passed from that @term{form};
otherwise, the @term{values} returned by the @param{result-form}
or @nil{}@spc{}if there is no @param{result-form}.

@subsubheading Description:

@code{dolist} iterates over the elements of a @term{list}.
The body of @code{dolist} is like a @code{tagbody}.
It consists of a series of @param{tags} and @param{statements}.

@code{dolist}
evaluates @param{list-form},
which should produce a @term{list}. It then executes the body
once for each element in the @term{list}, in the order in which the
@param{tags} and @param{statements} occur, with
@param{var} bound to the element.
Then @param{result-form} 
is evaluated.
@param{tags} label
@param{statements}.

At the time @param{result-form} is processed, 
@param{var} is bound to @nil{}.

An @term{implicit block}  
named @nil{}@spc{}surrounds @code{dolist}.
@code{return} may be used to terminate the loop immediately without
performing any further iterations, returning zero or more @term{values}.

The @term{scope} of the binding of @param{var}
does not include the @param{list-form},
but the @param{result-form} is included.

It is @term{implementation-dependent} whether @code{dolist}
@term{establishes} a new @term{binding} of @param{var} on each iteration
or whether it @term{establishes} a binding for @param{var} once at the
beginning and then @param{assigns} it on any subsequent iterations.

@subsubheading Examples:
@lisp
 (setq temp-two '()) @EV{} NIL
 (dolist (temp-one '(1 2 3 4) temp-two) (push temp-one temp-two)) @EV{} (4 3 2 1)

 (setq temp-two 0) @EV{} 0
 (dolist (temp-one '(1 2 3 4)) (incf temp-two)) @EV{} NIL
 temp-two @EV{} 4

 (dolist (x '(a b c d)) (prin1 x) (princ " ")) 
@OUT{} A B C D 
@EV{} NIL
@end lisp


@subsubheading See Also:

@ref{do},
@ref{dotimes},
@ref{tagbody},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

@code{go} may be used within the body of @code{dolist} 
to transfer control to a statement labeled by a @param{tag}.



@node loop
@heading loop (Macro)
@syindex loop
@cindex loop



@subsubheading Syntax:

The ``simple'' @code{loop} @term{form}:

@DefmacWithValues{loop, @starparam{compound-form}, @starparam{result}}

The ``extended'' @code{loop} @term{form}:

@DefmacWithValues{loop, @brac{@down{name-clause}} @stardown{variable-clause} @stardown{main-clause}, @starparam{result}}

@auxbnf{name-clause, @loopref{named} @param{name}}
@auxbnf{variable-clause, @down{with-clause} | @down{initial-final} | @down{for-as-clause}}
@auxbnf{with-clause, @loopref{with} @param{var1} @brac{@param{type-spec}} @brac{@mat{=} @param{form1}} @star{@curly{@loopref{and} @param{var2} @brac{@param{type-spec}} @brac{@mat{=} @param{form2}}}}}
@auxbnf{main-clause, @down{unconditional} | @down{accumulation} | @down{conditional} | @down{termination-test} | @down{initial-final}}
@auxbnf{initial-final, @loopref{initially} @plusparam{compound-form} | @loopref{finally} @plusparam{compound-form}}
@auxbnf{unconditional, @curly{@loopref{do} | @loopref{doing}} @plusparam{compound-form} | @loopref{return} @curly{@param{form} | @loopref{it}}}
@auxbnf{accumulation, @down{list-accumulation} | @down{numeric-accumulation}}
@auxbnf{list-accumulation, @curly{@loopref{collect} | @loopref{collecting} | @loopref{append} | @loopref{appending} | @loopref{nconc} | @loopref{nconcing}} @curly{@param{form} | @loopref{it}} @CR{} @brac{@loopref{into} @param{simple-var}}}
@auxbnf{numeric-accumulation, @curly{@loopref{count} | @loopref{counting} | @loopref{sum} | @loopref{summing} | @CR{} @xcurly{}@loopref{maximize} | @loopref{maximizing} | @loopref{minimize} | @loopref{minimizing}} @curly{@param{form} | @loopref{it}} @CR{} @brac{@loopref{into} @param{simple-var}} @brac{@param{type-spec}}}
@auxbnf{conditional, @curly{@loopref{if} | @loopref{when} | @loopref{unless}} @param{form} @down{selectable-clause} @star{@curly{@loopref{and} @down{selectable-clause}}} @CR{} @brac{@loopref{else} @down{selectable-clause} @star{@curly{@loopref{and} @down{selectable-clause}}}} @CR{} @brac{@loopref{end}}}
@auxbnf{selectable-clause, @down{unconditional} | @down{accumulation} | @down{conditional}}
@auxbnf{termination-test, @loopref{while} @param{form} | @loopref{until} @param{form} | @loopref{repeat} @param{form} | @loopref{always} @param{form} | @loopref{never} @param{form} | @loopref{thereis} @param{form}}
@auxbnf{for-as-clause, @curly{@loopref{for} | @loopref{as}} @down{for-as-subclause} @star{@curly{@loopref{and} @down{for-as-subclause}}}}
@auxbnf{for-as-subclause, @down{for-as-arithmetic} | @down{for-as-in-list} | @down{for-as-on-list} | @down{for-as-equals-then} |@CR{} @down{for-as-across} | @down{for-as-hash} | @down{for-as-package}}
@auxbnf{for-as-arithmetic, @param{var} @brac{@param{type-spec}} @down{for-as-arithmetic-subclause}}
@auxbnf{for-as-arithmetic-subclause, @down{arithmetic-up} | @down{arithmetic-downto} | @down{arithmetic-downfrom}}
@auxbnf{arithmetic-up, @begininterleave{}@curly{@loopref{from} | @loopref{upfrom}} @param{form1} | @extrainterleave{}@curly{@loopref{to} | @loopref{upto} | @loopref{below}} @param{form2} | @extrainterleave{}@loopref{by} @param{form3}@endinterleave{}@prevplus{}}
@auxbnf{arithmetic-downto, @begininterleave{}@one{@curly{@loopref{from} @param{form1}}} | @extrainterleave{}@one{@curly{@curly{@loopref{downto} | @loopref{above}} @param{form2}}} | @extrainterleave{}@loopref{by} @param{form3}@endinterleave{}}
@auxbnf{arithmetic-downfrom, @begininterleave{}@one{@curly{@loopref{downfrom} @param{form1}}} | @extrainterleave{}@curly{@loopref{to} | @loopref{downto} | @loopref{above}} @param{form2} | @extrainterleave{}@loopref{by} @param{form3}@endinterleave{}}
@auxbnf{for-as-in-list, @param{var} @brac{@param{type-spec}} @loopref{in} @param{form1} @brac{@loopref{by} @param{step-fun}}}
@auxbnf{for-as-on-list, @param{var} @brac{@param{type-spec}} @loopref{on} @param{form1} @brac{@loopref{by} @param{step-fun}}}
@auxbnf{for-as-equals-then, @param{var} @brac{@param{type-spec}} @mat{=} @param{form1} @brac{@loopref{then} @param{form2}}}
@auxbnf{for-as-across, @param{var} @brac{@param{type-spec}} @loopref{across} @param{vector}}
@auxbnf{for-as-hash, @param{var} @brac{@param{type-spec}} @loopref{being} @curly{@loopref{each} | @loopref{the}} @CR{} @lcurly{}@curly{@loopref{hash-key} | @loopref{hash-keys}} @curly{@loopref{in} | @loopref{of}} @param{hash-table} @CR{} @xcurly{}@brac{@loopref{using} @paren{@loopref{hash-value} @param{other-var}}} | @CR{} @xcurly{}@curly{@loopref{hash-value} | @loopref{hash-values}} @curly{@loopref{in} | @loopref{of}} @param{hash-table} @CR{} @xcurly{}@brac{@loopref{using} @paren{@loopref{hash-key} @param{other-var}}}@rcurly{}}
@auxbnf{for-as-package, @param{var} @brac{@param{type-spec}} @loopref{being} @curly{@loopref{each} | @loopref{the}} @CR{} @lcurly{}@loopref{symbol} | @loopref{symbols} |@CR{} @xcurly{}@loopref{present-symbol} | @loopref{present-symbols} |@CR{} @xcurly{}@loopref{external-symbol} | @loopref{external-symbols}@rcurly{} @CR{} @brac{@curly{@loopref{in} | @loopref{of}} @param{package}}}
@auxbnf{type-spec, @down{simple-type-spec} | @down{destructured-type-spec}}
@auxbnf{simple-type-spec, @code{fixnum} | @code{float} | @code{t} | @code{nil}}
@auxbnf{destructured-type-spec, @loopref{of-type} @param{d-type-spec}}
@auxbnf{d-type-spec, @param{type-specifier} | @f{(@param{d-type-spec} . @param{d-type-spec})}}
@auxbnf{var, @down{d-var-spec}}
@auxbnf{var1, @down{d-var-spec}}
@auxbnf{var2, @down{d-var-spec}}
@auxbnf{other-var, @down{d-var-spec}}
@auxbnf{d-var-spec, @param{simple-var} | @nil{}@spc{}| @paren{@down{d-var-spec} @f{.} @down{d-var-spec}}}

@subsubheading Arguments and Values:

@param{compound-form}---a @term{compound form}.

@param{name}---a @term{symbol}.

@param{simple-var}---a @term{symbol} (a @term{variable} name).

@param{form}, @param{form1}, @param{form2}, @param{form3}---a @term{form}.

@param{step-fun}---a @term{form} that evaluates to a @term{function} of one @term{argument}.

@param{vector}---a @term{form} that evaluates to a @term{vector}.

@param{hash-table}---a @term{form} that evaluates to a @term{hash table}.

@param{package}---a @term{form} that evaluates to a @term{package designator}.

@param{type-specifier}---a @term{type specifier}.
This might be either an @term{atomic type specifier} or a @term{compound type specifier},
which introduces some additional complications to proper parsing in the face of 
destructuring; for further information, see @ref{DestructuringLOOPVars, Section 6.1.1.7 (Destructuring)}.

@param{result}---an @term{object}.


@subsubheading Description:

For details, see @ref{The LOOP Facility, Section 6.1 (The LOOP Facility)}.

@subsubheading Examples:

@lisp
;; An example of the simple form of LOOP.
 (defun sqrt-advisor ()
   (loop (format t "~&Number: ")
         (let ((n (parse-integer (read-line) :junk-allowed t)))
           (when (not n) (return))
           (format t "~&The square root of ~D is ~D.~%" n (sqrt n)))))
@EV{} SQRT-ADVISOR
 (sqrt-advisor)
@OUT{} Number: @IN{5@CRLF{}}
@OUT{} The square root of 5 is 2.236068.
@OUT{} Number: @IN{4@CRLF{}}
@OUT{} The square root of 4 is 2.
@OUT{} Number: @IN{done@CRLF{}}
@EV{} NIL

;; An example of the extended form of LOOP.
 (defun square-advisor ()
   (loop as n = (progn (format t "~&Number: ")
                       (parse-integer (read-line) :junk-allowed t))
         while n
         do (format t "~&The square of ~D is ~D.~%" n (* n n))))
@EV{} SQUARE-ADVISOR
 (square-advisor)
@OUT{} Number: @IN{4@CRLF{}}
@OUT{} The square of 4 is 16.
@OUT{} Number: @IN{23@CRLF{}}
@OUT{} The square of 23 is 529.
@OUT{} Number: @IN{done@CRLF{}}
@EV{} NIL

;; Another example of the extended form of LOOP.
 (loop for n from 1 to 10
       when (oddp n)
         collect n)
@EV{} (1 3 5 7 9)
@end lisp


@subsubheading See Also:

@ref{do}, @ref{dolist}, @ref{dotimes}, 
@ref{return}, @ref{go}, @ref{throw},
@ref{DestructuringLOOPVars, Section 6.1.1.7 (Destructuring)}

@subsubheading Notes:

Except that @code{loop-finish} cannot be used within a simple @code{loop} @term{form},
a simple @code{loop} @term{form} is related to an extended @code{loop} @term{form} 
in the following way:

@lisp
 (loop @starparam{compound-form}) @EQ{} (loop do @starparam{compound-form})
@end lisp



@node loop-finish
@heading loop-finish (Local Macro)
@syindex loop-finish
@cindex loop-finish


@subsubheading Syntax:

@DefmacNoReturn{loop-finish, @noargs{}}

@subsubheading Description:

@Themacro{loop-finish} can be used lexically within 
an extended
@code{loop} @term{form} 
to terminate that @term{form} ``normally.''
That is, it transfers control to the loop epilogue
of the lexically innermost extended @code{loop} @term{form}.
This permits execution of any @code{finally} clause (for effect)
and
the return of
any accumulated result.

@subsubheading Examples:

@lisp
;; Terminate the loop, but return the accumulated count.
 (loop for i in '(1 2 3 stop-here 4 5 6)
       when (symbolp i) do (loop-finish)
       count i)
@EV{} 3
 
;; The preceding loop is equivalent to:
 (loop for i in '(1 2 3 stop-here 4 5 6)
       until (symbolp i)
       count i)
@EV{} 3

;; While LOOP-FINISH can be used can be used in a variety of 
;; situations it is really most needed in a situation where a need
;; to exit is detected at other than the loop's `top level'
;; (where UNTIL or WHEN often work just as well), or where some 
;; computation must occur between the point where a need to exit is
;; detected and the point where the exit actually occurs.  For example:
 (defun tokenize-sentence (string)
   (macrolet ((add-word (wvar svar)
                `(when ,wvar
                   (push (coerce (nreverse ,wvar) 'string) ,svar)
                   (setq ,wvar nil))))
     (loop with word = '() and sentence = '() and endpos = nil
           for i below (length string)
           do (let ((char (aref string i)))
                (case char
                  (#@bsl{}Space (add-word word sentence))
                  (#@bsl{}. (setq endpos (1+ i)) (loop-finish))
                  (otherwise (push char word))))
           finally (add-word word sentence)
                   (return (values (nreverse sentence) endpos)))))
@EV{} TOKENIZE-SENTENCE
 
 (tokenize-sentence "this is a sentence. this is another sentence.")
@EV{} ("this" "is" "a" "sentence"), 19
 
 (tokenize-sentence "this is a sentence")
@EV{} ("this" "is" "a" "sentence"), NIL

@end lisp


@subsubheading Side Effects:

Transfers control.

@subsubheading Exceptional Situations:

Whether or not @code{loop-finish} is @term{fbound} in the
@term{global environment} is @term{implementation-dependent};
however, the restrictions on redefinition and @term{shadowing} of
@code{loop-finish} are the same as for @term{symbols} in the @code{COMMON-LISP} @term{package}
which are @term{fbound} in the @term{global environment}.
The consequences of attempting to use @code{loop-finish} outside
of @code{loop} are undefined.

@subsubheading See Also:

@ref{loop},
@ref{The LOOP Facility, Section 6.1 (The LOOP Facility)}

@subsubheading Notes:




@node Objects
@chapter Objects
@menu
* Object Creation and Initialization::
* Changing the Class of an Instance::
* Reinitializing an Instance::
* Meta-Objects::
* Slots::
* Generic Functions and Methods::

Dictionary

* function-keywords::
* ensure-generic-function::
* allocate-instance::
* reinitialize-instance::
* shared-initialize (Standard Generic Function)::
* update-instance-for-different-class::
* update-instance-for-redefined-class::
* change-class::
* slot-boundp::
* slot-exists-p::
* slot-makunbound::
* slot-missing::
* slot-unbound::
* slot-value::
* method-qualifiers::
* no-applicable-method::
* no-next-method::
* remove-method::
* make-instance::
* make-instances-obsolete::
* make-load-form::
* make-load-form-saving-slots::
* with-accessors::
* with-slots::
* defclass::
* defgeneric::
* defmethod::
* find-class::
* next-method-p::
* call-method; make-method::
* call-next-method::
* compute-applicable-methods::
* define-method-combination::
* find-method::
* add-method::
* initialize-instance (Standard Generic Function)::
* class-name::
* setf class-name::
* class-of::
* unbound-slot::
* unbound-slot-instance::
@end menu

@node Object Creation and Initialization
@section Object Creation and Initialization


The @term{generic function} @code{make-instance} creates and returns a new
@term{instance} of a @term{class}.  The first argument is a @term{class} or
the @term{name} of a @term{class}, and the remaining arguments form an 
@newterm{initialization argument list}.

The initialization of a new @term{instance} consists of several distinct
steps, including the following: combining the explicitly supplied initialization
arguments with default values for the unsupplied initialization arguments, 
checking the validity of the initialization arguments, allocating storage 
for the @term{instance}, filling @term{slots} with
values, and executing user-supplied @term{methods} that perform additional
initialization.  Each step of @code{make-instance} is implemented by a
@term{generic function} to provide a mechanism for customizing that step.  
In addition, @code{make-instance} is itself a @term{generic function} 
and thus also can be customized.

The @OS{}@spc{}specifies system-supplied primary @term{methods} for each step 
and thus specifies a well-defined standard behavior for the entire
initialization process.  The standard behavior provides four simple
mechanisms for controlling initialization:


@itemize @bullet{}

@item Declaring a @term{symbol} to be an initialization argument 
for a @term{slot}.  An initialization argument is declared by using the
@kwd{initarg} slot option to @code{defclass}.  This provides a mechanism
for supplying a value for a @term{slot} in a call to @code{make-instance}.

@item Supplying a default value form for an initialization argument.
Default value forms for initialization arguments are defined by using the
@kwd{default-initargs} class option to @code{defclass}.  If an 
initialization argument is not explicitly provided
as an argument to @code{make-instance}, the default value form is
evaluated in the lexical environment of the @code{defclass} form that
defined it, and the resulting value is used as the value of the
initialization argument.

@item Supplying a default initial value form for a @term{slot}.  
A default initial value form for a @term{slot} is defined by using the 
@kwd{initform} slot option to @code{defclass}.  If no initialization
argument associated with that @term{slot} is given as an argument to 
@code{make-instance} or is defaulted by @kwd{default-initargs}, this
default initial value form is evaluated in the lexical environment of
the @code{defclass} form that defined it, and the resulting value is
stored in the @term{slot}.  The @kwd{initform} form for a
@term{local slot} may be used when creating an @term{instance}, when 
updating an @term{instance} to conform to a redefined @term{class}, 
or when updating an @term{instance} to conform to the definition of a
different @term{class}. The @kwd{initform} form for a
@term{shared slot} may be used when defining or re-defining the @term{class}.

@item 
Defining @term{methods} for @code{initialize-instance} and
@code{shared-initialize}.  The slot-filling behavior described above is
implemented by a system-supplied primary @term{method} for
@code{initialize-instance} which invokes @code{shared-initialize}. The
@term{generic function} @code{shared-initialize} implements the parts of
initialization shared by these four situations: when making an @term{instance}, 
when re-initializing an @term{instance}, when updating an @term{instance}
to conform to a redefined @term{class}, and when updating an @term{instance} 
to conform to the definition of a different @term{class}. The system-supplied
primary @term{method} for @code{shared-initialize} directly implements the
slot-filling behavior described above, and @code{initialize-instance}
simply invokes @code{shared-initialize}.
@end itemize


@menu
* Initialization Arguments::
* Declaring the Validity of Initialization Arguments::
* Defaulting of Initialization Arguments::
* Rules for Initialization Arguments::
* Shared-Initialize::
* Initialize-Instance::
* Definitions of Make-Instance and Initialize-Instance::
@end menu
@node Initialization Arguments
@subsection Initialization Arguments

An initialization argument controls @term{object} creation and
initialization.  It is often convenient to use keyword @term{symbols}
to name initialization arguments, but the @term{name} of an
initialization argument can be any @term{symbol}, including @nil{}.  An
initialization argument can be used in two ways: to fill a @term{slot}
with a value or to provide an argument for an initialization
@term{method}.  A single initialization argument can be used for both
purposes.

An @term{initialization argument list} is a
@term{property list} of
initialization argument names and values.
Its structure is identical
to a @term{property list} and also 
to the portion of an argument list
processed for @keyref{key} parameters.
As in those lists,
if an initialization
argument name appears more than once in an initialization argument list,
the leftmost occurrence supplies the value and the remaining occurrences
are ignored.  The arguments to @code{make-instance} (after the first
argument) form an @term{initialization argument list}.

An initialization argument can be associated with a @term{slot}.  If
the initialization argument has a value in the @term{initialization
argument list}, the value is stored into the @term{slot} of the newly
created @term{object}, overriding any @kwd{initform} form associated
with the @term{slot}.  A single initialization argument can initialize
more than one @term{slot}.  An initialization argument that initializes
a @term{shared slot} stores its value into the @term{shared slot},
replacing any previous value.

An initialization argument can be associated with a @term{method}.  When
an @term{object} is created and a particular initialization argument is
supplied, the @term{generic functions} @code{initialize-instance},
@code{shared-initialize}, and @code{allocate-instance} are called
with that initialization argument's name and value as a keyword argument
pair.  If a value for the initialization argument is not supplied in the
@term{initialization argument list}, the @term{method}'s 
@term{lambda list} supplies a default value.

Initialization arguments are used in four situations: when making an
@term{instance}, when re-initializing an @term{instance}, when updating
an @term{instance} to conform to a redefined @term{class}, and when
updating an @term{instance} to conform to the definition of a different
@term{class}.

Because initialization arguments are used to control the creation and
initialization of an @term{instance} of some particular @term{class},
we say that an initialization argument is
``an initialization argument for'' that @term{class}.


@node Declaring the Validity of Initialization Arguments
@subsection Declaring the Validity of Initialization Arguments

Initialization arguments are checked for validity in each of the four
situations that use them.  An initialization argument may be valid in
one situation and not another. For example, the system-supplied     
primary @term{method} for @code{make-instance} defined for 
@theclass{standard-class} checks the validity of its initialization arguments
and signals an error if an initialization argument is supplied that is
not declared as valid in that situation.

There are two means for declaring initialization arguments valid.


@itemize @bullet{}

@item
Initialization arguments that fill @term{slots} are declared as valid
by the @kwd{initarg} slot option to @code{defclass}.  The
@kwd{initarg} slot option is inherited from @term{superclasses}.  Thus
the set of valid initialization arguments that fill @term{slots} for a
@term{class} is the union of the initialization arguments that fill
@term{slots} declared as valid by that @term{class} and its
@term{superclasses}.  Initialization arguments that fill @term{slots}
are valid in all four contexts.

@item
Initialization arguments that supply arguments to @term{methods} are
declared as valid by defining those @term{methods}.  The keyword name of
each keyword parameter specified in the @term{method}'s 
@term{lambda list} becomes an initialization argument for all @term{classes} 
for which the @term{method} is applicable.
The presence of @allowotherkeys{} in the
@term{lambda list} of an applicable method disables validity checking of 
initialization arguments.
Thus @term{method} inheritance
controls the set of valid initialization arguments that supply arguments
to @term{methods}.  The @term{generic functions} for which @term{method}
definitions serve to declare initialization arguments valid are as
follows:

@itemize --
@item
Making an @term{instance} of a @term{class}:
@code{allocate-instance}, @code{initialize-instance}, and
@code{shared-initialize}.  Initialization arguments declared as valid
by these @term{methods} are valid when making 
an @term{instance} of a @term{class}.

@item Re-initializing an @term{instance}:
@code{reinitialize-instance} and @code{shared-initialize}.
Initialization arguments declared as valid by these @term{methods} are
valid when re-initializing an @term{instance}.

@item  Updating an @term{instance} to conform to a redefined @term{class}:
@code{update-instance-for-redefined-class} and @code{shared-initialize}.
Initialization arguments declared as valid by these @term{methods} are
valid when updating an @term{instance} to conform to a redefined @term{class}.

@item Updating an @term{instance} to conform to the definition of a
different @term{class}:
@code{update-instance-for-different-class} and @code{shared-initialize}.
Initialization arguments declared as valid by these @term{methods} are
valid when updating an @term{instance} to conform to the definition
of a different @term{class}.
@end itemize
@end itemize


The set of valid initialization arguments for a @term{class} is the set of
valid initialization arguments that either fill @term{slots} or supply
arguments to @term{methods}, along with the predefined initialization
argument @kwd{allow-other-keys}.  The default value for 
@kwd{allow-other-keys} is @nil{}.
Validity checking of initialization arguments is disabled if the value of
the initialization argument @kwd{allow-other-keys} is @term{true}.


@node Defaulting of Initialization Arguments
@subsection Defaulting of Initialization Arguments

A default value @term{form} can be supplied for an initialization
argument by using the @kwd{default-initargs} @term{class} option.  If an
initialization argument is declared valid by some particular @term{class},
its default  value form might be specified by a different @term{class}. 
In this case @kwd{default-initargs} is used to supply a default value
for an inherited initialization argument.

The @kwd{default-initargs} option is used only to provide default
values for initialization arguments; it does not declare a @term{symbol} 
as a valid initialization argument name.  Furthermore, 
the @kwd{default-initargs} option is used only to provide default values for
initialization arguments when making an @term{instance}.

The argument to the @kwd{default-initargs} class 
option is a list of
alternating initialization argument names and @term{forms}.  
Each @term{form} is the
default  value form for the corresponding initialization
argument.  The default  value @term{form} of an initialization
argument is used and evaluated only if that initialization argument
does not appear in the arguments to @code{make-instance} and is not
defaulted by a more specific @term{class}.  The default  value @term{form} is
evaluated in the lexical environment of the @code{defclass} form that
supplied it; the resulting value is used as the initialization
argument's value.

The initialization arguments supplied to @code{make-instance} are combined
with defaulted initialization arguments to produce a 
@term{defaulted initialization argument list}. A 
@term{defaulted initialization argument list}
is a list of alternating initialization argument names and
values in which unsupplied initialization arguments are defaulted and in
which the explicitly supplied initialization arguments appear earlier in
the list than the defaulted initialization arguments.  Defaulted
initialization arguments are ordered according to the order in the 
@term{class precedence list} of the @term{classes} that supplied the default values.

There is a distinction between the purposes of the 
@kwd{default-initargs} and the @kwd{initform} options with respect to the
initialization of @term{slots}.  The @kwd{default-initargs} 
class option
provides a mechanism for the user to give a default  value @term{form}
for an initialization argument without knowing whether the
initialization argument initializes a @term{slot} 
or is passed to a @term{method}.
If that initialization argument is not explicitly supplied in a call
to @code{make-instance}, the default  value @term{form} is used, just
as if it had been supplied in the call.  In contrast, the 
@kwd{initform} slot option provides a mechanism for the user to give a
default initial value form for a @term{slot}.  An @kwd{initform} form is
used to initialize a @term{slot} only if no initialization argument
associated with that @term{slot} is given as an argument to 
@code{make-instance} or is defaulted by @kwd{default-initargs}.

@cindex order of evaluation
@cindex evaluation order
The order of evaluation of default value @term{forms} for initialization
arguments and the order of evaluation of @kwd{initform} forms are
undefined.  If the order of evaluation is important, 
@code{initialize-instance} or @code{shared-initialize} @term{methods} 
should be used
instead.


@node Rules for Initialization Arguments
@subsection Rules for Initialization Arguments

The @kwd{initarg} slot option may be specified more than
once for a given @term{slot}.

The following rules specify when initialization arguments may be
multiply defined:


@itemize @bullet{}

@item A given initialization argument can be used to
initialize more than one @term{slot} if the same initialization argument name
appears in more than one @kwd{initarg} slot option.

@item A given initialization argument name can appear 
in the @term{lambda list} of more than one initialization @term{method}.

@item A given initialization argument name can
appear both in an @kwd{initarg} slot option and 
in the @term{lambda list}
of an initialization @term{method}.
@end itemize


@reviewer{The next three paragraphs could be replaced by ``If two or more
initialization arguments that initialize the same slot appear in the
@term{defaulted initialization argument list}, the leftmost of these supplies
the value, even if they have different names.''  And the rest would follow
from the rules above.}

If two or more initialization arguments that initialize the same
@term{slot} are given in the arguments to @code{make-instance}, the
leftmost of these initialization arguments in the @term{initialization
argument list} supplies the value, even if the initialization arguments
have different names.

If two or more different initialization arguments that initialize the
same @term{slot} have default values and none is given explicitly in the
arguments to @code{make-instance}, the initialization argument that
appears in a @kwd{default-initargs} class option in the most specific
of the @term{classes} supplies the value. If a single
@kwd{default-initargs} class option specifies two or more initialization
arguments that initialize the same @term{slot} and none is given
explicitly in the arguments to @code{make-instance}, the leftmost in
the @kwd{default-initargs} class option supplies the value, and the
values of the remaining default value @term{forms} are ignored.

Initialization arguments given explicitly in the arguments to
@code{make-instance} appear to the left of defaulted initialization
arguments. Suppose that the classes @mat{C@sub1{}} and @mat{C@sub2{}} supply the
values of defaulted initialization arguments for different @term{slots},
and suppose that @mat{C@sub1{}} is more specific than @mat{C@sub2{}}; then the
defaulted initialization argument whose value is supplied by @mat{C@sub1{}}
is to the left of the defaulted initialization argument whose value is
supplied by @mat{C@sub2{}} in the @term{defaulted initialization argument
list}.  If a single @kwd{default-initargs} class option supplies the
values of initialization arguments for two different @term{slots}, the
initialization argument whose value is specified farther to the left in
the @kwd{default-initargs} class option appears farther to the left in
the @term{defaulted initialization argument list}.

@reviewer{Barmar: End of claim made three paragraphs back.}

If a @term{slot} has both an @kwd{initform} form and an 
@kwd{initarg} slot option, and the initialization argument is defaulted
using @kwd{default-initargs} or is supplied to @code{make-instance},
the captured @kwd{initform} form is neither used nor evaluated.

The following is an example of the above rules:

@lisp
 (defclass q () ((x :initarg a)))
 (defclass r (q) ((x :initarg b))
   (:default-initargs a 1 b 2))
@end lisp


@initargs{}


@node Shared-Initialize
@subsection Shared-Initialize

The @term{generic function} @code{shared-initialize} is used to fill the 
@term{slots}
of an @term{instance} 
using initialization arguments and @kwd{initform}
forms when an @term{instance} is created, when an 
@term{instance} is re-initialized,
when an @term{instance} 
is updated to conform to a redefined @term{class}, and when
an @term{instance} is updated to conform to a different @term{class}.
It uses
standard @term{method} combination. It takes the following arguments: the
@term{instance} to be initialized, a 
specification of a set of @term{names} of @term{slots}
@term{accessible} in that @term{instance}, and any number of initialization
arguments.  The arguments after the first two must form an
@term{initialization argument list}.

The second argument to @code{shared-initialize} may be one of the following:


@itemize @bullet{}

@item It can be a (possibly empty) @term{list} of @term{slot} names,
which specifies the set of those @term{slot} names. 

@item It can be the symbol @code{t}, which specifies the set of all of the @term{slots}.
@end itemize


There is a system-supplied primary @term{method} for @code{shared-initialize}
whose first @term{parameter specializer} is @theclass{standard-object}.
This @term{method} behaves as follows on each @term{slot}, 
whether shared or local:


@itemize @bullet{}

@item If an initialization argument in the 
@term{initialization argument list} specifies a value for that @term{slot}, 
that value is stored
into the @term{slot}, even if a value has already been stored in the @term{slot}
before the @term{method} is run.  
The affected @term{slots} are independent of which
@term{slots} are indicated by the second argument to @code{shared-initialize}.

@item Any @term{slots} 
indicated by the second argument that are still
unbound at this point are initialized according to their 
@kwd{initform} forms.  For any such @term{slot} 
that has an @kwd{initform} form,
that @term{form} is evaluated in the 
lexical environment of its defining 
@code{defclass} form and the result is stored into the @term{slot}.  
For example,
if a @term{before method} stores a value in the 
@term{slot}, the @kwd{initform} form will not be used to supply a value 
for the @term{slot}.  If
the second argument specifies a @term{name} that does not correspond to any
@term{slots} @term{accessible} 
in the @term{instance}, the results are unspecified.

@item The rules mentioned in @ref{Rules for Initialization Arguments, Section 7.1.4 (Rules for Initialization Arguments)} are obeyed.
@end itemize


The generic function @code{shared-initialize} is called by the
system-supplied primary @term{methods} 
for @code{reinitialize-instance},
@code{update-instance-for-different-class}, 
@code{update-instance-for-redefined-class}, and 
@code{initialize-instance}.  Thus, @term{methods} can be written for 
@code{shared-initialize} to specify actions that should be taken in all of
these contexts.


@node Initialize-Instance
@subsection Initialize-Instance

The @term{generic function} @code{initialize-instance} is called by 
@code{make-instance} to initialize a newly created @term{instance}.
It uses @term{standard method combination}.  @term{Methods} for 
@code{initialize-instance} can be defined in order to perform any
initialization that cannot be achieved 
simply by supplying initial values for @term{slots}.


During initialization, @code{initialize-instance} is invoked
after the following actions have been taken:


@itemize @bullet{}

@item The @term{defaulted initialization argument list} 
has been computed by combining the supplied @term{initialization argument list} 
with any default initialization arguments for the @term{class}.

@item The validity of the @term{defaulted initialization argument list}
has been checked.  If any of the initialization arguments has not
been declared as valid, an error is signaled. 

@item A new @term{instance} whose @term{slots} 
are unbound has been created.
@end itemize


The generic function @code{initialize-instance} is called with the
new @term{instance} and the defaulted initialization arguments.  There is
a system-supplied primary @term{method} for @code{initialize-instance}
whose @term{parameter specializer} is @theclass{standard-object}.  This
@term{method} calls the generic function 
@code{shared-initialize} to fill in
the @term{slots} according to the initialization arguments and the 
@kwd{initform} forms for the @term{slots}; the generic function 
@code{shared-initialize} is called with the following arguments: the @term{instance},
@code{t}, and the defaulted initialization arguments.

Note that @code{initialize-instance} provides the 
@term{defaulted initialization argument list} in its call to @code{shared-initialize},
so the first step performed by the system-supplied primary @term{method} for
@code{shared-initialize} takes into account both the initialization
arguments provided in the call to @code{make-instance} and the
@term{defaulted initialization argument list}.

@term{Methods} for @code{initialize-instance} can be defined to specify
actions to be taken when an @term{instance} is initialized.  
If only @term{after methods} for @code{initialize-instance} are defined, they will be
run after the system-supplied primary @term{method} for initialization and
therefore will not interfere with the default behavior of 
@code{initialize-instance}.

The @OS{}@spc{}provides two @term{functions} that are useful in the bodies of 
@code{initialize-instance} methods.  @Thefunction{slot-boundp}
returns a @term{generic boolean} value that indicates whether a specified @term{slot} has a
value; this provides a mechanism for writing @term{after methods} for
@code{initialize-instance} that initialize @term{slots} only if they have
not already been initialized.  @Thefunction{slot-makunbound}
causes the @term{slot} to have no value.


@node Definitions of Make-Instance and Initialize-Instance
@subsection Definitions of Make-Instance and Initialize-Instance

The generic function @code{make-instance} behaves as if it were defined as
follows, except that certain optimizations are permitted:

@lisp
 (defmethod make-instance ((class standard-class) &rest initargs)
   ...
   (let ((instance (apply #'allocate-instance class initargs)))
     (apply #'initialize-instance instance initargs)
     instance))

 (defmethod make-instance ((class-name symbol) &rest initargs)
   (apply #'make-instance (find-class class-name) initargs))
@end lisp



The elided code in the definition of @code{make-instance} 
augments the @f{initargs} with any @term{defaulted initialization arguments} and
checks the
resulting
initialization arguments to determine whether an initialization
argument was supplied that neither filled a @term{slot} nor supplied an argument
to an applicable @term{method}. 

The generic function @code{initialize-instance} behaves as if it were
defined as follows, except that certain optimizations are permitted:

@lisp
 (defmethod initialize-instance ((instance standard-object) &rest initargs)
   (apply #'shared-initialize instance t initargs)))
@end lisp


These procedures can be customized.

Customizing at the Programmer Interface level includes using the 
@kwd{initform}, @kwd{initarg}, and @kwd{default-initargs} options to
@code{defclass}, as well as defining @term{methods}
for @code{make-instance}, 
@code{allocate-instance},
and @code{initialize-instance}.  It is also possible to define
@term{methods} for @code{shared-initialize}, which would be invoked by the
generic functions @code{reinitialize-instance}, 
@code{update-instance-for-redefined-class}, 
@code{update-instance-for-different-class}, and 
@code{initialize-instance}.  
The meta-object level supports additional
customization.

Implementations are permitted to make certain optimizations to 
@code{initialize-instance} and @code{shared-initialize}.  
The description of @code{shared-initialize} in Chapter@tie{}7 mentions the
possible optimizations.



@node Changing the Class of an Instance
@section Changing the Class of an Instance

@Thefunction{change-class} can be used to change the @term{class} 
of an @term{instance} from its current class, @mat{C@subs{@hbox{@prmseven{from}}}},
to a different class, @mat{C@subs{@hbox{@prmseven{to}}}}; it changes the
structure of the @term{instance} to conform to the definition of the class
@mat{C@subs{@hbox{@prmseven{to}}}}.

Note that changing the @term{class} of an @term{instance} may cause
@term{slots} to be added or deleted.  Changing the @term{class} of an
@term{instance} does not change its identity as defined by the
@code{eq} function.

When @code{change-class} is invoked on an @term{instance}, a two-step
updating process takes place.  The first step modifies the structure of
the @term{instance} by adding new @term{local slots} and discarding 
@term{local slots} that are not specified in the new version of the @term{instance}.
The second step initializes the newly added @term{local slots} and performs 
any other user-defined actions. These two steps are further described in the 
two following sections.

@menu
* Modifying the Structure of the Instance::
* Initializing Newly Added Local Slots::
* Customizing the Change of Class of an Instance::
@end menu
@node Modifying the Structure of the Instance
@subsection Modifying the Structure of the Instance

In order to make the @term{instance} conform to the class @mat{C@subs{@hbox{@prmseven{to}}}}, @term{local slots} specified by the class @mat{C@subs{@hbox{@prmseven{to}}}} that are not specified by the class @mat{C@subs{@hbox{@prmseven{from}}}} are added, and @term{local slots} not specified by
the class @mat{C@subs{@hbox{@prmseven{to}}}} that are specified by the
class @mat{C@subs{@hbox{@prmseven{from}}}} are discarded.

The values of @term{local slots} specified by both the class @mat{C@subs{@hbox{@prmseven{to}}}} and the class @mat{C@subs{@hbox{@prmseven{
from}}}} are retained. If such a @term{local slot} was unbound, it remains
unbound.

The values of @term{slots} specified as shared in the class @mat{C@subs{@hbox{@prmseven{from}}}} and as local in the class @mat{C@subs{@hbox{@prmseven{to}}}} are retained.

This first step of the update does not affect the values of any 
@term{shared slots}.


@node Initializing Newly Added Local Slots
@subsection Initializing Newly Added Local Slots

The second step of the update initializes the newly added @term{slots} and
performs any other user-defined actions.  This step is implemented by
the generic function @code{update-instance-for-different-class}.  The
generic function @code{update-instance-for-different-class} is invoked
by @code{change-class} after the first step of the update has been
completed.

The generic function @code{update-instance-for-different-class} is
invoked on arguments computed by @code{change-class}.
The first argument passed is a copy of the @term{instance} being updated 
and is an @term{instance} of the class @mat{C@subs{@hbox{@prmseven{from}}}}; 
this copy has @term{dynamic extent} within the generic function @code{change-class}.  
The second argument is the @term{instance} as updated so far by @code{change-class}
and is an @term{instance} of the class @mat{C@subs{@hbox{@prmseven{to}}}}.
The remaining arguments are an @term{initialization argument list}.


There is a system-supplied primary @term{method} for 
@code{update-instance-for-different-class} that has two parameter
specializers, each of which is @theclass{standard-object}.  First
this @term{method} checks the validity of initialization arguments and
signals an error if an initialization argument is supplied that is not
declared as valid.  (For more information, see @ref{Declaring the Validity of Initialization Arguments, Section 7.1.2 (Declaring the Validity of Initialization Arguments)}.)
Then it calls the
generic function @code{shared-initialize} with the following arguments:
the
new
@term{instance}, a list of @term{names} of the newly added 
@term{slots}, and the
initialization arguments it received.


@node Customizing the Change of Class of an Instance
@subsection Customizing the Change of Class of an Instance

@term{Methods} for @code{update-instance-for-different-class} may be defined
to specify actions to be taken when an @term{instance} is updated.  If only
@term{after methods} for @code{update-instance-for-different-class} are
defined, they will be run after the system-supplied primary @term{method} for
initialization and will not interfere with the default behavior of
@code{update-instance-for-different-class}.

@term{Methods} 
for @code{shared-initialize} may be defined to customize @term{class}
redefinition.  For more information, see @ref{Shared-Initialize, Section 7.1.5 (Shared-Initialize)}.



@node Reinitializing an Instance
@section Reinitializing an Instance

The generic function @code{reinitialize-instance} may be used to change
the values of @term{slots} according to initialization arguments.

The process of reinitialization changes the values of some @term{slots} and
performs any user-defined actions.  It does not modify the structure
of an @term{instance} to add or delete @term{slots}, 
and it does not use any @kwd{initform} forms to initialize @term{slots}.

The generic function @code{reinitialize-instance} may be called
directly.  It takes one required argument, the @term{instance}.  It also
takes any number of initialization arguments to be used by @term{methods} for
@code{reinitialize-instance} or for @code{shared-initialize}. The
arguments after the required @term{instance} must form an 
@term{initialization argument list}.

There is a system-supplied primary @term{method} for 
@code{reinitialize-instance} whose @term{parameter specializer} is 
@theclass{standard-object}.  First this @term{method} checks the validity of
initialization arguments and signals an error if an initialization
argument is supplied that is not declared as valid. 
(For more information, see @ref{Declaring the Validity of Initialization Arguments, Section 7.1.2 (Declaring the Validity of Initialization Arguments)}.)
Then it calls the generic function 
@code{shared-initialize} with the following arguments: the @term{instance},
@nil{}, and the initialization arguments it received.

@menu
* Customizing Reinitialization::
@end menu
@node Customizing Reinitialization
@subsection Customizing Reinitialization

@term{Methods} for @code{reinitialize-instance} may be defined to specify
actions to be taken when an @term{instance} is updated.  If only
@term{after methods} for @code{reinitialize-instance} are defined, 
they will be run after the system-supplied primary @term{method} for 
initialization and therefore will not interfere with the default behavior of 
@code{reinitialize-instance}.

@term{Methods} for @code{shared-initialize} may be defined to customize 
@term{class} redefinition.  For more information, see @ref{Shared-Initialize, Section 7.1.5 (Shared-Initialize)}.



@node Meta-Objects
@section Meta-Objects

The implementation of the @OS{}@spc{}manipulates @term{classes}, @term{methods},
and @term{generic functions}.  The @OS{}@spc{}contains a set of 
@term{generic functions} defined by @term{methods} on @term{classes}; 
the behavior of those @term{generic functions} defines the behavior of
the @OS{}.  The @term{instances} of the @term{classes} on which those
@term{methods} are defined are called meta-objects.  

@menu
* Standard Meta-objects::
@end menu
@node Standard Meta-objects
@subsection Standard Meta-objects

The @OS{}@spc{}supplies a set of meta-objects, called standard meta-objects.
These include @theclass{standard-object} and
@term{instances} of the classes @code{standard-method}, 
@code{standard-generic-function}, and @code{method-combination}.


@itemize @bullet{}

@editornote{KMP: This is said redundantly in the definition of STANDARD-METHOD.}
@item 
@Theclass{standard-method} is the default @term{class} of 
@term{methods} defined by the 
@code{defmethod} and
@code{defgeneric} @term{forms}.

@item
@Theclass{standard-generic-function} is the default @term{class} of 
@term{generic functions} defined by the forms
@code{defmethod},
@code{defgeneric},
and
@code{defclass}.

@item The @term{class} named @code{standard-object} 
is an @term{instance} of @theclass{standard-class} 
and is a @term{superclass} of every @term{class} that is an
@term{instance} of @code{standard-class} except itself and 
@code{structure-class}.

@item Every @term{method} combination object is 
an @term{instance} of a @subclassof{method-combination}.
@end itemize




@node Slots
@section Slots


@menu
* Introduction to Slots::
* Accessing Slots::
* Inheritance of Slots and Slot Options::
@end menu
@node Introduction to Slots
@subsection Introduction to Slots

An @term{object} @ofmetaclass{standard-class} has zero or more named
@term{slots}.  The @term{slots} of an @term{object} are determined 
by the @term{class} of the @term{object}.  Each @term{slot} can hold
one value.
@reviewer{Barmar: All symbols are valid variable names.  Perhaps this means
to preclude the use of named constants?  We have a terminology
problem to solve.}
The @term{name} of a @term{slot} is a @term{symbol} that is syntactically
valid for use as a variable name.

When a @term{slot} does not have a value, the @term{slot} is said to be 
@term{unbound}.  When an unbound @term{slot} is read,
@reviewer{Barmar: from an object whose metaclass is standard-class?}
the @term{generic function} @code{slot-unbound} is invoked. The 
system-supplied primary @term{method} 
for @code{slot-unbound} 
on @term{class} @code{t} signals an error.
If @code{slot-unbound} returns, its @term{primary value} 
is used that time as the @term{value} of the @term{slot}.

The default initial value form for a @term{slot} is defined by
the @kwd{initform} slot option.  When the @kwd{initform} form is used to
supply a value, it is evaluated in the lexical environment in which
the @code{defclass} form was evaluated. The @kwd{initform} along with
the lexical environment in which the @code{defclass} form was evaluated
is called a @term{captured initialization form}. 
For more details, see @ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)}.

A @term{local slot} is defined to be a @term{slot} that is
@term{accessible}
to exactly one @term{instance}, 
namely the one in which the @term{slot} is allocated.  
A @term{shared slot} is defined to be a @term{slot} that is visible to more than one
@term{instance} of a given @term{class} and its @term{subclasses}.

A @term{class} is said to define a @term{slot} with a given @term{name} when
the @code{defclass} form for that @term{class} contains a @term{slot specifier} with
that @term{name}.  Defining a @term{local slot} does not immediately create 
a @term{slot}; it causes a @term{slot} to be created each time 
an @term{instance} of the @term{class} is created.
Defining a @term{shared slot} immediately creates a @term{slot}.

The @kwd{allocation} slot option to @code{defclass} controls the kind
of @term{slot} that is defined.  If the value of the @kwd{allocation} slot
option is @kwd{instance}, a @term{local slot} is created.  If the value of
@kwd{allocation} is @kwd{class}, a @term{shared slot} is created.

A @term{slot} is said to be @term{accessible} in an @term{instance} 
of a @term{class} if
the @term{slot} is defined by the @term{class} 
of the @term{instance} or is inherited from
a @term{superclass} of that @term{class}.  
At most one @term{slot} of a given @term{name} can be
@term{accessible} in an @term{instance}.  
A @term{shared slot} defined by a @term{class} is
@term{accessible} in all @term{instances} 
of that @term{class}.  
A detailed explanation of the inheritance of @term{slots} is given in 
@ref{Inheritance of Slots and Slot Options, Section 7.5.3 (Inheritance of Slots and Slot Options)}.

@node Accessing Slots
@subsection Accessing Slots

@term{Slots} can be @term{accessed} in two ways: by use of the primitive function
@code{slot-value} and by use of @term{generic functions} generated by
the @code{defclass} form.

@Thefunction{slot-value} can be used with any of the @term{slot}
names specified in the @code{defclass} form to @term{access} a specific
@term{slot} @term{accessible} in an @term{instance} of the given @term{class}.

The macro @code{defclass} provides syntax for generating @term{methods} to
read and write @term{slots}.  If a reader @term{method} is requested, 
a @term{method} is automatically generated for reading the value of the
@term{slot}, but no @term{method} for storing a value into it is generated.
If a writer @term{method} is requested, a @term{method} is automatically 
generated for storing a value into the @term{slot}, but no @term{method} 
for reading its value is generated.  If an accessor @term{method} is 
requested, a @term{method} for reading the value of the @term{slot} and a
@term{method} for storing a value into the @term{slot} are automatically
generated.  Reader and writer @term{methods} are implemented using
@code{slot-value}.

When a reader or writer @term{method} is specified for a @term{slot}, the
name of the @term{generic function} to which the generated @term{method}
belongs is directly specified.  If the @term{name} specified for the writer
@term{method} is the symbol @f{name}, the @term{name} of the
@term{generic function} for writing the @term{slot} is the symbol
@f{name}, and the @term{generic function} takes two arguments: the new
value and the @term{instance}, in that order.  If the @term{name} specified
for the accessor @term{method} is the symbol @f{name}, the @term{name} of
the @term{generic function} for reading the @term{slot} is the symbol 
@f{name}, and the @term{name} of the @term{generic function} for writing 
the @term{slot} is the list @f{(setf name)}.

A @term{generic function} created or modified by supplying @kwd{reader},
@kwd{writer}, or @kwd{accessor} @term{slot} options can be treated exactly
as an ordinary @term{generic function}.

Note that @code{slot-value} can be used to read or write the value of a
@term{slot} whether or not reader or writer @term{methods} exist for that
@term{slot}.  When @code{slot-value} is used, no reader or writer
@term{methods} are invoked.

The macro @code{with-slots} can be used to establish a 
@term{lexical environment} in which specified @term{slots} are lexically
available as if they were variables.  The macro @code{with-slots} 
invokes @thefunction{slot-value} to @term{access} the specified @term{slots}.

The macro @code{with-accessors} can be used to establish a lexical
environment in which specified @term{slots} are lexically available through
their accessors as if they were variables.  The macro @code{with-accessors}
invokes the appropriate accessors to @term{access} the specified @term{slots}. 

@node Inheritance of Slots and Slot Options
@subsection Inheritance of Slots and Slot Options

The set of the @term{names} of all @term{slots} @term{accessible} 
in an @term{instance} of a @term{class} @mat{C} is the union of 
the sets of @term{names} of @term{slots} defined by @mat{C} and its
@term{superclasses}. The structure of an @term{instance} is
the set of @term{names} of @term{local slots} in that @term{instance}.

In the simplest case, only one @term{class} among @mat{C} and its @term{superclasses}
defines a @term{slot} with a given @term{slot} name.  
If a @term{slot} is defined by a @term{superclass} of @mat{C}@negthinspace{}, 
the @term{slot} is said to be inherited.  The characteristics 
of the @term{slot} are determined by the @term{slot specifier}
of the defining @term{class}.
Consider the defining @term{class} for
a slot @mat{S}@negthinspace{}.  If the value of the @kwd{allocation} 
slot
option is @kwd{instance}, then @mat{S} is a @term{local slot} and each 
@term{instance}
of @mat{C} has its own @term{slot} named @mat{S} that stores its own value.  If the
value of the @kwd{allocation} slot 
option is @kwd{class}, then @mat{S}
is a @term{shared slot}, the @term{class} 
that defined @mat{S} stores the value, and all
@term{instances} of @mat{C} can @term{access} that single @term{slot}.  
If the @kwd{allocation} slot option is omitted, @kwd{instance} is used.

In general, more than one @term{class} among @mat{C} and its 
@term{superclasses} can
define a @term{slot} with a given @term{name}.  
In such cases, only one @term{slot} with
the given name is @term{accessible} in an @term{instance} 
of @mat{C}@negthinspace{}, and
the characteristics of that @term{slot} are 
a combination of the several @term{slot}
specifiers, computed as follows:


@itemize @bullet{}

@item All the @term{slot specifiers} for a given @term{slot} name
are ordered from most specific to least specific, according to the order in @mat{C}'s
@term{class precedence list} of the @term{classes} that define them. All references
to the specificity of @term{slot specifiers} immediately below refers to this
ordering.

@item The allocation of a @term{slot} is controlled by the most 
specific @term{slot specifier}.  If the most specific @term{slot specifier} 
does not contain an @kwd{allocation} slot option, @kwd{instance} is used.
Less specific @term{slot specifiers} do not affect the allocation.

@item The default initial value form for a @term{slot} 
is the value of the @kwd{initform} slot option in the most specific
@term{slot specifier} that contains one.  If no @term{slot specifier}
contains an @kwd{initform} slot option, the @term{slot} 
has no default initial value form.

@item The contents of a @term{slot} will always be of type 
@f{(and @mat{T@sub1{}} @mat{@ldots{}} @mat{T@subs1{n}})} where @mat{T@sub1{}@ldots{} T@subs1{n}} are
the values of the @kwd{type} slot options contained in all of the
@term{slot specifiers}.  If no @term{slot specifier} contains the
@kwd{type} slot option, the contents of the @term{slot} will always be 
@oftype{t}. The consequences of attempting to store in a @term{slot}
a value that does not satisfy the @term{type} of the @term{slot} are undefined.

@item The set of initialization arguments that initialize a 
given @term{slot} is the union of the initialization arguments declared in
the @kwd{initarg} slot options in all the @term{slot specifiers}.

@item The @term{documentation string} for a @term{slot} is the value of
the @kwd{documentation} slot option in the most specific @term{slot}
specifier that contains one.  If no @term{slot specifier} contains a
@kwd{documentation} slot option, the @term{slot} has no @term{documentation string}.
@end itemize


A consequence of the allocation rule is that a @term{shared slot} can be
@term{shadowed}.  For example, if a class @mat{C@sub1{}} defines 
a @term{slot} named @mat{S}
whose value for the @kwd{allocation} slot option is @kwd{class},
that @term{slot} is @term{accessible} 
in @term{instances} of @mat{C@sub1{}} and all of its
@term{subclasses}.  However, if @mat{C@sub2{}} is a @term{subclass} 
of @mat{C@sub1{}} and also
defines a @term{slot} named @mat{S}@negthinspace{}, @mat{C@sub1{}}'s 
@term{slot} is not shared
by @term{instances} of @mat{C@sub2{}} and its @term{subclasses}. When a class
@mat{C@sub1{}} defines a @term{shared slot}, any subclass @mat{C@sub2{}} of @mat{C@sub1{}} will share this single @term{slot} 
unless the @code{defclass} form for
@mat{C@sub2{}} specifies a @term{slot} of the same 
@term{name} or there is a @term{superclass}
of @mat{C@sub2{}} that precedes @mat{C@sub1{}} in the @term{class precedence list} of
@mat{C@sub2{}} that defines a @term{slot} of the same name.

A consequence of the type rule is that the value of a @term{slot}
satisfies the type constraint of each @term{slot specifier} that
contributes to that @term{slot}.  Because the result of attempting to
store in a @term{slot} a value that does not satisfy the type
constraint for the @term{slot} is undefined, the value in a @term{slot}
might fail to satisfy its type constraint.

The @kwd{reader}, @kwd{writer}, and @kwd{accessor} slot options
create @term{methods} rather than define the characteristics of a @term{slot}.
Reader and writer @term{methods} are inherited in the sense described in
@ref{Inheritance of Methods, Section 7.6.7 (Inheritance of Methods)}.

@term{Methods} that @term{access} @term{slots} use only the name of the
@term{slot} and the @term{type} of the @term{slot}'s value.  Suppose
a @term{superclass} provides a @term{method} that expects to @term{access} a
@term{shared slot} of a given @term{name}, and a @term{subclass} defines
a @term{local slot} with the same @term{name}.  If the @term{method} provided 
by the @term{superclass} is used on an @term{instance} of the @term{subclass}, 
the @term{method} @term{accesses} the @term{local slot}.



@node Generic Functions and Methods
@section Generic Functions and Methods

@menu
* Introduction to Generic Functions::
* Introduction to Methods::
* Agreement on Parameter Specializers and Qualifiers::
* Congruent Lambda-lists for all Methods of a Generic Function::
* Keyword Arguments in Generic Functions and Methods::
* Method Selection and Combination::
* Inheritance of Methods::
@end menu
@node Introduction to Generic Functions
@subsection Introduction to Generic Functions

A @newterm{generic function} is a function whose behavior depends on
the @term{classes} or identities of the @term{arguments} supplied to it.
A @term{generic function} @term{object} 
is associated with 
a set of @term{methods},
a @term{lambda list},
a @term{method combination}@sub2{}, 
and other information.

Like an @term{ordinary function}, a @term{generic function} takes @term{arguments},
performs a series of operations, and perhaps returns useful @term{values}.
An @term{ordinary function} has a single body of @term{code} that is always @term{executed}
when the @term{function} is called.  A @term{generic function} has a set of bodies
of @term{code} of which a subset is selected for @term{execution}. The selected
bodies of @term{code} and the manner of their combination are determined by
the @term{classes} or identities of one or more of the @term{arguments} to the
@term{generic function} and by its @term{method combination}.

@term{Ordinary functions} and @term{generic functions} are called with identical syntax.

@term{Generic functions} are true @term{functions} that can be passed as @term{arguments}
and used as the first @term{argument} to @code{funcall} and @code{apply}.

A @term{binding} of a @term{function name} to a @term{generic function}
can be @term{established} in one of several ways.  It can be
@term{established} in the @term{global environment} by 
@code{ensure-generic-function},
@code{defmethod} (implicitly, due to @code{ensure-generic-function})
or
@code{defgeneric} (also implicitly, due to @code{ensure-generic-function}).
No @term{standardized} mechanism is provided for @term{establishing} a
@term{binding} of a @term{function name} to a @term{generic function}
in the @term{lexical environment}.



When a @code{defgeneric} form is evaluated, one of three actions
is taken (due to @code{ensure-generic-function}):


@itemize @bullet{}

@item If a generic function of the given name already exists,
the existing generic function object is modified.  Methods specified
by the current @code{defgeneric} form are added, and any methods in the
existing generic function that were defined by a previous @code{defgeneric}
form are removed.  Methods added by the current @code{defgeneric} 
form might replace methods defined by @code{defmethod}, 
@code{defclass}, @code{define-condition}, or @code{defstruct}.  
No other methods in the generic function are affected
or replaced.

@item If the given name names 
an @term{ordinary function}, 
a  @term{macro},
or a @term{special operator}, 
an error is signaled.

@item Otherwise a generic function is created with the
methods specified by the method definitions in the @code{defgeneric}
form.
@end itemize


Some @term{operators} permit specification of the options of a
@term{generic function}, such as 
the @term{type} of @term{method combination} it uses 
or its @term{argument precedence order}.
These @term{operators} will be referred to as
``operators that specify generic function options.''
The only @term{standardized} @term{operator} in this category is @code{defgeneric}.

Some @term{operators} define @term{methods} for a @term{generic function}.
These @term{operators} will be referred to as
@cindex method-defining operator
@dfn{method-defining operators};
their associated @term{forms} are called @term{method-defining forms}.
The @term{standardized} @term{method-defining operators} are listed in @thenextfigure{}.


@float Figure,StdMethDefOps
@cartouche
@multitable{define-condition}{defmethod}{defclass}

@item defgeneric @tab defmethod @tab defclass
@item define-condition @tab defstruct @tab 
@end multitable
@end cartouche
@caption{Standardized Method-Defining Operators}
@end float

Note that of the @term{standardized} @term{method-defining operators}
only @code{defgeneric}
can specify @term{generic function} options.
@code{defgeneric} and any @term{implementation-defined} @term{operators}
that can specify @term{generic function} options
are also referred to as ``operators that specify generic function options.''


@node Introduction to Methods
@subsection Introduction to Methods

@term{Methods} define the class-specific or identity-specific behavior
and operations of a @term{generic function}. 

A @term{method} @term{object} 
is associated with 
@term{code} that implements the method's behavior,
a sequence of @term{parameter specializers} 
that specify when the given @term{method} is applicable,
a @term{lambda list},
and a sequence of @term{qualifiers} that are used by the method combination
facility to distinguish among @term{methods}.

A method object is not a function and cannot be invoked as a function. 
Various mechanisms in the @OS{}@spc{}take a method object and invoke its method
function, as is the case when a generic function is invoked.  When this
occurs it is said that the method is invoked or called.

A method-defining form contains the @term{code} that is to be run when the
arguments to the generic function cause the method that it defines to
be invoked.  When a method-defining form is evaluated, a method object
is created and one of four actions is taken:


@itemize @bullet{}

@item If a @term{generic function} of the given name already exists
and if a @term{method object} already exists that agrees with the new one on
@term{parameter specializers} and @term{qualifiers}, the new @term{method object} replaces
the old one.  For a definition of one method agreeing with another on
@term{parameter specializers} and @term{qualifiers}, 
see @ref{Agreement on Parameter Specializers and Qualifiers, Section 7.6.3 (Agreement on Parameter Specializers and Qualifiers)}.

@item If a @term{generic function} of the given name already exists
and if there is no @term{method object} that agrees with the new one on
@term{parameter specializers} and @term{qualifiers}, the existing @term{generic function}
@term{object} is modified to contain the new @term{method} @term{object}.

@item If the given @term{name} names an @term{ordinary function}, a @term{macro},
or a @term{special operator}, an error is signaled.

@item Otherwise a @term{generic function} is created with the @term{method}
specified by the @term{method-defining form}.
@end itemize


If the @term{lambda list} of a new @term{method} is not
@term{congruent} with the @term{lambda list} of the @term{generic function},
an error is signaled.  If a @term{method-defining operator} that cannot specify
@term{generic function} options creates a new @term{generic function}, 
a @term{lambda list} for that @term{generic function} is derived from the
@term{lambda list} of the @term{method} in the @term{method-defining form} in such a way
as to be @term{congruent} with it.  For a discussion of @newterm{congruence},
see @ref{Congruent Lambda-lists for all Methods of a Generic Function, Section 7.6.4 (Congruent Lambda-lists for all Methods of a Generic Function)}.

Each method has a @term{specialized lambda list}, which determines
when that method can be applied.  A @term{specialized lambda list} is like
an @term{ordinary lambda list} except that a specialized parameter
may occur instead of the name of a required parameter.  A specialized parameter
is a list @f{(@i{variable-name} @i{parameter-specializer-name})},
where @i{parameter-specializer-name} is one of the following:


@table @asis

@item @id{a @term{symbol}}


denotes a @term{parameter specializer} which is the @term{class} 
named by that @term{symbol}.

@item @id{a @term{class}}


denotes a @term{parameter specializer} which is the @term{class} itself.

@item @id{@f{(eql @i{form})}}


denotes a @term{parameter specializer} which satisfies the @term{type specifier}
@f{(eql @i{object})}, where @i{object} is the 
result of evaluating @i{form}.  The form @i{form} is evaluated in 
the lexical environment in which the method-defining form is evaluated.
Note that @i{form} is evaluated only once, at the time the method is
defined, not each time the generic function is called.
@end table


@term{Parameter specializer names} are used in macros intended as the
user-level interface (@code{defmethod}), while @term{parameter specializers}
are used in the functional interface.

Only required parameters may be specialized, and there must be a
@term{parameter specializer} for each required parameter.  For notational
simplicity, if some required parameter in a @term{specialized lambda list} in
a method-defining form is simply a variable name, its 
@term{parameter specializer} defaults to @theclass{t}.

Given a generic function and a set of arguments, an applicable
method is a method for that generic function whose parameter
specializers are satisfied by their corresponding arguments.  The
following definition specifies what it means for a method to be
applicable and for an argument to satisfy a @term{parameter specializer}.

Let @mat{@langle{} A@sub1{}, @ldots{}, A@subs1{n}@rangle{}} be the required
arguments to a generic function in order. Let @mat{@langle{} P@sub1{},
@ldots{}, P@subs1{n}@rangle{}} be the @term{parameter specializers} corresponding to
the required parameters of the method @mat{M} in order.  The method @mat{M} is
applicable when each @mat{A@subs1{i}} is of the @term{type} specified by 
the @term{type specifier} @mat{P@subs1{i}}.
Because every valid @term{parameter specializer} is 
also a valid @term{type specifier}, @thefunction{typep} can be used during method
selection to determine whether an argument satisfies a @term{parameter specializer}.  

A method all of whose @term{parameter specializers} are 
@theclass{t} is called a @newterm{default method}; it is always applicable but
may be shadowed by a more specific method.

Methods can have @term{qualifiers}, which give the method combination
procedure a way to distinguish among methods.  A method that has one
or more @term{qualifiers} is called a @term{qualified method}.
A method with no @term{qualifiers} is called an @term{unqualified method}. 
A @term{qualifier} is any @term{non-list}.
The @term{qualifiers} defined by the @term{standardized} method combination types 
are @term{symbols}.

In this specification, the terms ``@term{primary method}'' and 
``@term{auxiliary method}'' are used to partition @term{methods}
within a method combination type according to their intended use.  
In standard method combination, @term{primary methods} are 
@term{unqualified methods} 
and @term{auxiliary methods} are methods with a single @term{qualifier} 
that is one of @kwd{around}, @kwd{before}, or @kwd{after}.
@term{Methods} with these @term{qualifiers} are called @term{around methods},
@term{before methods}, and @term{after methods}, respectively.
When a method combination type is defined using the short form of
@code{define-method-combination}, @term{primary methods} are 
methods qualified with the name of the type of method combination, 
and auxiliary methods have the @term{qualifier} @kwd{around}.
Thus the terms ``@term{primary method}'' and ``@term{auxiliary method}''
have only a relative definition within a given method combination type.


@node Agreement on Parameter Specializers and Qualifiers
@subsection Agreement on Parameter Specializers and Qualifiers

Two @term{methods} are said to agree with each other on @term{parameter specializers}
and @term{qualifiers} if the following conditions hold:


@enumerate 1

@item Both methods have the same number of required parameters.
Suppose the @term{parameter specializers} of the two methods are
@mat{P@subs{1,1}@ldots{} P@subs{1,n}} and @mat{P@subs{2,1}@ldots{} P@subs{2,n}}.

@item For each @mat{1@leq{} i@leq{} n}, @mat{P@subs{1,i}} agrees with @mat{P@subs{2,i}}.
The @term{parameter specializer} @mat{P@subs{1,i}} agrees with @mat{P@subs{2,i}} if
@mat{P@subs{1,i}} and @mat{P@subs{2,i}} are the same class or if 
@mat{P@subs{1,i}=@hbox{@tt{(@b{eql} }@hbox{@i{object}}@sub1{}@mat{)}}},
@mat{P@subs{2,i}=@hbox{@tt{(@b{eql} }@hbox{@i{object}}@sub2{}@mat{)}}}, and
@tt{(@b{eql} @mat{@hbox{@i{object}}@sub1{}} @mat{@hbox{@i{object}}@sub2{}})}.
Otherwise @mat{P@subs{1,i}} and @mat{P@subs{2,i}} do not agree.

@item The two @term{lists} of @term{qualifiers} are the @term{same} 
under @code{equal}.
@end enumerate



@node Congruent Lambda-lists for all Methods of a Generic Function
@subsection Congruent Lambda-lists for all Methods of a Generic Function

These rules define the congruence of a set of @term{lambda lists}, including the
@term{lambda list} of each method for a given generic function and the
@term{lambda list} specified for the generic function itself, if given.


@enumerate 1

@item Each @term{lambda list} must have the same number of required
parameters.

@item Each @term{lambda list} must have the same number of optional
parameters.  Each method can supply its own default for an optional
parameter.

@item If any @term{lambda list} mentions @keyref{rest} or @keyref{key}, each
@term{lambda list} must mention one or both of them.

@item If the @term{generic function} @term{lambda list}
mentions @keyref{key}, each
method must accept all of the keyword names mentioned after @keyref{key},
either by accepting them explicitly, by specifying @keyref{allow-other-keys},
or by specifying @keyref{rest} but not @keyref{key}.
Each method can accept additional keyword arguments of its own.  The
checking of the validity of keyword names is done in the generic
function, not in each method.
A method is invoked as if the keyword
argument pair whose name is @kwd{allow-other-keys} and whose value
is @term{true} were supplied, though no such argument pair will be passed.

@item The use of @keyref{allow-other-keys} need not be consistent
across @term{lambda lists}.  If @keyref{allow-other-keys} is mentioned in 
the @term{lambda list} of any applicable @term{method} or of the @term{generic function},
any keyword arguments may be mentioned in the call to the @term{generic function}.

@item The use of @keyref{aux} need not be consistent across methods.

If a @term{method-defining operator} that cannot specify @term{generic function} options
creates a @term{generic function}, and if the @term{lambda list} for the method
mentions keyword arguments, the @term{lambda list} of the generic function
will mention @keyref{key} (but no keyword arguments).
@end enumerate



@node Keyword Arguments in Generic Functions and Methods
@subsection Keyword Arguments in Generic Functions and Methods

When a generic function or any of its methods mentions 
@keyref{key} in a @term{lambda list}, the specific set of keyword
arguments accepted by the generic function varies according to the
applicable methods.  The set of keyword arguments accepted by the
generic function for a particular call is the union of the keyword
arguments accepted by all applicable methods and the keyword arguments
mentioned after @keyref{key} in the generic function definition,
if any.  A method that has @keyref{rest} but not @keyref{key} does not affect the
set of acceptable keyword arguments.  If
the @term{lambda list} of any applicable method or of the generic
function definition contains @keyref{allow-other-keys}, all
keyword arguments are accepted by the generic function.

The @term{lambda list} congruence rules require that each method
accept all of the keyword arguments mentioned after @keyref{key} in the
generic function definition, by accepting them explicitly, by
specifying @keyref{allow-other-keys}, or by specifying @keyref{rest} but
not @keyref{key}.  Each method can accept additional keyword arguments
of its own, in addition to the keyword arguments mentioned in the
generic function definition.

If a @term{generic function} is passed a keyword argument that no applicable
method accepts, an error should be signaled; see @ref{Error Checking in Function Calls, Section 3.5 (Error Checking in Function Calls)}.

@subsubsection Examples of Keyword Arguments in Generic Functions and Methods

For example, suppose there are two methods defined for @tt{width}
as follows:

@lisp
 (defmethod width ((c character-class) &key font) ...)
 
 (defmethod width ((p picture-class) &key pixel-size) ...)
@end lisp


@noindent
 Assume that there are no other methods and no generic
function definition for @tt{width}. The evaluation of the
following form should signal an error because 
the keyword argument @kwd{pixel-size} is not accepted by the applicable method.

@lisp
 (width (make-instance `character-class :char #@bsl{}Q) 
        :font 'baskerville :pixel-size 10)
@end lisp


The evaluation of the following form should signal an error.

@lisp
 (width (make-instance `picture-class :glyph (glyph #@bsl{}Q)) 
        :font 'baskerville :pixel-size 10)
@end lisp


The evaluation of the following form will not signal an error
if the class named @tt{character-picture-class} is a subclass of
both @tt{picture-class} and @tt{character-class}.

@lisp
 (width (make-instance `character-picture-class :char #@bsl{}Q)
        :font 'baskerville :pixel-size 10)
@end lisp




@node Method Selection and Combination
@subsection Method Selection and Combination

When a @term{generic function} is called with particular arguments, it must
determine the code to execute.  This code is called the 
@newterm{effective method} for those @term{arguments}.
The @term{effective method} is a 
combination of the @term{applicable methods} in the @term{generic function}
that @term{calls} some or all of the @term{methods}.

If a @term{generic function} is called and no @term{methods} are 
@term{applicable}, the @term{generic function} @code{no-applicable-method}
is invoked, with the @term{results} from that call being used as the
@term{results} of the call to the original @term{generic function}.  Calling
@code{no-applicable-method} takes precedence over checking for acceptable
keyword arguments; see @ref{Keyword Arguments in Generic Functions and Methods, Section 7.6.5 (Keyword Arguments in Generic Functions and Methods)}.

When the @term{effective method} has been determined,
it is invoked with the same @term{arguments} as were passed to the @term{generic function}.  
Whatever @term{values} it returns are returned as the @term{values}
of the @term{generic function}.

@subsubsection Determining the Effective Method
@anchor{DeterminingtheEffectiveMethod}

The effective method is determined by the following three-step procedure:


@enumerate 1

@item Select the applicable methods.

@item Sort the applicable methods by precedence order, putting
the most specific method first.

@item Apply method combination to the sorted list of
applicable methods, producing the effective method.
@end enumerate


@unnumberedsubsubsec 7.6.6.1.1 Selecting the Applicable Methods

@anchor{SelApplMeth}

This step is described in @ref{Introduction to Methods, Section 7.6.2 (Introduction to Methods)}.


@unnumberedsubsubsec 7.6.6.1.2 Sorting the Applicable Methods by Precedence Order


To compare the precedence of two methods, their @term{parameter specializers}
are examined in order.  The default examination order is from left to
right, but an alternative order may be specified by the 
@kwd{argument-precedence-order} option to @code{defgeneric} or to any of
the other operators that specify generic function options.

The corresponding @term{parameter specializers} from each method are
compared.  When a pair of @term{parameter specializers} agree, the next
pair are compared for agreement.  If all corresponding parameter
specializers agree, the two methods must have different
@term{qualifiers}; in this case, either method can be selected to precede the
other.  For information about agreement, see @ref{Agreement on Parameter Specializers and Qualifiers, Section 7.6.3 (Agreement on Parameter Specializers and Qualifiers)}.

If some corresponding @term{parameter specializers} do not agree, the first
pair of @term{parameter specializers} that do not agree determines the
precedence.  If both @term{parameter specializers} are classes, the more
specific of the two methods is the method whose @term{parameter specializer}
appears earlier in the @term{class precedence list} of the corresponding
argument.  Because of the way in which the set of applicable methods
is chosen, the @term{parameter specializers} are guaranteed to be present in
the class precedence list of the class of the argument.

If just one of a pair of corresponding @term{parameter specializers} is @tt{(eql @i{object})},
the @term{method} with that @term{parameter specializer} precedes the
other @term{method}.  If both @term{parameter specializers} are @code{eql}
@term{expressions}, the
specializers must agree (otherwise the two @term{methods} would
not both have been applicable to this argument).

The resulting list of @term{applicable methods} has the most specific
@term{method} first and the least specific @term{method} last.    


@unnumberedsubsubsec 7.6.6.1.3 Applying method combination to the sorted list of applicable methods

@anchor{ApplyMethCombToSortedMethods}

In the simple case---if standard method combination is used and all
applicable methods are primary methods---the 
effective method is the most specific method.
That method can call the next most specific
method by using @thefunction{call-next-method}.  The method that
@code{call-next-method} will call is referred to as the 
@newterm{next method}.  The predicate @code{next-method-p} tests whether a next
method exists.  If @code{call-next-method} is called and there is no
next most specific method, the generic function @code{no-next-method}
is invoked.

In general, the effective method is some combination of the applicable
methods.  It is described by a @term{form} that contains calls to some or
all of the applicable methods, returns the value or values that will
be returned as the value or values of the generic function, and
optionally makes some of the methods accessible by means of 
@code{call-next-method}.

The role of each method in the effective method is determined by its
@term{qualifiers} and the specificity of the method.  A @term{qualifier}
serves to mark a method, and the meaning of a @term{qualifier} is
determined by the way that these marks are used by this step
of the procedure.  If an applicable method has an unrecognized
@term{qualifier}, this step signals an error and does not include that method
in the effective method.

When standard method combination is used together with qualified methods, 
the effective method is produced as described in @ref{StdMethComb, Section 7.6.6.2 (Standard Method Combination)}.

Another type of method combination can be specified by using the
@kwd{method-combination} option of @code{defgeneric} or
of any of the other operators that specify generic function options.  In
this way this step of the procedure can be customized.

New types of method combination can be defined by using 
@themacro{define-method-combination}. 



@subsubsection Standard Method Combination
@anchor{StdMethComb}
@cindex standard

Standard method combination is supported by @theclass{standard-generic-function}.
It is used if no other type of method
combination is specified or if the built-in method combination type
@t{standard} is specified. 

Primary methods define the main action of the effective method,  
while auxiliary methods modify that action in one of three ways.
A primary method has no method @term{qualifiers}.

An auxiliary method is a method whose 
@term{qualifier} is @kwd{before}, @kwd{after}, or @kwd{around}.
Standard method combination
allows no more than one @term{qualifier} per method; if a method definition
specifies more than one @term{qualifier} per method, an error is signaled.


@itemize @bullet{}

@item
A @term{before method} has the keyword @kwd{before} as its only @term{qualifier}.
A @term{before method} specifies @term{code} that is to be run before any 
@term{primary methods}.

@item
An @term{after method} has the keyword @kwd{after} as its only @term{qualifier}.
An @term{after method} specifies @term{code} that is to be run after
@term{primary methods}.

@item
An @term{around method} has the keyword @kwd{around} as its only @term{qualifier}.
An @term{around method} specifies @term{code} that is to be run instead of other
@term{applicable methods},
but which might contain explicit @term{code}
which calls some of those @term{shadowed} @term{methods}
(via @code{call-next-method}).
@end itemize


The semantics of standard method combination is as follows:


@itemize @bullet{}

@item If there are any @term{around methods}, the most specific
@term{around method} is called.  It supplies the value or values of the
generic function.

@item Inside the body of an @term{around method}, 
@code{call-next-method} can be used to call the @term{next method}.  When the next
method returns, the @term{around method} can execute more code,
perhaps based on the returned value or values.
@TheGF{no-next-method} is invoked if @code{call-next-method} is used and
there is no @term{applicable method} to call.  @Thefunction{next-method-p}
may be used to determine whether a @term{next method} exists.

@item 
If an @term{around method} invokes @code{call-next-method},
the next most specific @term{around method}
is called, if one is applicable.  If there are no @term{around methods} 
or if @code{call-next-method} is called by the least
specific @term{around method}, the other methods are called as
follows:

@itemize --
@item All the @term{before methods} are called, in
most-specific-first order.  Their values are ignored.
An error is signaled if @code{call-next-method} is used in a
@term{before method}.

@item The most specific primary method is called.  Inside the
body of a primary method, @code{call-next-method} may be used to call
the next most specific primary method.  When that method returns, the
previous primary method can execute more code, perhaps based on the
returned value or values.  The generic function @code{no-next-method}
is invoked if @code{call-next-method} is used and there are no more
applicable primary methods.  @Thefunction{next-method-p} may be
used to determine whether a @term{next method} exists.  If @code{call-next-method}
is not used, only the most specific @term{primary method} is called.

@item All the @term{after methods} are called in
most-specific-last order.  Their values are ignored.
An error is signaled if @code{call-next-method} is used in an
@term{after method}.
@end itemize

@item If no @term{around methods} were invoked, the most
specific primary method supplies the value or values returned by the
generic function.  The value or values returned by the invocation of
@code{call-next-method} in the least specific @term{around method} are
those returned by the most specific primary method.
@end itemize


In standard method combination, if there is an applicable method
but no applicable primary method, an error is signaled.

The @term{before methods} are run in most-specific-first order while
the @term{after methods} are run in least-specific-first order.  The
design rationale for this difference can be illustrated with an
example.  Suppose class @mat{C@sub1{}} modifies the behavior of its
superclass, @mat{C@sub2{}}, by adding @term{before methods} and @term{after methods}.
Whether the behavior of the class @mat{C@sub2{}} is defined
directly by methods on @mat{C@sub2{}} or is inherited from its superclasses
does not affect the relative order of invocation of methods on
instances of the class @mat{C@sub1{}}.  Class @mat{C@sub1{}}'s 
@term{before method} runs before all of class @mat{C@sub2{}}'s methods.  
Class @mat{C@sub1{}}'s @term{after method} runs after all of class @mat{C@sub2{}}'s methods.

By contrast, all @term{around methods} run before any other methods
run.  Thus a less specific @term{around method} runs before a more
specific primary method.

If only primary methods are used and if @code{call-next-method} is not
used, only the most specific method is invoked; that is, more specific
methods shadow more general ones. 


@subsubsection Declarative Method Combination

The macro @code{define-method-combination} defines new forms of method
combination.  It provides a mechanism for customizing the production
of the effective method. The default procedure for producing an
effective method is described in @ref{DeterminingtheEffectiveMethod, Section 7.6.6.1 (Determining the Effective Method)}.
There are two forms of
@code{define-method-combination}.  The short form is a simple facility while
the long form is more powerful and more verbose.  The long form
resembles @code{defmacro} in that the body is an expression that
computes a Lisp form; it provides mechanisms for implementing
arbitrary control structures within method combination and for
arbitrary processing of method @term{qualifiers}.  


@subsubsection Built-in Method Combination Types
@anchor{BuiltInMethCombTypes}

The @CLOS{}@spc{}provides a set of built-in method combination types.  To
specify that a generic function is to use one of these method
combination types, the name of the method combination type is given as
the argument to the @kwd{method-combination} option to 
@code{defgeneric} or to the @kwd{method-combination} option to any of the
other operators that specify generic function options.

The names of the built-in  method combination types are listed in @thenextfigure{}.
@cindex +
@cindex and
@cindex append
@cindex list
@cindex max
@cindex min
@cindex nconc
@cindex or
@cindex progn
@cindex standard


@float Figure,fig7.2
@cartouche
@multitable{and}{append}{max}{nconc}{standard}

@item + @tab append @tab max @tab nconc @tab progn
@item and @tab list @tab min @tab or @tab standard
@end multitable
@end cartouche
@caption{Built-in Method Combination Types}
@end float


The semantics of the @t{standard} built-in method combination type is
described in @ref{StdMethComb, Section 7.6.6.2 (Standard Method Combination)}.  The other
built-in method combination types are called simple built-in method
combination types.

The simple built-in method combination types act as though they were
defined by the short form of @code{define-method-combination}.  
They recognize two roles for @term{methods}:


@itemize @bullet{}

@item An @term{around method} has the keyword symbol 
@kwd{around} as its sole @term{qualifier}.  The meaning of 
@kwd{around} @term{methods} is the same as in standard method combination.
Use of the functions @code{call-next-method} and @code{next-method-p}
is supported in @term{around methods}.

@item A primary method has the name of the method combination
type as its sole @term{qualifier}.  For example, the built-in method
combination type @tt{and} recognizes methods whose sole @term{qualifier} is
@tt{and}; these are primary methods. Use of the functions 
@code{call-next-method} and @code{next-method-p} is not supported 
in @term{primary methods}.
@end itemize


The semantics of the simple built-in method combination types is as
follows:


@itemize @bullet{}
@item                                                    
If there are any @term{around methods}, the most specific @term{around method}
is called.   It supplies the value or values of the @term{generic function}. 

@item Inside the body of an @term{around method}, the function
@code{call-next-method} can be used to call the @term{next method}.
@TheGF{no-next-method} is invoked if 
@code{call-next-method} is used and there is no applicable method to call.
@Thefunction{next-method-p} may be used to determine whether a
@term{next method} exists. When the @term{next method} returns, 
the @term{around method} can execute more code,
perhaps based on the returned value or values.

@item If an @term{around method} invokes @code{call-next-method},
the next most specific @term{around method} is
called, if one is applicable.  If there are no @term{around methods}
or if @code{call-next-method} is called by the least specific
@term{around method}, a Lisp form derived from the name of the built-in
method combination type and from the list of applicable primary
methods is evaluated to produce the value of the generic function.
Suppose the name of the method combination type is @i{operator}
and the call to the generic function is of the form


@quotation
@mat{(@hbox{@i{generic-function}}@spc{}a@sub1{}@ldots{} a@subs1{n})}
@end quotation


@item Let @mat{M@sub1{},@ldots{},M@subs1{k}} be the applicable primary methods
in order; then the derived Lisp form is


@quotation
@mat{(@hbox{@i{operator}}@spc{}@langle{} M@sub1{}
@spc{}a@sub1{}@ldots{} a@subs1{n}@rangle{}@ldots{}@langle{}
M@subs1{k}@spc{}a@sub1{}@ldots{} a@subs1{n}@rangle{})}
@end quotation


@item If the expression @mat{@langle{} M@subs1{i}@spc{}a@sub1{}@ldots{} a@subs1{n}@rangle{}} is
evaluated, the method @mat{M@subs1{i}} will be applied to the arguments
@mat{a@sub1{}@ldots{} a@subs1{n}}.  
For example,
if @i{operator} is @tt{or},
the expression @mat{@langle{} M@subs1{i}@spc{}a@sub1{}@ldots{} a@subs1{n}@rangle{}} is
evaluated only if @mat{@langle{} M@subs1{j}@spc{}a@sub1{}@ldots{} a@subs1{n}@rangle{}},
@mat{1@leq{} j<i}, returned @tt{nil}.

@item The default order for the primary methods is 
@kwd{most-specific-first}.  However, the order can be reversed by supplying
@kwd{most-specific-last} as the second argument to the @kwd{method-combination} option.
@end itemize


The simple built-in method combination types require exactly one
@term{qualifier} per method.  An error is signaled if there are applicable
methods with no @term{qualifiers} or with @term{qualifiers} that are not supported
by the method combination type. An error is signaled if there are
applicable @term{around methods} and no applicable primary
methods.



@node Inheritance of Methods
@subsection Inheritance of Methods

A subclass inherits methods in the sense that any method applicable to
all instances of a class is also applicable to all instances of any
subclass of that class.

The inheritance of methods acts the same way regardless of 
which of the @term{method-defining operators} created the methods.

The inheritance of methods is described in detail in 
@ref{Method Selection and Combination, Section 7.6.6 (Method Selection and Combination)}.


@node function-keywords
@heading function-keywords (Standard Generic Function)
@syindex function-keywords
@cindex function-keywords



@subsubheading Syntax:

@DefgenWithValues{function-keywords, method, keys\, allow-other-keys-p}

@subsubheading Method Signatures:

 function-keywords @specparam{method, standard-method}

@subsubheading Arguments and Values:

@param{method}---a @term{method}.

@param{keys}---a @term{list}.

@param{allow-other-keys-p}---a @term{generalized boolean}.

@subsubheading Description:

Returns the keyword parameter specifiers for a @param{method}.

Two values are returned: 
a @term{list} of the explicitly named keywords 
and a @term{generalized boolean} that states whether @keyref{allow-other-keys}
had been specified in the @param{method} definition.

@subsubheading Examples:

@lisp
 (defmethod gf1 ((a integer) &optional (b 2)
                 &key (c 3) ((:dee d) 4) e ((eff f)))
   (list a b c d e f))
@EV{} #<STANDARD-METHOD GF1 (INTEGER) 36324653>
 (find-method #'gf1 '() (list (find-class 'integer))) 
@EV{} #<STANDARD-METHOD GF1 (INTEGER) 36324653>
 (function-keywords *)
@EV{} (:C :DEE :E EFF), @term{false}
 (defmethod gf2 ((a integer))
   (list a b c d e f))
@EV{} #<STANDARD-METHOD GF2 (INTEGER) 42701775>
 (function-keywords (find-method #'gf1 '() (list (find-class 'integer))))
@EV{} (), @term{false}
 (defmethod gf3 ((a integer) &key b c d &allow-other-keys)
   (list a b c d e f))
 (function-keywords *)
@EV{} (:B :C :D), @term{true}
@end lisp


@subsubheading Affected By:

@code{defmethod}

@subsubheading See Also:

@ref{defmethod}


@node ensure-generic-function
@heading ensure-generic-function (Function)
@syindex ensure-generic-function
@cindex ensure-generic-function


@subsubheading Syntax:

@DefunWithValuesNewline{ensure-generic-function, function-name @key{} @vtop{@hbox{argument-precedence-order declare} @hbox{documentation environment} @hbox{generic-function-class lambda-list} @hbox{method-class method-combination}}, generic-function}

@subsubheading Arguments and Values:

@param{function-name}---a @term{function name}.

The keyword arguments correspond to the @param{option} arguments of
@code{defgeneric}, except that the @kwd{method-class} and
@kwd{generic-function-class} arguments can be @term{class} @term{object}s
as well as names.

@keyword{Method-combination}---method combination object.

@keyword{Environment}---the same as the @keyref{environment} argument
to macro expansion functions and is used to distinguish between compile-time
and run-time environments.

@editornote{KMP: What about documentation. Missing from this arguments enumeration,
and confusing in description below.}

@param{generic-function}---a @term{generic function} @term{object}.

@subsubheading Description:

@Thefunction{ensure-generic-function} is used to define 
a globally named @term{generic function} with no @term{methods} 
or to specify or modify options and declarations that pertain to 
a globally named @term{generic function} as a whole.

If @param{function-name} is not @term{fbound} in the @term{global environment},
a new
@term{generic function} is created.  
If 
@f{(fdefinition @param{function-name})} 
is an @term{ordinary function}, 
a @term{macro}, 
or a @term{special operator},
an error is signaled.

If @param{function-name} 
is a @term{list}, it must be of the
form @f{(setf @param{symbol})}.
If @param{function-name} specifies a @term{generic function} that has a
different value for any of the following arguments,
the @term{generic function} is modified to have the new value: 
@kwd{argument-precedence-order}, @kwd{declare}, @kwd{documentation},
@kwd{method-combination}.

If @param{function-name} specifies a @term{generic function} that has a
different value for the @kwd{lambda-list} argument, and the new value
is congruent with the @term{lambda lists} of all existing 
@term{methods} or there
are no @term{methods}, the value is changed; otherwise an error is signaled.

If @param{function-name} specifies a @term{generic function} that has a
different value for the @kwd{generic-function-class} argument and if
the new generic function class is compatible with the old,
@code{change-class} is called to change the @term{class} of the 
@term{generic function};
otherwise an error is signaled.

If @param{function-name} specifies a @term{generic function} that has a
different value for the @kwd{method-class} argument, the value is
changed, but any existing @term{methods} are not changed.

@subsubheading Affected By:

Existing function binding of @param{function-name}.

@subsubheading Exceptional Situations:

If 
@f{(fdefinition @param{function-name})}
is an @term{ordinary function}, a @term{macro}, or a @term{special operator}, 
an error @oftype{error} is signaled.

If @param{function-name} specifies a 
@term{generic function} that has a
different value for the @kwd{lambda-list} argument, and the new value
is not congruent with the @term{lambda list} of any existing 
@term{method},
an error @oftype{error} is signaled.

If @param{function-name} specifies a 
@term{generic function} that has a
different value for the @kwd{generic-function-class} argument and if
the new generic function class not is compatible with the old,
an error @oftype{error} is signaled.


@subsubheading See Also:

@ref{defgeneric}


@node allocate-instance
@heading allocate-instance (Standard Generic Function)
@syindex allocate-instance
@cindex allocate-instance



@subsubheading Syntax:

@DefgenWithValues{allocate-instance, class @rest{} initargs @key{} @allowotherkeys{}, new-instance}

@subsubheading Method Signatures:

 allocate-instance @specparam{class, standard-class} @rest{} initargs

 allocate-instance @specparam{class, structure-class} @rest{} initargs

@subsubheading Arguments and Values:

@param{class}---a @term{class}.

@param{initargs}---a @term{list} of @term{keyword/value pairs} 
(initialization argument @term{names} and @term{values}).

@param{new-instance}---an @term{object} whose @term{class} is @param{class}.

@subsubheading Description:

The generic function @code{allocate-instance} creates and returns
a new instance of the @param{class}, without initializing it.
When the @param{class} is a @term{standard class}, this means that
the @term{slots} are @term{unbound}; when the @term{class} is a
@term{structure class}, this means the @term{slots}' @term{values}
are unspecified.

The caller of @code{allocate-instance} is expected to have
already checked the initialization arguments.

The @term{generic function} @code{allocate-instance} is called by
@code{make-instance}, as described in
@ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)}.

@subsubheading See Also:

@ref{defclass}, @ref{make-instance}, @ref{class-of},
@ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)}

@subsubheading Notes:

The consequences of adding @term{methods} to @code{allocate-instance} is unspecified.
This capability might be added by the @term{Metaobject Protocol}.



@node reinitialize-instance
@heading reinitialize-instance (Standard Generic Function)
@syindex reinitialize-instance
@cindex reinitialize-instance


@subsubheading Syntax:

@DefgenWithValues{reinitialize-instance, instance @rest{} initargs @key{} @allowotherkeys{}, instance}

@subsubheading Method Signatures:

 reinitialize-instance @specparam{instance, standard-object} @rest{} initargs 

@subsubheading Arguments and Values:

@param{instance}---an @term{object}.

@param{initargs}---an @term{initialization argument list}.

@subsubheading Description:

The @term{generic function} @code{reinitialize-instance} can be used to change
the values of @term{local slots} of an @param{instance} according to 
@param{initargs}.
This @term{generic function} can be called by users.

The system-supplied primary @term{method} for @code{reinitialize-instance}
checks the validity of @param{initargs} and signals an error if
an @param{initarg} is supplied that is not declared as valid.
The @term{method} then calls the generic function @code{shared-initialize}
with the following arguments:  the @param{instance}, 
@nil{}@spc{}(which means no @term{slots}
should be initialized according to their initforms), and the
@param{initargs} it received.

@subsubheading Side Effects:

@TheGF{reinitialize-instance} changes the values of @term{local slots}.

@subsubheading Exceptional Situations:

The system-supplied primary @term{method} for @code{reinitialize-instance}
signals an error if an @param{initarg} is supplied that is not declared as valid.

@subsubheading See Also:

@ref{initialize-instance (Standard Generic Function)},
@ref{shared-initialize (Standard Generic Function)},
@ref{update-instance-for-redefined-class},
@ref{update-instance-for-different-class},
@ref{slot-boundp},
@ref{slot-makunbound},
@ref{Reinitializing an Instance, Section 7.3 (Reinitializing an Instance)},
@ref{Rules for Initialization Arguments, Section 7.1.4 (Rules for Initialization Arguments)},
@ref{Declaring the Validity of Initialization Arguments, Section 7.1.2 (Declaring the Validity of Initialization Arguments)}

@subsubheading Notes:

@param{Initargs} are declared as valid by using the
@kwd{initarg} option to @code{defclass}, or by defining 
@term{methods} for @code{reinitialize-instance}
or @code{shared-initialize}.  The keyword name
of each keyword parameter specifier in the @term{lambda list} of any 
@term{method}
defined on @code{reinitialize-instance} or @code{shared-initialize} is
declared as a valid initialization argument name for all 
@term{classes} for
which that @term{method} is applicable.


@node shared-initialize (Standard Generic Function)
@heading shared-initialize (Standard Generic Function)
@syindex shared-initialize
@cindex shared-initialize


@subsubheading Syntax:

@DefgenWithValues{shared-initialize, instance slot-names @rest{} initargs @key{} @allowotherkeys{}, instance}

@subsubheading Method Signatures:

 shared-initialize @specparam{instance, standard-object} slot-names @rest{} initargs

@subsubheading Arguments and Values:

@param{instance}---an @term{object}.

@param{slot-names}---a @term{list} or @code{t}.

@param{initargs}---a @term{list} of @term{keyword/value pairs}
(of initialization argument @term{names} and @term{values}).

@subsubheading Description:

The generic function @code{shared-initialize} is used to fill the 
@term{slots}                        
of an @param{instance} 
using @param{initargs} and @kwd{initform}
forms.  It is called when an instance is created, when an instance is
re-initialized, when an instance is updated to conform to a redefined
@term{class}, and when an instance is updated to conform to a different
@term{class}. The generic function @code{shared-initialize} is called by the
system-supplied primary @term{method} for @code{initialize-instance},
@code{reinitialize-instance}, @code{update-instance-for-redefined-class}, and
@code{update-instance-for-different-class}.

The generic function @code{shared-initialize} takes the following
arguments: the @param{instance} to be initialized, a specification of a set of
@param{slot-names} @term{accessible} in that @param{instance}, 
and any number of @param{initargs}.
The arguments after the first two must form an 
@term{initialization argument list}.  The system-supplied primary @term{method} on 
@code{shared-initialize} initializes the @term{slots} with values according to the
@param{initargs} and supplied @kwd{initform} forms.  @param{Slot-names}
indicates which @term{slots} should be initialized according
to their @kwd{initform} forms if no @param{initargs} are
provided for those @term{slots}. 

The system-supplied primary @term{method} behaves as follows, 
regardless of whether the @term{slots} are local or shared: 


@itemize @bullet{}

@item
If an @param{initarg} in the @term{initialization argument list} 
specifies a value for that @term{slot}, that
value is stored into the @term{slot}, even if a value has
already been stored in the @term{slot} before the @term{method} is run.

@item
Any @term{slots} indicated by @param{slot-names} that are still unbound
at this point are initialized according to their @kwd{initform} forms.
For any such @term{slot} that has an @kwd{initform} form,
that @term{form} is evaluated in the lexical environment of its defining 
@code{defclass} @term{form} and the result is stored into the @term{slot}.
For example, if a @term{before method} stores a value in the @term{slot}, 
the @kwd{initform} form will not be used to supply a value for the @term{slot}.

@item 
The rules mentioned in @ref{Rules for Initialization Arguments, Section 7.1.4 (Rules for Initialization Arguments)} are obeyed.
@end itemize


The @param{slots-names} argument specifies the @term{slots} that are to be
initialized according to their @kwd{initform} forms if no
initialization arguments apply.  It can be a @term{list} of slot @term{names}, 
which specifies the set of those slot @term{names}; or it can be the @term{symbol} @code{t}, 
which specifies the set of all of the @term{slots}.


@subsubheading See Also:

@ref{initialize-instance (Standard Generic Function)},
@ref{reinitialize-instance},
@ref{update-instance-for-redefined-class},
@ref{update-instance-for-different-class},
@ref{slot-boundp},
@ref{slot-makunbound},
@ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)},
@ref{Rules for Initialization Arguments, Section 7.1.4 (Rules for Initialization Arguments)},
@ref{Declaring the Validity of Initialization Arguments, Section 7.1.2 (Declaring the Validity of Initialization Arguments)}

@subsubheading Notes:

@param{Initargs} are declared as valid by using the @kwd{initarg}
option to @code{defclass}, or by defining 
@term{methods} for @code{shared-initialize}. 
The keyword name of each keyword parameter
specifier in the @term{lambda list} of any @term{method} defined on 
@code{shared-initialize} is declared as a valid @param{initarg}
name for all @term{classes} for which that @term{method} is applicable.

Implementations are permitted to optimize @kwd{initform} forms that 
neither produce nor depend on side effects, by evaluating these @term{forms}
and storing them into slots before running any 
@code{initialize-instance} methods, rather than by handling them in the
primary @code{initialize-instance} method.  (This optimization might
be implemented by having the @code{allocate-instance} method copy a
prototype instance.)

Implementations are permitted to optimize default initial value forms
for @param{initargs} associated with slots by not actually
creating the complete initialization argument 
@term{list} when the only @term{method}
that would receive the complete @term{list} is the 
@term{method} on @code{standard-object}.
In this case default initial value forms can be 
treated like @kwd{initform} forms.  This optimization has no visible
effects other than a performance improvement.


@node update-instance-for-different-class
@heading update-instance-for-different-class (Standard Generic Function)
@syindex update-instance-for-different-class
@cindex update-instance-for-different-class


@subsubheading Syntax:

@DefgenWithValues{update-instance-for-different-class, previous current  @rest{} initargs @key{} @allowotherkeys{}, @term{implementation-dependent}}

@subsubheading Method Signatures:

 update-instance-for-different-class
@vtop{@hbox{@specparam{previous, standard-object}}
@hbox{@specparam{current, standard-object}}
@hbox{@rest{} initargs}}

@subsubheading Arguments and Values:

@param{previous}---a copy of the original @term{instance}.

@param{current}---the original @term{instance} (altered).

@param{initargs}---an @term{initialization argument list}.

@subsubheading Description:

The generic function @code{update-instance-for-different-class} is not
intended to be called by programmers.  Programmers may write
@term{methods} for it.  @Thefunction{update-instance-for-different-class}
is called only by @thefunction{change-class}.

The system-supplied primary @term{method} on 
@code{update-instance-for-different-class} checks the validity of
@param{initargs} and signals an error if an @param{initarg}
is supplied that is not declared as valid.  This @term{method} then
initializes @term{slots} with values according to the @param{initargs},
and initializes the newly added @term{slots} with values according
to their @kwd{initform} forms.  It does this by calling the generic
function @code{shared-initialize} with the following arguments: the 
instance (@param{current}),
a list of @term{names} of the newly added @term{slots}, and the @param{initargs}
it received.  Newly added @term{slots} are those @term{local slots} for which
no @term{slot} of the same name exists in the @param{previous} class.

@term{Methods} for @code{update-instance-for-different-class} can be defined to
specify actions to be taken when an @term{instance} is updated.  If only 
@term{after methods} for @code{update-instance-for-different-class} are
defined, they will be run after the system-supplied primary @term{method} for
initialization and therefore will not interfere with the default
behavior of @code{update-instance-for-different-class}.

@term{Methods} on @code{update-instance-for-different-class} can be defined to
initialize @term{slots} differently from @code{change-class}.  The default
behavior of @code{change-class} is described in 
@ref{Changing the Class of an Instance, Section 7.2 (Changing the Class of an Instance)}.

The arguments to @code{update-instance-for-different-class} are
computed by @code{change-class}.  When @code{change-class} is invoked on
an @term{instance}, a copy of that @term{instance} is made; @code{change-class} then
destructively alters the original @term{instance}. The first argument to
@code{update-instance-for-different-class}, @param{previous}, is that
copy; it holds the old @term{slot} values temporarily.  This argument has
dynamic extent within @code{change-class}; if it is referenced in any
way once @code{update-instance-for-different-class} returns, the
results are undefined.  The second argument to
@code{update-instance-for-different-class}, @param{current}, is the altered
original @term{instance}.
The intended use of @param{previous} is to extract old @term{slot} values by using
@code{slot-value} or @code{with-slots} or by invoking 
a reader generic function, or to run other @term{methods} that were applicable to 
@term{instances} of
the original @term{class}.


@subsubheading Examples:

See the example for @thefunction{change-class}.

@subsubheading Exceptional Situations:
The system-supplied primary @term{method} on
@code{update-instance-for-different-class} signals an error if an
initialization argument is supplied that is not declared as valid.

@subsubheading See Also:

@ref{change-class},
@ref{shared-initialize (Standard Generic Function)},
@ref{Changing the Class of an Instance, Section 7.2 (Changing the Class of an Instance)},
@ref{Rules for Initialization Arguments, Section 7.1.4 (Rules for Initialization Arguments)},
@ref{Declaring the Validity of Initialization Arguments, Section 7.1.2 (Declaring the Validity of Initialization Arguments)}

@subsubheading Notes:

@param{Initargs} are declared as valid by using the @kwd{initarg}
option to @code{defclass}, or by defining @term{methods}
for @code{update-instance-for-different-class} or @code{shared-initialize}.
The keyword name of each keyword parameter specifier in the @term{lambda list} of
any @term{method} defined on @code{update-instance-for-different-class}
or @code{shared-initialize} is declared as a valid @param{initarg} name
for all @term{classes} for which that @term{method} is applicable.

The value returned by @code{update-instance-for-different-class} is
ignored by @code{change-class}.


@node update-instance-for-redefined-class
@heading update-instance-for-redefined-class (Standard Generic Function)
@syindex update-instance-for-redefined-class
@cindex update-instance-for-redefined-class


@subsubheading Syntax:

@DefgenWithValuesNewline{update-instance-for-redefined-class, @vtop{@hbox{instance} @hbox{added-slots discarded-slots} @hbox{property-list} @hbox{@rest{} initargs @key{} @allowotherkeys{}}}, @starparam{result}}

@subsubheading Method Signatures:

 update-instance-for-redefined-class 
@vtop{@hbox{@specparam{instance, standard-object}}
@hbox{added-slots discarded-slots}
@hbox{property-list}
@hbox{@rest{} initargs}}

@subsubheading Arguments and Values:

@param{instance}---an @term{object}.

@param{added-slots}---a @term{list}.

@param{discarded-slots}---a @term{list}.

@param{property-list}---a @term{list}.

@param{initargs}---an @term{initialization argument list}.

@param{result}---an @term{object}.

@subsubheading Description:

The @term{generic function} @code{update-instance-for-redefined-class} 
is not intended to be called by programmers. Programmers may write
@term{methods} for it.  The @term{generic function} 
@code{update-instance-for-redefined-class} is called by the mechanism
activated by @code{make-instances-obsolete}.

The system-supplied primary @term{method} on 
@code{update-instance-for-redefined-class} checks the validity of
@param{initargs} and signals an error if an @param{initarg}
is supplied that is not declared as valid.  This @term{method} then
initializes @term{slots} with values according to the @param{initargs},
and initializes the newly @param{added-slots} with values according
to their @kwd{initform} forms.  It does this by calling the generic
function @code{shared-initialize} with the following arguments: 
the @param{instance},
a list of names of the newly @param{added-slots} to @param{instance},
and the @param{initargs}
it received.  Newly @param{added-slots} are those @term{local slots} for which
no @term{slot} of the same name exists in the old version of the @term{class}.

When @code{make-instances-obsolete} is invoked or when a @term{class} has been
redefined and an @term{instance} is being updated, a @param{property-list} is created
that captures the slot names and values of all the @param{discarded-slots} with
values in the original @param{instance}.  The structure of the 
@param{instance} is
transformed so that it conforms to the current class definition.  The
arguments to @code{update-instance-for-redefined-class} are this
transformed @param{instance}, a list of @param{added-slots} to the
@param{instance}, a list @param{discarded-slots} from the
@param{instance}, and the @param{property-list} 
containing the slot names and values for
@term{slots} that were discarded and had values.  Included in this list of
discarded @term{slots} are @term{slots} that were local in the old @term{class} and are
shared in the new @term{class}.


The value returned by @code{update-instance-for-redefined-class} is ignored.

@subsubheading Examples:

@lisp
  
 (defclass position () ())
 
 (defclass x-y-position (position)
     ((x :initform 0 :accessor position-x)
      (y :initform 0 :accessor position-y)))
 
;;; It turns out polar coordinates are used more than Cartesian 
;;; coordinates, so the representation is altered and some new
;;; accessor methods are added.
 
 (defmethod update-instance-for-redefined-class :before
    ((pos x-y-position) added deleted plist &key)
   ;; Transform the x-y coordinates to polar coordinates
   ;; and store into the new slots.
   (let ((x (getf plist 'x))
         (y (getf plist 'y)))
     (setf (position-rho pos) (sqrt (+ (* x x) (* y y)))
           (position-theta pos) (atan y x))))
  
 (defclass x-y-position (position)
     ((rho :initform 0 :accessor position-rho)
      (theta :initform 0 :accessor position-theta)))
  
;;; All instances of the old x-y-position class will be updated
;;; automatically.
 
;;; The new representation is given the look and feel of the old one.
 
 (defmethod position-x ((pos x-y-position))  
    (with-slots (rho theta) pos (* rho (cos theta))))
 
 (defmethod (setf position-x) (new-x (pos x-y-position))
    (with-slots (rho theta) pos
      (let ((y (position-y pos)))
        (setq rho (sqrt (+ (* new-x new-x) (* y y)))
              theta (atan y new-x))
        new-x)))
 
 (defmethod position-y ((pos x-y-position))
    (with-slots (rho theta) pos (* rho (sin theta))))
 
 (defmethod (setf position-y) (new-y (pos x-y-position))
    (with-slots (rho theta) pos
      (let ((x (position-x pos)))
        (setq rho (sqrt (+ (* x x) (* new-y new-y)))
              theta (atan new-y x))
        new-y)))
 
@end lisp


@subsubheading Exceptional Situations:
The system-supplied primary @term{method} on 
@code{update-instance-for-redefined-class} signals an error if an
@param{initarg} is supplied that is not declared as valid.

@subsubheading See Also:

@ref{make-instances-obsolete},
@ref{shared-initialize (Standard Generic Function)},
@ref{Redefining Classes, Section 4.3.6 (Redefining Classes)},
@ref{Rules for Initialization Arguments, Section 7.1.4 (Rules for Initialization Arguments)},
@ref{Declaring the Validity of Initialization Arguments, Section 7.1.2 (Declaring the Validity of Initialization Arguments)}

@subsubheading Notes:

@param{Initargs} are declared as valid by using the @kwd{initarg}
option to @code{defclass}, or by defining @term{methods} for
@code{update-instance-for-redefined-class} or @code{shared-initialize}.
The keyword name of each keyword parameter specifier in the @term{lambda list} of
any @term{method} defined on 
@code{update-instance-for-redefined-class} or 
@code{shared-initialize} is declared as a valid @param{initarg} name
for all @term{classes} for which that @term{method} is applicable.


@node change-class
@heading change-class (Standard Generic Function)
@syindex change-class
@cindex change-class


@subsubheading Syntax:

@DefgenWithValues{change-class, instance new-class @key{} @allowotherkeys{}, instance}

@subsubheading Method Signatures:

 change-class @specparam{instance, standard-object}
@specparam{new-class, standard-class}
@rest{} initargs

 change-class @specparam{instance, t}
@specparam{new-class, symbol}
@rest{} initargs

@subsubheading Arguments and Values:

@param{instance}---an @term{object}.

@param{new-class}---a @term{class designator}.

@param{initargs}---an @term{initialization argument list}.

@subsubheading Description:

The @term{generic function} @code{change-class} changes the 
@term{class} of an @param{instance} to @param{new-class}.  
It destructively modifies and returns the @param{instance}.

If in the old @term{class} there is any @term{slot} of the 
same name as a local @term{slot} in the @param{new-class}, 
the value of that @term{slot} is retained.  This means that if 
the @term{slot} has a value, the value returned by @code{slot-value}
after @code{change-class} is invoked is @code{eql} to the
value returned by @code{slot-value} before @code{change-class} is
invoked.  Similarly, if the @term{slot} was unbound, it remains
unbound.  The other @term{slots} are initialized as described in 
@ref{Changing the Class of an Instance, Section 7.2 (Changing the Class of an Instance)}.

After completing all other actions, @code{change-class} invokes
@code{update-instance-for-different-class}.  The
generic function @code{update-instance-for-different-class} can be used
to assign values to slots in the transformed instance.
See @ref{Initializing Newly Added Local Slots, Section 7.2.2 (Initializing Newly Added Local Slots)}.

If the second of the above @term{methods} is selected, 
that @term{method} invokes @code{change-class} 
on @param{instance}, @f{(find-class @param{new-class})},
and the @param{initargs}.

@subsubheading Examples:

@lisp
 
 (defclass position () ())
  
 (defclass x-y-position (position)
     ((x :initform 0 :initarg :x)
      (y :initform 0 :initarg :y)))
  
 (defclass rho-theta-position (position)
     ((rho :initform 0)
      (theta :initform 0)))
  
 (defmethod update-instance-for-different-class :before ((old x-y-position) 
                                                         (new rho-theta-position)
                                                         &key)
   ;; Copy the position information from old to new to make new
   ;; be a rho-theta-position at the same position as old.
   (let ((x (slot-value old 'x))
         (y (slot-value old 'y)))
     (setf (slot-value new 'rho) (sqrt (+ (* x x) (* y y)))
           (slot-value new 'theta) (atan y x))))
  
;;; At this point an instance of the class x-y-position can be
;;; changed to be an instance of the class rho-theta-position using
;;; change-class:
 
 (setq p1 (make-instance 'x-y-position :x 2 :y 0))
  
 (change-class p1 'rho-theta-position)
  
;;; The result is that the instance bound to p1 is now an instance of
;;; the class rho-theta-position.   The update-instance-for-different-class
;;; method performed the initialization of the rho and theta slots based
;;; on the value of the x and y slots, which were maintained by
;;; the old instance.
 
@end lisp


@subsubheading See Also:

@ref{update-instance-for-different-class},
@ref{Changing the Class of an Instance, Section 7.2 (Changing the Class of an Instance)}

@subsubheading Notes:

The generic function @code{change-class} has several semantic
difficulties.  First, it performs a destructive operation that can be
invoked within a @term{method} on an @term{instance} that was used to select that
@term{method}. 
When multiple @term{methods} are involved because @term{methods} are being
combined, the @term{methods} currently executing or about to be executed may
no longer be applicable.  Second, some implementations might use
compiler optimizations of slot @term{access}, and when the @term{class} of an
@term{instance} is changed the assumptions the compiler made might be
violated.  This implies that a programmer must not use
@code{change-class} inside a @term{method} if any 
@term{methods} for that @term{generic function}
@term{access} any @term{slots}, or the results are undefined.


@node slot-boundp
@heading slot-boundp (Function)
@syindex slot-boundp
@cindex slot-boundp



@subsubheading Syntax:

@DefunWithValues{slot-boundp, instance slot-name, generalized-boolean}

@subsubheading Arguments and Values:

@param{instance}---an @term{object}.

@param{slot-name}---a @term{symbol} naming a @term{slot} of @param{instance}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Returns @term{true} if the @term{slot} named @param{slot-name} in @param{instance} is bound;
otherwise, returns @term{false}.

@subsubheading Exceptional Situations:

If no @term{slot} of the @term{name} @param{slot-name} exists in the 
@param{instance}, @code{slot-missing} is called as follows:

@lisp
 (slot-missing (class-of @i{instance})
               @i{instance}
               @i{slot-name}
               'slot-boundp)
@end lisp


(If @code{slot-missing} is invoked and returns a value,
a @term{boolean equivalent} to its @term{primary value} 
is returned by @code{slot-boundp}.)

The specific behavior depends on @param{instance}'s @term{metaclass}.
An error is never signaled if @param{instance} has @term{metaclass} @code{standard-class}.
An error is always signaled if @param{instance} has @term{metaclass} @code{built-in-class}.
The consequences are undefined if @param{instance} has any other @term{metaclass}---an error
might or might not be signaled in this situation.  Note in particular that the behavior
for @term{conditions} and @term{structures} is not specified.

@subsubheading See Also:

@ref{slot-makunbound},
@ref{slot-missing}

@subsubheading Notes:

@Thefunction{slot-boundp} allows for writing 
@term{after methods} on @code{initialize-instance} in order to initialize only
those @term{slots} that have not already been bound.

@MentionMetaObjects{slot-boundp, slot-boundp-using-class}


@node slot-exists-p
@heading slot-exists-p (Function)
@syindex slot-exists-p
@cindex slot-exists-p


@subsubheading Syntax:

@DefunWithValues{slot-exists-p, object slot-name, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{slot-name}---a @term{symbol}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:


Returns @term{true} if the @param{object} has
a @term{slot} named @param{slot-name}.

@subsubheading Affected By:

@code{defclass},
@code{defstruct}

@subsubheading See Also:

@ref{defclass},
@ref{slot-missing}

@subsubheading Notes:

@MentionMetaObjects{slot-exists-p, slot-exists-p-using-class}


@node slot-makunbound
@heading slot-makunbound (Function)
@syindex slot-makunbound
@cindex slot-makunbound


@subsubheading Syntax:

@DefunWithValues{slot-makunbound, instance slot-name, instance}

@subsubheading Arguments and Values:

@param{instance}---instance.

@param{Slot-name}---a @term{symbol}.

@subsubheading Description:

@Thefunction{slot-makunbound} restores a @term{slot} 
of the name @param{slot-name} in an @param{instance} to
the unbound state.

@subsubheading Exceptional Situations:

If no @term{slot} of the name @param{slot-name} exists in the 
@param{instance}, @code{slot-missing} is called as follows:

@lisp
(slot-missing (class-of @i{instance})
              @i{instance}
              @i{slot-name}
              'slot-makunbound)
@end lisp


(Any values returned by @code{slot-missing} in this case are
ignored by @code{slot-makunbound}.)

The specific behavior depends on @param{instance}'s @term{metaclass}.
An error is never signaled if @param{instance} has @term{metaclass} @code{standard-class}.
An error is always signaled if @param{instance} has @term{metaclass} @code{built-in-class}.
The consequences are undefined if @param{instance} has any other @term{metaclass}---an error
might or might not be signaled in this situation.  Note in particular that the behavior
for @term{conditions} and @term{structures} is not specified.

@subsubheading See Also:

@ref{slot-boundp},
@ref{slot-missing}

@subsubheading Notes:

@MentionMetaObjects{slot-makunbound, slot-makunbound-using-class}


@node slot-missing
@heading slot-missing (Standard Generic Function)
@syindex slot-missing
@cindex slot-missing


@subsubheading Syntax:

@DefgenWithValues{slot-missing, class object slot-name operation @opt{} new-value, @starparam{result}}

@subsubheading Method Signatures:

 slot-missing @vtop{@hbox{@specparam{class, t}
object slot-name}
@hbox{operation @opt{} new-value}}

@subsubheading Arguments and Values:

@param{class}---the @term{class} of @param{object}.

@param{object}---an @term{object}.

@param{slot-name}---a @term{symbol} (the @term{name} of a would-be @term{slot}).

@param{operation}---one of the @term{symbols}
@code{setf},
@code{slot-boundp},
@code{slot-makunbound},
or @code{slot-value}.

@param{new-value}---an @term{object}.

@param{result}---an @term{object}.

@subsubheading Description:

The generic function @code{slot-missing} is invoked when an attempt is
made to @term{access} a @term{slot} in an @param{object} whose 
@term{metaclass} is @code{standard-class}
and the @term{slot} of the name @param{slot-name}
is not a @term{name} of a
@term{slot} in that @term{class}. 
The default @term{method} signals an error.

The generic function @code{slot-missing} is not intended to be called by
programmers.  Programmers may write @term{methods} for it.

The generic function @code{slot-missing} may be called during
evaluation of @code{slot-value}, @f{(setf slot-value)}, 
@code{slot-boundp}, and @code{slot-makunbound}.  For each
of these operations the corresponding @term{symbol} 
for the @param{operation}
argument is @t{slot-value}, @t{setf}, @t{slot-boundp},
and @t{slot-makunbound} respectively.

The optional @param{new-value} argument to @code{slot-missing} is used
when the operation is attempting to set the value of the @term{slot}.

If @code{slot-missing} returns, its values will be treated as follows:


@itemize @bullet{}
@item
If the @param{operation} is @t{setf} or @t{slot-makunbound},
any @term{values} will be ignored by the caller.

@item
If the @param{operation} is @t{slot-value},
only the @term{primary value} will be used by the caller,
and all other values will be ignored.

@item
If the @param{operation} is @t{slot-boundp},
any @term{boolean equivalent} of the @term{primary value}
of the @term{method} might be is used,
and all other values will be ignored.
@end itemize


@subsubheading Exceptional Situations:

The default @term{method} on @code{slot-missing} 
signals an error @oftype{error}.

@subsubheading See Also:

@ref{defclass},
@ref{slot-exists-p},
@ref{slot-value}

@subsubheading Notes:

The set of arguments (including the @term{class} of the instance) facilitates
defining methods on the metaclass for @code{slot-missing}.


@node slot-unbound
@heading slot-unbound (Standard Generic Function)
@syindex slot-unbound
@cindex slot-unbound


@subsubheading Syntax:

@DefgenWithValues{slot-unbound, class instance slot-name, @starparam{result}}

@subsubheading Method Signatures:

 slot-unbound @specparam{class, t}
instance slot-name

@subsubheading Arguments and Values:

@param{class}---the @term{class} of the @param{instance}.

@param{instance}---the @param{instance} in which an attempt
was made to @term{read} the @term{unbound} @term{slot}.

@param{slot-name}---the @term{name} of the @term{unbound} @term{slot}.

@param{result}---an @term{object}.

@subsubheading Description:

The generic function @code{slot-unbound} is called when an
unbound @term{slot} is read in
an @param{instance} whose metaclass is @code{standard-class}.
The default @term{method} signals an error 
@oftype{unbound-slot}.
The name slot of the 
@code{unbound-slot} @term{condition} is initialized
to the name of the offending variable, and the instance slot
of the @code{unbound-slot} @term{condition} is initialized to the offending instance.


The generic function @code{slot-unbound} is not intended to be called
by programmers.  Programmers may write @term{methods} for it.
@Thefunction{slot-unbound} is called only 
indirectly by @code{slot-value}.

If @code{slot-unbound} returns, 
only the @term{primary value} will be used by the caller,
and all other values will be ignored.

@subsubheading Exceptional Situations:
The default @term{method} on @code{slot-unbound}
signals an error @oftype{unbound-slot}.

@subsubheading See Also:

@ref{slot-makunbound}

@subsubheading Notes:

An unbound @term{slot} may occur if no @kwd{initform} form was
specified for the @term{slot} and the @term{slot} value has not been set,
or if @code{slot-makunbound} has been called on the @term{slot}.


@node slot-value
@heading slot-value (Function)
@syindex slot-value
@cindex slot-value


@subsubheading Syntax:

@DefunWithValues{slot-value, object slot-name, value}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{name}---a @term{symbol}.

@param{value}---an @term{object}.

@subsubheading Description:

@Thefunction{slot-value} returns the @term{value} of the @term{slot}
named @param{slot-name} in the @param{object}.
If there is no @term{slot} named @param{slot-name}, @code{slot-missing} is called.
If the @term{slot} is unbound, @code{slot-unbound} is called.

The macro @code{setf} can be used with @code{slot-value} 
to change the value of a @term{slot}. 

@subsubheading Examples:

@lisp
 (defclass foo () 
   ((a :accessor foo-a :initarg :a :initform 1)
    (b :accessor foo-b :initarg :b)
    (c :accessor foo-c :initform 3)))
@EV{} #<STANDARD-CLASS FOO 244020371>
 (setq foo1 (make-instance 'foo :a 'one :b 'two))
@EV{} #<FOO 36325624>
 (slot-value foo1 'a) @EV{} ONE
 (slot-value foo1 'b) @EV{} TWO
 (slot-value foo1 'c) @EV{} 3
 (setf (slot-value foo1 'a) 'uno) @EV{} UNO
 (slot-value foo1 'a) @EV{} UNO
 (defmethod foo-method ((x foo))
   (slot-value x 'a))
@EV{} #<STANDARD-METHOD FOO-METHOD (FOO) 42720573>
 (foo-method foo1) @EV{} UNO
@end lisp


@subsubheading Exceptional Situations:

If an attempt is made to read a @term{slot} and no @term{slot} of
the name @param{slot-name} exists in the @param{object}, 
@code{slot-missing} is called as follows:

@lisp
 (slot-missing (class-of @i{instance})
               @i{instance}
               @i{slot-name}
               'slot-value)
@end lisp


(If @code{slot-missing} is invoked, its @term{primary value} 
is returned by @code{slot-value}.)

If an attempt is made to write a @term{slot} and no @term{slot} of
the name @param{slot-name} exists in the @param{object},
@code{slot-missing} is called as follows:

@lisp
 (slot-missing (class-of @i{instance})
               @i{instance}
               @i{slot-name}
               'setf
               @i{new-value})
@end lisp


(If @code{slot-missing} returns in this case, any @term{values} are ignored.)

The specific behavior depends on @param{object}'s @term{metaclass}.
An error is never signaled if @param{object} has @term{metaclass} @code{standard-class}.
An error is always signaled if @param{object} has @term{metaclass} @code{built-in-class}.
The consequences are 
unspecified
if @param{object} has any other @term{metaclass}---an error
might or might not be signaled in this situation.  Note in particular that the behavior
for @term{conditions} and @term{structures} is not specified.

@subsubheading See Also:

@ref{slot-missing},
@ref{slot-unbound},
@ref{with-slots}

@subsubheading Notes:

@MentionMetaObjects{slot-value, slot-value-using-class}

Implementations may optimize @code{slot-value} by compiling it inline.


@node method-qualifiers
@heading method-qualifiers (Standard Generic Function)
@syindex method-qualifiers
@cindex method-qualifiers


@subsubheading Syntax:

@DefgenWithValues{method-qualifiers, method, qualifiers}

@subsubheading Method Signatures:

 method-qualifiers @specparam{method, standard-method}

@subsubheading Arguments and Values:

@param{method}---a @term{method}.

@param{qualifiers}---a @term{proper list}.

@subsubheading Description:

Returns a @term{list} of the @term{qualifiers} of the @param{method}.

@subsubheading Examples:

@lisp
 (defmethod some-gf :before ((a integer)) a)
@EV{} #<STANDARD-METHOD SOME-GF (:BEFORE) (INTEGER) 42736540>
 (method-qualifiers *) @EV{} (:BEFORE)
@end lisp


@subsubheading See Also:

@ref{define-method-combination}


@node no-applicable-method
@heading no-applicable-method (Standard Generic Function)
@syindex no-applicable-method
@cindex no-applicable-method


@subsubheading Syntax:

@DefgenWithValues{no-applicable-method, generic-function @rest{} function-arguments, @starparam{result}}

@subsubheading Method Signatures:

 no-applicable-method @vtop{@hbox{@specparam{generic-function, t}}
@hbox{@rest{} function-arguments}}

@subsubheading Arguments and Values:

@param{generic-function}---a @term{generic function} 
on which no @term{applicable method} was found.  

@param{function-arguments}---@term{arguments} to the @param{generic-function}.

@param{result}---an @term{object}.

@subsubheading Description:

The generic function @code{no-applicable-method} is called when a
@term{generic function} 
is invoked
and no @term{method} on that @term{generic function} is applicable.
The @term{default method} signals an error.

The generic function @code{no-applicable-method} is not intended
to be called by programmers.  Programmers may write @term{methods} for it.

@subsubheading Exceptional Situations:

The default @term{method} signals an error @oftype{error}.

@subsubheading See Also:


@node no-next-method
@heading no-next-method (Standard Generic Function)
@syindex no-next-method
@cindex no-next-method


@subsubheading Syntax:

@DefgenWithValues{no-next-method, generic-function method @rest{} args, @starparam{result}}

@subsubheading Method Signatures:

 no-next-method @vtop{@hbox{@specparam{generic-function, standard-generic-function}}
@hbox{@specparam{method, standard-method}}
@hbox{@rest{} args}}

@subsubheading Arguments and Values:

@param{generic-function}---@term{generic function} to which @param{method} belongs.

@param{method}---@term{method} that contained the call to
@code{call-next-method} for which there is no next @term{method}.

@param{args}---arguments to @code{call-next-method}.

@param{result}---an @term{object}.

@subsubheading Description:

@TheGF{no-next-method} is called by @code{call-next-method} 
when there is no @term{next method}.

@TheGF{no-next-method} is not intended to be called by programmers.
Programmers may write @term{methods} for it.

@subsubheading Exceptional Situations:

The system-supplied @term{method} on @code{no-next-method} 
signals an error @oftype{error}. @editornote{KMP: perhaps control-error??}

@subsubheading See Also:

@ref{call-next-method}


@node remove-method
@heading remove-method (Standard Generic Function)
@syindex remove-method
@cindex remove-method


@subsubheading Syntax:

@DefgenWithValues{remove-method, generic-function method, generic-function}

@subsubheading Method Signatures:

 remove-method @vtop{@hbox{@specparam{generic-function, standard-generic-function}}
@hbox{method}}

@subsubheading Arguments and Values:

@param{generic-function}---a @term{generic function}.

@param{method}---a @term{method}.

@subsubheading Description:

@TheGF{remove-method} removes a @term{method} from @param{generic-function}
by modifying the @param{generic-function} (if necessary).

@code{remove-method} must not signal an error if the @term{method} 
is not one of the @term{methods} on the @param{generic-function}.

@subsubheading See Also:

@ref{find-method}



@node make-instance
@heading make-instance (Standard Generic Function)
@syindex make-instance
@cindex make-instance


@subsubheading Syntax:

@DefgenWithValues{make-instance, class @rest{} initargs @key{} @allowotherkeys{}, instance}

@subsubheading Method Signatures:

 make-instance @specparam{class, standard-class} @rest{} initargs

 make-instance @specparam{class, symbol} @rest{} initargs

@subsubheading Arguments and Values:

@param{class}---a @term{class},
or a @term{symbol} that names a @term{class}.

@param{initargs}---an @term{initialization argument list}.

@param{instance}---a @term{fresh} @term{instance} of @term{class} @param{class}.

@subsubheading Description:

The @term{generic function} @code{make-instance} 
creates and returns a new @term{instance} of the given @param{class}.

If the second of the above @term{methods} is selected, 
that @term{method} invokes @code{make-instance} on the arguments
@f{(find-class @param{class})} and @param{initargs}.

The initialization arguments are checked within @code{make-instance}.

The @term{generic function} @code{make-instance} 
may be used as described in @ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)}.

@subsubheading Exceptional Situations:

If any of the initialization arguments has not
been declared as valid, an error @oftype{error} is signaled.

@subsubheading See Also:

@ref{defclass},
@ref{class-of},
@ref{allocate-instance},
@ref{initialize-instance (Standard Generic Function)},
@ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)}


@node make-instances-obsolete
@heading make-instances-obsolete (Standard Generic Function)
@syindex make-instances-obsolete
@cindex make-instances-obsolete


@subsubheading Syntax:

@DefgenWithValues{make-instances-obsolete, class, class}

@subsubheading Method Signatures:

 make-instances-obsolete @specparam{class, standard-class}

 make-instances-obsolete @specparam{class, symbol}

@subsubheading Arguments and Values:

@param{class}---a @term{class designator}.

@subsubheading Description:

@Thefunction{make-instances-obsolete} has the effect of
initiating the process of updating the instances of the
@term{class}. During updating, the generic function
@code{update-instance-for-redefined-class} will be invoked.

The generic function @code{make-instances-obsolete} is invoked
automatically by the system when @code{defclass} has been used to
redefine an existing standard class and the set of local 
@term{slots} @term{accessible} in an
instance is changed or the order of @term{slots} in storage is changed.  It
can also be explicitly invoked by the user.

If the second of the above @term{methods} is selected, that 
@term{method} invokes
@code{make-instances-obsolete} on @f{(find-class @param{class})}.

@subsubheading Examples:


@subsubheading See Also:

@ref{update-instance-for-redefined-class},
@ref{Redefining Classes, Section 4.3.6 (Redefining Classes)}


@node make-load-form
@heading make-load-form (Standard Generic Function)
@syindex make-load-form
@cindex make-load-form


@subsubheading Syntax:

@DefgenWithValues{make-load-form, object @opt{} environment, creation-form@brac{\, initialization-form}}

@subsubheading Method Signatures:

 make-load-form @specparam{object, standard-object}  @opt{} environment
 make-load-form @specparam{object, structure-object} @opt{} environment
 make-load-form @specparam{object, condition}        @opt{} environment
 make-load-form @specparam{object, class}            @opt{} environment

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{environment}---an @term{environment object}.

@param{creation-form}---a @term{form}.

@param{initialization-form}---a @term{form}.

@subsubheading Description:

@TheGF{make-load-form} creates and returns 
one or two @term{forms},
a @param{creation-form}
and an @param{initialization-form},
that enable @code{load} to construct an @term{object}
equivalent to @param{object}.
@param{Environment} is an @term{environment object} 
corresponding to the @term{lexical environment} 
in which the @term{forms} will be processed.

The @term{file compiler} calls @code{make-load-form} to process certain
@term{classes} of @term{literal objects}; see @ref{CallingMakeLoadForm, Section 3.2.4.4 (Additional Constraints on Externalizable Objects)}.

@term{Conforming programs} may call @code{make-load-form} directly,
providing @param{object} is a @term{generalized instance} of
@code{standard-object}, @code{structure-object}, 
or @code{condition}.

The creation form is a @term{form} that, when evaluated at
@code{load} time, should return an @term{object} that 
is equivalent to @param{object}.  The exact meaning of
equivalent depends on the @term{type} of @term{object} 
and is up to the programmer who defines a @term{method} for
@code{make-load-form};
see @ref{Literal Objects in Compiled Files, Section 3.2.4 (Literal Objects in Compiled Files)}.

The initialization form is a @term{form} that, when evaluated at @code{load} time, 
should perform further initialization of the @term{object}.  
The value returned by the initialization form is ignored.
If @code{make-load-form}
returns only one value, 
the initialization form is @nil{}, which has no effect.
If @param{object} appears as a constant in the initialization form,
at @code{load} time it will be replaced by the equivalent @term{object} 
constructed by the creation form;
this is how the further initialization gains access to the @term{object}.

Both the @param{creation-form} and the @param{initialization-form} may contain references
to any @term{externalizable object}.
However, there must not be any circular dependencies in creation forms.
An example of a circular dependency is when the creation form for the
object @f{X} contains a reference to the object @f{Y},
and the creation form for the object @f{Y} contains a reference to the object @f{X}.  
Initialization forms are not subject to any restriction against circular dependencies, 
which is the reason that initialization forms exist; 
see the example of circular data structures below.


The creation form for an @term{object} is always @term{evaluated} before the
initialization form for that @term{object}.  When either the creation form or
the initialization form references other @term{objects} that have not been
referenced earlier in the @term{file} being @term{compiled}, the @term{compiler} ensures
that all of the referenced @term{objects} have been created before @term{evaluating}
the referencing @term{form}.  When the referenced @term{object} is of a @term{type} which
the @term{file compiler} processes using @code{make-load-form},
this involves @term{evaluating}
the creation form returned for it.  (This is the reason for the
prohibition against circular references among creation forms).

Each initialization form is @term{evaluated} as soon as possible after its
associated creation form, as determined by data flow.  If the
initialization form for an @term{object} does not reference any other @term{objects}
not referenced earlier in the @term{file} and processed by 
the @term{file compiler}
using
@code{make-load-form}, the initialization form is evaluated immediately after
the creation form.  If a creation or initialization form @mat{F} does contain
references to such @term{objects}, the creation forms for those other objects
are evaluated before @mat{F}, and the initialization forms for those other
@term{objects} are also evaluated before @mat{F} whenever they do not depend on the
@term{object} created or initialized by @mat{F}.  Where these rules do not uniquely
determine an order of @term{evaluation} between two creation/initialization
forms, the order of @term{evaluation} is unspecified.

While these creation and initialization forms are being evaluated, the
@term{objects} are possibly in an uninitialized state, 
analogous to the state
of an @term{object} 
between the time it has been created by @code{allocate-instance}
and it has been processed fully by 
@code{initialize-instance}.  Programmers
writing @term{methods} for 
@code{make-load-form} must take care in manipulating
@term{objects} not to depend on 
@term{slots} that have not yet been initialized.

It is @term{implementation-dependent}
whether @code{load} calls @code{eval} on the 
@term{forms} or does some
other operation that has an equivalent effect.  For example, the
@term{forms} might be translated into different but equivalent 
@term{forms} and
then evaluated, they might be compiled and the resulting functions
called by @code{load}, 
or they might be interpreted by a special-purpose
function different from @code{eval}.  
All that is required is that the
effect be equivalent to evaluating the @term{forms}.

The @term{method} @term{specialized} on @code{class} returns a creation
@term{form} using the @term{name} of the @term{class} if the @term{class} has
a @term{proper name} in @param{environment}, signaling an error @oftype{error}
if it does not have a @term{proper name}.  @term{Evaluation} of the creation
@term{form} uses the @term{name} to find the @term{class} with that
@term{name}, as if by @term{calling} @code{find-class}.  If a @term{class}
with that @term{name} has not been defined, then a @term{class} may be
computed in an @term{implementation-defined} manner.  If a @term{class}
cannot be returned as the result of @term{evaluating} the creation
@term{form}, then an error @oftype{error} is signaled.

Both @term{conforming implementations} and @term{conforming programs} may
further @term{specialize} @code{make-load-form}.

@subsubheading Examples:

@lisp
 (defclass obj ()
    ((x :initarg :x :reader obj-x)
     (y :initarg :y :reader obj-y)
     (dist :accessor obj-dist)))
@EV{} #<STANDARD-CLASS OBJ 250020030>
 (defmethod shared-initialize :after ((self obj) slot-names &rest keys)
   (declare (ignore slot-names keys))
   (unless (slot-boundp self 'dist)
     (setf (obj-dist self)
           (sqrt (+ (expt (obj-x self) 2) (expt (obj-y self) 2))))))
@EV{} #<STANDARD-METHOD SHARED-INITIALIZE (:AFTER) (OBJ T) 26266714>
 (defmethod make-load-form ((self obj) &optional environment)
   (declare (ignore environment))
   ;; Note that this definition only works because X and Y do not
   ;; contain information which refers back to the object itself.
   ;; For a more general solution to this problem, see revised example below.
   `(make-instance ',(class-of self)
                   :x ',(obj-x self) :y ',(obj-y self)))
@EV{} #<STANDARD-METHOD MAKE-LOAD-FORM (OBJ) 26267532>
 (setq obj1 (make-instance 'obj :x 3.0 :y 4.0)) @EV{} #<OBJ 26274136>
 (obj-dist obj1) @EV{} 5.0
 (make-load-form obj1) @EV{} (MAKE-INSTANCE 'OBJ :X '3.0 :Y '4.0)
@end lisp


In the above example, an equivalent @term{instance} of @f{obj} is
reconstructed by using the values of two of its @term{slots}.  
The value of the third @term{slot} is derived from those two values.

@medbreak{}
Another way to write the @code{make-load-form} @term{method}
in that example is to use @code{make-load-form-saving-slots}.
The code it generates might yield a slightly different result 
from the @code{make-load-form} @term{method} shown above,
but the operational effect will be the same.  For example:

@smallbreak{}
@lisp
 ;; Redefine method defined above.
 (defmethod make-load-form ((self obj) &optional environment)
    (make-load-form-saving-slots self
                                 :slot-names '(x y)
                                 :environment environment))
@EV{} #<STANDARD-METHOD MAKE-LOAD-FORM (OBJ) 42755655>
 ;; Try MAKE-LOAD-FORM on object created above.
 (make-load-form obj1)
@EV{} (ALLOCATE-INSTANCE '#<STANDARD-CLASS OBJ 250020030>),
    (PROGN
      (SETF (SLOT-VALUE '#<OBJ 26274136> 'X) '3.0)
      (SETF (SLOT-VALUE '#<OBJ 26274136> 'Y) '4.0)
      (INITIALIZE-INSTANCE '#<OBJ 26274136>))
@end lisp


@medbreak{}
In the following example, @term{instances} of @f{my-frob} are ``interned'' 
in some way.  An equivalent @term{instance} is reconstructed by using the 
value of the name slot as a key for searching existing @term{objects}.
In this case the programmer has chosen to create a new @term{object} 
if no existing @term{object} is found; alternatively an error could 
have been signaled in that case.

@smallbreak{}
@lisp
 (defclass my-frob ()
    ((name :initarg :name :reader my-name)))
 (defmethod make-load-form ((self my-frob) &optional environment)
   (declare (ignore environment))
   `(find-my-frob ',(my-name self) :if-does-not-exist :create))
@end lisp


@medbreak{}
In the following example, the data structure to be dumped is circular, 
because each parent has a list of its children and each child has a reference
back to its parent.  If @code{make-load-form} is called on one   
@term{object} in such a structure,  the creation form creates an equivalent 
@term{object} and fills in the children slot, which forces creation of equivalent
@term{objects} for all of its children, grandchildren, etc.  At this point
none of the parent @term{slots} have been filled in.  
The initialization form fills in the parent @term{slot}, which forces creation 
of an equivalent @term{object} for the parent if it was not already created.
Thus the entire tree is recreated at @code{load} time.  
At compile time, @code{make-load-form} is called once for each @term{object} 
in the tree.  
All of the creation forms are evaluated,
in @term{implementation-dependent} order,
and then all of the initialization forms are evaluated, 
also in @term{implementation-dependent} order.

@smallbreak{}
@lisp
 (defclass tree-with-parent () ((parent :accessor tree-parent)
                                (children :initarg :children)))
 (defmethod make-load-form ((x tree-with-parent) &optional environment)
   (declare (ignore environment))
   (values
     ;; creation form
     `(make-instance ',(class-of x) :children ',(slot-value x 'children))
     ;; initialization form
     `(setf (tree-parent ',x) ',(slot-value x 'parent))))
@end lisp


@medbreak{}
In the following example, the data structure to be dumped has no special
properties and an equivalent structure can be reconstructed
simply by reconstructing the @term{slots}' contents.

@smallbreak{}
@lisp
 (defstruct my-struct a b c)
 (defmethod make-load-form ((s my-struct) &optional environment)
    (make-load-form-saving-slots s :environment environment))
@end lisp


@subsubheading Exceptional Situations:

The @term{methods} @term{specialized} on 
@code{standard-object},
@code{structure-object},
and @code{condition}
all signal an error @oftype{error}.

It is @term{implementation-dependent} whether @term{calling}
@code{make-load-form} on a @term{generalized instance} of a
@term{system class} signals an error or returns creation and
initialization @term{forms}.

@subsubheading See Also:

@ref{compile-file}, 
@ref{make-load-form-saving-slots},
@ref{CallingMakeLoadForm, Section 3.2.4.4 (Additional Constraints on Externalizable Objects)}
@ref{Evaluation, Section 3.1 (Evaluation)},
@ref{Compilation, Section 3.2 (Compilation)}

@subsubheading Notes:

The @term{file compiler}
calls @code{make-load-form} in specific circumstances
detailed in @ref{CallingMakeLoadForm, Section 3.2.4.4 (Additional Constraints on Externalizable Objects)}.

Some @term{implementations} may provide facilities for defining new
@term{subclasses} of @term{classes} which are specified as
@term{system classes}.  (Some likely candidates include
@code{generic-function}, @code{method}, and @code{stream}).  Such
@term{implementations} should document how the @term{file compiler} processes
@term{instances} of such @term{classes} when encountered as
@term{literal objects}, and should document any relevant @term{methods}
for @code{make-load-form}.


@node make-load-form-saving-slots
@heading make-load-form-saving-slots (Function)
@syindex make-load-form-saving-slots
@cindex make-load-form-saving-slots



@subsubheading Syntax:

@DefunWithValuesNewline{make-load-form-saving-slots, object @key{} slot-names environment, creation-form\, initialization-form}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{slot-names}---a @term{list}.

@param{environment}---an @term{environment object}.

@param{creation-form}---a @term{form}.

@param{initialization-form}---a @term{form}.

@subsubheading Description:

Returns @term{forms} that, when @term{evaluated}, will construct an
@term{object} equivalent to @param{object}, without @term{executing}
@term{initialization forms}.  The @term{slots} in the new @term{object}
that correspond to initialized @term{slots} in @param{object} are
initialized using the values from @param{object}.  Uninitialized @term{slots}
in @param{object} are not initialized in the new @term{object}.
@code{make-load-form-saving-slots} works for any @term{instance} of
@code{standard-object} or @code{structure-object}.

@param{Slot-names} is a @term{list} of the names of the 
@term{slots} to preserve. If @param{slot-names} is not
supplied, its value is all of the @term{local slots}.  

@code{make-load-form-saving-slots} returns two values,
thus it can deal with circular structures.
Whether the result is useful in an application depends on
whether the @param{object}'s @term{type} and slot contents
fully capture the application's idea of the @param{object}'s state.

@param{Environment} is the environment in which the forms will be processed.

@subsubheading See Also:

@ref{make-load-form},
@ref{make-instance},
@ref{setf},
@ref{slot-value},
@ref{slot-makunbound}

@subsubheading Notes:

@code{make-load-form-saving-slots} can be useful in user-written
@code{make-load-form} methods.


When the @term{object} is an @term{instance} of @code{standard-object},
@code{make-load-form-saving-slots} could return a creation form that
@term{calls} @code{allocate-instance} and an initialization form that
contains @term{calls} to @code{setf} of @code{slot-value} and
@code{slot-makunbound}, though other @term{functions} of similar effect
might actually be used.


@node with-accessors
@heading with-accessors (Macro)
@syindex with-accessors
@cindex with-accessors



@subsubheading Syntax:

@DefmacWithValuesNewline{with-accessors, @paren{@starparam{slot-entry}}  instance-form @starparam{declaration} @starparam{form}, @starparam{result}}

@auxbnf{slot-entry, @paren{variable-name accessor-name}}

@subsubheading Arguments and Values:

@param{variable-name}---a @term{variable name}; @noeval{}.

@param{accessor-name}---a @term{function name}; @noeval{}.

@param{instance-form}---a @term{form}; @eval{}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @param{forms}.

@subsubheading Description:

Creates a lexical environment in which
the slots specified by
@param{slot-entry} are lexically available through their accessors as if
they were variables.  The macro @code{with-accessors} invokes the
appropriate accessors to @param{access} the @term{slots} specified
by @param{slot-entry}.  Both @code{setf}
and @code{setq} can be used to set the value of the @term{slot}.

@subsubheading Examples:

@lisp
 (defclass thing ()
           ((x :initarg :x :accessor thing-x)
            (y :initarg :y :accessor thing-y)))
@EV{} #<STANDARD-CLASS THING 250020173>
 (defmethod (setf thing-x) :before (new-x (thing thing))
   (format t "~&Changing X from ~D to ~D in ~S.~%"
           (thing-x thing) new-x thing))
 (setq thing1 (make-instance 'thing :x 1 :y 2)) @EV{} #<THING 43135676>
 (setq thing2 (make-instance 'thing :x 7 :y 8)) @EV{} #<THING 43147374>
 (with-accessors ((x1 thing-x) (y1 thing-y))
                 thing1
   (with-accessors ((x2 thing-x) (y2 thing-y))
                   thing2
     (list (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2))
           (setq x1 (+ y1 x2))
           (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2))
           (setf (thing-x thing2) (list x1))
           (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2)))))
@OUT{} Changing X from 1 to 9 in #<THING 43135676>.
@OUT{} Changing X from 7 to (9) in #<THING 43147374>.
@EV{} ((1 1 2 2 7 7 8 8)
     9
     (9 9 2 2 7 7 8 8) 
     (9)
     (9 9 2 2 (9) (9) 8 8))
@end lisp


@subsubheading Affected By:

@code{defclass}

@subsubheading Exceptional Situations:

The consequences are undefined if any @param{accessor-name} is not the name
of an accessor for the @param{instance}.

@subsubheading See Also:

@ref{with-slots},
@ref{symbol-macrolet}

@subsubheading Notes:

A @code{with-accessors} expression of the form:

@withaccessors{}


@node with-slots
@heading with-slots (Macro)
@syindex with-slots
@cindex with-slots



@subsubheading Syntax:

@DefmacWithValuesNewline{with-slots, @paren{@starparam{slot-entry}} instance-form  @starparam{declaration} @starparam{form}, @starparam{result}}

@auxbnf{slot-entry, slot-name | @paren{variable-name slot-name}}

@subsubheading Arguments and Values:

@param{slot-name}---a @term{slot} @term{name}; @noeval{}.

@param{variable-name}---a @term{variable name}; @noeval{}.

@param{instance-form}---a @term{form}; evaluted to produce @param{instance}.

@param{instance}---an @term{object}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @param{forms}.

@subsubheading Description:

The macro @code{with-slots} @term{establishes} a
@term{lexical environment}
for referring to the @term{slots} in the @param{instance} 
named by the given @param{slot-names} 
as though they were @term{variables}.  Within such a context
the value of the @term{slot} can be specified by using its slot name, as if
it were a lexically bound variable.  Both @code{setf} and @code{setq}
can be used to set the value of the @term{slot}.

The macro @code{with-slots} translates an appearance of the slot 
name as a @term{variable} into a call to @code{slot-value}.

@subsubheading Examples:

@lisp
 (defclass thing ()
           ((x :initarg :x :accessor thing-x)
            (y :initarg :y :accessor thing-y)))
@EV{} #<STANDARD-CLASS THING 250020173>
 (defmethod (setf thing-x) :before (new-x (thing thing))
   (format t "~&Changing X from ~D to ~D in ~S.~%"
           (thing-x thing) new-x thing))
 (setq thing (make-instance 'thing :x 0 :y 1)) @EV{} #<THING 62310540>
 (with-slots (x y) thing (incf x) (incf y)) @EV{} 2
 (values (thing-x thing) (thing-y thing)) @EV{} 1, 2
 (setq thing1 (make-instance 'thing :x 1 :y 2)) @EV{} #<THING 43135676>
 (setq thing2 (make-instance 'thing :x 7 :y 8)) @EV{} #<THING 43147374>
 (with-slots ((x1 x) (y1 y))
             thing1
   (with-slots ((x2 x) (y2 y))
               thing2
     (list (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2))
           (setq x1 (+ y1 x2))
           (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2))
           (setf (thing-x thing2) (list x1))
           (list x1 (thing-x thing1) y1 (thing-y thing1)
                 x2 (thing-x thing2) y2 (thing-y thing2)))))
@OUT{} Changing X from 7 to (9) in #<THING 43147374>.
@EV{} ((1 1 2 2 7 7 8 8)
     9
     (9 9 2 2 7 7 8 8) 
     (9)
     (9 9 2 2 (9) (9) 8 8))
@end lisp


@subsubheading Affected By:

@code{defclass}

@subsubheading Exceptional Situations:

The consequences are undefined if any @param{slot-name} is not the name
of a @term{slot} in the @param{instance}.

@subsubheading See Also:

@ref{with-accessors},
@ref{slot-value},
@ref{symbol-macrolet}

@subsubheading Notes:

A @code{with-slots} expression of the form:

@withslots{}



@node defclass
@heading defclass (Macro)
@syindex defclass
@cindex defclass


@subsubheading Syntax:

@DefmacWithValuesNewline{defclass, @param{class-name} @paren{@star{@curly{@param{superclass-name}}}} @paren{@star{@curly{@i{slot-specifier}}}} @mat{@lbrack{}@lbrack{}@downarrow{}@hbox{@i{class-option}}@rbrack{}@rbrack{}}, new-class}

@defclass{}


@subsubheading Arguments and Values:


@param{Class-name}---a @term{non-nil} @term{symbol}.

@param{Superclass-name}---a @term{non-nil} @term{symbol}.

@param{Slot-name}---a @term{symbol}.
The @param{slot-name} argument is 
a @term{symbol} that is syntactically valid for use as a variable name.

@param{Reader-function-name}---a @term{non-nil} @term{symbol}.
@kwd{reader} can be supplied more than once for a given @term{slot}.

@param{Writer-function-name}---a @term{generic function} name.
@kwd{writer} can be supplied more than once for a given @term{slot}.

@param{Reader-function-name}---a @term{non-nil} @term{symbol}.
@kwd{accessor} can be supplied more than once for a given @term{slot}.

@param{Allocation-type}---(member @kwd{instance} @kwd{class}).
@kwd{allocation} can be supplied once at most for a given @term{slot}.

@param{Initarg-name}---a @term{symbol}.
@kwd{initarg} can be supplied more than once for a given @term{slot}.  

@param{Form}---a @term{form}. 
@kwd{init-form} can be supplied once at most for a given @term{slot}.  

@param{Type-specifier}---a @term{type specifier}.
@kwd{type} can be supplied once at most for a given @term{slot}. 

@param{Class-option}--- refers to the @term{class} as a whole or to all class @term{slots}.

@param{Initarg-list}---a @term{list} of alternating initialization argument
@term{names} and default initial value @term{forms}.
@kwd{default-initargs} can be supplied at most once.

@param{Class-name}---a @term{non-nil} @term{symbol}.
@kwd{metaclass} can be supplied once at most.








@param{new-class}---the new @term{class} @term{object}.

@subsubheading Description:

The macro @code{defclass} defines a new named @term{class}.  It returns
the new @term{class} @term{object} as its result.

The syntax of @code{defclass} provides options for specifying
initialization arguments for @term{slots}, for specifying default
initialization values for @term{slots}, and for requesting that 
@term{methods} on specified @term{generic functions} be automatically 
generated for reading and writing the values of @term{slots}.  
No reader or writer functions are defined by default; 
their generation must be explicitly requested.  However,
@term{slots} can always be @term{accessed} using @code{slot-value}.

Defining a new @term{class} also causes a @term{type} of the same name to be
defined.  The predicate @f{(typep @param{object} @param{class-name})} returns
true if the @term{class} of the given @param{object} is 
the @term{class} named by @param{class-name} itself or
a subclass of the class @param{class-name}.  A @term{class} @term{object} 
can be used as a @term{type specifier}.  
Thus @f{(typep @param{object} @param{class})} returns @term{true}
if the @term{class} of the @param{object} is 
@param{class} itself or a subclass of @param{class}.   

The @param{class-name} argument specifies the @term{proper name} 
of the new @term{class}.  
If a @term{class} with the same @term{proper name} already exists 
and that @term{class} is an @term{instance} of @code{standard-class}, 
and if the @code{defclass} form for the definition of the new @term{class}
specifies a @term{class} of @term{class} @code{standard-class},
the existing @term{class} is redefined,
and instances of it (and its @term{subclasses}) are updated 
to the new definition at the time that they are next @term{accessed}.
For details, see @ref{Redefining Classes, Section 4.3.6 (Redefining Classes)}.


Each @param{superclass-name} argument 
specifies a direct @term{superclass} of the new @term{class}.  
If the @term{superclass} list is empty, then the @term{superclass}
defaults depending on the @term{metaclass}, 
with @code{standard-object} being the
default for @code{standard-class}.

The new @term{class} will
inherit @term{slots} and @term{methods} 
from each of its direct @term{superclasses}, from
their direct @term{superclasses}, and so on.  
For a discussion of how @term{slots} and @term{methods} are inherited,
see @ref{Inheritance, Section 4.3.4 (Inheritance)}.


The following slot options are available:


@itemize @bullet{}

@item
The @kwd{reader} slot option specifies that an @term{unqualified method} is
to be defined on the @term{generic function} named @param{reader-function-name}
to read the value of the given @term{slot}.

@item 
The @kwd{writer} slot option specifies that an @term{unqualified method} is
to be defined on the @term{generic function} named @param{writer-function-name}
to write the value of the @term{slot}.

@item 
The @kwd{accessor} slot option specifies that an @term{unqualified method}
is to be defined on the generic function named @param{reader-function-name}
to read the value of the given @term{slot}
and that an @term{unqualified method} is to be defined on the 
@term{generic function} named @f{(setf @param{reader-function-name})} to be
used with @code{setf} to modify the value of the @term{slot}.

@item 
The @kwd{allocation} slot option is used to specify where storage is
to be allocated for the given @term{slot}.  Storage for a 
@term{slot} can be located
in each instance or in the @term{class} @term{object} itself.
The value of the @param{allocation-type} argument can be 
either the keyword @kwd{instance}
or the keyword @kwd{class}.    If the @kwd{allocation}
slot option is not specified, the effect is the same as specifying
@f{:allocation :instance}.

@itemize --
@item                   
If @param{allocation-type} is @kwd{instance}, a @term{local slot} of
the name @param{slot-name} is allocated in each instance of the 
@term{class}.

@item                   
If @param{allocation-type} is @kwd{class}, a shared 
@term{slot} of the given                                      
name is allocated in the @term{class} @term{object} created by this @code{defclass}
form.  The value of the @term{slot} is shared by all 
@term{instances} of the @term{class}.
If a class @mat{C@sub1{}} defines such a @term{shared slot}, any 
subclass @mat{C@sub2{}} of
@mat{C@sub1{}} will share this single @term{slot} unless the @code{defclass} form
for @mat{C@sub2{}} specifies a @term{slot} of the same @term{name} or there is a
superclass of @mat{C@sub2{}} that precedes @mat{C@sub1{}} in the class precedence
list of @mat{C@sub2{}} and that defines a @term{slot} of the same @term{name}.
@end itemize

@item The @kwd{initform} slot option is used to provide a default
initial value form to be used in the initialization of the @term{slot}.  This
@term{form} is evaluated every time it is used to initialize the 
@term{slot}.  The
lexical environment in which this @term{form} is evaluated is the lexical
environment in which the @code{defclass} form was evaluated.
Note that the lexical environment refers both to variables and to
functions.  For @term{local slots}, the dynamic environment is the dynamic
environment in which @code{make-instance} is called; for shared
@term{slots}, the dynamic environment is the dynamic environment in which the
@code{defclass} form was evaluated.  
See @ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)}.

No implementation is permitted to extend the syntax of @code{defclass}
to allow @f{(@param{slot-name} @param{form})} as an abbreviation for 
@f{(@param{slot-name} :initform @param{form})}.
@reviewer{Barmar: Can you extend this to mean something else?}

@item
The @kwd{initarg} slot option declares an initialization
argument named @param{initarg-name} and specifies that this
initialization argument initializes the given @term{slot}.  If the
initialization argument has a value in the call to
@code{initialize-instance}, the value will be stored into the given @term{slot},
and the slot's @kwd{initform} slot option, if any, is not
evaluated.  If none of the initialization arguments specified for a
given @term{slot} has a value, the @term{slot} is initialized according to the
@kwd{initform} slot option, if specified.  

@item
The @kwd{type} slot option specifies that the contents of the
@term{slot} will always be of the specified data type.  It effectively
declares the result type of the reader generic function when applied
to an @term{object} of this @term{class}.  The consequences of attempting to store in a
@term{slot} a value that does not satisfy the type of the @term{slot} are undefined.
The @kwd{type} slot option is further discussed in 
@ref{Inheritance of Slots and Slot Options, Section 7.5.3 (Inheritance of Slots and Slot Options)}.

@item
The @kwd{documentation} slot option provides a @term{documentation string}
for the @term{slot}.  @kwd{documentation} can be supplied once at most 
for a given @term{slot}. @reviewer{Barmar: How is this retrieved?}
@end itemize


Each class option is an option that refers to the @term{class} as a whole.
The following class options are available:


@itemize @bullet{}
@item
The @kwd{default-initargs} class option is followed by a list of
alternating initialization argument @term{names} and default initial value
forms.  If any of these initialization arguments does not appear in
the initialization argument list supplied to @code{make-instance}, the
corresponding default initial value form is evaluated, and the
initialization argument @term{name} and the @term{form}'s value are added to the end
of the initialization argument list before the instance is created;
see @ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)}.
The default initial value form is evaluated each time it is used.  The lexical
environment in which this @term{form} is evaluated is the lexical environment
in which the @code{defclass} form was evaluated.  The dynamic
environment is the dynamic environment in which @code{make-instance}
was called.  If an initialization argument @term{name} appears more than once
in a @kwd{default-initargs} class option, an error is signaled.


@item 
The @kwd{documentation} class option causes a @term{documentation string} 
to be attached with the @term{class} @term{object},
and attached with kind @t{type} to the @param{class-name}.
@kwd{documentation} can be supplied once at most.

@item
The @kwd{metaclass} class option is used to specify that
instances of the @term{class} being defined are to have a different metaclass
than the default provided by the system (@theclass{standard-class}).
@end itemize


Note the following rules of @code{defclass} for @term{standard classes}:


@itemize @bullet{}

@item
It is not required that the @term{superclasses} of a @term{class} be defined before
the @code{defclass} form for that @term{class} is evaluated.

@item
All the @term{superclasses} of a @term{class} must be defined before 
an @term{instance} of the @term{class} can be made.

@item
A @term{class} must be defined before it can be used as a parameter
specializer in a @code{defmethod} form.
@end itemize


The @OS{}@spc{}can be extended to cover situations where these rules are not
obeyed.

Some slot options are inherited by a @term{class} from its 
@term{superclasses}, and
some can be shadowed or altered by providing a local slot description.
No class options except @kwd{default-initargs} are inherited.  For a
detailed description of how @term{slots} and slot options are inherited, 
see @ref{Inheritance of Slots and Slot Options, Section 7.5.3 (Inheritance of Slots and Slot Options)}.

The options to @code{defclass} can be extended.  It is required that
all implementations signal an error if they observe a class option or
a slot option that is not implemented locally.

It is valid to specify more than one reader, writer, accessor, or
initialization argument for a @term{slot}.  No other slot option can
appear
more than once in a single slot description, or an error is
signaled.

If no reader, writer, or accessor is specified for a @term{slot}, 
the @term{slot} can only be @term{accessed} by @thefunction{slot-value}.







If a @code{defclass} @term{form} appears as a @term{top level form},
the @term{compiler} must make the @term{class} @term{name} be recognized as a
valid @term{type} @term{name} in subsequent declarations (as for @code{deftype})
and be recognized as a valid @term{class} @term{name} for @code{defmethod}
@term{parameter specializers} and for use as the @kwd{metaclass} option of a
subsequent @code{defclass}.  The @term{compiler} must make 
the @term{class} definition 
available to be returned by @code{find-class} when its @param{environment}
@term{argument} is a value received as the @term{environment parameter} of a @term{macro}.

@subsubheading Exceptional Situations:

If there are any duplicate slot names, 
an error @oftype{program-error} is signaled.

If an initialization argument @term{name} appears more than once in 
@kwd{default-initargs} class option, 
an error @oftype{program-error} is signaled.

If any of the following slot options appears more than once in a
single slot description, an error @oftype{program-error}
is signaled: @kwd{allocation},
@kwd{initform}, @kwd{type}, @kwd{documentation}.

It is required that all implementations signal 
an error @oftype{program-error} if they observe a class option 
or a slot option that is not implemented locally.



@subsubheading See Also:

@ref{documentation},
@ref{initialize-instance (Standard Generic Function)},
@ref{make-instance},
@ref{slot-value},
@ref{Classes, Section 4.3 (Classes)},
@ref{Inheritance, Section 4.3.4 (Inheritance)},
@ref{Redefining Classes, Section 4.3.6 (Redefining Classes)},
@ref{Determining the Class Precedence List, Section 4.3.5 (Determining the Class Precedence List)},
@ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)}


@node defgeneric
@heading defgeneric (Macro)
@syindex defgeneric
@cindex defgeneric



@subsubheading Syntax:

@DefmacWithValuesNewline{defgeneric, function-name gf-lambda-list @interleave{@down{option} | @stardown{method-description}}, new-generic}

@auxbnf{option, @paren{@kwd{argument-precedence-order} @plusparam{parameter-name}} |@CR{} @paren{@t{declare} @plusparam{gf-declaration}} |@CR{} @paren{@kwd{documentation} @param{gf-documentation}} |@CR{} @paren{@kwd{method-combination} @param{method-combination} @starparam{method-combination-argument}} |@CR{} @paren{@kwd{generic-function-class} @param{generic-function-class}} |@CR{} @paren{@kwd{method-class} @param{method-class}}}
@auxbnf{method-description, @lparen{}@kwd{method} @vtop{@hbox{@starparam{method-qualifier} @param{specialized-lambda-list}} @hbox{@DeclsAndDoc{} @starparam{form}@rparen{}}}}

@subsubheading Arguments and Values:

@param{function-name}---a @term{function name}.

@param{generic-function-class}---a @term{non-nil} @term{symbol} naming a @term{class}.

@param{gf-declaration}---an @code{optimize} @term{declaration specifier};
other @term{declaration specifiers} are not permitted.

@param{gf-documentation}---a @term{string}; @noeval{}.

@param{gf-lambda-list}---a @term{generic function lambda list}.

@param{method-class}---a @term{non-nil} @term{symbol} naming a @term{class}.

@param{method-combination-argument}---an @term{object.}

@param{method-combination-name}---a @term{symbol} 
naming a @term{method combination} @term{type}.

@param{method-qualifiers},
@param{specialized-lambda-list},
@param{declarations},
@param{documentation},
@param{forms}---as per @code{defmethod}.

@param{new-generic}---the @term{generic function} @term{object}.

@param{parameter-name}---a @term{symbol} that names a @term{required parameter} 
in the @param{lambda-list}.
(If the @kwd{argument-precedence-order} option is specified,
each @term{required parameter} in the @param{lambda-list}
must be used exactly once as a @param{parameter-name}.)

@subsubheading Description:

The macro @code{defgeneric} is used to define a @term{generic function}
or to specify options and declarations that pertain 
to a @term{generic function} as a whole.

If @param{function-name} is a 
@term{list} it must be of the form @tt{(setf @i{symbol})}.
If @f{(fboundp @param{function-name})} is @term{false}, a new
@term{generic function} is created.  
If @f{(fdefinition @param{function-name})} is a @term{generic function}, that 
@term{generic function}
is modified.  If @param{function-name} names 
an @term{ordinary function},
a @term{macro}, or a @term{special operator}, 
an error is signaled.

The effect of the @code{defgeneric} macro is as if the following three
steps were performed: first, 
@term{methods} defined by previous @code{defgeneric} @term{forms} are removed; 
@reviewer{Barmar: Shouldn't this (second) be first?}
second, @code{ensure-generic-function}
is called; and finally, @term{methods} specified by the current
@code{defgeneric} @term{form} are added to the @term{generic function}. 

Each @param{method-description} defines a @term{method} on the @term{generic function}.
The @term{lambda list} of each @term{method} must be congruent with the 
@term{lambda list}
specified by the @param{gf-lambda-list} option.  
If no @term{method} descriptions are specified and a @term{generic function} of the same
name does not already exist, a @term{generic function} with no 
@term{methods} is created.

The @param{gf-lambda-list} argument of @code{defgeneric} specifies the shape of
@term{lambda lists} for the @term{methods} on this @term{generic function}.
All @term{methods} on the resulting 
@term{generic function} must have
@term{lambda lists} that are congruent with this shape.  If a @code{defgeneric}
form is evaluated and some 
@term{methods} for that @term{generic function}
have @term{lambda lists} that are not congruent with that given in
the @code{defgeneric} form, an error is signaled.  For further details
on method congruence, see @ref{Congruent Lambda-lists for all Methods of a Generic Function, Section 7.6.4 (Congruent Lambda-lists for all Methods of a Generic Function)}.

The @term{generic function} passes to the 
@term{method} all the argument values passed to
it, and only those; default values are not supported.
Note that optional and keyword arguments in method definitions, however,
can have default initial value forms and can use supplied-p parameters. 

The following options are provided.  
Except as otherwise noted, 
a given option may occur only once.


@itemize @bullet{}

@item 
The @kwd{argument-precedence-order} option is used to specify the
order in which the required arguments in a call to the @term{generic function}
are tested for specificity when selecting a particular
@term{method}. Each required argument, as specified in the @param{gf-lambda-list}
argument, must be included exactly once as a @param{parameter-name}
so that the full and unambiguous precedence order is
supplied.  If this condition is not met, an error is signaled.
@reviewer{Barmar: What is the default order?}

@item
The @t{declare} option is used to specify declarations that pertain
to the @term{generic function}.

An @code{optimize} @term{declaration specifier} is allowed.
It specifies whether method selection should be optimized for 
speed or space, but it has no effect on @term{methods}.
To control how a @term{method} is optimized, an @code{optimize}
declaration must be placed directly in the @code{defmethod} @term{form}
or method description.  The optimization qualities @t{speed} and
@t{space} are the only qualities this standard requires, but an
implementation can extend the @CLOS{}@spc{}to recognize other qualities.  
A simple implementation that has only one method selection technique 
and ignores @code{optimize} @term{declaration specifiers} is valid.

The @code{special}, @code{ftype}, @code{function}, @code{inline},
@code{notinline}, and @code{declaration} declarations are not permitted.
Individual implementations can extend the @t{declare} option to
support additional declarations.
@editornote{KMP: Does ``additional'' mean including special, ftype, etc.?  
Or only other things that are not mentioned here?}
If an implementation notices a @term{declaration specifier} that it does
not support and that has not been proclaimed as a non-standard 
@term{declaration identifier} name in a @code{declaration} @term{proclamation}, 
it should issue a warning. @editornote{KMP: The wording of this previous sentence,
particularly the word ``and'' suggests to me that you can `proclaim declaration'
of an unsupported declaration (e.g., ftype) in order to suppress the warning.
That seems wrong.  Perhaps it instead means to say ``does not support or 
is both undefined and not proclaimed declaration.''}

The @t{declare} option may be specified more than once.
The effect is the same as if the lists of @term{declaration specifiers} 
had been appended together into a single list and specified as a 
single @t{declare} option.

@item 
The @kwd{documentation} argument is a @term{documentation string}
to be attached to the @term{generic function} @term{object}, 
and to be attached with kind @t{function} to the @param{function-name}.

@item 
The @kwd{generic-function-class} option may be used to specify that
the @term{generic function} is to have a different @term{class} than
the default provided by the system (@theclass{standard-generic-function}).
The @param{class-name} argument is the name of a @term{class} that can be the
@term{class} of a @term{generic function}.  If @param{function-name} specifies
an existing @term{generic function} that has a different value for the
@kwd{generic-function-class} argument and the new generic function 
@term{class} is compatible with the old, @code{change-class} is called 
to change the @term{class} of the @term{generic function}; 
otherwise an error is signaled.

@item 
The @kwd{method-class} option is used to specify that all @term{methods} on
this @term{generic function} are to have a different @term{class} from the 
default provided by the system (@theclass{standard-method}).
The @param{class-name} argument is the name of a @term{class} that is capable 
of being the @term{class} of a @term{method}.
@reviewer{Barmar: Is @code{change-class} called on existing methods?}

@item 
The @kwd{method-combination} option is followed by a symbol that
names a type of method combination.  The arguments (if any) that
follow that symbol depend on the type of method combination.  Note
that the standard method combination type does not support any
arguments.  However, all types of method combination defined by the
short form of @code{define-method-combination} accept an optional
argument named @param{order}, defaulting to @kwd{most-specific-first},
where a value of @kwd{most-specific-last} reverses
the order of the primary @term{methods} without affecting the order of the
auxiliary @term{methods}.
@end itemize


The @param{method-description} arguments define @term{methods} that will
be associated with the @term{generic function}.  The @param{method-qualifier}
and @param{specialized-lambda-list} arguments in a method description
are the same as for @code{defmethod}.

The @param{form} arguments specify the method body.  The body of the
@term{method} is enclosed in an @term{implicit block}.
If @param{function-name} is a @term{symbol}, this block bears the same name as
the @term{generic function}.  If @param{function-name} is a 
@term{list} of the
form @tt{(setf @param{symbol})}, the name of the block is @param{symbol}.  

Implementations can extend @code{defgeneric} to include other options.
It is required that an implementation signal an error if
it observes an option that is not implemented locally.

@code{defgeneric} is not required to perform any compile-time side effects.
In particular, the @term{methods} are not installed for invocation during 
compilation.  An @term{implementation} may choose to store information about
the @term{generic function} for the purposes of compile-time error-checking
(such as checking the number of arguments on calls, or noting that a definition
for the function name has been seen).

@subsubheading Examples:


@subsubheading Exceptional Situations:

If @param{function-name} names an @term{ordinary function}, a @term{macro},
or a @term{special operator}, an error @oftype{program-error} is signaled.

Each required argument, as specified in the @param{gf-lambda-list}
argument, must be included exactly once as a @param{parameter-name},
or an error @oftype{program-error} is signaled.

The @term{lambda list} of each @term{method} specified by a 
@param{method-description} must be congruent with the @term{lambda list} specified
by the @param{gf-lambda-list} option, or
an error @oftype{error} is signaled.

If a @code{defgeneric} form is evaluated and some @term{methods} for
that @term{generic function} have @term{lambda lists} that are not congruent with
that given in the @code{defgeneric} form, 
an error @oftype{error} is signaled.

A given @param{option} may occur only once,
or an error @oftype{program-error} is signaled.

@reviewer{Barmar: This says that an error is signaled if you specify the same generic
function class as it already has!}
If @param{function-name} specifies an existing @term{generic function} 
that has a different value for the @kwd{generic-function-class} 
argument and the new generic function @term{class} is compatible with the
old, @code{change-class} is called to change the @term{class} of 
the @term{generic function}; otherwise an error @oftype{error} is signaled.

Implementations can extend @code{defgeneric} to include other options.
It is required that an implementation 
signal an error @oftype{program-error} if
it observes an option that is not implemented locally.

@subsubheading See Also:

@ref{defmethod},
@ref{documentation},
@ref{ensure-generic-function},
@ref{generic-function},
@ref{Congruent Lambda-lists for all Methods of a Generic Function, Section 7.6.4 (Congruent Lambda-lists for all Methods of a Generic Function)}



@node defmethod
@heading defmethod (Macro)
@syindex defmethod
@cindex defmethod



@subsubheading Syntax:


@DefmacWithValuesNewline{defmethod, @vtop{@hbox{@i{function-name} @star{@curly{@i{method-qualifier}}} @i{specialized-lambda-list}} @hbox{@DeclsAndDoc{} @starparam{form}}}, new-method}

@defmethod{}
@subsubheading Arguments and Values:

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{documentation}---a @term{string}; @noeval{}.

@param{var}---a @term{variable} @term{name}.

@param{eql-specializer-form}---a @term{form}.

@param{Form}---a @term{form}.

@param{Initform}---a @term{form}.

@param{Supplied-p-parameter}---variable name. 

@param{new-method}---the new @term{method} @term{object}.

@subsubheading Description:

The macro @code{defmethod} defines a @term{method} on a 
@term{generic function}.  

If @tt{(fboundp @i{function-name})} is @nil{}, a 
@term{generic function} is created with default values for 
the argument precedence order
(each argument is more specific than the arguments to its right
in the argument list),
for the generic function class (@theclass{standard-generic-function}),
for the method class (@theclass{standard-method}),
and for the method combination type (the standard method combination type).
The @term{lambda list} of the @term{generic function} is
congruent with the @term{lambda list} of the 
@term{method} being defined; if the
@code{defmethod} form mentions keyword arguments, the @term{lambda list} of
the @term{generic function} 
will mention @tt{&key} (but no keyword
arguments).  If @i{function-name} names 
an @term{ordinary function},
a @term{macro}, or a @term{special operator}, 
an error is signaled.

If a @term{generic function} is currently named by @it function-name,
the @term{lambda list} of the
@term{method} must be congruent with the @term{lambda list} of the 
@term{generic function}.
If this condition does not hold, an error is signaled.  
For a definition of congruence in this context, see @ref{Congruent Lambda-lists for all Methods of a Generic Function, Section 7.6.4 (Congruent Lambda-lists for all Methods of a Generic Function)}.


Each @i{method-qualifier} argument is an @term{object} that is used by
method combination to identify the given @term{method}.  
The method combination type might further
restrict what a method @term{qualifier} can be.
The standard method combination type allows for @term{unqualified methods} and
@term{methods} whose sole
@term{qualifier} is one of the keywords @kwd{before}, @kwd{after}, or @kwd{around}.

The @i{specialized-lambda-list} argument is like an ordinary
@term{lambda list} except that the @term{names} of required parameters can
be replaced by specialized parameters.  A specialized parameter is a
list of the form 
@f{(@param{var} @i{parameter-specializer-name})}.
Only required parameters can be
specialized.  If @i{parameter-specializer-name} is a @term{symbol} it names a
@term{class}; if it is a @term{list},
it is of the form @f{(eql @param{eql-specializer-form})}.  The parameter
specializer name @f{(eql @param{eql-specializer-form})} indicates
that the corresponding argument must be @code{eql} to the @term{object} that
is the value of @param{eql-specializer-form} for the @term{method} to be applicable.  
The @param{eql-specializer-form} is evaluated at the time
that the expansion of the @code{defmethod} macro is evaluated.  
If no @term{parameter specializer name} is specified for a given
required parameter, the @term{parameter specializer} defaults to 
@theclass{t}.
For further discussion, see @ref{Introduction to Methods, Section 7.6.2 (Introduction to Methods)}.

The @param{form} arguments specify the method body.
The body of the @term{method} is enclosed in an @term{implicit block}.  If
@i{function-name} is a @term{symbol}, 
this block bears the same @term{name} as the @term{generic function}.  
If @i{function-name} is a @term{list} of the form 
@tt{(setf @i{symbol})}, the @term{name} of the block is @i{symbol}.  

The @term{class} of the @term{method} @term{object} that is created is that given by the 
method class option of the @term{generic function} 
on which the @term{method} is defined.

If the @term{generic function} already has a @term{method} that agrees with the
@term{method} being defined on @term{parameter specializers} and @term{qualifiers},
@code{defmethod} replaces the existing @term{method} with the one now being
defined.
For a definition of agreement in this context.
see @ref{Agreement on Parameter Specializers and Qualifiers, Section 7.6.3 (Agreement on Parameter Specializers and Qualifiers)}.

The @term{parameter specializers} are derived from 
the @term{parameter specializer names} as described in
@ref{Introduction to Methods, Section 7.6.2 (Introduction to Methods)}.

The expansion of the @code{defmethod} macro ``refers to'' each
specialized parameter (see the description of @code{ignore} 
within the description of @t{declare}).
This includes parameters that
have an explicit @term{parameter specializer name} of @code{t}.  This means
that a compiler warning does not occur if the body of the @term{method} does
not refer to a specialized parameter, while a warning might occur
if the body of the @term{method} does not refer to an unspecialized parameter.
For this reason, a parameter that specializes on @code{t}@spc{}is not quite synonymous
with an unspecialized parameter in this context.

Declarations at the head of the method body that apply to the 
method's @term{lambda variables} are treated as @term{bound declarations}
whose @term{scope} is the same as the corresponding @term{bindings}.

Declarations at the head of the method body that apply to the 
functional bindings of @code{call-next-method} or @code{next-method-p}
apply to references to those functions within the method body @param{forms}.
Any outer @term{bindings} of the @term{function names} @code{call-next-method} and
@code{next-method-p}, and declarations associated with such @term{bindings}
are @term{shadowed}@sub2{} within the method body @param{forms}.

The @term{scope} of @term{free declarations} at the head of the method body 
is the entire method body, 
which includes any implicit local function definitions
but excludes @term{initialization forms} for the @term{lambda variables}.

@code{defmethod} is not required to perform any compile-time side effects.
In particular, the @term{methods} are not installed for invocation during 
compilation.  An @term{implementation} may choose to store information about
the @term{generic function} for the purposes of compile-time error-checking
(such as checking the number of arguments on calls, or noting that a definition
for the function name has been seen).

@param{Documentation} is attached as a @term{documentation string}
to the @term{method} @term{object}.

@subsubheading Affected By:

The definition of the referenced @term{generic function}.

@subsubheading Exceptional Situations:

If @i{function-name} names an @term{ordinary function},
a @term{macro}, or a @term{special operator}, 
an error @oftype{error} is signaled.

If a @term{generic function} is currently named by @it function-name,
the @term{lambda list} of the
@term{method} must be congruent with the @term{lambda list} of the 
@term{generic function}, or
an error @oftype{error} is signaled.


@subsubheading See Also:

@ref{defgeneric}, 
@ref{documentation},
@ref{Introduction to Methods, Section 7.6.2 (Introduction to Methods)},
@ref{Congruent Lambda-lists for all Methods of a Generic Function, Section 7.6.4 (Congruent Lambda-lists for all Methods of a Generic Function)},
@ref{Agreement on Parameter Specializers and Qualifiers, Section 7.6.3 (Agreement on Parameter Specializers and Qualifiers)},
@ref{Syntactic Interaction of Documentation Strings and Declarations, Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)}



@node find-class
@heading find-class (Accessor)
@syindex find-class
@cindex find-class


@subsubheading Syntax:

@DefunWithValues{find-class, symbol @opt{} errorp environment, class}
@Defsetf{find-class, symbol @opt{} errorp environment, new-class}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{errorp}---a @term{generalized boolean}.
@Default{@term{true}}

@param{environment}---same as the @keyref{environment} argument to
macro expansion functions and is used to distinguish between 
compile-time and run-time environments.
The @keyref{environment} argument has 
@term{dynamic extent}; the consequences are undefined if 
the @keyref{environment} argument is 
referred to outside the @term{dynamic extent} 
of the macro expansion function.

@param{class}---a @term{class} @term{object}, or @nil{}.

@subsubheading Description:

Returns the @term{class} @term{object} named by the @param{symbol}
in the @param{environment}.  If there is no such @term{class},
@nil{}@spc{}is returned if @param{errorp} is @term{false}; otherwise,
if @param{errorp} is @term{true}, an error is signaled.

The @term{class} associated with a particular @term{symbol} can be changed by using
@code{setf} with @code{find-class};
or, if the new @term{class} given to @code{setf} is @nil{},
the @term{class} association is removed 
(but the @term{class} @term{object} itself is not affected).
The results are undefined if the user attempts to change
or remove
the @term{class} associated with a 
@term{symbol} that is defined as a @term{type specifier} in this standard.
See @ref{Integrating Types and Classes, Section 4.3.7 (Integrating Types and Classes)}.

When using @SETFof{find-class}, any @term{errorp} argument is @term{evaluated}
for effect, but any @term{values} it returns are ignored; the @param{errorp}
@term{parameter} is permitted primarily so that the @param{environment} @term{parameter}
can be used.

The @param{environment} might be used to distinguish between a compile-time and a
run-time environment.

@subsubheading Exceptional Situations:

If there is no such @term{class} and @param{errorp} is @term{true},
@code{find-class} signals an error @oftype{error}.

@subsubheading See Also:

@ref{defmacro},
@ref{Integrating Types and Classes, Section 4.3.7 (Integrating Types and Classes)}


@node next-method-p
@heading next-method-p (Local Function)
@syindex next-method-p
@cindex next-method-p


@subsubheading Syntax:

@DefunWithValues{next-method-p, @noargs{}, generalized-boolean}

@subsubheading Arguments and Values:

@param{generalized-boolean}---a @term{generalized boolean}. 

@subsubheading Description:

The locally defined function @code{next-method-p} can be used 
within the body @term{forms} (but not the @term{lambda list})
defined by a @term{method-defining form} to determine
whether a next @term{method} exists.

@Thefunction{next-method-p} has @term{lexical scope} and @term{indefinite extent}.

Whether or not @code{next-method-p} is @term{fbound} in the
@term{global environment} is @term{implementation-dependent};
however, the restrictions on redefinition and @term{shadowing} of
@code{next-method-p} are the same as for @term{symbols} in the @code{COMMON-LISP} @term{package}
which are @term{fbound} in the @term{global environment}.
The consequences of attempting to use @code{next-method-p} outside
of a @term{method-defining form} are undefined.

@subsubheading See Also:

@ref{call-next-method},
@ref{defmethod},
@ref{call-method}


@node call-method; make-method
@heading call-method, make-method (Local Macro)
@syindex call-method
@cindex call-method
@syindex make-method
@cindex make-method
@anchor{call-method}


@subsubheading Syntax:

@DefmacWithValues{call-method, method @optional{} next-method-list, @starparam{result}}
@DefmacWithValues{make-method, form, method-object}

@subsubheading Arguments and Values:


@param{method}---a @term{method} @term{object},
or a @term{list} (see below); @noeval{}.

@param{method-object}---a @term{method} @term{object}.

@param{next-method-list}---a @term{list} of @param{method} @term{objects}; @noeval{}.

@param{results}---the @term{values} returned by the @term{method} invocation.

@subsubheading Description:

The macro @code{call-method} is used in method combination.  It hides
the @term{implementation-dependent} details of how 
@term{methods} are called. The
macro @code{call-method} has @term{lexical scope} and 
can only be used within
an @term{effective method} @term{form}.

@editornote{KMP: This next paragraph still needs some work.}
Whether or not @code{call-method} is @term{fbound} in the
@term{global environment} is @term{implementation-dependent};
however, the restrictions on redefinition and @term{shadowing} of
@code{call-method} are the same as for @term{symbols} in the @code{COMMON-LISP} @term{package}
which are @term{fbound} in the @term{global environment}.
The consequences of attempting to use @code{call-method} outside
of an @term{effective method} @term{form} are undefined.


The macro @code{call-method} invokes the specified @term{method},
supplying it with arguments and with definitions for
@code{call-next-method} and for @code{next-method-p}.
If the invocation of @code{call-method} is lexically inside
of a @code{make-method}, the arguments are those that
were supplied to that method.  Otherwise the arguments are
those that were supplied to the generic function.
The definitions
of @code{call-next-method} and @code{next-method-p} rely on
the specified @param{next-method-list}.

If @param{method} is a @term{list}, the first element of the @term{list}
must be the symbol @code{make-method} and the second element must be
a @term{form}.  Such a @term{list} specifies a @term{method} @term{object}
whose @term{method} function has a body that is the given @term{form}.

@param{Next-method-list} can contain @term{method} @term{objects} or @term{lists},
the first element of which must be the symbol @code{make-method} and the
second element of which must be a @term{form}.


Those are the only two places where @code{make-method} can be used.
The @term{form} used with @code{make-method} is evaluated in
the @term{null lexical environment} augmented with a local macro definition
for @code{call-method} and with bindings named by
symbols not @term{accessible} from the @code{COMMON-LISP-USER} @term{package}.

The @code{call-next-method} function available to @param{method} 
will call the first @term{method} in @param{next-method-list}.
The @code{call-next-method} function
available in that @term{method}, in turn, will call the second
@term{method} in @param{next-method-list}, and so on, until
the list of next @term{methods} is exhausted.


If @param{next-method-list} is not supplied, the
@code{call-next-method} function available to
@param{method} signals an error @oftype{control-error}
and the @code{next-method-p} function
available to @param{method} returns @nil{}.

@subsubheading Examples:


@subsubheading See Also:

@ref{call-next-method},
@ref{define-method-combination},
@ref{next-method-p}


@node call-next-method
@heading call-next-method (Local Function)
@syindex call-next-method
@cindex call-next-method


@subsubheading Syntax:

@DefunWithValues{call-next-method, @rest{} args, @starparam{result}}

@subsubheading Arguments and Values:

@param{arg}---an @term{object}.  

@param{results}---the @term{values} returned by the @term{method} it calls.

@subsubheading Description:

@Thefunction{call-next-method} can be used 
within the body @term{forms} (but not the @term{lambda list})
of a @term{method} defined by a @term{method-defining form} to call the 
@term{next method}.

If there is no next @term{method}, the generic function 
@code{no-next-method} is called.

The type of method combination used determines which @term{methods}
can invoke @code{call-next-method}.  The standard 
@term{method combination} type allows @code{call-next-method} 
to be used within primary @term{methods} and @term{around methods}.
For generic functions using a type of method combination defined by
the short form of @code{define-method-combination},
@code{call-next-method} can be used in @term{around methods} only.

When @code{call-next-method} is called with no arguments, it passes the
current @term{method}'s original arguments to the next @term{method}.  Neither
argument defaulting, nor using @code{setq}, nor rebinding variables
with the same @term{names} as parameters of the @term{method} affects the values
@code{call-next-method} passes to the @term{method} it calls.


When @code{call-next-method} is called with arguments, the 
@term{next method} is called with those arguments.

If @code{call-next-method} is called with arguments but omits
optional arguments, the @term{next method} called defaults those arguments.


@Thefunction{call-next-method} returns any @term{values} that are
returned by the @term{next method}.

@Thefunction{call-next-method} has @term{lexical scope} and 
@term{indefinite extent} and can only be used within the body of a
@term{method} defined by a @term{method-defining form}.

Whether or not @code{call-next-method} is @term{fbound} in the
@term{global environment} is @term{implementation-dependent};
however, the restrictions on redefinition and @term{shadowing} of
@code{call-next-method} are the same as for @term{symbols} in the @code{COMMON-LISP} @term{package}
which are @term{fbound} in the @term{global environment}.
The consequences of attempting to use @code{call-next-method} outside
of a @term{method-defining form} are undefined.

@subsubheading Affected By:

@code{defmethod}, @code{call-method}, @code{define-method-combination}.

@subsubheading Exceptional Situations:



When providing arguments to @code{call-next-method}, 
the following rule must be satisfied or an error @oftype{error} 
should be
signaled: 
the ordered set of @term{applicable methods} for a changed set of arguments
for @code{call-next-method} must be the same as the ordered set of
@term{applicable methods} for the original arguments to the
@term{generic function}.
Optimizations of the error checking are possible, but they must not change
the semantics of @code{call-next-method}.

@subsubheading See Also:

@ref{define-method-combination},
@ref{defmethod},
@ref{next-method-p},
@ref{no-next-method},
@ref{call-method},
@ref{Method Selection and Combination, Section 7.6.6 (Method Selection and Combination)},
@ref{StdMethComb, Section 7.6.6.2 (Standard Method Combination)},
@ref{BuiltInMethCombTypes, Section 7.6.6.4 (Built-in Method Combination Types)}


@node compute-applicable-methods
@heading compute-applicable-methods (Standard Generic Function)
@syindex compute-applicable-methods
@cindex compute-applicable-methods



@subsubheading Syntax:

@DefgenWithValues{compute-applicable-methods, generic-function function-arguments, methods}

@subsubheading Method Signatures:

 compute-applicable-methods @specparam{generic-function, standard-generic-function}


@subsubheading Arguments and Values:

@param{generic-function}---a @term{generic function}.

@param{function-arguments}---a @term{list} of arguments for the @param{generic-function}.

@param{methods}---a @term{list} of @term{method} @term{objects}.

@subsubheading Description:

Given a @param{generic-function} and a set of 
@param{function-arguments}, the function
@code{compute-applicable-methods} returns the set of @term{methods}
that are applicable for those arguments
sorted according to precedence order.
See @ref{Method Selection and Combination, Section 7.6.6 (Method Selection and Combination)}.

@subsubheading Affected By:

@code{defmethod}

@subsubheading See Also:

@ref{Method Selection and Combination, Section 7.6.6 (Method Selection and Combination)}


@node define-method-combination
@heading define-method-combination (Macro)
@syindex define-method-combination
@cindex define-method-combination



@subsubheading Syntax:


@DefmacWithValuesNewline{define-method-combination, name @interleave{@down{short-form-option}}, name}

@DefmacWithValuesNewline{define-method-combination, @vtop{@hbox{name lambda-list} @hbox{@paren{@starparam{method-group-specifier}}} @hbox{@brac{@paren{@kwd{arguments} . args-lambda-list}}} @hbox{@brac{@paren{@kwd{generic-function}  generic-function-symbol}}} @hbox{@DeclsAndDoc{}} @hbox{@starparam{form}}}, name}

@auxbnf{short-form-option, @kwd{documentation} @param{documentation} | @CR{} @kwd{identity-with-one-argument} @param{identity-with-one-argument} |@CR{} @kwd{operator} @param{operator}}
@auxbnf{method-group-specifier, @paren{name @curly{@plusparam{qualifier-pattern} @mat{@vert{}} predicate} @interleave{@down{long-form-option}}}}
@auxbnf{long-form-option, @kwd{description} @param{description} |@CR{} @kwd{order} @param{order} |@CR{} @kwd{required} @param{required-p}}

@subsubheading Arguments and Values:

@param{args-lambda-list}---
a @term{define-method-combination arguments lambda list}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{description}---a @term{format control}.

@param{documentation}---a @term{string}; @noeval{}.

@param{forms}---an @term{implicit progn} 
that must compute and return the @term{form} that specifies how
the @term{methods} are combined, that is, the @term{effective method}.

@param{generic-function-symbol}---a @term{symbol}.

@param{identity-with-one-argument}---a @term{generalized boolean}.

@param{lambda-list}---@term{ordinary lambda list}.

@param{name}---a @term{symbol}. 
Non-@term{keyword}, @term{non-nil} @term{symbols} are usually used.

@param{operator}---an @term{operator}.
@param{Name} and @param{operator} are often the @term{same} @term{symbol}.
This is the default, but it is not required.

@param{order}---@kwd{most-specific-first} or @kwd{most-specific-last}; @eval{}.

@param{predicate}---a @term{symbol} that names a @term{function} of one argument
that returns a @term{generalized boolean}.

@param{qualifier-pattern}---a @term{list},
or the @term{symbol} @t{*}.

@param{required-p}---a @term{generalized boolean}.

@subsubheading Description:

The macro @code{define-method-combination} is used to define new types
of method combination.

There are two forms of @code{define-method-combination}.  The short
form is a simple facility for the cases that are expected
to be most commonly needed.  The long form is more powerful but more
verbose.  It resembles @code{defmacro} in that the body is an
expression, usually using backquote, that computes a @term{form}.  Thus
arbitrary control structures can be implemented.  The long form also
allows arbitrary processing of method @term{qualifiers}.




@table @asis
@item @id{@bf{Short Form}}


The short form syntax of @code{define-method-combination} is recognized
when the second @term{subform} is a @term{non-nil} symbol or is not present.
When the short form is used, @param{name} is defined as a type of
method combination that produces a Lisp form
@f{(@param{operator} @param{method-call} @param{method-call} @mat{@ldots{}})}.
The @param{operator} is a @term{symbol} that can be the @term{name} of a 
@term{function}, @term{macro}, or @term{special operator}.  
The @param{operator} can be supplied by a keyword option;
it defaults to @param{name}.

Keyword options for the short form are the following:


@itemize @bullet{}

@item
The @kwd{documentation} option is used to document the method-combination type;
see description of long form below.

@item
The @kwd{identity-with-one-argument} option enables an optimization
when its value is @term{true} (the default is @term{false}).  If there is
exactly one applicable method and it is a primary method, that method
serves as the effective method and @param{operator} is not called.
This optimization avoids the need to create a new effective method and
avoids the overhead of a @term{function} call.  This option is designed to be
used with operators such as @code{progn}, @code{and}, @code{+}, and
@code{max}.

@item
The @kwd{operator} option specifies the @term{name} of the operator.  The
@param{operator} argument is a @term{symbol} that can be the 
@term{name} of a @term{function},
@term{macro}, or 
@term{special form}.  
@end itemize



These types of method combination require exactly one @term{qualifier} per
method.  An error is signaled if there are applicable methods with no
@term{qualifiers} or with @term{qualifiers} that are not supported by 
the method combination type. 

A method combination procedure defined in this way recognizes two
roles for methods.  A method whose one @term{qualifier} is the symbol naming
this type of method combination is defined to be a primary method.  At
least one primary method must be applicable or an error is signaled.
A method with @kwd{around} as its one @term{qualifier} is an auxiliary
method that behaves the same as an @term{around method} in standard
method combination.  @Thefunction{call-next-method} can only be
used in @term{around methods}; it cannot be used in primary methods
defined by the short form of the @code{define-method-combination} macro.

A method combination procedure defined in this way accepts an optional
argument named @param{order}, which defaults to 
@kwd{most-specific-first}.  A value of @kwd{most-specific-last} reverses
the order of the primary methods without affecting the order of the
auxiliary methods.

The short form automatically includes error checking and support for
@term{around methods}.

For a discussion of built-in method combination types, 
see @ref{BuiltInMethCombTypes, Section 7.6.6.4 (Built-in Method Combination Types)}.

@item @id{@bf{Long Form}}


The long form syntax of @code{define-method-combination} is recognized 
when the second @term{subform} is a list.  

The @param{lambda-list} 
receives any arguments provided after the @term{name} of the method
combination type in the @kwd{method-combination} option to
@code{defgeneric}.

A list of method group specifiers follows.  Each specifier selects a subset
of the applicable methods to play a particular role, either by matching
their @term{qualifiers} against some patterns or by testing their @term{qualifiers} with
a @param{predicate}.   
These method group specifiers define all method @term{qualifiers}
that can be used with this type of method combination.


The @term{car} of each @param{method-group-specifier} is a @term{symbol}
which @term{names} a @term{variable}.
During the execution of
the @term{forms} in the body of @code{define-method-combination}, this
@term{variable} is bound to a list of the @term{methods} in the method group.  The
@term{methods} in this list occur in the order specified by the 
@kwd{order} option.

If @param{qualifier-pattern} is a @term{symbol} it must be @t{*}.  
A method matches
a @param{qualifier-pattern} if the method's 
list of @term{qualifiers} is @code{equal}
to the @param{qualifier-pattern} (except that the symbol @t{*} in a 
@param{qualifier-pattern} matches anything).  Thus 
a @param{qualifier-pattern} can be one of the
following:
the @term{empty list}, which matches @term{unqualified methods};
the symbol @t{*}, which matches all methods;
a true list, which matches methods with the same number of @term{qualifiers} 
as the length of the list when each @term{qualifier} matches 
the corresponding list element; or
a dotted list that ends in the symbol @t{*} 
(the @t{*} matches any number of additional @term{qualifiers}).


Each applicable method is tested against the @param{qualifier-patterns} and
@param{predicates} in left-to-right order.  
As soon as a @param{qualifier-pattern} matches
or a @param{predicate} returns true, the method becomes a member of the
corresponding method group and no further tests are made.  Thus if a method
could be a member of more than one method group, it joins only the first
such group.  If a method group has more than one 
@param{qualifier-pattern}, a
method need only satisfy one of the @param{qualifier-patterns} to be a member of
the group.

The @term{name} of a @param{predicate} function can appear instead of 
@param{qualifier-patterns} in a method group specifier.  
The @param{predicate} is called for
each method that has not been assigned to an earlier method group; it
is called with one argument, the method's @term{qualifier} @term{list}.
The @param{predicate} should return true if the method is to be a member of the
method group.  A @param{predicate} can be distinguished from a 
@param{qualifier-pattern}
because it is a @term{symbol} other than @nil{}@spc{}or @t{*}.


If there is an applicable method that does not fall into any method group,
@thefunction{invalid-method-error} is called.

Method group specifiers can have keyword options following the
@term{qualifier} patterns or predicate.  Keyword options can be distinguished from
additional @term{qualifier} patterns because they are neither lists nor the symbol
@t{*}.  The keyword options are as follows:


@itemize @bullet{}

@item
The @kwd{description} option is used to provide a description of the
role of methods in the method group.  Programming environment tools
use
@tt{(apply #'format stream @param{format-control} (method-qualifiers @param{method}))}
to print this description, which
is expected to be concise.  This keyword
option allows the description of a method @term{qualifier} to be defined in
the same module that defines the meaning of the 
method @term{qualifier}.  In most cases, @param{format-control} will not contain any
@code{format} directives, but they are available for generality.  
If @kwd{description} is not supplied, a default description is generated
based on the variable name and the @term{qualifier} patterns and on whether
this method group includes the @term{unqualified methods}.  

@item
The @kwd{order} option specifies the order of methods.  The @param{order}
argument is a @term{form} that evaluates to 
@kwd{most-specific-first} or @kwd{most-specific-last}.  If it evaluates
to any other value, an error is signaled.  
If @kwd{order} is not supplied, it defaults to 
@kwd{most-specific-first}.

@item
The @kwd{required} option specifies whether at least one method in
this method group is required.
If its value is @term{true} and the method group is empty 
(that is, no applicable methods match the @term{qualifier} patterns
or satisfy the predicate), 
an error is signaled.  
If @kwd{required} is not supplied,
it defaults to @nil{}.  
@end itemize


The use of method group specifiers provides a convenient syntax to
select methods, to divide them among the possible roles, and to perform the
necessary error checking.  It is possible to perform further filtering
of methods in the body @term{forms} by using normal list-processing operations
and the functions @code{method-qualifiers} and 
@code{invalid-method-error}.  It is permissible to use @code{setq} on the
variables named in the method group specifiers and to bind additional
variables.  It is also possible to bypass the method group specifier
mechanism and do everything in the body @term{forms}.  This is accomplished
by writing a single method group with @t{*} as its only 
@param{qualifier-pattern}; 
the variable is then bound to a @term{list} of all of the
@term{applicable methods}, in most-specific-first order.


The body @param{forms} compute and return the @term{form} that specifies
how the methods are combined, that is, the effective method.
The effective method is evaluated in
the @term{null lexical environment} augmented with a local macro definition
for @code{call-method} and with bindings named by
symbols not @term{accessible} from the @code{COMMON-LISP-USER} @term{package}.
Given a method object in one of the 
@term{lists} produced by the method group
specifiers and a @term{list} of next methods,
@code{call-method}
will invoke the method such that @code{call-next-method} has available
the next methods.

When an effective method has no effect other than to call a single
method, some implementations employ an optimization that uses the
single method directly as the effective method, thus avoiding the need
to create a new effective method.  This optimization is active when
the effective method form consists entirely of an invocation of
the @code{call-method} macro whose first @term{subform} is a method object and
whose second @term{subform} is @nil{}@spc{}or unsupplied.  Each
@code{define-method-combination} body is responsible for stripping off
redundant invocations of @code{progn}, @code{and},
@code{multiple-value-prog1}, and the like, if this optimization is desired.



The list @tt{(:arguments . @param{lambda-list})} can appear before
any declarations or @term{documentation string}.  This form is useful when
the method combination type performs some specific behavior as part of
the combined method and that behavior needs access to the arguments to
the @term{generic function}.  Each parameter variable defined by 
@param{lambda-list} is bound to a @term{form} that can be inserted into the
effective method.  When this @term{form} is evaluated during execution of the
effective method, its value is the corresponding argument to the
@term{generic function}; the consequences of using such a @term{form} as
the @param{place} in a @code{setf} @term{form} are undefined.
Argument correspondence is computed by dividing the @kwd{arguments} @param{lambda-list}
and the @term{generic function} @param{lambda-list} into three sections:
the @term{required parameters},
the @term{optional parameters},
and the @term{keyword} and @term{rest parameters}.
The @term{arguments} supplied to the @term{generic function} for a particular @term{call}
are also divided into three sections;
the required @term{arguments} section contains as many @term{arguments}
as the @term{generic function} has @term{required parameters},
the optional @term{arguments} section contains as many arguments
as the @term{generic function} has @term{optional parameters},
and the keyword/rest @term{arguments} section contains the remaining arguments.
Each @term{parameter} in the required and optional sections of the 
@kwd{arguments} @param{lambda-list} accesses the argument at the same position
in the corresponding section of the @term{arguments}.
If the section of the @kwd{arguments} @param{lambda-list} is shorter,
extra @term{arguments} are ignored. 
If the section of the @kwd{arguments} @param{lambda-list} is longer,
excess @term{required parameters} are bound to forms that evaluate to @nil{}@spc{}
and excess @term{optional parameters} are @term{bound} to their initforms.
The @term{keyword parameters} and @term{rest parameters} in the @kwd{arguments}
@param{lambda-list} access the keyword/rest section of the @term{arguments}.
If the @kwd{arguments} @param{lambda-list} contains @keyref{key}, it behaves as
if it also contained @keyref{allow-other-keys}.

In addition, @keyref{whole} @param{var} can be placed first in the @kwd{arguments}
@param{lambda-list}.  It causes @param{var} to be @term{bound} to a @term{form}
that @term{evaluates} to a @term{list} of all of the @term{arguments} supplied
to the @term{generic function}.  This is different from @keyref{rest} because it
accesses all of the arguments, not just the keyword/rest @term{arguments}.


Erroneous conditions detected by the body should be reported with
@code{method-combination-error} or @code{invalid-method-error}; these
@term{functions}
add any necessary contextual information to the error message and will
signal the appropriate error.

The body @param{forms} are evaluated inside of the @term{bindings} created by
the
@term{lambda list} and method group specifiers. 
@reviewer{Barmar: Are they inside or outside the :ARGUMENTS bindings?}
Declarations at the head of
the body are positioned directly inside of @term{bindings} created by the
@term{lambda list} and outside of the @term{bindings} of the method group variables. 
Thus method group variables cannot be declared in this way.  @code{locally} may be used
around the body, however.

Within the body @param{forms}, @param{generic-function-symbol}
is bound to the @term{generic function} @term{object}.

@param{Documentation} is attached as a @term{documentation string} 
to @param{name} (as kind @code{method-combination})
and to the @term{method combination} @term{object}.



Note that two methods with identical specializers, but with different
@term{qualifiers}, are not ordered by the algorithm described in Step 2 of
the method selection and combination process described in 
@ref{Method Selection and Combination, Section 7.6.6 (Method Selection and Combination)}.  Normally the two methods play
different roles in the effective method because they have different
@term{qualifiers}, and no matter how they are ordered in the result of Step
2, the effective method is the same.  If the two methods play the same
role and their order matters, 
@reviewer{Barmar: How does the system know when the order matters?}
an error is signaled.  This happens as
part of the @term{qualifier} pattern matching in
@code{define-method-combination}.
@end table


If a @code{define-method-combination} @term{form} appears as a
@term{top level form}, the @term{compiler} must make the
@term{method combination} @term{name} be recognized as a valid
@term{method combination} @term{name} in subsequent @code{defgeneric}
@term{forms}.  However, the @term{method combination} is executed
no earlier than when the @code{define-method-combination} @term{form}
is executed, and possibly as late as the time that @term{generic functions}
that use the @term{method combination} are executed.

@subsubheading Examples:


Most examples of the long form of @code{define-method-combination} also
illustrate the use of the related @term{functions} that are provided as part
of the declarative method combination facility.

@lisp
;;; Examples of the short form of define-method-combination
 
 (define-method-combination and :identity-with-one-argument t) 
  
 (defmethod func and ((x class1) y) ...)
 
;;; The equivalent of this example in the long form is:
 
 (define-method-combination and 
         (&optional (order :most-specific-first))
         ((around (:around))
          (primary (and) :order order :required t))
   (let ((form (if (rest primary)
                   `(and ,@@(mapcar #'(lambda (method)
                                       `(call-method ,method))
                                   primary))
                   `(call-method ,(first primary)))))
     (if around
         `(call-method ,(first around)
                       (,@@(rest around)
                        (make-method ,form)))
         form)))
  
;;; Examples of the long form of define-method-combination
 
;The default method-combination technique
 (define-method-combination standard ()
         ((around (:around))
          (before (:before))
          (primary () :required t)
          (after (:after)))
   (flet ((call-methods (methods)
            (mapcar #'(lambda (method)
                        `(call-method ,method))
                    methods)))
     (let ((form (if (or before after (rest primary))
                     `(multiple-value-prog1
                        (progn ,@@(call-methods before)
                               (call-method ,(first primary)
                                            ,(rest primary)))
                        ,@@(call-methods (reverse after)))
                     `(call-method ,(first primary)))))
       (if around
           `(call-method ,(first around)
                         (,@@(rest around)
                          (make-method ,form)))
           form))))
  
;A simple way to try several methods until one returns non-nil
 (define-method-combination or ()
         ((methods (or)))
   `(or ,@@(mapcar #'(lambda (method)
                      `(call-method ,method))
                  methods)))
  
;A more complete version of the preceding
 (define-method-combination or 
         (&optional (order ':most-specific-first))
         ((around (:around))
          (primary (or)))
   ;; Process the order argument
   (case order
     (:most-specific-first)
     (:most-specific-last (setq primary (reverse primary)))
     (otherwise (method-combination-error "~S is an invalid order.~@@
     :most-specific-first and :most-specific-last are the possible values."
                                          order)))
   ;; Must have a primary method
   (unless primary
     (method-combination-error "A primary method is required."))
   ;; Construct the form that calls the primary methods
   (let ((form (if (rest primary)
                   `(or ,@@(mapcar #'(lambda (method)
                                      `(call-method ,method))
                                  primary))
                   `(call-method ,(first primary)))))
     ;; Wrap the around methods around that form
     (if around
         `(call-method ,(first around)
                       (,@@(rest around)
                        (make-method ,form)))
         form)))
  
;The same thing, using the :order and :required keyword options
 (define-method-combination or 
         (&optional (order ':most-specific-first))
         ((around (:around))
          (primary (or) :order order :required t))
   (let ((form (if (rest primary)
                   `(or ,@@(mapcar #'(lambda (method)
                                      `(call-method ,method))
                                  primary))
                   `(call-method ,(first primary)))))
     (if around
         `(call-method ,(first around)
                       (,@@(rest around)
                        (make-method ,form)))
         form)))
  
;This short-form call is behaviorally identical to the preceding
 (define-method-combination or :identity-with-one-argument t)
 
;Order methods by positive integer qualifiers
;:around methods are disallowed to keep the example small
 (define-method-combination example-method-combination ()
         ((methods positive-integer-qualifier-p))
   `(progn ,@@(mapcar #'(lambda (method)
                         `(call-method ,method))
                     (stable-sort methods #'<
                       :key #'(lambda (method)
                                (first (method-qualifiers method)))))))
 
 (defun positive-integer-qualifier-p (method-qualifiers)
   (and (= (length method-qualifiers) 1)
        (typep (first method-qualifiers) '(integer 0 *))))
  
;;; Example of the use of :arguments
 (define-method-combination progn-with-lock ()
         ((methods ()))
   (:arguments object)
   `(unwind-protect
        (progn (lock (object-lock ,object))
               ,@@(mapcar #'(lambda (method)
                             `(call-method ,method))
                         methods))
      (unlock (object-lock ,object))))
  
@end lisp


@subsubheading Side Effects:

The @term{compiler} is not required to perform any compile-time side-effects.

@subsubheading Exceptional Situations:

Method combination types defined with the short form require exactly
one @term{qualifier} per method.  
An error @oftype{error} is signaled if there are
applicable methods with no @term{qualifiers} or with @term{qualifiers} that are not
supported by the method combination type.
At least one primary method must be applicable or 
an error @oftype{error} is signaled.

If an applicable method does not fall into any method group, the
system signals an error @oftype{error}
indicating that the method is invalid for the kind of
method combination in use.

If the value of the @kwd{required} option is @term{true}
and the method group is empty (that is, no applicable
methods match the @term{qualifier} patterns or satisfy the predicate), 
an error @oftype{error} is signaled.

If the @kwd{order} option evaluates to a value other than 
@kwd{most-specific-first} or @kwd{most-specific-last}, 
an error @oftype{error} is signaled.

@subsubheading See Also:

@ref{call-method},
@ref{call-next-method},
@ref{documentation},
@ref{method-qualifiers},
@ref{method-combination-error},
@ref{invalid-method-error},
@ref{defgeneric},
@ref{Method Selection and Combination, Section 7.6.6 (Method Selection and Combination)},
@ref{BuiltInMethCombTypes, Section 7.6.6.4 (Built-in Method Combination Types)},
@ref{Syntactic Interaction of Documentation Strings and Declarations, Section 3.4.11 (Syntactic Interaction of Documentation Strings and Declarations)}

@subsubheading Notes:


The @kwd{method-combination} option of @code{defgeneric} is used to
specify that a @term{generic function} should use a particular method
combination type.  The first argument to the @kwd{method-combination}
option is the @term{name} of a method combination type and the remaining
arguments are options for that type.



@node find-method
@heading find-method (Standard Generic Function)
@syindex find-method
@cindex find-method


@subsubheading Syntax:

@DefgenWithValuesNewline{find-method, generic-function method-qualifiers specializers @opt{} errorp, method}

@subsubheading Method Signatures:

 find-method 
@vtop{@hbox{@specparam{generic-function, standard-generic-function}}
@hbox{method-qualifiers specializers @opt{} errorp}}

@subsubheading Arguments and Values:

@param{generic-function}---a @term{generic function}.

@param{method-qualifiers}---a @term{list}.

@param{specializers}---a @term{list}.

@param{errorp}---a @term{generalized boolean}.
@Default{@term{true}}

@param{method}---a @term{method} @term{object}, or @nil{}.

@subsubheading Description:

The @term{generic function} @code{find-method} takes a @term{generic function} 
and returns the @term{method} @term{object} that agrees on @term{qualifiers} 
and @term{parameter specializers} with the @param{method-qualifiers} and 
@param{specializers} arguments of @code{find-method}.  
@param{Method-qualifiers}  contains the
method @term{qualifiers} for the @term{method}. 
The order of the method @term{qualifiers}
is significant.                                
For a definition of agreement in this context,
see @ref{Agreement on Parameter Specializers and Qualifiers, Section 7.6.3 (Agreement on Parameter Specializers and Qualifiers)}.

The @param{specializers} argument contains the parameter
specializers for the @term{method}. It must correspond in length to
the number of required arguments of the @term{generic function}, or
an error is signaled.  This means that to obtain the
default @term{method} on a given @param{generic-function},
a @term{list} whose elements are @theclass{t} must be given.

If there is no such @term{method} and @param{errorp} is @term{true},
@code{find-method} signals an error.
If there is no such @term{method} and @param{errorp} is @term{false},
@code{find-method} returns @nil{}.

@subsubheading Examples:

@lisp
 (defmethod some-operation ((a integer) (b float)) (list a b))
@EV{} #<STANDARD-METHOD SOME-OPERATION (INTEGER FLOAT) 26723357>
 (find-method #'some-operation '() (mapcar #'find-class '(integer float)))
@EV{} #<STANDARD-METHOD SOME-OPERATION (INTEGER FLOAT) 26723357>
 (find-method #'some-operation '() (mapcar #'find-class '(integer integer)))
@OUT{} Error: No matching method
 (find-method #'some-operation '() (mapcar #'find-class '(integer integer)) nil)
@EV{} NIL
@end lisp


@subsubheading Affected By:

@code{add-method},
@code{defclass},
@code{defgeneric},
@code{defmethod}

@subsubheading Exceptional Situations:

If the @param{specializers} argument does not correspond in length to
the number of required arguments of the @param{generic-function}, an
an error @oftype{error} is signaled.  

If there is no such @term{method} and @param{errorp} is @term{true}, 
@code{find-method} signals an error @oftype{error}.

@subsubheading See Also:

@ref{Agreement on Parameter Specializers and Qualifiers, Section 7.6.3 (Agreement on Parameter Specializers and Qualifiers)}


@node add-method
@heading add-method (Standard Generic Function)
@syindex add-method
@cindex add-method


@subsubheading Syntax:

@DefgenWithValues{add-method, generic-function method, generic-function}

@subsubheading Method Signatures:

 add-method @vtop{@hbox{@specparam{generic-function, standard-generic-function}}
@hbox{@specparam{method, method}}}

@subsubheading Arguments and Values:

@param{generic-function}---a @term{generic function} @term{object}.

@param{method}---a @term{method} @term{object}.

@subsubheading Description:

The generic function @code{add-method} adds a @term{method}
to a @term{generic function}.

If @param{method} agrees with an existing @term{method} of @param{generic-function}
on @term{parameter specializers} and @term{qualifiers}, 
the existing @term{method} is replaced.

@subsubheading Exceptional Situations:

The @term{lambda list} of the method function of @param{method} must be
congruent with the @term{lambda list} of @param{generic-function}, 
or an error @oftype{error} is signaled.

If @param{method} is a @term{method} @term{object} of
another @term{generic function}, an error @oftype{error} is signaled.


@subsubheading See Also:

@ref{defmethod},
@ref{defgeneric},
@ref{find-method},
@ref{remove-method},
@ref{Agreement on Parameter Specializers and Qualifiers, Section 7.6.3 (Agreement on Parameter Specializers and Qualifiers)}



@node initialize-instance (Standard Generic Function)
@heading initialize-instance (Standard Generic Function)
@syindex initialize-instance
@cindex initialize-instance


@subsubheading Syntax:

@DefgenWithValues{initialize-instance, instance @rest{} initargs @key{} @allowotherkeys{}, instance}

@subsubheading Method Signatures:

 initialize-instance @specparam{instance, standard-object} @rest{} initargs

@subsubheading Arguments and Values:

@param{instance}---an @term{object}.

@param{initargs}---a @term{defaulted initialization argument list}.

@subsubheading Description:

Called by @code{make-instance} to initialize a newly created @term{instance}.
The generic function is called with the new @param{instance} 
and the @term{defaulted initialization argument list}.

The system-supplied primary @term{method} on @code{initialize-instance}
initializes the @term{slots} of the @param{instance} with values according 
to the @param{initargs} and the @kwd{initform} forms of the @term{slots}.
It does this by calling the generic function @code{shared-initialize}
with the following arguments: the @param{instance}, @code{t}@spc{}(this indicates
that all @term{slots} for which no initialization arguments are provided
should be initialized according to their @kwd{initform} forms), and
the @param{initargs}.

Programmers can define @term{methods} for @code{initialize-instance} to
specify actions to be taken when an instance is initialized.  If only
@term{after methods} are defined, they will be run after the
system-supplied primary @term{method} for initialization and therefore will
not interfere with the default behavior of @code{initialize-instance}.

@subsubheading See Also:

@ref{shared-initialize (Standard Generic Function)},
@ref{make-instance},
@ref{slot-boundp},
@ref{slot-makunbound},
@ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)},
@ref{Rules for Initialization Arguments, Section 7.1.4 (Rules for Initialization Arguments)},
@ref{Declaring the Validity of Initialization Arguments, Section 7.1.2 (Declaring the Validity of Initialization Arguments)}


@node class-name
@heading class-name (Standard Generic Function)
@syindex class-name
@cindex class-name


@subsubheading Syntax:

@DefgenWithValues{class-name, class, name}

@subsubheading Method Signatures:

 class-name @specparam{class, class}

@subsubheading Arguments and Values:

@param{class}---a @term{class} @term{object}.

@param{name}---a @term{symbol}.

@subsubheading Description:

Returns the @term{name} of the given @param{class}.

@subsubheading See Also:

@ref{find-class},
@ref{Classes, Section 4.3 (Classes)}

@subsubheading Notes:

If @mat{S} is a @term{symbol} such that @mat{S =}@tt{(class-name @mat{C})}
and @mat{C =}@tt{(find-class @mat{S})}, then @mat{S} is the proper name of @mat{C}.
For further discussion, see @ref{Classes, Section 4.3 (Classes)}.

The name of an anonymous @term{class} is @nil{}.


@node setf class-name
@heading (setf class-name) (Standard Generic Function)
@syindex (setf class-name)
@cindex (setf class-name)


@subsubheading Syntax:

@DefgenWithValues{(setf class-name), new-value class, new-value}

@subsubheading Method Signatures:

 (setf class-name) new-value @specparam{class, class}

@subsubheading Arguments and Values:

@param{new-value}---a @term{symbol}.

@param{class}---a @term{class}.

@subsubheading Description:

The generic function @f{(setf class-name)} sets the name of 
a @param{class} object.



@subsubheading See Also:

@ref{find-class},
@term{proper name},
@ref{Classes, Section 4.3 (Classes)}


@node class-of
@heading class-of (Function)
@syindex class-of
@cindex class-of


@subsubheading Syntax:

@DefunWithValues{class-of, object, class}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{class}---a @term{class} @term{object}.

@subsubheading Description:

Returns the @term{class} of which the @param{object} is 
a @term{direct instance}.

@subsubheading Examples:

@lisp
 (class-of 'fred) @EV{} #<BUILT-IN-CLASS SYMBOL 610327300>
 (class-of 2/3) @EV{} #<BUILT-IN-CLASS RATIO 610326642>
 
 (defclass book () ()) @EV{} #<STANDARD-CLASS BOOK 33424745>
 (class-of (make-instance 'book)) @EV{} #<STANDARD-CLASS BOOK 33424745>
 
 (defclass novel (book) ()) @EV{} #<STANDARD-CLASS NOVEL 33424764>
 (class-of (make-instance 'novel)) @EV{} #<STANDARD-CLASS NOVEL 33424764>

 (defstruct kons kar kdr) @EV{} KONS
 (class-of (make-kons :kar 3 :kdr 4)) @EV{} #<STRUCTURE-CLASS KONS 250020317>
@end lisp


@subsubheading See Also:

@ref{make-instance},
@ref{type-of}


@node unbound-slot
@heading unbound-slot (Condition Type)
@syindex unbound-slot
@cindex unbound-slot



@subsubheading Class Precedence List:
@code{unbound-slot},
@code{cell-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

The @term{object} having the unbound slot is initialized by 
@theinitkeyarg{instance} to @code{make-condition},
and is @term{accessed} by @thefunction{unbound-slot-instance}.

The name of the cell (see @code{cell-error}) is the name of the slot.

@subsubheading See Also:

@ref{cell-error-name},
@ref{unbound-slot-instance},
@ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}


@node unbound-slot-instance
@heading unbound-slot-instance (Function)
@syindex unbound-slot-instance
@cindex unbound-slot-instance



@subsubheading Syntax:

@DefunWithValues{unbound-slot-instance, condition, instance}

@subsubheading Arguments and Values:

@param{condition}---a @term{condition} @oftype{unbound-slot}.

@param{instance}---an @term{object}.

@subsubheading Description:

Returns the instance which had the unbound slot in the @term{situation}
represented by the @param{condition}.          

@subsubheading See Also:

@ref{cell-error-name},
@ref{unbound-slot},
@ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}




@node Structures
@chapter Structures
@menu

Dictionary

* defstruct::
* copy-structure::
@end menu

@node defstruct
@heading defstruct (Macro)
@syindex defstruct
@cindex defstruct


@subsubheading Syntax:

@DefmacWithValuesNewline{defstruct, name-and-options @brac{documentation} @stardown{slot-description}, structure-name}

@auxbnf{name-and-options, structure-name | @paren{structure-name @interleave{@down{options}}}}
@auxbnf{options, @down{conc-name-option} |@CR{} @stardown{constructor-option} |@CR{} @down{copier-option} |@CR{} @down{include-option} |@CR{} @down{initial-offset-option} |@CR{} @down{named-option} |@CR{} @down{predicate-option} |@CR{} @down{printer-option} |@CR{} @down{type-option}}
@auxbnf{conc-name-option, @kwd{conc-name} | @paren{@kwd{conc-name}} | @paren{@kwd{conc-name} @param{conc-name}}}
@auxbnf{constructor-option, @kwd{constructor} |@CR{} @paren{@kwd{constructor}} |@CR{} @paren{@kwd{constructor} @param{constructor-name}} |@CR{} @paren{@kwd{constructor} @param{constructor-name} @param{constructor-arglist}}}
@auxbnf{copier-option, @kwd{copier} | @paren{@kwd{copier}} | @paren{@kwd{copier} @param{copier-name}}}
@auxbnf{predicate-option, @kwd{predicate} | @paren{@kwd{predicate}} | @paren{@kwd{predicate} @param{predicate-name}}}
@auxbnf{include-option, @paren{@kwd{include} @param{included-structure-name} @stardown{slot-description}}}
@auxbnf{printer-option, @down{print-object-option} | @down{print-function-option}}
@auxbnf{print-object-option, @paren{@kwd{print-object} @param{printer-name}} | @paren{@kwd{print-object}}}
@auxbnf{print-function-option, @paren{@kwd{print-function} @param{printer-name}} | @paren{@kwd{print-function}}}
@auxbnf{type-option, @paren{@kwd{type} @param{type}}}
@auxbnf{named-option, @kwd{named}}
@auxbnf{initial-offset-option, @paren{@kwd{initial-offset} @param{initial-offset}}}
@auxbnf{slot-description, @param{slot-name} | @CR{} @paren{@param{slot-name} @brac{@param{slot-initform} @interleave{@down{slot-option}}}}}
@auxbnf{slot-option, @kwd{type} @param{slot-type} | @CR{} @kwd{read-only} @param{slot-read-only-p}}

@subsubheading Arguments and Values:

@param{conc-name}---a @term{@symbolnamedesignator{}}.

@param{constructor-arglist}---a @term{boa lambda list}.

@param{constructor-name}---a @term{symbol}.

@param{copier-name}---a @term{symbol}.

@param{included-structure-name}---an already-defined @term{structure name}.
Note that a @term{derived type} is not permissible, 
even if it would expand into a @term{structure name}.

@param{initial-offset}---a non-negative @term{integer}.

@param{predicate-name}---a @term{symbol}.

@param{printer-name}---a @term{function name} or a @term{lambda expression}.

@param{slot-name}---a @term{symbol}.

@param{slot-initform}---a @term{form}.

@param{slot-read-only-p}---a @term{generalized boolean}.

@param{structure-name}---a @term{symbol}.

@param{type}---one of the @term{type specifiers}
@code{list},
@code{vector},
or @f{(vector @param{size})},
or some other @term{type specifier} defined 
by the @term{implementation} to be appropriate.

@param{documentation}---a @term{string}; @noeval{}.

@subsubheading Description:

@code{defstruct} defines a structured @term{type}, named @param{structure-type},
with named slots as specified by the @param{slot-options}.

@code{defstruct} defines @term{readers} for the slots and
arranges for @code{setf} to work properly on such
@term{reader} functions.
Also, unless overridden, it
defines a predicate named @f{@param{name}-p},
defines a constructor function named @f{make-@param{constructor-name}},
and defines a copier function named @f{copy-@param{constructor-name}}.
All names of automatically created functions might automatically
be declared @code{inline} (at the discretion of the @term{implementation}).

If @param{documentation} is supplied, it is attached to @param{structure-name}
as a @term{documentation string} of kind @t{structure},
and unless @kwd{type} is used, the @param{documentation} is also attached 
to @param{structure-name} as a @term{documentation string} of kind
@t{type} and as a @term{documentation string} to the @term{class} @term{object} 
for the @term{class} named @param{structure-name}.

@code{defstruct} defines a constructor function that is used to
create instances of the structure created by @code{defstruct}.
The default name is @f{make-@param{structure-name}}.
A different name can be supplied
by giving the name as the argument to the @param{constructor} option.
@nil{}@spc{}indicates that no constructor function will be created.

After a new structure type has been defined, instances of that type
normally can be created by using the constructor function for the
type.
A call to a constructor function is of the following form:

@lisp
 (constructor-function-name
  slot-keyword1 form-1
  slot-keyword2 form-2
  ...)
@end lisp

The arguments to the constructor function are all keyword arguments.  Each
slot keyword argument must  be 
a keyword whose name corresponds to the name of a structure slot.  
All the @param{keywords} and @param{forms}
are evaluated.  
If a slot is not initialized in this way, 
it is initialized by evaluating @param{slot-initform} in the slot description
at the time the constructor function is called.
If no @param{slot-initform} is supplied, 
the consequences are undefined if an attempt is later made to read the slot's value
before a value is explicitly assigned.

Each @param{slot-initform} supplied for a @code{defstruct} component,
when used by the constructor function for an otherwise unsupplied
component, is re-evaluated on every call to the
constructor function.  
The @param{slot-initform} is not evaluated 
unless it is needed in the creation of a particular structure
instance.  If it is never needed, there can be no type-mismatch
error, even if the @term{type} 
of the slot is specified; no warning
should be issued in this case.
For example, in the following sequence, only the last call is an error.

@lisp
 (defstruct person (name 007 :type string)) 
 (make-person :name "James")
 (make-person)
@end lisp


It is as if the @param{slot-initforms} were 
used as @term{initialization forms} for the @term{keyword parameters} 
of the constructor function.

The @term{symbols} which name the slots must not be used by the 
@term{implementation} as the @term{names} for the @term{lambda variables}
in the constructor function, since one or more of those @term{symbols}
might have been proclaimed @code{special} or might be defined as
the name of a @term{constant variable}.
The slot default init forms are evaluated 
in the @term{lexical environment} in which the @code{defstruct} form itself appears and
in the @term{dynamic environment} in which the call to the constructor function appears.

For example, if the form @f{(gensym)} were used as an initialization form,
either in the constructor-function call or as the default initialization form
in @code{defstruct}, then every call to the constructor function would call
@code{gensym} once to generate a new @term{symbol}.

Each @param{slot-description} in @code{defstruct} can specify zero or more
@param{slot-options}.  
A @param{slot-option} consists of a pair of a keyword and a value
(which is not a form to be evaluated, but the value itself).  For example:

@lisp
 (defstruct ship
   (x-position 0.0 :type short-float)
   (y-position 0.0 :type short-float)
   (x-velocity 0.0 :type short-float)
   (y-velocity 0.0 :type short-float)
   (mass *default-ship-mass* :type short-float :read-only t))
@end lisp

This specifies that each slot always contains a @term{short float},
and that the last slot cannot be altered once a ship is constructed.


The available slot-options are:

@table @asis
@item @id{@tt{@kwd{type} @param{type}}}
 

This specifies that the contents of the
slot is always of type @param{type}.  This is entirely
analogous to the declaration of a variable or function; it
effectively declares the result type of the @term{reader} function.  
It is @term{implementation-dependent} whether the @term{type} is checked 
when initializing a slot
or when assigning to it.
@param{Type} is not evaluated; it must be a valid @term{type specifier}.

@item @id{@tt{@kwd{read-only} @param{x}}}


When @param{x} is @term{true},
this specifies that this slot cannot be
altered; it will always contain the value supplied at construction time.
@code{setf} will not accept the @term{reader} function for this slot.
If @param{x} is @term{false}, this slot-option has no effect.
@param{X} is not evaluated.

When this option is @term{false} or unsupplied,
it is @term{implementation-dependent} whether the ability to @term{write}
the slot is implemented by a @term{setf function} or a @term{setf expander}.
@end table


The following keyword options are available for use with @code{defstruct}.  
A @code{defstruct} option can be either a keyword or a @term{list}
of a keyword and arguments for that keyword; 
specifying the keyword by itself is equivalent to specifying a list consisting of
the keyword and no arguments.
The syntax for @code{defstruct} options differs from the pair syntax 
used for slot-options.  No part of any of these options is evaluated.

@table @asis

@item @id{@kwd{conc-name}}


This provides for automatic prefixing of names of @term{reader} (or @term{access}) functions.
The default behavior is to begin the names of all the @term{reader} functions of
a structure with the name of the structure followed by a hyphen.

@kwd{conc-name} supplies an alternate
prefix to be used.  If a hyphen is to be used as a separator,
it must be supplied as part of the prefix.
If @kwd{conc-name} is @nil{}@spc{}or no argument is supplied, 
then no prefix is used;
then the names of the @term{reader} functions
are the same as the slot names.
If a @term{non-nil} prefix is given,
the name of the @term{reader} @term{function} for each slot is constructed by
concatenating that prefix and the name of the slot, and interning the resulting
@term{symbol} in the @term{package} that is current at the time the 
@code{defstruct} form is expanded.

Note that no matter what is supplied for @kwd{conc-name},
slot keywords that match the slot names with no prefix attached are used
with a constructor function.
The @term{reader} function name is used
in conjunction with @code{setf}.  Here is an example:

@lisp
 (defstruct (door (:conc-name dr-)) knob-color width material) @EV{} DOOR
 (setq my-door (make-door :knob-color 'red :width 5.0)) 
@EV{} #S(DOOR :KNOB-COLOR RED :WIDTH 5.0 :MATERIAL NIL)
 (dr-width my-door) @EV{} 5.0
 (setf (dr-width my-door) 43.7) @EV{} 43.7
 (dr-width my-door) @EV{} 43.7
@end lisp


Whether or not the @kwd{conc-name} option is explicitly supplied, 
the following rule governs name conflicts of generated @term{reader}
(or @term{accessor}) names:
For any @term{structure} @term{type} @mat{S@sub1{}} 
having a @term{reader} function named @mat{R} for a slot named @mat{X@sub1{}}
that is inherited by another @term{structure} @term{type} @mat{S@sub2{}} 
that would have a @term{reader} function with the same name @mat{R} for a slot named @mat{X@sub2{}},
no definition for @mat{R} is generated by the definition of @mat{S@sub2{}};
instead, the definition of @mat{R} is inherited from the definition of @mat{S@sub1{}}.
(In such a case, if @mat{X@sub1{}} and @mat{X@sub2{}} are different slots,
the @term{implementation} might signal a style warning.)

@item @id{@kwd{constructor}}


This option takes zero, one, or two arguments.
If at least one argument is supplied and the first argument is not @nil{}, then
that argument is a @term{symbol} which specifies the name of the 
constructor function.  If the argument is not supplied (or if the option itself is not
supplied), the name of the constructor is produced by concatenating the
string @f{"MAKE-"} and the name of the structure, interning the name
in whatever @term{package} is current at the time @code{defstruct}
is expanded.  If the argument is provided and is @nil{},
no constructor function is defined.

If @kwd{constructor} is given as
@f{(:constructor @param{name} @param{arglist})}, 
then instead of making a keyword
driven constructor function, @code{defstruct} 
defines a ``positional'' constructor function,
taking arguments whose meaning is determined by the argument's position
and possibly by keywords.
@param{Arglist} is used to describe what the arguments to the
constructor will be. In the simplest case something like
@f{(:constructor make-foo (a b c))} defines @f{make-foo} to be
a three-argument 
constructor function whose arguments are used to initialize the
slots named @f{a}, @f{b}, and @f{c}.

Because a constructor of this type operates ``By Order of Arguments,''
it is sometimes known as a ``boa constructor.''

For information on how the @param{arglist} for a ``boa constructor'' is
processed, see @ref{Boa Lambda Lists, Section 3.4.6 (Boa Lambda Lists)}.

It is permissible to use the
@kwd{constructor} option more than once, so that you can define several
different constructor functions, each taking different parameters.

@reviewer{Barmar: What about (:constructor) and (:constructor nil).
Should we worry about it?}

@code{defstruct} creates the default-named keyword constructor function
only if no explicit @kwd{constructor} options are specified, or if the
@kwd{constructor} option is specified without a @param{name} argument.

@f{(:constructor nil)} is meaningful only when there are no other
@kwd{constructor} options specified.  It prevents @code{defstruct}
from generating any constructors at all.

Otherwise, @code{defstruct} creates a constructor function corresponding
to each supplied @kwd{constructor} option.  It is permissible to specify
multiple keyword constructor functions as well as multiple 
``boa constructors''.

@item @id{@kwd{copier}}


This option takes one argument, a @term{symbol},
which specifies the name of the copier
function.  If the argument is not provided or if the option itself is not
provided, the name of the copier is produced by concatenating the
string @f{"COPY-"} and the name of the structure, interning the name
in whatever @term{package} is current at the time @code{defstruct}
is expanded.
If the argument is provided and is @nil{}, no copier function is defined.

The automatically defined copier function is a function of
one @term{argument},
which must be of the structure type being defined.
The copier function creates a @term{fresh} 
structure that has the same @term{type} as its @term{argument},
and that has the @term{same} component values as the original 
structure; that is, the component values are not copied recursively.
If the @code{defstruct} @kwd{type} option was not used,
the following equivalence applies:

@lisp
 (@param{copier-name} x) = (copy-structure (the @param{structure-name} x))
@end lisp


@item @id{@kwd{include}}


This option is used for building a new structure definition as
an extension of another structure definition.  For example:

@lisp
 (defstruct person name age sex)
@end lisp

To make a new structure to represent an astronaut
that has the
attributes of name, age, and sex, and @term{functions}
that operate on @f{person} structures, @f{astronaut} is defined
with @kwd{include} as follows:

@lisp
 (defstruct (astronaut (:include person)
                       (:conc-name astro-))
    helmet-size
    (favorite-beverage 'tang))
@end lisp


@kwd{include} causes the structure being defined
to have the same slots as the included structure.
This is done in such a way
that the @term{reader} functions for the included
structure also work on the structure being defined.
In this example, an
@f{astronaut} therefore has five slots: the three defined in
@f{person} and the two defined in @f{astronaut}
itself.  The @term{reader} functions defined by the @f{person} structure
can be applied to instances of the @f{astronaut} structure, and they
work correctly.
Moreover, @f{astronaut} has its own @term{reader} functions for
components defined by the @f{person} structure.
The following examples illustrate the 
use of @f{astronaut} structures:

@lisp
 (setq x (make-astronaut :name 'buzz
                         :age 45.
                         :sex t
                         :helmet-size 17.5))
 (person-name x) @EV{} BUZZ
 (astro-name x) @EV{} BUZZ
 (astro-favorite-beverage x) @EV{} TANG
@end lisp

@lisp
 (reduce #'+ astros :key #'person-age) ; obtains the total of the ages 
                                       ; of the possibly empty
                                       ; sequence of astros
@end lisp

The difference between the @term{reader} functions @f{person-name} and @f{astro-name}
is that @f{person-name} can be correctly applied to any @f{person},
including an @f{astronaut}, while @f{astro-name} can be correctly
applied only to an @f{astronaut}.  An implementation might 
check for incorrect use of @term{reader} functions.

At most one @kwd{include} can be supplied in a single @code{defstruct}.
The argument to @kwd{include} is required and must be the
name of some previously defined structure.  If the structure being
defined has no @kwd{type} option, then the included structure must
also have had no @kwd{type} option supplied for it.
If the structure being defined has a @kwd{type} option,
then the included structure must have been declared with a @kwd{type}
option specifying the same representation @term{type}.

If no @kwd{type} option is involved, then
the structure name of the including structure definition
becomes the name of a @term{data type}, and therefore
a valid @term{type specifier} recognizable by @code{typep}; it becomes
a @term{subtype} of the included structure.  
In the above example,
@f{astronaut} is a @term{subtype} of @f{person}; hence

@lisp
 (typep (make-astronaut) 'person) @EV{} @term{true}
@end lisp

indicating that all operations on persons also
work on astronauts.

The structure using @kwd{include} can specify default values or
slot-options for the included slots different from those the included
structure specifies, by giving the @kwd{include} option as:

@lisp
 (:include @param{included-structure-name} @starparam{slot-description})
@end lisp

Each @param{slot-description} must have a @param{slot-name} 
that is the same
as that of some slot in the included structure.
If a @param{slot-description} has no @param{slot-initform},
then in the new structure the slot has no initial value.
Otherwise its initial value form is replaced by
the @param{slot-initform} in the @param{slot-description}.
A normally writable slot can be made read-only.
If a slot is read-only in the included structure, then it
must also be so in the including structure.
If a @term{type} is supplied for a slot, it must be 
a @term{subtype} of
the
@term{type} specified in the included structure.

For example, if the
default age for an astronaut is @f{45}, then 

@lisp
 (defstruct (astronaut (:include person (age 45)))
    helmet-size
    (favorite-beverage 'tang))
@end lisp


If @kwd{include} is used with the @kwd{type}
option, then the effect is first to skip over as many representation
elements as needed to represent the included structure, then to
skip over any additional elements supplied by the @kwd{initial-offset}
option, and then to begin allocation of elements from that point.
For example:

@lisp
 (defstruct (binop (:type list) :named (:initial-offset 2))
   (operator '? :type symbol)   
   operand-1
   operand-2) @EV{} BINOP
 (defstruct (annotated-binop (:type list)
                             (:initial-offset 3)
                             (:include binop))
  commutative associative identity) @EV{} ANNOTATED-BINOP
 (make-annotated-binop :operator '*
                       :operand-1 'x
                       :operand-2 5
                       :commutative t
                       :associative t
                       :identity 1)
   @EV{} (NIL NIL BINOP * X 5 NIL NIL NIL T T 1)
@end lisp

The first two @nil{}@spc{}elements stem from the @kwd{initial-offset} of @f{2}
in the definition of @f{binop}.  The next four elements contain the
structure name and three slots for @f{binop}.  The next three @nil{}@spc{}elements
stem from the @kwd{initial-offset} of @f{3} in the definition of
@f{annotated-binop}.  The last three list elements contain the additional
slots for an @f{annotated-binop}.

@item @id{@kwd{initial-offset}}


@kwd{initial-offset} instructs @code{defstruct} to skip over a certain
number of slots before it starts allocating the slots described in the
body.  This option's argument is the number of slots @code{defstruct} 
should skip.  @kwd{initial-offset} can be used only if @kwd{type} is also supplied.

@reviewer{Barmar: What are initial values of the skipped slots?}

@kwd{initial-offset} allows 
slots to be allocated beginning at a representational
element other than the first.  For example, the form

@lisp
 (defstruct (binop (:type list) (:initial-offset 2))
   (operator '? :type symbol)
   operand-1
   operand-2) @EV{} BINOP
@end lisp

would result in the following behavior for @f{make-binop}:

@lisp
 (make-binop :operator '+ :operand-1 'x :operand-2 5)
@EV{} (NIL NIL + X 5)
 (make-binop :operand-2 4 :operator '*)
@EV{} (NIL NIL * NIL 4)
@end lisp

The selector functions
@f{binop-operator}, @f{binop-operand-1},
and @tt{binop-operand-2} would be essentially equivalent to @code{third},
@code{fourth}, and @code{fifth}, respectively.
Similarly, the form

@lisp
 (defstruct (binop (:type list) :named (:initial-offset 2))
   (operator '? :type symbol)
   operand-1
   operand-2) @EV{} BINOP
@end lisp

would result in the following behavior for @f{make-binop}:

@lisp
 (make-binop :operator '+ :operand-1 'x :operand-2 5) @EV{} (NIL NIL BINOP + X 5)
 (make-binop :operand-2 4 :operator '*) @EV{} (NIL NIL BINOP * NIL 4)
@end lisp


The first two @nil{}@spc{}elements stem from the @kwd{initial-offset} of @f{2}
in the definition of @f{binop}.  The next four elements contain the
structure name and three slots for @f{binop}.  

@item @id{@kwd{named}}


@kwd{named} specifies that the structure is named.
If no @kwd{type} is supplied,
then the structure is always named.

For example:

@lisp
 (defstruct (binop (:type list))
   (operator '? :type symbol)
   operand-1
   operand-2) @EV{} BINOP
@end lisp

This defines a constructor function @f{make-binop} and three
selector functions, namely @f{binop-operator}, @f{binop-operand-1},
and @f{binop-operand-2}.  (It does not, however, define a predicate
@f{binop-p}, for reasons explained below.)

The effect of @f{make-binop} is simply to construct a list of length three:

@lisp
 (make-binop :operator '+ :operand-1 'x :operand-2 5) @EV{} (+ X 5)  
 (make-binop :operand-2 4 :operator '*) @EV{} (* NIL 4)
@end lisp

It is just like the function @f{list} except that it takes
keyword arguments and performs slot defaulting appropriate to the @f{binop}
conceptual data type.  Similarly, the selector functions
@f{binop-operator}, @f{binop-operand-1},
and @f{binop-operand-2} are essentially equivalent to @code{car},
@code{cadr}, and @code{caddr}, respectively.  They might not be
completely equivalent because,
for example, an implementation would be justified in adding error-checking
code to ensure that the argument to each selector function is a length-3
list.

@f{binop} is a conceptual data type in that it is not made a part of
the @clisp{}@spc{}type system.  @code{typep} does not recognize @f{binop} as
a @term{type specifier}, and @code{type-of} returns @f{list} when
given a @f{binop} structure.  There is no way to distinguish a data
structure constructed by @f{make-binop} from any other @term{list} that 
happens to have the correct structure.

There is not any way to recover the structure name @f{binop} from
a structure created by @f{make-binop}.  This can only be done
if the structure is named.
A named structure has the property that, given an instance of the
structure, the structure name (that names the type) can be reliably
recovered.  For structures defined
with no @kwd{type} option, the structure name actually becomes part
of the @clisp{}@spc{}data-type system.  @code{type-of},
when applied to such a structure, returns the structure name
as the @term{type} of the @term{object};
@code{typep} recognizes
the structure name as a valid @term{type specifier}.

For structures defined with a @kwd{type} option, @code{type-of} 
returns a @term{type specifier} such as @f{list} or @f{(vector t)},
depending on the type supplied to the @kwd{type} option.
The structure name does not become a valid @term{type specifier}.
However,
if the @kwd{named} option is also supplied, then the first component
of the structure (as created by a @code{defstruct} constructor function)
always contains the structure name.  This allows the structure name
to be recovered from an instance of the structure and allows a reasonable
predicate for the conceptual type to be defined:
the automatically defined
@param{name-p} predicate for the structure operates by first
checking that its argument is of the proper type (@code{list}, 
@f{(vector t)},
or whatever) and then checking whether the first component contains
the appropriate type name.

Consider the @f{binop} example shown above, modified only to
include the @kwd{named} option:

@lisp
 (defstruct (binop (:type list) :named)
   (operator '? :type symbol)
   operand-1
   operand-2) @EV{} BINOP
@end lisp

As before, this defines a constructor function @f{make-binop} and three
selector functions @f{binop-operator}, @f{binop-operand-1},
and @f{binop-operand-2}.  It also defines a predicate @f{binop-p}.
The effect of @f{make-binop} is now to construct a list of length four:

@lisp
 (make-binop :operator '+ :operand-1 'x :operand-2 5) @EV{} (BINOP + X 5)
 (make-binop :operand-2 4 :operator '*) @EV{} (BINOP * NIL 4)
@end lisp

The structure has the same layout as before except that the structure name
@f{binop} is included as the first list element.
The selector functions
@f{binop-operator}, @f{binop-operand-1},
and @f{binop-operand-2} are essentially equivalent to @code{cadr},
@code{caddr}, and @code{cadddr}, respectively.
The predicate @f{binop-p} is more or less equivalent to this
definition:

@lisp
 (defun binop-p (x)
   (and (consp x) (eq (car x) 'binop))) @EV{} BINOP-P
@end lisp

The name @f{binop} is still not a valid @term{type specifier} recognizable
to @code{typep}, but at least there is a way of distinguishing @f{binop}
structures from other similarly defined structures.

@item @id{@kwd{predicate}}


This option takes one argument, which specifies the name of the type predicate.
If the argument is not supplied or if the option itself is not
supplied, the name of the predicate is made by concatenating the
name of the structure to the string @f{"-P"}, interning the name
in whatever @term{package} is current at the time @code{defstruct}
is expanded.
If the argument is provided and is @nil{}, no predicate is defined.
A predicate can be defined only if the structure is named;
if @kwd{type} is supplied and @kwd{named} is not supplied,
then @kwd{predicate} must either be unsupplied or have the value @nil{}.

@item @id{@kwd{print-function}, @kwd{print-object}}


The @kwd{print-function} and @kwd{print-object} 
options
specify that a @code{print-object}
@term{method} for @term{structures} of type @param{structure-name} should be generated.
These options are not synonyms, but do perform a similar service;
the choice of which option (@kwd{print-function} or @kwd{print-object}) is used 
affects how the function named @param{printer-name} is called.
Only one of these options may be used, and
these options may be used only if @kwd{type} is not supplied.

If the @kwd{print-function} option is used, 
then when a structure of type @param{structure-name} is to be printed,
the designated printer function is called on three @term{arguments}:


@itemize --

@item the structure to be printed
(a @term{generalized instance} of @param{structure-name}).

@item a @term{stream} to print to.

@item an @term{integer} indicating the current depth.
The magnitude of this integer may vary between @term{implementations};
however, it can reliably be compared against @code{*print-level*}
to determine whether depth abbreviation is appropriate.
@end itemize


Specifying @f{(:print-function @param{printer-name})}
is approximately equivalent to specifying:

@lisp
 (defmethod print-object ((object @param{structure-name}) stream)
   (funcall (function @param{printer-name}) object stream @metaparam{current-print-depth}))
@end lisp


where the @metaparam{current-print-depth} represents the printer's belief of
how deep it is currently printing.  It is @term{implementation-dependent}
whether @metaparam{current-print-depth} is always 0 and @param{*print-level*},
if @term{non-nil}, is re-bound to successively smaller values as printing
descends recursively, or whether @param{current-print-depth} varies in 
value as printing descends recursively and @param{*print-level*} remains
constant during the same traversal.

If the @kwd{print-object} option is used, then
when a structure of type @param{structure-name} is to be printed,
the designated printer function is called on two arguments:


@itemize --

@item the structure to be printed.

@item the stream to print to.
@end itemize


Specifying @f{(:print-object @param{printer-name})} is equivalent to specifying:

@lisp
 (defmethod print-object ((object @param{structure-name}) stream)
   (funcall (function @param{printer-name}) object stream))
@end lisp


If no @kwd{type} option is supplied,
and if either a @kwd{print-function} or a @kwd{print-object} option is supplied,
and if no @param{printer-name} is supplied,
then a @code{print-object} @term{method} @term{specialized} for @param{structure-name}
is generated that calls a function that implements the default printing behavior for
structures using @f{#S} notation; see @ref{PrintingStructures, Section 22.1.3.12 (Printing Structures)}.

If neither a @kwd{print-function} 
nor a @kwd{print-object} option 
is supplied,
then @code{defstruct} does not generate a @code{print-object} @term{method}
@term{specialized} for @param{structure-name} and some default behavior is inherited
either from a structure named in an @kwd{include} option 
or from the default behavior for printing structures;
see the @term{function} @ref{print-object} and @ref{PrintingStructures, Section 22.1.3.12 (Printing Structures)}.

When @code{*print-circle*} is @term{true},
a user-defined print function can print @term{objects} 
to the supplied @term{stream} using  
@code{write},
@code{prin1},
@code{princ}, 
or @code{format}
and expect circularities to be detected and printed using the @f{#@i{n}#} syntax.
This applies to @term{methods} on @code{print-object} in addition to
@kwd{print-function} options.
If a user-defined print function prints to a @term{stream} other than the one
that was supplied, then circularity detection starts over for that @term{stream}. 
See the @term{variable} @ref{*print-circle*}.



@item @id{@kwd{type}}


@kwd{type} explicitly specifies the representation to be used for
the structure.  Its argument must be one of these @term{types}:


@table @asis
@item @id{@code{vector}}


This produces the same result as specifying @tt{(vector t)}.
The structure is represented
as a general @term{vector}, storing components as vector elements.
The first component is vector 
element 1 if the structure is @kwd{named}, and element 0 otherwise.

@reviewer{Barmar: Do any implementations create non-simple vectors?}

@item @id{@f{(vector @param{element-type})}}


The structure is represented as a (possibly specialized) @term{vector}, storing
components as vector elements.  Every component must be of a @term{type} 
that can be stored in a @term{vector} of the @term{type} specified.  
The first component is vector
element 1 if the structure is @kwd{named}, and element 0 otherwise.
The structure can be @kwd{named} only if @thetype{symbol} 
is a @term{subtype} of the supplied @param{element-type}.

@item @id{@code{list}}


The structure is represented as a @term{list}.
The first component is the @term{cadr} if the structure is @kwd{named},
and the @term{car} if it is not @kwd{named}.
@end table


Specifying this option has the effect of forcing
a specific representation and of forcing the components to be
stored in the order specified in @code{defstruct} 
in corresponding successive elements of the specified representation.
It also prevents the structure name from becoming a valid
@term{type specifier} recognizable by @code{typep}.

For example:

@lisp
 (defstruct (quux (:type list) :named) x y)
@end lisp


should make a constructor that builds a @term{list} exactly like the one
that @code{list} produces, 
with @tt{quux} as its @term{car}.

If this type is defined:

@lisp
 (deftype quux () '(satisfies quux-p))
@end lisp

then this form

@lisp
 (typep (make-quux) 'quux)
@end lisp

should return precisely what this one does

@lisp
 (typep (list 'quux nil nil) 'quux)
@end lisp


If @kwd{type} is not supplied,
the structure is represented as an @term{object} @oftype{structure-object}.

@code{defstruct} without a @kwd{type} option defines a @term{class} with
the structure name as its name. The @term{metaclass} of structure
@term{instances} is @code{structure-class}.  
@end table


The consequences of redefining a @code{defstruct} structure are undefined.

In the case where no @code{defstruct} options have been supplied, 
the following functions are automatically defined to operate 
on instances of the new structure:


@table @asis
@item @id{@bf{Predicate}}


A predicate with the name @f{@param{structure-name}-p} is defined to
test membership in the structure type.  The predicate 
@f{(@param{structure-name}-p @param{object})} is @term{true} if an @param{object} 
is of this @term{type}; otherwise it is @term{false}.  @code{typep} can also
be used with the name of the new @term{type} to test whether an 
@term{object}
belongs to the @term{type}. 
Such a function call has the form 
@hbox{@f{(typep @param{object} '@param{structure-name})}}.

@item @id{@bf{Component reader functions}}


@term{Reader} functions are defined to @term{read} the components of the
structure.  For each slot name, there is a corresponding
@term{reader} function with the name @f{@param{structure-name}-@param{slot-name}}.
This function @term{reads} the contents of that slot.  
Each @term{reader} function takes one argument, which is
an instance of the structure type.  
@code{setf} can be used with any of these @term{reader} functions
to alter the slot contents.

@item @id{@bf{Constructor function}}


A constructor function with the name @f{make-@param{structure-name}}
is defined.  This function creates and returns new 
instances of the structure type.

@item @id{@bf{Copier function}}


A copier function with the name @f{copy-@param{structure-name}} is defined.
The copier function takes an object of the structure type and creates a
new object of the same  type that is a copy of the first.  The copier
function creates a new structure with the same component entries
as the original.  Corresponding components of the two structure instances
are @code{eql}.
@end table


If a @code{defstruct} @term{form} appears as a @term{top level form},
the @term{compiler} must make the @term{structure} @term{type} name recognized
as a valid @term{type} name in subsequent declarations (as for @code{deftype})
and make the structure slot readers known to @code{setf}.  In addition, the
@term{compiler} must save enough information about the @term{structure} @term{type}
so that further @code{defstruct} definitions can use @kwd{include} in a subsequent
@code{deftype} in the same @term{file} to refer to the @term{structure} @term{type} name.
The functions which @code{defstruct} generates are not defined 
in the compile time environment, although the @term{compiler} may save enough
information about the functions to code subsequent calls inline.
The @f{#S} @term{reader macro} might or might not recognize the newly defined 
@term{structure} @term{type} name at compile time.  

@subsubheading Examples:
An example of a structure definition follows:

@lisp
 (defstruct ship
   x-position
   y-position
   x-velocity
   y-velocity
   mass)
@end lisp

This declares that every @f{ship} is an @term{object} 
with five named components.
The evaluation of this form does the following:


@enumerate 1
@item
It defines @f{ship-x-position} to be a function
of one argument, a ship, that returns the @f{x-position}
of the ship; @f{ship-y-position}
and the other components are given similar function definitions.
These functions are called the @term{access} functions, as they
are used to @term{access} elements of the structure.

@item
@f{ship} becomes the name of a @term{type} of which instances
of ships are elements.  @f{ship} becomes acceptable to @code{typep},
for example; @f{(typep x 'ship)} is @term{true} if @f{x} is a ship
and false if @f{x} is any @term{object} other than a ship.

@item
A function named @f{ship-p} of 
one argument is defined; it is a predicate
that is @term{true} if its argument is a ship and is @term{false} otherwise.

@item
A function called @f{make-ship} is defined that, when invoked,
creates a data structure with five components, suitable for use with
the @term{access} functions.  Thus executing

@lisp
 (setq ship2 (make-ship))
@end lisp

sets @f{ship2} to a newly created @f{ship} @term{object}.
One can supply the initial values of any desired component in the call
to @f{make-ship} by using keyword arguments in this way:

@lisp
 (setq ship2 (make-ship :mass *default-ship-mass*
                        :x-position 0
                        :y-position 0))
@end lisp

This constructs a new ship and initializes three of its components.
This function is called the ``constructor function''
because it constructs a new structure.

@item
A function called @f{copy-ship} of one argument
is defined that, when given a @f{ship} @term{object},
creates a new @f{ship} @term{object} that is a copy of the given one.
This function is called the ``copier function.''
@end enumerate


@code{setf} can be used to alter the components of a @f{ship}:

@lisp
 (setf (ship-x-position ship2) 100)
@end lisp

This alters the @f{x-position} of @f{ship2} to be @f{100}.
This works because @code{defstruct} behaves as if
it generates an appropriate @code{defsetf}
for each @term{access} function.

@lisp
;;;
;;; Example 1
;;; define town structure type
;;; area, watertowers, firetrucks, population, elevation are its components
;;;
 (defstruct town
             area
             watertowers
             (firetrucks 1 :type fixnum)    ;an initialized slot
             population 
             (elevation 5128 :read-only t)) ;a slot that can't be changed
@EV{} TOWN
;create a town instance
 (setq town1 (make-town :area 0 :watertowers 0)) @EV{} #S(TOWN...)
;town's predicate recognizes the new instance
 (town-p town1) @EV{} @term{true}
;new town's area is as specified by make-town
 (town-area town1) @EV{} 0
;new town's elevation has initial value
 (town-elevation town1) @EV{} 5128
;setf recognizes reader function
 (setf (town-population town1) 99) @EV{} 99
 (town-population town1) @EV{} 99
;copier function makes a copy of town1
 (setq town2 (copy-town town1)) @EV{} #S(TOWN...)
 (= (town-population town1) (town-population town2))  @EV{} @term{true}
;since elevation is a read-only slot, its value can be set only
;when the structure is created
 (setq town3 (make-town :area 0 :watertowers 3 :elevation 1200))
@EV{} #S(TOWN...)
;;;
;;; Example 2
;;; define clown structure type
;;; this structure uses a nonstandard prefix
;;;
 (defstruct (clown (:conc-name bozo-))
             (nose-color 'red)         
             frizzy-hair-p polkadots) @EV{} CLOWN
 (setq funny-clown (make-clown)) @EV{} #S(CLOWN)
;use non-default reader name
 (bozo-nose-color funny-clown) @EV{} RED        
 (defstruct (klown (:constructor make-up-klown) ;similar def using other
             (:copier clone-klown)              ;customizing keywords
             (:predicate is-a-bozo-p))
             nose-color frizzy-hair-p polkadots) @EV{} klown
;custom constructor now exists
 (fboundp 'make-up-klown) @EV{} @term{true}
;;;
;;; Example 3
;;; define a vehicle structure type
;;; then define a truck structure type that includes 
;;; the vehicle structure
;;;
 (defstruct vehicle name year (diesel t :read-only t)) @EV{} VEHICLE
 (defstruct (truck (:include vehicle (year 79)))
             load-limit                          
             (axles 6)) @EV{} TRUCK
 (setq x (make-truck :name 'mac :diesel t :load-limit 17))
@EV{} #S(TRUCK...)
;vehicle readers work on trucks
 (vehicle-name x)
@EV{} MAC
;default taken from :include clause 
 (vehicle-year x)
@EV{} 79 
 (defstruct (pickup (:include truck))     ;pickup type includes truck
             camper long-bed four-wheel-drive) @EV{} PICKUP
 (setq x (make-pickup :name 'king :long-bed t)) @EV{} #S(PICKUP...)
;:include default inherited
 (pickup-year x) @EV{} 79
;;;
;;; Example 4
;;; use of BOA constructors
;;;
 (defstruct (dfs-boa                      ;BOA constructors
               (:constructor make-dfs-boa (a b c)) 
               (:constructor create-dfs-boa
                 (a &optional b (c 'cc) &rest d &aux e (f 'ff))))
             a b c d e f) @EV{} DFS-BOA
;a, b, and c set by position, and the rest are uninitialized
 (setq x (make-dfs-boa 1 2 3)) @EV{} #(DFS-BOA...)
 (dfs-boa-a x) @EV{} 1
;a and b set, c and f defaulted
 (setq x (create-dfs-boa 1 2)) @EV{} #(DFS-BOA...)
 (dfs-boa-b x) @EV{} 2
 (eq (dfs-boa-c x) 'cc) @EV{} @term{true}
;a, b, and c set, and the rest are collected into d
 (setq x (create-dfs-boa 1 2 3 4 5 6)) @EV{} #(DFS-BOA...)
 (dfs-boa-d x) @EV{} (4 5 6)
@end lisp


@subsubheading Exceptional Situations:

If any two slot names (whether present directly or inherited by the @kwd{include} option)
are the @term{same} under @code{string=},
@code{defstruct} should signal an error @oftype{program-error}.

The consequences are undefined if the @param{included-structure-name} 
does not name a @term{structure type}.

@subsubheading See Also:

@ref{documentation},
@ref{print-object},
@ref{setf},
@ref{subtypep},
@ref{type-of},
@ref{typep},
@ref{Compilation, Section 3.2 (Compilation)}

@subsubheading Notes:


The @param{printer-name} should observe the values of
such printer-control variables as @code{*print-escape*}.

The restriction against issuing a warning for type mismatches between
a @param{slot-initform} and the corresponding slot's @kwd{type} option is
necessary because a @param{slot-initform} must be specified in order to
specify slot options; in some cases, no suitable default may exist.

The mechanism by which @code{defstruct} arranges for slot accessors to
be usable with @code{setf} is @term{implementation-dependent}; 
for example, it may use @term{setf functions}, @term{setf expanders}, or
some other @term{implementation-dependent} mechanism known to that
@term{implementation}'s @term{code} for @code{setf}.


@node copy-structure
@heading copy-structure (Function)
@syindex copy-structure
@cindex copy-structure



@subsubheading Syntax:

@DefunWithValues{copy-structure, structure, copy}

@subsubheading Arguments and Values:

@param{structure}---a @term{structure}.

@param{copy}---a copy of the @param{structure}.

@subsubheading Description:

Returns a @term{copy}@sub6{} of the @param{structure}.

Only the @param{structure} itself is copied; not the values of the slots.

@subsubheading See Also:

the @kwd{copier} option to @ref{defstruct}

@subsubheading Notes:

The @param{copy} is the @term{same} as the given @param{structure}
under @code{equalp}, but not under @code{equal}.





@node Conditions
@chapter Conditions
@menu
* Condition System Concepts::

Dictionary

* condition::
* warning::
* style-warning::
* serious-condition::
* error (Condition Type)::
* cell-error::
* cell-error-name::
* parse-error::
* storage-condition::
* assert::
* error (Function)::
* cerror::
* check-type::
* simple-error::
* invalid-method-error::
* method-combination-error::
* signal::
* simple-condition::
* simple-condition-format-control; simple-condition-format-arguments::
* warn::
* simple-warning::
* invoke-debugger::
* break::
* *debugger-hook*::
* *break-on-signals*::
* handler-bind::
* handler-case::
* ignore-errors::
* define-condition::
* make-condition::
* restart::
* compute-restarts::
* find-restart::
* invoke-restart::
* invoke-restart-interactively::
* restart-bind::
* restart-case::
* restart-name::
* with-condition-restarts::
* with-simple-restart::
* abort (Restart)::
* continue (Restart)::
* muffle-warning (Restart)::
* store-value (Restart)::
* use-value (Restart)::
* abort; continue; muffle-warning; store-value; use-value::
@end menu

@node Condition System Concepts
@section Condition System Concepts

Common Lisp constructs are described not only in terms of their
behavior in situations during which they are intended to be used (see
the ``Description'' part of each @term{operator} specification),
but in all other situations (see the ``Exceptional Situations''
part of each @term{operator} specification).

A situation is the evaluation of an expression in a specific context.
A @term{condition} is an @term{object} that
represents a specific situation that has been detected.  
@term{Conditions} are @instancesofclasses{condition}.
A hierarchy of @term{condition} classes is defined in @clisp{}.  
A @term{condition} has @term{slots} that contain data 
relevant to the situation that the @term{condition} represents.

An error is a situation in which normal program execution cannot
continue correctly without some form of intervention (either
interactively by the user or under program control).  Not all errors
are detected.  When an error goes undetected, the effects can be
@term{implementation-dependent}, @term{implementation-defined}, unspecified, or
undefined. See @ref{Definitions, Section 1.4 (Definitions)}.  All detected errors can
be represented by @term{conditions}, but not all 
@term{conditions} represent errors.

Signaling is the process by which a @term{condition} can alter
the flow of control in a program by raising the 
@term{condition} which can then be @term{handled}.  The functions
@code{error}, @code{cerror}, @code{signal}, and
@code{warn} are used to signal @term{conditions}.

The process of signaling involves the selection and invocation of a
@term{handler} from a set of @term{active} @term{handlers}.  
A @term{handler} is a @term{function} of one argument (the 
@term{condition}) that is invoked to handle a @term{condition}.
Each @term{handler} is associated with a @term{condition} @term{type},
and a @term{handler} will be invoked only on a @term{condition} of the
@term{handler}'s associated @term{type}.

@term{Active} @term{handlers} are @term{established} dynamically
(see @code{handler-bind} or @code{handler-case}).
@term{Handlers} are invoked in a @term{dynamic environment} 
equivalent to that of the signaler,
except that the set of @term{active} @term{handlers} 
is bound in such a way as to include only those that were @term{active} 
at the time the @term{handler} being invoked was @term{established}.
Signaling a @term{condition} has no side-effect on the @term{condition}, 
and there is no dynamic state contained in a @term{condition}.

If a @term{handler} is invoked, it can address the @term{situation} 
in one of three ways:


@table @asis
@item @id{@b{Decline}}


It can decline to @term{handle} the @term{condition}.  It does this by
simply returning rather than transferring control.
When this happens, any values returned by the handler are
ignored and the next most recently established handler is invoked.
If there is no such handler and the signaling function is @code{error}
or @code{cerror}, the debugger is entered in the
@term{dynamic environment} of the signaler. If there is no such
handler and the signaling function is either @code{signal} or
@code{warn}, the signaling function simply returns@tie{}@nil{}.

@item @id{@b{Handle}}


It can @term{handle} the @term{condition} by performing a non-local
transfer of control.  This can be done either primitively by using
@code{go}, @code{return}, @code{throw} or more
abstractly by using a function such as @code{abort} or
@code{invoke-restart}.

@item @id{@b{Defer}}


It can put off a decision about whether to @term{handle} or @term{decline},
by any of a number of actions, but most commonly by 
signaling another condition,
resignaling the same condition,
or forcing entry into the debugger.
@end table


@menu
* Condition Types::
* Creating Conditions::
* Printing Conditions::
* Signaling and Handling Conditions::
* Assertions::
* Notes about the Condition System's Background::
@end menu
@node Condition Types
@subsection Condition Types

@Thenextfigure{}@spc{}lists the @term{standardized} @term{condition} @term{types}.
Additional @term{condition} @term{types} can be defined by using @code{define-condition}.



@float Figure,StandardizedConditionTypes
@cartouche
@multitable{floating-point-invalid-operation}{floating-point-underflow}{undefined-function}

@item arithmetic-error @tab floating-point-overflow @tab simple-type-error
@item cell-error @tab floating-point-underflow @tab simple-warning
@item condition @tab package-error @tab storage-condition
@item control-error @tab parse-error @tab stream-error
@item division-by-zero @tab print-not-readable @tab style-warning
@item end-of-file @tab program-error @tab type-error
@item error @tab reader-error @tab unbound-slot
@item file-error @tab serious-condition @tab unbound-variable
@item floating-point-inexact @tab simple-condition @tab undefined-function
@item floating-point-invalid-operation @tab simple-error @tab warning
@end multitable
@end cartouche
@caption{Standardized Condition Types}
@end float


All @term{condition} types are @subtypesof{condition}.  That is,

@lisp
 (typep @param{c} 'condition) @EV{} @term{true}
@end lisp

if and only if @param{c} is a @term{condition}.

@term{Implementations} must define all specified @term{subtype} relationships.
Except where noted, all @term{subtype} relationships indicated in 
this document are not mutually exclusive.
A @term{condition} inherits the structure of its @term{supertypes}.

The metaclass of @theclass{condition} is not specified.
@term{Names} of @term{condition} @term{types} may be used to specify
@term{supertype} relationships in @code{define-condition}, 
but the consequences are not specified if an attempt is made to use
a @term{condition} @term{type} as a @term{superclass} in a @code{defclass} @term{form}.

@Thenextfigure{}@spc{}shows @term{operators} that
define @term{condition} @term{types} and creating @term{conditions}.


@float Figure,fig9.2
@cartouche
@multitable{define-condition}{make-condition}{}

@item define-condition @tab make-condition @tab 
@end multitable
@end cartouche
@caption{Operators that define and create conditions.}
@end float


@Thenextfigure{}@spc{}shows @term{operators} that @term{read} 
the @term{value} of @term{condition} @term{slots}.


@float Figure,fig9.3
@cartouche
@multitable{arithmetic-error-operation}{simple-condition-format-arguments}

@item arithmetic-error-operands @tab simple-condition-format-arguments
@item arithmetic-error-operation @tab simple-condition-format-control
@item cell-error-name @tab stream-error-stream
@item file-error-pathname @tab type-error-datum
@item package-error-package @tab type-error-expected-type
@item print-not-readable-object @tab unbound-slot-instance
@end multitable
@end cartouche
@caption{Operators that read condition slots.}
@end float


@subsubsection Serious Conditions

A @term{serious condition} is a @term{condition} serious
enough to require interactive intervention if not handled.  
@term{Serious conditions} are typically signaled with @code{error} or @code{cerror};
non-serious @term{conditions} are typically signaled with @code{signal} or @code{warn}.



@node Creating Conditions
@subsection Creating Conditions

The function @code{make-condition} can be used to construct
a @term{condition} @term{object} explicitly.  Functions such as @code{error},
@code{cerror}, @code{signal}, and @code{warn} operate on
@term{conditions} and might create @term{condition} @term{objects}
implicitly.  Macros such as @code{ccase}, @code{ctypecase},
@code{ecase}, @code{etypecase}, @code{check-type}, and
@code{assert} might also implicitly create (and @term{signal})
@term{conditions}.

@subsubsection Condition Designators
@anchor{ConditionDesignators}

A number of the functions in the condition system take arguments which
are identified as 
@cindex condition designator
@dfn{condition designators}.
By convention, those arguments are notated as

@spc{}@param{datum} @rest{} @param{arguments}

Taken together, the @param{datum} and the @param{arguments} are 
``@term{designators} for a @term{condition} of default type @param{default-type}.''
How the denoted @term{condition} is computed depends on the type of the @param{datum}:


@itemize @bullet{}

@item If the @param{datum} is a @term{symbol} 
naming a @term{condition} @term{type} @mat{@ldots{}}

The denoted @term{condition} is the result of

@lisp
 (apply #'make-condition @param{datum} @param{arguments})
@end lisp


@item If the @param{datum} is a @term{format control} @mat{@ldots{}}

The denoted @term{condition} is the result of 

@lisp
 (make-condition @param{defaulted-type} 
                 :format-control @param{datum}
                 :format-arguments @param{arguments})
@end lisp


where the @param{defaulted-type} is a @term{subtype} of @param{default-type}.

@item If the @param{datum} is a @term{condition} @mat{@ldots{}}

The denoted @term{condition} is the @param{datum} itself.
In this case, unless otherwise specified by the description of the
@term{operator} in question, the @term{arguments} must be @term{null};
that is, the consequences are undefined if any @param{arguments} were supplied. 
@end itemize


Note that the @param{default-type} gets used only in the case where
the @param{datum} @term{string} is supplied.  In the other situations,
the resulting condition is not necessarily of @term{type} @param{default-type}.

Here are some illustrations of how different @term{condition designators}
can denote equivalent @term{condition} @term{objects}:

@lisp
(let ((c (make-condition 'arithmetic-error :operator '/ :operands '(7 0))))
  (error c))
@EQ{} (error 'arithmetic-error :operator '/ :operands '(7 0))

(error "Bad luck.")
@EQ{} (error 'simple-error :format-control "Bad luck." :format-arguments '())
@end lisp




@node Printing Conditions
@subsection Printing Conditions

If the @kwd{report} argument to @code{define-condition} is used,
a print function is defined that is called whenever 
the defined @term{condition} is printed while @thevalueof{*print-escape*} is @term{false}. 
This function is called the @newterm{condition reporter};
the text which it outputs is called a @newterm{report message}.

When a @term{condition} is printed and @code{*print-escape*}
is @term{false}, the @term{condition reporter} for the @term{condition} is invoked.
@term{Conditions} are printed automatically by functions such as
@code{invoke-debugger}, @code{break}, and @code{warn}.

When @code{*print-escape*} is @term{true}, the @term{object} should print in an
abbreviated fashion according to the style of the implementation
(@eg{} by @code{print-unreadable-object}).  It is not required that a
@term{condition} can be recreated by reading its printed representation.

No @term{function} is provided for directly @term{accessing} 
or invoking @term{condition reporters}.

@subsubsection Recommended Style in Condition Reporting

In order to ensure a properly aesthetic result when presenting
@term{report messages} to the user, certain stylistic conventions are
recommended.

There are stylistic recommendations for the content of the messages
output by @term{condition reporters}, but there are no formal requirements 
on those @term{programs}.
If a @term{program} violates the recommendations for some message, the
display of that message might be less aesthetic than if the guideline
had been observed, but the @term{program} is still considered a
@term{conforming program}.

The requirements on a @term{program} or @term{implementation} which
invokes a @term{condition reporter} are somewhat stronger.  A @term{conforming
program} must be permitted to assume that if these style guidelines are
followed, proper aesthetics will be maintained.  Where appropriate, any
specific requirements on such routines are explicitly mentioned below.

@unnumberedsubsubsec 9.1.3.1.1 Capitalization and Punctuation in Condition Reports


It is recommended that a @term{report message} be a complete sentences, in the
proper case and correctly punctuated.  In English, for example, this
means the first letter should be uppercase, and there should be a
trailing period.

@lisp
 (error "This is a message")  ; Not recommended
 (error "this is a message.") ; Not recommended

 (error "This is a message.") ; Recommended instead
@end lisp



@unnumberedsubsubsec 9.1.3.1.2 Leading and Trailing Newlines in Condition Reports


It is recommended that a @term{report message} not begin with any 
introductory text, such as ``@f{Error: }'' or ``@f{Warning: }''
or even just @term{freshline} or @term{newline}. 
Such text is added, if appropriate to the context,
by the routine invoking the @term{condition reporter}.

It is recommended that a @term{report message} not be followed 
by a trailing @term{freshline} or @term{newline}.
Such text is added, if appropriate to the context, 
by the routine invoking the @term{condition reporter}.

@lisp
 (error "This is a message.~%")   ; Not recommended
 (error "~&This is a message.")   ; Not recommended
 (error "~&This is a message.~%") ; Not recommended

 (error "This is a message.")     ; Recommended instead
@end lisp



@unnumberedsubsubsec 9.1.3.1.3 Embedded Newlines in Condition Reports


Especially if it is long, it is permissible and appropriate for 
a @term{report message} to contain one or more embedded @term{newlines}.

If the calling routine conventionally inserts some additional prefix
(such as ``@f{Error: }'' or ``@f{;; Error: }'') on the first line of
the message, it must also assure that an appropriate prefix will be
added to each subsequent line of the output, so that the left edge of
the message output by the @term{condition reporter} will still be properly
aligned.

@lisp
 (defun test ()
   (error "This is an error message.~@percent{}It has two lines."))

 ;; Implementation A
 (test)
 This is an error message.
 It has two lines.

 ;; Implementation B
 (test)
 ;; Error: This is an error message.
 ;;        It has two lines.

 ;; Implementation C
 (test)
 >> Error: This is an error message. 
           It has two lines.
@end lisp



@unnumberedsubsubsec 9.1.3.1.4 Note about Tabs in Condition Reports


Because the indentation of a @term{report message} might be shifted to the right or
left by an arbitrary amount, special care should be taken with the
semi-standard @term{character} @TabChar{}@spc{}
(in those @term{implementations} that support such a @term{character}).  
Unless the @term{implementation} specifically defines its behavior 
in this context, its use should be avoided.


@unnumberedsubsubsec 9.1.3.1.5 Mentioning Containing Function in Condition Reports


The name of the containing function should generally not be mentioned in
@term{report messages}.  It is assumed that the @term{debugger} will make this
information accessible in situations where it is necessary and appropriate.



@goodbreak{}
@node Signaling and Handling Conditions
@subsection Signaling and Handling Conditions

The operation of the condition system depends on the ordering of
active @term{applicable handlers} from most recent to least recent.

Each @term{handler} is associated with a @term{type specifier}
that must designate a @subtypeof{condition}.  A @term{handler}
is said to be @term{applicable} to a @term{condition} if that
@term{condition} is of the @term{type} designated by the associated
@term{type specifier}.

@term{Active} @term{handlers} are @term{established} by using 
@code{handler-bind} (or an abstraction based on @code{handler-bind}, 
such as @code{handler-case} or @code{ignore-errors}).

@term{Active} @term{handlers} can be @term{established} within the
dynamic scope of other @term{active} @term{handlers}.
At any point during program execution, there is a set of @term{active} @term{handlers}.
When a @term{condition} is signaled, the @term{most recent} active @term{applicable handler}
for that @term{condition} is selected from this set.
Given a @term{condition}, the order of recentness of 
active @term{applicable handlers} is defined by the following two rules:


@enumerate 1

@item Each handler in a set of active handlers @mat{H@sub1{}} is
more recent than every handler in a set @mat{H@sub2{}} if the
handlers in @mat{H@sub2{}} were active when the handlers in @mat{H@sub1{}} were
established.

@item Let @mat{h@sub1{}} and @mat{h@sub2{}} be two applicable active
handlers established by the same @term{form}. Then @mat{h@sub1{}} is
more recent than @mat{h@sub2{}} if @mat{h@sub1{}} was defined to the left of
@mat{h@sub2{}} in the @term{form} that established them.
@end enumerate


Once a handler in a handler binding @term{form} (such as 
@code{handler-bind} or @code{handler-case}) has been selected, all
handlers in that @term{form} become inactive for 
the remainder of the signaling process.
While the selected @term{handler} runs, no other @term{handler} established
by that @term{form} is active. That is, if the @term{handler} declines, 
no other handler established by that @term{form} will be considered for possible invocation.

@Thenextfigure{}@spc{}shows @term{operators} relating to 
the @term{handling} of @term{conditions}.


@float Figure,fig9.4
@cartouche
@multitable{handler-bind}{handler-case}{ignore-errors}

@item handler-bind @tab handler-case @tab ignore-errors
@end multitable
@end cartouche
@caption{Operators relating to handling conditions.}
@end float


@subsubsection Signaling
@anchor{Signaling}

When a @term{condition} is signaled, the most recent
applicable @term{active} @term{handler} is invoked.  
Sometimes a handler will decline by simply returning
without a transfer of control.
In such cases, the next most recent applicable active handler is
invoked. 

If there are no applicable handlers for a @term{condition} that
has been signaled, or if all applicable handlers decline, the
@term{condition} is unhandled.

The functions @code{cerror} and @code{error} invoke the
interactive @term{condition} handler (the debugger) rather than
return if the @term{condition} being signaled, regardless of
its @term{type}, is unhandled.  In contrast, @code{signal}
returns @nil{}@spc{}if the @term{condition} being signaled,
regardless of its @term{type}, is unhandled.

@Thevariable{*break-on-signals*} can be used to cause the
debugger to be entered before the signaling process begins.

@Thenextfigure{}@spc{}shows @term{defined names} relating to
the @term{signaling} of @term{conditions}.


@float Figure,fig9.5
@cartouche
@multitable{*break-on-signals*}{signal}{warn}

@item *break-on-signals* @tab error @tab warn
@item cerror @tab signal @tab 
@end multitable
@end cartouche
@caption{Defined names relating to signaling conditions.}
@end float


@unnumberedsubsubsec 9.1.4.1.1 Resignaling a Condition


During the @term{dynamic extent} of the @term{signaling} process for
a particular @term{condition} @term{object}, 
@code{signaling} the same @term{condition} @term{object} again
is permitted if and only if the @term{situation} represented in both
cases are the same.

For example, a @term{handler} might legitimately @term{signal} 
the @term{condition} @term{object} that is its @term{argument}
in order to allow outer @term{handlers} first opportunity to @term{handle} 
the condition.  (Such a @term{handlers} is sometimes called a ``default handler.'')
This action is permitted because the @term{situation} which the second
@term{signaling} process is addressing is really the same @term{situation}.

On the other hand, in an @term{implementation} that implemented asynchronous 
keyboard events by interrupting the user process with a call to @code{signal},
it would not be permissible for two distinct asynchronous keyboard events
to @term{signal} @term{identical} @term{condition} @term{objects}
at the same time for different 
situations.


@subsubsection Restarts
@anchor{Restarts}

The interactive condition handler returns only through
non-local transfer of control to specially defined @term{restarts}
that can be set up either by the system or by user code.  Transferring
control to a restart is called ``invoking'' the restart.  Like
handlers, active @term{restarts} are @term{established}
dynamically, and 
only active @term{restarts}
can be invoked.  An active 
@term{restart} can be invoked by the user from
the debugger or by a program by using @code{invoke-restart}.

A @term{restart} contains a 
@term{function} to be @term{called} when the @term{restart} is
invoked, an optional name that can be used to find or invoke the 
@term{restart}, and
an optional set of interaction information for the debugger to use to
enable the user to manually invoke a @term{restart}. 

The name of a @term{restart} is
used by @code{invoke-restart}. @term{Restarts} that can be invoked
only within the debugger do not need names.

@term{Restarts} can be established by using @code{restart-bind}, 
@code{restart-case}, and @code{with-simple-restart}.
A @term{restart} function can itself invoke any other @term{restart}
that was active at the time of establishment of the @term{restart} 
of which the @term{function} is part.

The @term{restarts} @term{established} by 
a @code{restart-bind} @term{form}, 
a @code{restart-case} @term{form},
or a @code{with-simple-restart} @term{form}
have @term{dynamic extent}
which extends for the duration of that @term{form}'s execution.

@term{Restarts} of the same name can be ordered from least recent to
most recent according to the following two rules:


@enumerate 1

@item Each @term{restart} in a set of active restarts
@mat{R@sub1{}} is more recent than every @term{restart} in a
set @mat{R@sub2{}} if the @term{restarts} 
in @mat{R@sub2{}} were active when the  @term{restarts} in @mat{R@sub1{}} were
established.

@item Let @mat{r@sub1{}} and @mat{r@sub2{}} be two active @term{restarts} with
the same name established by the same @term{form}. Then @mat{r@sub1{}} is
more recent than @mat{r@sub2{}} if @mat{r@sub1{}} was defined to the
left of @mat{r@sub2{}} in the @term{form} that established them.
@end enumerate


If a @term{restart} is invoked but does not transfer control,
the values resulting from the @term{restart} function are
returned by the function that invoked the restart, either
@code{invoke-restart} or @code{invoke-restart-interactively}.

@unnumberedsubsubsec 9.1.4.2.1 Interactive Use of Restarts



For interactive handling, two pieces of information are needed
from a @term{restart}: a report function and an interactive function.

The report function
is used by a program such as the debugger to
present a description of the action the @term{restart} will take.  
The report function is specified and established by the 
@kwd{report-function} keyword to
@code{restart-bind} or the 
@kwd{report} keyword to @code{restart-case}. 

The interactive function, which can be specified using the 
@kwd{interactive-function} keyword to 
@code{restart-bind} or @kwd{interactive} keyword
to @code{restart-case}, is used when the @term{restart}
is invoked
interactively, such as from the debugger, to produce a suitable
list of arguments. 

@code{invoke-restart} invokes the most recently @term{established}
@term{restart} whose
name is the same as the first argument to @code{invoke-restart}.
If a @term{restart} is invoked interactively by the debugger and  does
not transfer control but rather returns values, the precise
action of the debugger on those values is @term{implementation-defined}.


@unnumberedsubsubsec 9.1.4.2.2 Interfaces to Restarts

@anchor{InterfacesToRestarts}

Some @term{restarts} have functional interfaces, 
such as @code{abort}, @code{continue}, 
@code{muffle-warning}, @code{store-value}, and 
@code{use-value}.
They are ordinary functions that use 
@code{find-restart} and @code{invoke-restart} internally,
that have the same name as the @term{restarts} they manipulate,
and that are provided simply for notational convenience.

@Thenextfigure{}@spc{}shows @term{defined names} relating to
@term{restarts}.


@float Figure,fig9.6
@cartouche
@multitable{compute-restarts}{invoke-restart-interactively}{with-simple-restart}

@item abort @tab invoke-restart-interactively @tab store-value
@item compute-restarts @tab muffle-warning @tab use-value
@item continue @tab restart-bind @tab with-simple-restart
@item find-restart @tab restart-case @tab 
@item invoke-restart @tab restart-name @tab 
@end multitable
@end cartouche
@caption{Defined names relating to restarts.}
@end float



@unnumberedsubsubsec 9.1.4.2.3 Restart Tests



Each @term{restart} has an associated test, which is a function of one
argument (a @term{condition} or @nil{}) which returns @term{true} if the @term{restart}
should be visible in the current @term{situation}.  This test is created by 
the @kwd{test-function} option to @code{restart-bind} or 
the @kwd{test} option to @code{restart-case}.


@unnumberedsubsubsec 9.1.4.2.4 Associating a Restart with a Condition

@anchor{AssocRestartWithCond}

A @term{restart} can be ``associated with'' a @term{condition} explicitly
by @code{with-condition-restarts}, or implicitly by @code{restart-case}.
Such an assocation has @term{dynamic extent}.

A single @term{restart} may be associated with several @term{conditions} 
at the same time.
A single @term{condition} may have several associated @term{restarts}
at the same time.

Active restarts associated with a particular @term{condition} can be detected
by @term{calling} a @term{function} such as @code{find-restart}, supplying
that @term{condition} as the @param{condition} @term{argument}.
Active restarts can also be detected without regard to any associated
@term{condition} by calling such a function without a @param{condition} @term{argument},
or by supplying a value of @nil{}@spc{}for such an @term{argument}.


@goodbreak{}
@node Assertions
@subsection Assertions

Conditional signaling of @term{conditions}
based on such things as key match, form evaluation,
and @term{type} are handled by assertion @term{operators}.
@Thenextfigure{}@spc{}shows @term{operators} relating to assertions.


@float Figure,fig9.7
@cartouche
@multitable{assert}{check-type}{etypecase}

@item assert @tab check-type @tab ecase
@item ccase @tab ctypecase @tab etypecase
@end multitable
@end cartouche
@caption{Operators relating to assertions.}
@end float



@node Notes about the Condition System's Background
@subsection Notes about the Condition System's Background

For a background reference to the abstract concepts detailed in this
section, see @CondSysPaper{}.  The details of that paper are not binding on
this document, but may be helpful in establishing a conceptual basis for
understanding this material.


@node condition
@heading condition (Condition Type)
@syindex condition
@cindex condition


@reviewer{Barrett: I think CONDITION-RESTARTS is not fully integrated.}

@subsubheading Class Precedence List:
@code{condition},
@code{t}

@subsubheading Description:

All types of @term{conditions}, whether error or
non-error, must inherit from this @term{type}.

No additional @term{subtype} relationships among the specified @subtypesof{condition}
are allowed, except when explicitly mentioned in the text; however
implementations are permitted to introduce additional @term{types}
and one of these @term{types} can be a @term{subtype} of any
number of the @subtypesof{condition}.

Whether a user-defined @term{condition} @term{type} has @term{slots} 
that are accessible by @term{with-slots} is @term{implementation-dependent}.
Furthermore, even in an @term{implementation} 
in which user-defined @term{condition} @term{types} would have @term{slots}, 
it is @term{implementation-dependent} whether any @term{condition}
@term{types} defined in this document have such @term{slots} or, 
if they do, what their @term{names} might be;
only the reader functions documented by this specification may be relied
upon by portable code.

@term{Conforming code} must observe the following restrictions related to
@term{conditions}:


@itemize @bullet{}
@item
@code{define-condition}, not @code{defclass}, must be used
to define new @term{condition} @term{types}.

@item
@code{make-condition}, not @code{make-instance}, must be used to
create @term{condition} @term{objects} explicitly.

@item
The @kwd{report} option of @code{define-condition}, not @code{defmethod}
for @code{print-object}, must be used to define a condition reporter.

@item
@code{slot-value}, @code{slot-boundp}, @code{slot-makunbound},
and @code{with-slots} must not be used on @term{condition} @term{objects}.
Instead, the appropriate accessor functions (defined by @code{define-condition})
should be used.
@end itemize



@node warning
@heading warning (Condition Type)
@syindex warning
@cindex warning


@subsubheading Class Precedence List:
@code{warning},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{warning} consists of all types of warnings.

@subsubheading See Also:

@ref{style-warning}


@node style-warning
@heading style-warning (Condition Type)
@syindex style-warning
@cindex style-warning


@subsubheading Class Precedence List:
@code{style-warning},
@code{warning},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{style-warning} includes those @term{conditions} 
that represent @term{situations} involving @term{code} 
that is @term{conforming code} but that is nevertheless 
considered to be faulty or substandard.

@subsubheading See Also:

@ref{muffle-warning}

@subsubheading Notes:

An @term{implementation} might signal such a @term{condition}
if it encounters @term{code}
that uses deprecated features 
or that appears unaesthetic or inefficient.

An `unused variable' warning must be @oftype{style-warning}.

In general, the question of whether @term{code} is faulty or substandard
is a subjective decision to be made by the facility processing that @term{code}.
The intent is that whenever such a facility wishes to complain about
@term{code} on such subjective grounds, it should use this 
@term{condition} @term{type} so that any clients who wish to redirect or
muffle superfluous warnings can do so without risking that they will be
redirecting or muffling other, more serious warnings.


@node serious-condition
@heading serious-condition (Condition Type)
@syindex serious-condition
@cindex serious-condition


@subsubheading Class Precedence List:
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

All @term{conditions} serious enough to require interactive intervention 
if not handled should inherit from @thetype{serious-condition}.
This condition type is provided
primarily so that it may be included as
a @term{superclass} of other @term{condition} @term{types};
it is not intended to be signaled directly.

@subsubheading Notes:

Signaling a @term{serious condition} does not itself force entry into
the debugger.   However, except in the unusual situation where the
programmer can assure that no harm will come from failing to
@term{handle} a @term{serious condition}, such a @term{condition} is
usually signaled with @code{error} rather than @code{signal} in
order to assure that the program does not continue without
@term{handling} the @term{condition}.  (And conversely, it is
conventional to use @code{signal} rather than @code{error} to signal
conditions which are not @term{serious conditions}, since normally the
failure to handle a non-serious condition is not reason enough for the
debugger to be entered.)


@node error (Condition Type)
@heading error (Condition Type)
@syindex error
@cindex error


@subsubheading Class Precedence List:
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{error} consists of all @term{conditions} that represent @term{errors}.


@node cell-error
@heading cell-error (Condition Type)
@syindex cell-error
@cindex cell-error


@subsubheading Class Precedence List:
@code{cell-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{cell-error} consists of error conditions that occur during 
a location @term{access}.   The name of the offending cell is initialized by 
@theinitkeyarg{name} to @code{make-condition},
and is @term{accessed} by @thefunction{cell-error-name}.

@subsubheading See Also:

@ref{cell-error-name}


@node cell-error-name
@heading cell-error-name (Function)
@syindex cell-error-name
@cindex cell-error-name



@subsubheading Syntax:

@DefunWithValues{cell-error-name, condition, name}

@subsubheading Arguments and Values:

@param{condition}---a @term{condition} @oftype{cell-error}.

@param{name}---an @term{object}.

@subsubheading Description:

Returns the @term{name} of the offending cell involved in the @term{situation}
represented by @param{condition}.

The nature of the result depends on the specific @term{type} of @param{condition}.
For example,
if the @param{condition} is @oftype{unbound-variable}, the result is
the @term{name} of the @term{unbound variable} which was being @term{accessed},
if the @param{condition} is @oftype{undefined-function}, this is
the @term{name} of the @term{undefined function} which was being @term{accessed},
and if the @param{condition} is @oftype{unbound-slot}, this is
the @term{name} of the @term{slot} which was being @term{accessed}.

@subsubheading See Also:

@ref{cell-error},
@ref{unbound-slot},
@ref{unbound-variable},
@ref{undefined-function},
@ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}



@node parse-error
@heading parse-error (Condition Type)
@syindex parse-error
@cindex parse-error



@subsubheading Class Precedence List:

@code{parse-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{parse-error} consists of 
error conditions that are related to parsing.

@subsubheading See Also:

@ref{parse-namestring},
@ref{reader-error}



@node storage-condition
@heading storage-condition (Condition Type)
@syindex storage-condition
@cindex storage-condition


@subsubheading Class Precedence List:
@code{storage-condition},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{storage-condition} consists of serious conditions that 
relate to problems with memory management that are potentially due to
@term{implementation-dependent} limits rather than semantic errors
in @term{conforming programs}, and that typically warrant entry to the 
debugger if not handled.  Depending on the details of the @term{implementation}, 
these might include such problems as 
stack overflow,
memory region overflow, 
and
storage exhausted.

@subsubheading Notes:

While some @clisp{}@spc{}operations might signal @term{storage-condition}
because they are defined to create @term{objects},
it is unspecified whether operations that are not defined to create
@term{objects} create them anyway 
and so might also signal @code{storage-condition}.
Likewise, the evaluator itself might create @term{objects}
and so might signal @code{storage-condition}.
(The natural assumption might be that such 
@term{object} creation is naturally inefficient, 
but even that is @term{implementation-dependent}.)
In general, the entire question of how storage allocation is done is
@term{implementation-dependent}, 
and so any operation might signal @code{storage-condition} at any time.
Because such a @term{condition} is indicative of a limitation 
of the @term{implementation} 
or of the @term{image}
rather than an error in a @term{program},
@term{objects} @oftype{storage-condition} are not @oftype{error}.


@node assert
@heading assert (Macro)
@syindex assert
@cindex assert


@subsubheading Syntax:

@DefmacWithValuesNewline{assert, test-form @brac{@paren{@starparam{place}} @brac{datum-form @starparam{argument-form}}}, @nil{}}

@subsubheading Arguments and Values:

@param{test-form}---a @term{form}; always evaluated.

@param{place}---a @term{place}; evaluated if an error is signaled.

@param{datum-form}---a @term{form} that evaluates to a @param{datum}.
Evaluated each time an error is to be signaled, 
or not at all if no error is to be signaled.

@param{argument-form}---a @term{form} that evaluates to an @param{argument}.
Evaluated each time an error is to be signaled, 
or not at all if no error is to be signaled.

@param{datum}, @param{arguments}---@term{designators} for a @term{condition} 
of default type @code{error}.  (These @term{designators} are the
result of evaluating @param{datum-form} and each of the @param{argument-forms}.)

@subsubheading Description:

@code{assert} assures that @param{test-form} evaluates to @term{true}.
If @param{test-form} evaluates to @term{false}, @code{assert} signals a
@term{correctable} @term{error} (denoted by @param{datum} and @param{arguments}).
Continuing from this error using @therestart{continue} makes it possible
for the user to alter the values of the @param{places} before
@code{assert} evaluates @param{test-form} again.
If the value of @param{test-form} is @term{non-nil},
@code{assert} returns @nil{}.

The @param{places} are @term{generalized references} to data
upon which @param{test-form} depends, 
whose values can be changed by the user in attempting to correct the error.
@term{Subforms} of each @param{place} are only evaluated if an error is signaled, 
and might be re-evaluated if the error is re-signaled (after continuing without
actually fixing the problem).
The order of evaluation of the @param{places} is not specified;
see @ref{GenRefSubFormEval, Section 5.1.1.1 (Evaluation of Subforms to Places)}.
@cindex order of evaluation
@cindex evaluation order
If a @param{place} @term{form} is supplied that produces more values than there
are store variables, the extra values are ignored. If the supplied 
@term{form} produces fewer values than there are store variables, 
the missing values are set to @nil{}.

@subsubheading Examples:
@lisp
 (setq x (make-array '(3 5) :initial-element 3))
@EV{} #2A((3 3 3 3 3) (3 3 3 3 3) (3 3 3 3 3))
 (setq y (make-array '(3 5) :initial-element 7))
@EV{} #2A((7 7 7 7 7) (7 7 7 7 7) (7 7 7 7 7))
 (defun matrix-multiply (a b)
   (let ((*print-array* nil))
     (assert (and (= (array-rank a) (array-rank b) 2)
                  (= (array-dimension a 1) (array-dimension b 0)))
             (a b)
             "Cannot multiply ~S by ~S." a b)
            (really-matrix-multiply a b))) @EV{} MATRIX-MULTIPLY
 (matrix-multiply x y)
@OUT{} Correctable error in MATRIX-MULTIPLY: 
@OUT{} Cannot multiply #<ARRAY ...> by #<ARRAY ...>.
@OUT{} Restart options:
@OUT{}  1: You will be prompted for one or more new values.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:continue 1}
@OUT{} Value for A: @IN{x}
@OUT{} Value for B: @IN{(make-array '(5 3) :initial-element 6)}
@EV{} #2A((54 54 54 54 54)
       (54 54 54 54 54)
       (54 54 54 54 54)
       (54 54 54 54 54)
       (54 54 54 54 54))
@end lisp


@lisp
 (defun double-safely (x) (assert (numberp x) (x)) (+ x x))
 (double-safely 4) 
@EV{} 8
 
 (double-safely t)
@OUT{} Correctable error in DOUBLE-SAFELY: The value of (NUMBERP X) must be non-NIL.
@OUT{} Restart options:
@OUT{}  1: You will be prompted for one or more new values.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:continue 1}
@OUT{} Value for X: @IN{7}
@EV{} 14
@end lisp


@subsubheading Affected By:

@code{*break-on-signals*}

The set of active @term{condition handlers}.

@subsubheading See Also:

@ref{check-type}, @ref{error (Function)}, @ref{Generalized Reference, Section 5.1 (Generalized Reference)}

@subsubheading Notes:

The debugger need not include the @param{test-form} in the error message,
and the @param{places} should not be included in the message, but they
should be made available for the user's perusal.  If the user gives the
``continue'' command, the values of any of the references can be altered.
The details of this depend on the implementation's style of user interface.

@node error (Function)
@heading error (Function)
@syindex error
@cindex error


@subsubheading Syntax:

@DefunNoReturn{error, datum @rest{} arguments}

@subsubheading Arguments and Values:

@param{datum}, @param{arguments}---@term{designators} for a @term{condition} 
of default type @code{simple-error}.

@subsubheading Description:

@code{error} effectively invokes @code{signal} on the denoted @term{condition}.

If the @term{condition} is not handled, @f{(invoke-debugger @i{condition})} is done.  
As a consequence of calling @code{invoke-debugger}, @code{error} 
cannot directly return; the only exit from @code{error}
can come by non-local transfer of control in a handler or by use of
an interactive debugging command.

@subsubheading Examples:

@lisp
 (defun factorial (x)
   (cond ((or (not (typep x 'integer)) (minusp x))
          (error "~S is not a valid argument to FACTORIAL." x))
         ((zerop x) 1)
         (t (* x (factorial (- x 1))))))
@EV{} FACTORIAL
(factorial 20)
@EV{} 2432902008176640000
(factorial -1)
@OUT{} Error: -1 is not a valid argument to FACTORIAL.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Return to Lisp Toplevel.
@OUT{} Debug> 
@end lisp


@lisp
 (setq a 'fred)
@EV{} FRED
 (if (numberp a) (1+ a) (error "~S is not a number." A))
@OUT{} Error: FRED is not a number.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Return to Lisp Toplevel.
@OUT{} Debug> @IN{:Continue 1}
@OUT{} Return to Lisp Toplevel.
 
 (define-condition not-a-number (error) 
                   ((argument :reader not-a-number-argument :initarg :argument))
   (:report (lambda (condition stream)
              (format stream "~S is not a number."
                      (not-a-number-argument condition)))))
@EV{} NOT-A-NUMBER
 
 (if (numberp a) (1+ a) (error 'not-a-number :argument a))
@OUT{} Error: FRED is not a number.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Return to Lisp Toplevel.
@OUT{} Debug> @IN{:Continue 1}
@OUT{} Return to Lisp Toplevel.
@end lisp


@subsubheading Side Effects:

@term{Handlers} for the specified condition, if any, are invoked 
and might have side effects.
Program execution might stop, and the debugger might be entered.

@subsubheading Affected By:

Existing handler bindings.

@code{*break-on-signals*}

@Checktypes{@param{datum} and @param{arguments}, @term{designators} for a @term{condition}}

@subsubheading See Also:

@ref{cerror}, @ref{signal}, @ref{format}, 
@ref{ignore-errors}, @ref{*break-on-signals*}, 
@ref{handler-bind}, @ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}

@subsubheading Notes:

Some implementations may provide debugger
commands for interactively returning from individual stack frames.
However, it should be possible for the programmer to feel confident
about writing code like:

@lisp
 (defun wargames:no-win-scenario ()
   (if (error "pushing the button would be stupid."))
   (push-the-button))
@end lisp

In this scenario, there should be no chance that
@code{error} will return
and the button will get pushed.

While the meaning of this program is clear and it might be proven `safe'
by a formal theorem prover, such a proof is no guarantee that the
program is safe to execute.  Compilers have been known to have bugs,
computers to have signal glitches, and human beings to manually
intervene in ways that are not always possible to predict.  Those kinds
of errors, while beyond the scope of the condition system to formally
model, are not beyond the scope of things that should seriously be
considered when writing code that could have the kinds of sweeping
effects hinted at by this example.


@node cerror
@heading cerror (Function)
@syindex cerror
@cindex cerror


@subsubheading Syntax:

@DefunWithValues{cerror, continue-format-control datum @rest{} arguments, @nil{}}

@subsubheading Arguments and Values:

@param{Continue-format-control}---a @term{format control}.

@reviewer{Barmar: What is continue-format-control used for??}

@param{datum}, @param{arguments}---@term{designators} for a @term{condition} 
of default type @code{simple-error}.

@subsubheading Description:

@code{cerror} effectively invokes @code{error} on the
@term{condition} named by @param{datum}.  As with any function that
implicitly calls @code{error}, if the @term{condition} is not handled,
@f{(invoke-debugger @i{condition})} is executed.  While signaling is going on,
and while in the debugger if it is reached, it is possible to continue
code execution (@ie{} to return from @code{cerror}) using @therestart{continue}.

If @param{datum} is a @term{condition}, @param{arguments} can be supplied,
but are used only in conjunction with the @param{continue-format-control}.

@subsubheading Examples:

@lisp
 (defun real-sqrt (n)
   (when (minusp n)
     (setq n (- n))
     (cerror "Return sqrt(~D) instead." "Tried to take sqrt(-~D)." n))
   (sqrt n))

 (real-sqrt 4)
@EV{} 2.0

 (real-sqrt -9)
@OUT{} Correctable error in REAL-SQRT: Tried to take sqrt(-9).
@OUT{} Restart options:
@OUT{}  1: Return sqrt(9) instead.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:continue 1}
@EV{} 3.0
 
 (define-condition not-a-number (error)
   ((argument :reader not-a-number-argument :initarg :argument))
   (:report (lambda (condition stream)
              (format stream "~S is not a number." 
                      (not-a-number-argument condition)))))
 
 (defun assure-number (n)
   (loop (when (numberp n) (return n))
         (cerror "Enter a number."
                 'not-a-number :argument n)
         (format t "~&Type a number: ")
         (setq n (read))
         (fresh-line)))

 (assure-number 'a)
@OUT{} Correctable error in ASSURE-NUMBER: A is not a number.
@OUT{} Restart options:
@OUT{}  1: Enter a number.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:continue 1}
@OUT{} Type a number: @IN{1/2}
@EV{} 1/2

 (defun assure-large-number (n)
   (loop (when (and (numberp n) (> n 73)) (return n))
         (cerror "Enter a number~:[~; a bit larger than ~D~]."
                 "~*~A is not a large number." 
                 (numberp n) n)
         (format t "~&Type a large number: ")
         (setq n (read))
         (fresh-line)))
 
 (assure-large-number 10000)
@EV{} 10000

 (assure-large-number 'a)
@OUT{} Correctable error in ASSURE-LARGE-NUMBER: A is not a large number.
@OUT{} Restart options:
@OUT{}  1: Enter a number.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:continue 1}
@OUT{} Type a large number: @IN{88}
@EV{} 88

 (assure-large-number 37)
@OUT{} Correctable error in ASSURE-LARGE-NUMBER: 37 is not a large number.
@OUT{} Restart options:
@OUT{}  1: Enter a number a bit larger than 37.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:continue 1}
@OUT{} Type a large number: @IN{259}
@EV{} 259
 
 (define-condition not-a-large-number (error)
   ((argument :reader not-a-large-number-argument :initarg :argument))
   (:report (lambda (condition stream)
              (format stream "~S is not a large number." 
                      (not-a-large-number-argument condition)))))
 
 (defun assure-large-number (n)
   (loop (when (and (numberp n) (> n 73)) (return n))
         (cerror "Enter a number~3*~:[~; a bit larger than ~*~D~]."
                 'not-a-large-number
                 :argument n 
                 :ignore (numberp n)
                 :ignore n
                 :allow-other-keys t)
         (format t "~&Type a large number: ")
         (setq n (read))
         (fresh-line)))
 

 (assure-large-number 'a)
@OUT{} Correctable error in ASSURE-LARGE-NUMBER: A is not a large number.
@OUT{} Restart options:
@OUT{}  1: Enter a number.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:continue 1}
@OUT{} Type a large number: @IN{88}
@EV{} 88
 
 (assure-large-number 37)
@OUT{} Correctable error in ASSURE-LARGE-NUMBER: A is not a large number.
@OUT{} Restart options:
@OUT{}  1: Enter a number a bit larger than 37.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:continue 1}
@OUT{} Type a large number: @IN{259}
@EV{} 259
@end lisp


@subsubheading Affected By:

@code{*break-on-signals*}.

Existing handler bindings.

@subsubheading See Also:

@ref{error (Function)}, @ref{format}, @ref{handler-bind},
@ref{*break-on-signals*}, @ref{simple-type-error}

@subsubheading Notes:

If @param{datum} is a @term{condition} @term{type} rather than a 
@term{string}, the @code{format} directive @tt{ @tild{}*} may be especially
useful in the @param{continue-format-control} in order to ignore the
@term{keywords} in the @term{initialization argument list}.  For example:

@lisp
(cerror "enter a new value to replace ~*~s" 
        'not-a-number
        :argument a)
@end lisp



@node check-type
@heading check-type (Macro)
@syindex check-type
@cindex check-type


@subsubheading Syntax:

@DefmacWithValues{check-type, place typespec @brac{@param{string}}, @nil{}}

@subsubheading Arguments and Values:

@param{place}---a @term{place}.

@param{typespec}---a @term{type specifier}.

@param{string}---a @term{string}; @eval{}. 

@subsubheading Description:

@code{check-type} signals a @term{correctable} @term{error} 
@oftype{type-error} if the contents of @param{place} are not 
of the type @param{typespec}.

@code{check-type} can return only if @therestart{store-value} is invoked,
either explicitly from a handler 
or implicitly as one of the options offered by the debugger.
If @therestart{store-value} is invoked,
@code{check-type} stores the new value 
that is the argument to the @term{restart} invocation 
(or that is prompted for interactively by the debugger)
in @param{place} and starts over, 
checking the type of the new value
and signaling another error if it is still not of the desired @term{type}.

The first time @param{place} is @term{evaluated}, 
it is @term{evaluated} by normal evaluation rules.
It is later @term{evaluated} as a @term{place} 
if the type check fails and @therestart{store-value} is used;
see @ref{GenRefSubFormEval, Section 5.1.1.1 (Evaluation of Subforms to Places)}.

@term{string} should be an English description of the type, 
starting with an indefinite article (``a'' or ``an'').
If @term{string} is not supplied,
it is computed automatically from @param{typespec}.
The automatically generated message mentions
@param{place},
its contents,
and the desired type.
An implementation may choose to generate 
a somewhat differently worded error message 
if it recognizes that @param{place} is of a particular form, 
such as one of the arguments to the function that called @code{check-type}.
@term{string} is allowed because some applications of @code{check-type} 
may require a more specific description of what is wanted
than can be generated automatically from @param{typespec}.

@subsubheading Examples:

@lisp
 (setq aardvarks '(sam harry fred))
@EV{} (SAM HARRY FRED)
 (check-type aardvarks (array * (3)))
@OUT{} Error: The value of AARDVARKS, (SAM HARRY FRED),
@OUT{}        is not a 3-long array.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Specify a value to use instead.
@OUT{}  2: Return to Lisp Toplevel.
@OUT{} Debug> @IN{:CONTINUE 1}
@OUT{} Use Value: @IN{#(SAM FRED HARRY)}
@EV{} NIL
 aardvarks
@EV{} #<ARRAY-T-3 13571>
 (map 'list #'identity aardvarks)
@EV{} (SAM FRED HARRY)
 (setq aardvark-count 'foo)
@EV{} FOO
 (check-type aardvark-count (integer 0 *) "A positive integer")
@OUT{} Error: The value of AARDVARK-COUNT, FOO, is not a positive integer.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Specify a value to use instead.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:CONTINUE 2}
@end lisp


@lisp
 (defmacro define-adder (name amount)
   (check-type name (and symbol (not null)) "a name for an adder function")
   (check-type amount integer)
   `(defun ,name (x) (+ x ,amount)))
  
 (macroexpand '(define-adder add3 3))
@EV{} (defun add3 (x) (+ x 3))
 
 (macroexpand '(define-adder 7 7))
@OUT{} Error: The value of NAME, 7, is not a name for an adder function.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Specify a value to use instead.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:Continue 1}
@OUT{} Specify a value to use instead.
@OUT{} Type a form to be evaluated and used instead: @IN{'ADD7}
@EV{} (defun add7 (x) (+ x 7))
 
 (macroexpand '(define-adder add5 something))
@OUT{} Error: The value of AMOUNT, SOMETHING, is not an integer.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Specify a value to use instead.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:Continue 1}
@OUT{} Type a form to be evaluated and used instead: @IN{5}
@EV{} (defun add5 (x) (+ x 5))
 
@end lisp


Control is transferred to a handler.

@subsubheading Side Effects:

The debugger might be entered.

@subsubheading Affected By:

@code{*break-on-signals*}

The implementation.

@subsubheading See Also:

@ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}

@subsubheading Notes:

@lisp
 (check-type @param{place} @param{typespec})
 @EQ{} (assert (typep @param{place} '@param{typespec}) (@param{place})
            'type-error :datum @param{place} :expected-type '@param{typespec})
@end lisp



@node simple-error
@heading simple-error (Condition Type)
@syindex simple-error
@cindex simple-error


@subsubheading Class Precedence List:

@code{simple-error},
@code{simple-condition},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{simple-error} consists of @term{conditions} that
are signaled by @code{error} or @code{cerror} when a
@term{format control}
is supplied as the function's first argument.


@node invalid-method-error
@heading invalid-method-error (Function)
@syindex invalid-method-error
@cindex invalid-method-error


@subsubheading Syntax:

@DefunWithValues{invalid-method-error, method format-control @rest{} args, @term{implementation-dependent}}

@subsubheading Arguments and Values:

@param{method}---a @term{method}.

@param{format-control}---a @term{format control}.

@param{args}---@term{format arguments} for the @param{format-control}.

@subsubheading Description:

@Thefunction{invalid-method-error} is used to signal an error @oftype{error}
when there is an applicable @term{method} whose @term{qualifiers} are not valid for
the method combination type.  The error message is constructed by
using the @param{format-control} suitable for @code{format}
and any @param{args} to it.  Because an
implementation may need to add additional contextual information to
the error message, @code{invalid-method-error} should be called only
within the dynamic extent of a method combination function.

@Thefunction{invalid-method-error} is called automatically when a
@term{method} fails to satisfy every @term{qualifier} pattern and predicate in a
@code{define-method-combination} @term{form}.  A method combination function
that imposes additional restrictions should call 
@code{invalid-method-error} explicitly if it encounters a @term{method} 
it cannot accept.

Whether @code{invalid-method-error} returns to its caller or exits via
@code{throw} is @term{implementation-dependent}.

@subsubheading Side Effects:

The debugger might be entered.

@subsubheading Affected By:

@code{*break-on-signals*}

@subsubheading See Also:

@ref{define-method-combination}


@node method-combination-error
@heading method-combination-error (Function)
@syindex method-combination-error
@cindex method-combination-error


@subsubheading Syntax:

@DefunWithValues{method-combination-error, format-control @rest{} args, @term{implementation-dependent}}

@subsubheading Arguments and Values:

@param{format-control}---a @term{format control}.

@param{args}---@term{format arguments} for @param{format-control}.

@subsubheading Description:

@Thefunction{method-combination-error} is used to signal an error
in method combination.  

The error message is constructed by using a @param{format-control} suitable
for @code{format} and any @param{args} to it.  Because an implementation may
need to add additional contextual information to the error message,
@code{method-combination-error} should be called only within the
dynamic extent of a method combination function.

Whether @code{method-combination-error} returns to its caller or exits
via @code{throw} is @term{implementation-dependent}.

@subsubheading Side Effects:

The debugger might be entered.

@subsubheading Affected By:

@code{*break-on-signals*}

@subsubheading See Also:

@ref{define-method-combination}


@node signal
@heading signal (Function)
@syindex signal
@cindex signal


@subsubheading Syntax:

@DefunWithValues{signal, datum @rest{} arguments, @nil{}}

@subsubheading Arguments and Values:

@param{datum}, @param{arguments}---@term{designators} for a @term{condition} 
of default type @code{simple-condition}.

@subsubheading Description:

@term{Signals} the @term{condition} denoted by the given @param{datum} and @param{arguments}.
If the @term{condition} is not handled, @code{signal} returns @nil{}.

@subsubheading Examples:

@lisp
 (defun handle-division-conditions (condition)
   (format t "Considering condition for division condition handling~%")
   (when (and (typep condition 'arithmetic-error)
              (eq '/ (arithmetic-error-operation condition)))
     (invoke-debugger condition)))
HANDLE-DIVISION-CONDITIONS
 (defun handle-other-arithmetic-errors (condition)
   (format t "Considering condition for arithmetic condition handling~%")
   (when (typep condition 'arithmetic-error)
     (abort)))
HANDLE-OTHER-ARITHMETIC-ERRORS
 (define-condition a-condition-with-no-handler (condition) ())
A-CONDITION-WITH-NO-HANDLER
 (signal 'a-condition-with-no-handler)
NIL
 (handler-bind ((condition #'handle-division-conditions)
                  (condition #'handle-other-arithmetic-errors))
   (signal 'a-condition-with-no-handler))
Considering condition for division condition handling
Considering condition for arithmetic condition handling
NIL
 (handler-bind ((arithmetic-error #'handle-division-conditions)
                  (arithmetic-error #'handle-other-arithmetic-errors))
   (signal 'arithmetic-error :operation '* :operands '(1.2 b)))
Considering condition for division condition handling
Considering condition for arithmetic condition handling
Back to Lisp Toplevel
@end lisp


@subsubheading Side Effects:

The debugger might be entered due to @code{*break-on-signals*}.

Handlers for the condition being signaled might transfer control.

@subsubheading Affected By:

Existing handler bindings.

@code{*break-on-signals*}

@subsubheading See Also:

@ref{*break-on-signals*},
@ref{error (Function)},
@ref{simple-condition},
@ref{Signaling and Handling Conditions, Section 9.1.4 (Signaling and Handling Conditions)}

@subsubheading Notes:

If @f{(typep @param{datum} *break-on-signals*)} @term{yields} @term{true},
the debugger is entered prior to beginning the signaling process.  
@Therestart{continue} can be used to continue with the signaling process.
This is also true for all other @term{functions} and @term{macros} that
should, might, or must @term{signal} @term{conditions}.


@node simple-condition
@heading simple-condition (Condition Type)
@syindex simple-condition
@cindex simple-condition


@subsubheading Class Precedence List:
@code{simple-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{simple-condition} represents @term{conditions} that are
signaled by @code{signal} whenever a @param{format-control} is
supplied as the function's first argument.
The @term{format control} and @term{format arguments} are initialized with 
@theinitkeyargs{format-control} 
and @kwd{format-arguments} to @code{make-condition}, and are
@term{accessed} by the @term{functions}
@code{simple-condition-format-control}
and @code{simple-condition-format-arguments}.
If format arguments are not supplied to @code{make-condition},
@nil{}@spc{}is used as a default.

@subsubheading See Also:

@ref{simple-condition-format-control},
@ref{simple-condition-format-arguments}


@node simple-condition-format-control; simple-condition-format-arguments
@heading simple-condition-format-control, simple-condition-format-arguments (Function)
@syindex simple-condition-format-control
@cindex simple-condition-format-control
@syindex simple-condition-format-arguments
@cindex simple-condition-format-arguments
@anchor{simple-condition-format-control}
@anchor{simple-condition-format-arguments}



@subsubheading Syntax:

@DefunWithValues{simple-condition-format-control, condition, format-control}
@DefunWithValues{simple-condition-format-arguments, condition, format-arguments}

@subsubheading Arguments and Values:

@param{condition}---a @term{condition} of @term{type} @code{simple-condition}.

@param{format-control}---a @term{format control}.

@param{format-arguments}---a @term{list}.

@subsubheading Description:

@code{simple-condition-format-control} returns the @term{format control} needed to 
process the @param{condition}'s @term{format arguments}.

@code{simple-condition-format-arguments} returns a @term{list} of @term{format arguments} 
needed to process the @param{condition}'s @term{format control}.

@subsubheading Examples:

@lisp
 (setq foo (make-condition 'simple-condition
                          :format-control "Hi ~S"
                          :format-arguments '(ho)))
@EV{} #<SIMPLE-CONDITION 26223553>
 (apply #'format nil (simple-condition-format-control foo)
                     (simple-condition-format-arguments foo))
@EV{} "Hi HO"
@end lisp


@subsubheading See Also:

@ref{simple-condition},
@ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}



@node warn
@heading warn (Function)
@syindex warn
@cindex warn


@subsubheading Syntax:

@DefunWithValues{warn, datum @rest{} arguments, @nil{}}

@subsubheading Arguments and Values:

@param{datum}, @param{arguments}---@term{designators} for a @term{condition} 
of default type @code{simple-warning}.

@subsubheading Description:

@term{Signals} a @term{condition} @oftype{warning}.
If the @term{condition} is not @term{handled},
reports the @term{condition} to @term{error output}.

The precise mechanism for warning is as follows:



@table @asis

@item @id{@bf{The warning condition is signaled}}


While the @code{warning} @term{condition} is being signaled,
@therestart{muffle-warning} is established for use by a @term{handler}.
If invoked, this @term{restart} bypasses further action by @code{warn},
which in turn causes @code{warn} to immediately return @nil{}.

@item @id{@bf{If no handler for the warning condition is found}}


If no handlers for the warning condition are found,
or if all such handlers decline,
then the @term{condition} is reported to @term{error output}
by @code{warn} in an @term{implementation-dependent} format.

@item @id{@bf{@nil{}@spc{}is returned}}


The value returned by @code{warn} if it returns is @nil{}.
@end table


@subsubheading Examples:

@lisp
  (defun foo (x)
    (let ((result (* x 2)))
      (if (not (typep result 'fixnum))
          (warn "You're using very big numbers."))
      result))
@EV{} FOO
 
  (foo 3)
@EV{} 6
 
  (foo most-positive-fixnum)
@OUT{} Warning: You're using very big numbers.
@EV{} 4294967294
 
  (setq *break-on-signals* t)
@EV{} T
 
  (foo most-positive-fixnum)
@OUT{} Break: Caveat emptor.
@OUT{} To continue, type :CONTINUE followed by an option number.
@OUT{}  1: Return from Break.
@OUT{}  2: Abort to Lisp Toplevel.
@OUT{} Debug> :continue 1
@OUT{} Warning: You're using very big numbers.
@EV{} 4294967294
@end lisp


@subsubheading Side Effects:

A warning is issued.  The debugger might be entered.

@subsubheading Affected By:

Existing handler bindings.

@code{*break-on-signals*},
@code{*error-output*}.         

@subsubheading Exceptional Situations:

If @param{datum} is a @term{condition}
and if the @term{condition} is not @oftype{warning},
or @param{arguments} is @term{non-nil}, an error @oftype{type-error} is signaled.

If @param{datum} is a condition type, 
the result of @tt{(apply #'make-condition datum arguments)} 
must be @oftype{warning} or an error @oftype{type-error} is signaled.

@subsubheading See Also:

@ref{*break-on-signals*},
@ref{muffle-warning},
@ref{signal}


@node simple-warning
@heading simple-warning (Condition Type)
@syindex simple-warning
@cindex simple-warning


@subsubheading Class Precedence List:

@code{simple-warning},
@code{simple-condition},
@code{warning},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{simple-warning} represents @term{conditions} that 
are signaled by @code{warn} whenever a 
@term{format control} 
is supplied as the function's first argument.


@node invoke-debugger
@heading invoke-debugger (Function)
@syindex invoke-debugger
@cindex invoke-debugger


@subsubheading Syntax:

@DefunNoReturn{invoke-debugger, condition}

@subsubheading Arguments and Values:

@param{condition}---a @term{condition} @term{object}.

@subsubheading Description:

@code{invoke-debugger} attempts to enter the debugger with @param{condition}.

If @code{*debugger-hook*} is not @nil{}, it should be a @term{function} 
(or the name of a @term{function}) to be called prior to entry to 
the standard debugger.  The @term{function} is called with
@code{*debugger-hook*} bound to @nil{}, and the @term{function} 
must accept two arguments: the @param{condition} 
and @thevalueof{*debugger-hook*} prior to binding it to @nil{}. 
If the @term{function} returns normally,
the standard debugger is entered.

The standard debugger never directly returns.  Return can occur only by a
non-local transfer of control, such as the use of a restart function.

@subsubheading Examples:

@lisp
 (ignore-errors ;Normally, this would suppress debugger entry
   (handler-bind ((error #'invoke-debugger)) ;But this forces debugger entry
     (error "Foo.")))
Debug: Foo.
To continue, type :CONTINUE followed by an option number:
 1: Return to Lisp Toplevel.
Debug>
@end lisp



@subsubheading Side Effects:

@code{*debugger-hook*} is bound to @nil{},
program execution is discontinued,
and the debugger is entered.

@subsubheading Affected By:

@code{*debug-io*} and @code{*debugger-hook*}.

@subsubheading See Also:

@ref{error (Function)}, @ref{break}


@node break
@heading break (Function)
@syindex break
@cindex break


@subsubheading Syntax:

@DefunWithValues{break, @opt{} format-control @rest{} format-arguments, @nil{}}

@subsubheading Arguments and Values:

@param{format-control}---a @term{format control}.
@Default{@term{implementation-dependent}}

@param{format-arguments}---@term{format arguments} for the @param{format-control}.

@subsubheading Description:

@code{break} @term{formats} @param{format-control} and @param{format-arguments}
and then goes directly into the debugger without allowing any possibility of
interception by programmed error-handling facilities.

If @therestart{continue} is used while in the debugger,
@code{break} immediately returns @nil{}@spc{}without taking any unusual recovery action.

@code{break} binds @code{*debugger-hook*} to @nil{}@spc{}
before attempting to enter the debugger.

@subsubheading Examples:

@lisp
 (break "You got here with arguments: ~:S." '(FOO 37 A))
@OUT{} BREAK: You got here with these arguments: FOO, 37, A.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Return from BREAK.
@OUT{}  2: Top level.
@OUT{} Debug> :CONTINUE 1
@OUT{} Return from BREAK.
@EV{} NIL
 
@end lisp


@subsubheading Side Effects:

The debugger is entered.

@subsubheading Affected By:

@code{*debug-io*}.

@subsubheading See Also:

@ref{error (Function)}, @ref{invoke-debugger}.

@subsubheading Notes:

@code{break} is used as a way of inserting temporary debugging
``breakpoints'' in a program, not as a way of signaling errors.  
For this reason, @code{break} does not take the @param{continue-format-control}
@term{argument} that @code{cerror} takes.
This and the lack of any possibility of interception by
@term{condition} @term{handling} are the only program-visible 
differences between @code{break} and @code{cerror}.

The user interface aspects of @code{break} and @code{cerror} are
permitted to vary more widely, in order to accomodate the interface
needs of the @term{implementation}. For example, it is permissible for a
@term{Lisp read-eval-print loop} to be entered by @code{break} rather
than the conventional debugger.

@code{break} could be defined by:

@lisp
 (defun break (&optional (format-control "Break") &rest format-arguments)
   (with-simple-restart (continue "Return from BREAK.")
     (let ((*debugger-hook* nil))
       (invoke-debugger
           (make-condition 'simple-condition
                           :format-control format-control
                           :format-arguments format-arguments))))
   nil)
@end lisp



@node *debugger-hook*
@heading *debugger-hook* (Variable)
@syindex *debugger-hook*
@cindex *debugger-hook*


@subsubheading Value Type:

a @term{designator} for a @term{function} of two @term{arguments}
(a @term{condition} and @thevalueof{*debugger-hook*} at the time 
the debugger was entered),
or @nil{}.

@subsubheading Initial Value:

@nil{}.

@subsubheading Description:

When @thevalueof{*debugger-hook*} is @term{non-nil}, it is called prior to
normal entry into the debugger, either due to a call to @code{invoke-debugger} 
or due to automatic entry into the debugger from a call to @code{error} 
or @code{cerror} with a condition that is not handled.  
The @term{function} may either handle the @term{condition}
(transfer control) or return normally (allowing the standard debugger to run).
To minimize recursive errors while debugging,
@code{*debugger-hook*} is bound to @nil{}@spc{}by @code{invoke-debugger} 
prior to calling the @term{function}.

@subsubheading Examples:

@lisp
 (defun one-of (choices &optional (prompt "Choice"))
   (let ((n (length choices)) (i))
     (do ((c choices (cdr c)) (i 1 (+ i 1)))
         ((null c))
       (format t "~&[~D] ~A~%" i (car c)))
     (do () ((typep i `(integer 1 ,n)))
       (format t "~&~A: " prompt)
       (setq i (read))
       (fresh-line))
     (nth (- i 1) choices)))

 (defun my-debugger (condition me-or-my-encapsulation)
   (format t "~&Fooey: ~A" condition)
   (let ((restart (one-of (compute-restarts))))
     (if (not restart) (error "My debugger got an error."))
     (let ((*debugger-hook* me-or-my-encapsulation))
       (invoke-restart-interactively restart))))
 
 (let ((*debugger-hook* #'my-debugger))
   (+ 3 'a))
@OUT{} Fooey: The argument to +, A, is not a number.
@OUT{}  [1] Supply a replacement for A.
@OUT{}  [2] Return to Cloe Toplevel.
@OUT{} Choice: 1
@OUT{}  Form to evaluate and use: (+ 5 'b)
@OUT{}  Fooey: The argument to +, B, is not a number.
@OUT{}  [1] Supply a replacement for B.
@OUT{}  [2] Supply a replacement for A.
@OUT{}  [3] Return to Cloe Toplevel.
@OUT{} Choice: 1
@OUT{}  Form to evaluate and use: 1
@EV{} 9
@end lisp


@subsubheading Affected By:

@code{invoke-debugger}

@subsubheading Notes:

When evaluating code typed in by the user interactively, it is sometimes
useful to have the hook function bind @code{*debugger-hook*} to the
@term{function} that was its second argument so that recursive errors
can be handled using the same interactive facility.


@node *break-on-signals*
@heading *break-on-signals* (Variable)
@syindex *break-on-signals*
@cindex *break-on-signals*


@subsubheading Value Type:

a @term{type specifier}.

@subsubheading Initial Value:

@nil{}.

@subsubheading Description:

When @f{(typep @i{condition} *break-on-signals*)} returns @term{true},
calls to @code{signal}, and to other @term{operators} such as @code{error}
that implicitly call @code{signal}, enter the debugger prior to
@term{signaling} the @term{condition}.

@Therestart{continue} can be used to continue with the normal
@term{signaling} process when a break occurs process due to
@code{*break-on-signals*}.

@subsubheading Examples:

@lisp
 *break-on-signals* @EV{} NIL
 (ignore-errors (error 'simple-error :format-control "Fooey!"))
@EV{} NIL, #<SIMPLE-ERROR 32207172>

 (let ((*break-on-signals* 'error))
   (ignore-errors (error 'simple-error :format-control "Fooey!")))
@OUT{} Break: Fooey!
@OUT{} BREAK entered because of *BREAK-ON-SIGNALS*.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Continue to signal.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:CONTINUE 1}
@OUT{} Continue to signal.
@EV{} NIL, #<SIMPLE-ERROR 32212257>

 (let ((*break-on-signals* 'error))
   (error 'simple-error :format-control "Fooey!"))
@OUT{} Break: Fooey!
@OUT{} BREAK entered because of *BREAK-ON-SIGNALS*.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Continue to signal.
@OUT{}  2: Top level.
@OUT{} Debug> @IN{:CONTINUE 1}
@OUT{} Continue to signal.
@OUT{} Error: Fooey!
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Top level.
@OUT{} Debug> @IN{:CONTINUE 1}
@OUT{} Top level.
@end lisp


@subsubheading See Also:

@ref{break},
@ref{signal}, @ref{warn}, @ref{error (Function)}, 
@ref{typep}, 
@ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}

@subsubheading Notes:

@code{*break-on-signals*} is intended primarily for use in debugging code that
does signaling.   When setting @code{*break-on-signals*}, the user is
encouraged to choose the most restrictive specification that suffices.
Setting @code{*break-on-signals*} effectively violates the modular handling of 
@term{condition} signaling.  In practice, the complete effect of setting
@code{*break-on-signals*} might be unpredictable in some cases since the user
might not be aware of the variety or number of calls to @code{signal} 
that are used in code called only incidentally.


@code{*break-on-signals*} enables an early entry to the debugger but such an
entry does not preclude an additional entry to the debugger in the case of
operations such as @code{error} and @code{cerror}.


@node handler-bind
@heading handler-bind (Macro)
@syindex handler-bind
@cindex handler-bind


@subsubheading Syntax:

@DefmacWithValues{handler-bind, @paren{@stardown{binding}}  @starparam{form}, @starparam{result}}

@auxbnf{binding, @paren{type handler}}

@subsubheading Arguments and Values:

@param{type}---a @term{type specifier}.

@param{handler}---a @term{form}; evaluated to produce a @param{handler-function}.

@param{handler-function}---a @term{designator} for a @term{function} of one @term{argument}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @term{forms}.

@subsubheading Description:

Executes @param{forms} in a @term{dynamic environment} where the indicated
@param{handler} @term{bindings} are in effect.

Each @param{handler} should evaluate to a @term{handler-function},
which is used to handle @term{conditions} of the given @param{type}
during execution of the @param{forms}.  This @term{function} should
take a single argument, the @term{condition} being signaled.

If more than one @param{handler} @term{binding} is supplied, 
the @param{handler} @term{bindings} are searched sequentially from 
top to bottom in search of a match (by visual analogy with @code{typecase}).  
If an appropriate @term{type} is found, 
the associated handler is run in a @term{dynamic environment} where none of these
@param{handler} bindings are visible (to avoid recursive errors).  
If the @term{handler} @term{declines}, the search continues for another @term{handler}.

If no appropriate @term{handler} is found, other @term{handlers} are sought
from dynamically enclosing contours.  If no @term{handler} is found outside, 
then @code{signal} returns or @code{error} enters the debugger. 

@subsubheading Examples:


In the following code, if an unbound variable error is
signaled in the body (and not handled by an intervening handler), 
the first function is called.  

@lisp
 (handler-bind ((unbound-variable #'(lambda ...))
                (error #'(lambda ...)))
   ...)
@end lisp


If any other kind of error is signaled, the second function is called.
In either case, neither handler is active while executing the code
in the associated function.

@lisp
 (defun trap-error-handler (condition)
   (format *error-output* "~&~A~&" condition)
   (throw 'trap-errors nil))

 (defmacro trap-errors (&rest forms)
   `(catch 'trap-errors
      (handler-bind ((error #'trap-error-handler))
        ,@@forms)))
 
 (list (trap-errors (signal "Foo.") 1)
       (trap-errors (error  "Bar.") 2)
       (+ 1 2))
@OUT{} Bar.
@EV{} (1 NIL 3)
@end lisp


Note that ``Foo.'' is not printed because the condition made
by @code{signal} is a @term{simple condition}, which is not @oftype{error}, 
so it doesn't trigger the handler for @code{error} set up by @f{trap-errors}.

@subsubheading See Also:

@ref{handler-case}


@node handler-case
@heading handler-case (Macro)
@syindex handler-case
@cindex handler-case



@subsubheading Syntax:

@DefmacWithValues{handler-case, @param{expression} @interleave{@stardown{error-clause} | @down{no-error-clause}}, @starparam{result}}

@auxbnf{clause, @down{error-clause} | @down{no-error-clause}}
@auxbnf{error-clause, @paren{typespec @paren{@ttbrac{var}} @starparam{declaration} @starparam{form}}}
@auxbnf{no-error-clause, @paren{@kwd{no-error} @param{lambda-list} @starparam{declaration} @starparam{form}}}

@subsubheading Arguments and Values:

@param{expression}---a @term{form}.

@param{typespec}---a @term{type specifier}.

@param{var}---a @term{variable} @term{name}. 

@param{lambda-list}---an @term{ordinary lambda list}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{form}---a @term{form}.

@param{results}---In the normal situation, the values returned are those that result from
the evaluation of @param{expression};
in the exceptional situation when control is transferred to a @param{clause},
the value of the last @param{form} in that @param{clause} is returned.

@subsubheading Description:

@code{handler-case} executes @param{expression} in a @term{dynamic environment} where
various handlers are active.  Each @i{error-clause} specifies how to 
handle a @term{condition} matching the indicated @param{typespec}. 
A @i{no-error-clause} allows the specification of a particular action
if control returns normally.

If a @term{condition} is signaled for which there is an appropriate
@i{error-clause} during the execution of @param{expression}
(@ie{} one for which @f{(typep @term{condition} '@param{typespec})}
returns @term{true}) and if there is no intervening handler for a 
@term{condition} of that @term{type}, then control is transferred to
the body of the relevant @i{error-clause}.  In this case, the 
dynamic state is unwound appropriately (so that the handlers established
around the @param{expression} are no longer active), and @param{var} is bound to
the @term{condition} that had been signaled.
If more than one case is provided, those cases are made accessible
in parallel.  That is, in

@lisp
  (handler-case @i{form}
    (@i{typespec1} (@i{var1}) @i{form1})
    (@i{typespec2} (@i{var2}) @i{form2}))
@end lisp


if the first @i{clause} (containing @i{form1}) has been selected, 
the handler for the second is no longer visible (or vice versa).

The @i{clauses}
are searched sequentially from top to bottom. If there is @term{type}
overlap between @param{typespecs}, 
the earlier of the @i{clauses} is selected.

If @param{var} 
is not needed, it can be omitted. That is, a @i{clause} such as:

@lisp
  (@param{typespec} (@param{var}) (declare (ignore @param{var})) @param{form})
@end lisp


can be written
@f{(@param{typespec} () @param{form})}.

If there are no @param{forms} in a selected @i{clause}, the case, and therefore
@code{handler-case}, returns @nil{}.
If execution of @param{expression} 
returns normally and no @i{no-error-clause}
exists, the values returned by 
@param{expression} are returned by @code{handler-case}.
If execution of 
@param{expression} returns normally and a @i{no-error-clause}
does exist, the values returned are used as arguments to the function
described by constructing
@f{(lambda @param{lambda-list} @starparam{form})}
from the @i{no-error-clause}, and the @term{values} of that function call are
returned by @code{handler-case}.
The handlers which were established around the @param{expression} are no longer active at the time of this call.

@subsubheading Examples:

@lisp
 (defun assess-condition (condition)
   (handler-case (signal condition)
     (warning () "Lots of smoke, but no fire.")
     ((or arithmetic-error control-error cell-error stream-error)
        (condition)
       (format nil "~S looks especially bad." condition))
     (serious-condition (condition)
       (format nil "~S looks serious." condition))
     (condition () "Hardly worth mentioning.")))
@EV{} ASSESS-CONDITION
 (assess-condition (make-condition 'stream-error :stream *terminal-io*))
@EV{} "#<STREAM-ERROR 12352256> looks especially bad."
 (define-condition random-condition (condition) () 
   (:report (lambda (condition stream)
              (declare (ignore condition))
              (princ "Yow" stream))))
@EV{} RANDOM-CONDITION
 (assess-condition (make-condition 'random-condition))
@EV{} "Hardly worth mentioning."
@end lisp


@subsubheading See Also:

@ref{handler-bind},
@ref{ignore-errors},
@ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}

@subsubheading Notes:

@lisp
 (handler-case form
   (@i{type1} (@i{var1}) . @i{body1})
   (@i{type2} (@i{var2}) . @i{body2}) ...)
@end lisp

is approximately equivalent to:

@lisp
 (block #1=#:g0001
   (let ((#2=#:g0002 nil))
     (tagbody
       (handler-bind ((@i{type1} #'(lambda (temp)
                                       (setq #1# temp)
                                       (go #3=#:g0003)))
                      (@i{type2} #'(lambda (temp)
                                       (setq #2# temp)
                                       (go #4=#:g0004))) ...)
       (return-from #1# form))
         #3# (return-from #1# (let ((@i{var1} #2#)) . @i{body1}))
         #4# (return-from #1# (let ((@i{var2} #2#)) . @i{body2})) ...)))
@end lisp


@lisp
 (handler-case form
   (@i{type1} @i{(var1)} . @i{body1})
   ...
   (:no-error (@i{varN-1} @i{varN-2} ...) . @i{bodyN}))
@end lisp

is approximately equivalent to:

@lisp

 (block #1=#:error-return
  (multiple-value-call #'(lambda (@i{varN-1} @i{varN-2} ...) . @i{bodyN})
     (block #2=#:normal-return
       (return-from #1#
         (handler-case (return-from #2# form)
           (@i{type1} (@i{var1}) . @i{body1}) ...)))))
@end lisp




@node ignore-errors
@heading ignore-errors (Macro)
@syindex ignore-errors
@cindex ignore-errors


@subsubheading Syntax:

@DefmacWithValues{ignore-errors, @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{forms}---an @term{implicit progn}.

@param{results}---In the normal situation,
the @term{values} of the @term{forms} are returned;
in the exceptional situation,
two values are returned: @nil{}@spc{}and the @term{condition}.

@subsubheading Description:

@code{ignore-errors} is used to prevent @term{conditions} @oftype{error}
from causing entry into the debugger.

Specifically, @code{ignore-errors} @term{executes} @term{forms}
in a @term{dynamic environment} where a @term{handler} for 
@term{conditions} @oftype{error} has been established;
if invoked, it @term{handles} such @term{conditions} by
returning two @term{values}, @nil{}@spc{}and the @term{condition} that was @term{signaled},
from the @code{ignore-errors} @term{form}.

If a @term{normal return} from the @term{forms} occurs, 
any @term{values} returned are returned by @code{ignore-errors}.

@subsubheading Examples:

@lisp
 (defun load-init-file (program)
   (let ((win nil))
     (ignore-errors ;if this fails, don't enter debugger
       (load (merge-pathnames (make-pathname :name program :type :lisp)
                              (user-homedir-pathname)))
       (setq win t))
     (unless win (format t "~&Init file failed to load.~%"))
     win))
 
 (load-init-file "no-such-program")
@OUT{} Init file failed to load.
NIL
@end lisp


@subsubheading See Also:

@ref{handler-case}, @ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}

@subsubheading Notes:

@lisp
 (ignore-errors . @i{forms})
@end lisp


is equivalent to:

@lisp
 (handler-case (progn . @i{forms})
   (error (condition) (values nil condition)))
@end lisp


Because the second return value is a @term{condition}
in the exceptional case, it is common (but not required) to arrange
for the second return value in the normal case to be missing or @nil{}@spc{}so
that the two situations can be distinguished.


@node define-condition
@heading define-condition (Macro)
@syindex define-condition
@cindex define-condition



@editornote{KMP: This syntax stuff is still very confused and needs lots of work.}

@subsubheading Syntax:

@DefmacWithValuesNewline{define-condition, name @paren{@starparam{parent-type}} @paren{@stardown{slot-spec}} @starparam{option}, name}

@auxbnf{slot-spec, slot-name | @paren{slot-name @down{slot-option}}}
@auxbnf{slot-option, @begininterleave{} @star{@curly{@kwd{reader} @term{symbol}}} | @CR{} @star{@curly{@kwd{writer} @down{function-name}}} | @CR{} @star{@curly{@kwd{accessor} @term{symbol}}} | @CR{} @curly{@kwd{allocation} @down{allocation-type}} | @CR{} @star{@curly{@kwd{initarg} @term{symbol}}} | @CR{} @curly{@kwd{initform} @term{form}} | @CR{} @curly{@kwd{type} @param{type-specifier}} @endinterleave{}}
@auxbnf{option, @begininterleave{} @paren{@kwd{default-initargs} @f{.} @param{initarg-list}} | @CR{} @paren{@kwd{documentation} @term{string}} | @CR{} @paren{@kwd{report} @i{report-name}} @endinterleave{}}
@auxbnf{function-name, @curly{@term{symbol} | @tt{(setf @term{symbol})}}}
@auxbnf{allocation-type, @kwd{instance} | @kwd{class}}
@auxbnf{report-name, @term{string} | @term{symbol} | @term{lambda expression}}

@subsubheading Arguments and Values:

@param{name}---a @term{symbol}.

@param{parent-type}---a @term{symbol} naming a @term{condition} @term{type}.
If no @param{parent-types} are supplied,
the @param{parent-types} default to @f{(condition)}.

@param{default-initargs}---a @term{list} of @term{keyword/value pairs}.

@editornote{KMP: This is all mixed up as to which is a slot option and which is
a main option.  I'll sort that out.  Also, some of this is implied
by the bnf and needn't be stated explicitly.}


@param{Slot-spec}---the @term{name} of a @term{slot} or a @term{list}
consisting of the @param{slot-name} followed by zero or more @param{slot-options}.

@param{Slot-name}---a slot name (a @term{symbol}), 
the @term{list} of a slot name, or the 
@term{list} of slot name/slot form pairs.

@param{Option}---Any of the following:


@table @asis

@item @id{@kwd{reader}}


@kwd{reader} can be supplied more than once for a given @term{slot} 
and cannot be @nil{}.

@item @id{@kwd{writer}}


@kwd{writer} can be supplied more than once for a given @term{slot}
and must name a @term{generic function}.

@item @id{@kwd{accessor}}


@kwd{accessor} can be supplied more than once for a given @term{slot}
and cannot be @nil{}.

@item @id{@kwd{allocation}}


@kwd{allocation} can be supplied once at most for a given @term{slot}.
The default if @kwd{allocation} is not supplied is @kwd{instance}.

@item @id{@kwd{initarg}}
 

@kwd{initarg} can be supplied more than once for a given @term{slot}.  

@item @id{@kwd{initform}}
  

@kwd{initform} can be supplied once at most for a given @term{slot}.  

@item @id{@kwd{type}}
 

@kwd{type} can be supplied once at most for a given @term{slot}. 

@item @id{@kwd{documentation}}
 

@kwd{documentation} can be supplied once at most for a given @term{slot}. 

@item @id{@kwd{report}}


@kwd{report} can be supplied once at most.
@end table


@subsubheading Description:

@code{define-condition} defines a new condition type called @param{name}, 
which is a @term{subtype} of 
the @term{type} or @term{types} named by
@param{parent-type}.  
Each @param{parent-type} argument specifies a direct @term{supertype}
of the new @term{condition}. The new @term{condition}
inherits @term{slots} and @term{methods} from each of its direct
@term{supertypes}, and so on.

If a slot name/slot form pair is supplied,
the slot form is a @term{form} that 
can be evaluated by @code{make-condition} to
produce a default value when an explicit value is not provided.  If no 
slot form
is supplied, the contents of the @param{slot} 
is initialized in an 
@term{implementation-dependent} way.  

If the @term{type} being defined and some other 
@term{type} from which it inherits
have a slot by the same name, only one slot is allocated in the
@term{condition}, 
but the supplied slot form overrides any slot form
that might otherwise have been inherited from a @param{parent-type}.  If no 
slot form is supplied, the inherited slot form (if any) is still visible.

Accessors are created according to the same rules as used by 
@code{defclass}.

A description of @param{slot-options} follows:



@table @asis

@item @id{@kwd{reader}}


The @kwd{reader} slot option specifies that an @term{unqualified method} is
to be defined on the @term{generic function} named by the argument
to @kwd{reader} to read the value of the given @term{slot}.


@item @id{@bull{}}
 The @kwd{initform} slot option is used to provide a default
initial value form to be used in the initialization of the @term{slot}.  This
@term{form} is evaluated every time it is used to initialize the 
@term{slot}.  The
@term{lexical environment} 
in which this @term{form} is evaluated is the lexical
@term{environment} in which the @code{define-condition} 
form was evaluated.
Note that the @term{lexical environment} refers both to variables and to
@term{functions}.  
For @term{local slots}, the @term{dynamic environment} is the dynamic
@term{environment} 
in which @code{make-condition} was called; for 
@term{shared slots}, the @term{dynamic environment} 
is the @term{dynamic environment} in which the
@code{define-condition} form was evaluated.  

@reviewer{Barmar: Issue CLOS-CONDITIONS doesn't say this.}
No implementation is permitted to extend the syntax of @code{define-condition}
to allow @f{(@param{slot-name} @param{form})} as an abbreviation for
@f{(@param{slot-name} :initform @param{form})}.

@item @id{@kwd{initarg}}


The @kwd{initarg} slot option declares an initialization
argument named by its @term{symbol} argument
and specifies that this
initialization argument initializes the given @term{slot}.  If the
initialization argument has a value in the call to 
@code{initialize-instance}, the value is stored into the given @term{slot},
and the slot's @kwd{initform} slot option, if any, is not
evaluated.  If none of the initialization arguments specified for a
given @term{slot} has a value, the @term{slot} is initialized according to the
@kwd{initform} slot option, if specified.  

@item @id{@kwd{type}}


The @kwd{type} slot option specifies that the contents of the
@term{slot} is always of the specified @term{type}.  It effectively
declares the result type of the reader generic function when applied
to an @term{object} of this @term{condition} type.  
The consequences of attempting to store in a
@term{slot} a value that 
does not satisfy the type of the @term{slot} is undefined.

@item @id{@kwd{default-initargs}}


@editornote{KMP: This is an option, not a slot option.}

This option is treated the same as it would be @code{defclass}.

@item @id{@kwd{documentation}}


@editornote{KMP: This is both an option and a slot option.}

The @kwd{documentation} slot option provides a @term{documentation string}
for the @term{slot}.

@item @id{@kwd{report}}


@editornote{KMP: This is an option, not a slot option.}

@term{Condition} reporting is mediated through the @code{print-object}
method for the @term{condition} type in question, with @code{*print-escape*}
always being @nil{}. Specifying @f{(:report @param{report-name})} 
in the definition of a condition type @f{C} is equivalent to:

@lisp
 (defmethod print-object ((x c) stream)
   (if *print-escape* (call-next-method) (@param{report-name} x stream)))
@end lisp


If the value supplied by the argument to @kwd{report} (@param{report-name})
is a @term{symbol} or a @term{lambda expression}, 
it must be acceptable to 
@code{function}. @f{(function @param{report-name})} 
is evaluated
in the current @term{lexical environment}.  
It should return a @term{function} 
of two
arguments, a @term{condition} and a @term{stream}, 
that prints on the @term{stream} a
description of the @term{condition}. 
This @term{function} is called whenever the
@term{condition} is printed while @code{*print-escape*} is @nil{}.

If @param{report-name} is a @term{string}, it is a shorthand for 

@lisp
 (lambda (condition stream)
   (declare (ignore condition))
   (write-string @param{report-name} stream))
@end lisp


This option is processed after the new @term{condition} type has been defined,
so use of the @param{slot} accessors within the @kwd{report} function is permitted.
If this option is not supplied, information about how to report this
type of @term{condition} is inherited from the @param{parent-type}.
@end table


The consequences are unspecifed if an attempt is made to @term{read} a 
@param{slot} that has not been explicitly initialized and that has not 
been given a default value.

The consequences are unspecified if an attempt is made to assign the
@param{slots} by using @code{setf}.

If a @code{define-condition} @term{form} appears as a @term{top level form},
the @term{compiler} must make @param{name} recognizable as a valid @term{type} name,
and it must be possible to reference the @term{condition} @term{type} as the
@param{parent-type} of another @term{condition} @term{type} in a subsequent
@code{define-condition} @term{form} in the @term{file} being compiled.

@subsubheading Examples:

The following form defines a condition of @term{type} 
@f{peg/hole-mismatch} which inherits from a condition type
called @f{blocks-world-error}:

@lisp
(define-condition peg/hole-mismatch 
                  (blocks-world-error)
                  ((peg-shape  :initarg :peg-shape
                               :reader peg/hole-mismatch-peg-shape)
                   (hole-shape :initarg :hole-shape
                               :reader peg/hole-mismatch-hole-shape))
  (:report (lambda (condition stream)
             (format stream "A ~A peg cannot go in a ~A hole."
                     (peg/hole-mismatch-peg-shape  condition)
                     (peg/hole-mismatch-hole-shape condition)))))
@end lisp


The new type has slots @f{peg-shape} and @f{hole-shape}, 
so @code{make-condition} accepts @f{:peg-shape} and @f{:hole-shape} keywords.  
The @term{readers} @f{peg/hole-mismatch-peg-shape} and @f{peg/hole-mismatch-hole-shape} 
apply to objects of this type, as illustrated in the @kwd{report} information.

The following form defines a @term{condition} @term{type} named @f{machine-error}
which inherits from @code{error}: 

@lisp
(define-condition machine-error 
                  (error)
                  ((machine-name :initarg :machine-name
                                 :reader machine-error-machine-name))
  (:report (lambda (condition stream)
             (format stream "There is a problem with ~A."
                     (machine-error-machine-name condition)))))
@end lisp


Building on this definition, a new error condition can be defined which
is a subtype of @f{machine-error} for use when machines are not available: 

@lisp
(define-condition machine-not-available-error (machine-error) ()
  (:report (lambda (condition stream)
             (format stream "The machine ~A is not available."
                     (machine-error-machine-name condition)))))
@end lisp


This defines a still more specific condition, built upon 
@f{machine-not-available-error}, which provides a slot initialization form
for @f{machine-name} but which does not provide any new slots or report
information.  It just gives the @f{machine-name} slot a default initialization:

@lisp
(define-condition my-favorite-machine-not-available-error
                  (machine-not-available-error)
  ((machine-name :initform "mc.lcs.mit.edu")))
@end lisp


Note that since no @kwd{report} clause was given, the information 
inherited from @f{machine-not-available-error} is used to
report this type of condition.

@lisp
 (define-condition ate-too-much (error) 
     ((person :initarg :person :reader ate-too-much-person)
      (weight :initarg :weight :reader ate-too-much-weight)
      (kind-of-food :initarg :kind-of-food
                    :reader :ate-too-much-kind-of-food)))
@EV{} ATE-TOO-MUCH
 (define-condition ate-too-much-ice-cream (ate-too-much)
   ((kind-of-food :initform 'ice-cream)
    (flavor       :initarg :flavor
                  :reader ate-too-much-ice-cream-flavor
                  :initform 'vanilla ))
   (:report (lambda (condition stream)
              (format stream "~A ate too much ~A ice-cream"
                      (ate-too-much-person condition)
                      (ate-too-much-ice-cream-flavor condition)))))
@EV{} ATE-TOO-MUCH-ICE-CREAM
 (make-condition 'ate-too-much-ice-cream
                 :person 'fred
                 :weight 300
                 :flavor 'chocolate)
@EV{} #<ATE-TOO-MUCH-ICE-CREAM 32236101>
 (format t "~A" *)
@OUT{} FRED ate too much CHOCOLATE ice-cream
@EV{} NIL
@end lisp


@subsubheading See Also:

@ref{make-condition}, @ref{defclass}, @ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}



@node make-condition
@heading make-condition (Function)
@syindex make-condition
@cindex make-condition


@subsubheading Syntax:

@DefunWithValues{make-condition, type @rest{} slot-initializations, condition}

@subsubheading Arguments and Values:

@param{type}---a @term{type specifier} (for a @term{subtype} of @code{condition}).

@param{slot-initializations}---an @term{initialization argument list}.

@param{condition}---a @term{condition}.

@subsubheading Description:

Constructs and returns a @term{condition} of type @param{type} 
using @param{slot-initializations} for the initial values of the slots.  
The newly created @term{condition} is returned.

@subsubheading Examples:
@lisp
 (defvar *oops-count* 0)

 (setq a (make-condition 'simple-error
                         :format-control "This is your ~:R error."
                         :format-arguments (list (incf *oops-count*))))
@EV{} #<SIMPLE-ERROR 32245104>
 
 (format t "~&~A~%" a)
@OUT{} This is your first error.
@EV{} NIL
 
 (error a)
@OUT{} Error: This is your first error.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Return to Lisp Toplevel.
@OUT{} Debug> 
@end lisp


@subsubheading Affected By:

The set of defined @term{condition} @term{types}.

@subsubheading See Also:

@ref{define-condition}, @ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}


@node restart
@heading restart (System Class)
@syindex restart
@cindex restart


@subsubheading Class Precedence List:
@code{restart},
@code{t}

@subsubheading Description:

An @term{object} @oftype{restart} represents a @term{function} that can be
called to perform some form of recovery action, usually a transfer of control 
to an outer point in the running program.

An @term{implementation} is free to implement a @term{restart} in whatever 
manner is most convenient; a @term{restart} has only @term{dynamic extent}
relative to the scope of the binding @term{form} which @term{establishes} it.


@node compute-restarts
@heading compute-restarts (Function)
@syindex compute-restarts
@cindex compute-restarts


@subsubheading Syntax:

@DefunWithValues{compute-restarts, @opt{} condition, restarts}

@subsubheading Arguments and Values:

@param{condition}---a @term{condition} @term{object}, or @nil{}.

@param{restarts}---a @term{list} of @term{restarts}.

@subsubheading Description:

@code{compute-restarts} uses the dynamic state of the program to compute 
a @term{list} of the @term{restarts} which are currently active.

The resulting @term{list} is ordered so that the innermost
(more-recently established) restarts are nearer the head of the @term{list}.

When @param{condition} is @term{non-nil}, only those @term{restarts}
are considered that are either explicitly associated with that @param{condition},
or not associated with any @term{condition}; that is, the excluded @term{restarts} 
are those that are associated with a non-empty set of @term{conditions} of 
which the given @param{condition} is not an @term{element}.
If @param{condition} is @nil{}, all @term{restarts} are considered.

@code{compute-restarts} returns all 
@term{applicable restarts}, 
including anonymous ones, even if some of them have the same name as 
others and would therefore not be found by @code{find-restart} 
when given a @term{symbol} argument.

Implementations are permitted, but not required, to return @term{distinct}
@term{lists} from repeated calls to @code{compute-restarts} while in
the same dynamic environment.  
The consequences are undefined if the @term{list} returned by
@code{compute-restarts} is every modified.

@subsubheading Examples:

@lisp
 ;; One possible way in which an interactive debugger might present
 ;; restarts to the user.
 (defun invoke-a-restart ()
   (let ((restarts (compute-restarts)))
     (do ((i 0 (+ i 1)) (r restarts (cdr r))) ((null r))
       (format t "~&~D: ~A~%" i (car r)))
     (let ((n nil) (k (length restarts)))
       (loop (when (and (typep n 'integer) (>= n 0) (< n k))
               (return t))
             (format t "~&Option: ")
             (setq n (read))
             (fresh-line))
       (invoke-restart-interactively (nth n restarts)))))

 (restart-case (invoke-a-restart)
   (one () 1)
   (two () 2)
   (nil () :report "Who knows?" 'anonymous)
   (one () 'I)
   (two () 'II))
@OUT{} 0: ONE
@OUT{} 1: TWO
@OUT{} 2: Who knows?
@OUT{} 3: ONE
@OUT{} 4: TWO
@OUT{} 5: Return to Lisp Toplevel.
@OUT{} Option: @IN{4}
@EV{} II
 
 ;; Note that in addition to user-defined restart points, COMPUTE-RESTARTS
 ;; also returns information about any system-supplied restarts, such as
 ;; the "Return to Lisp Toplevel" restart offered above.
 
@end lisp



@subsubheading Affected By:

Existing restarts.

@subsubheading See Also:

@ref{find-restart},
@ref{invoke-restart},
@ref{restart-bind}


@node find-restart
@heading find-restart (Function)
@syindex find-restart
@cindex find-restart


@subsubheading Syntax:

@DefunWithValues{find-restart, identifier @opt{} condition, restart}

@subsubheading Arguments and Values:

@param{identifier}---a @term{non-nil} @term{symbol}, or a @term{restart}.

@param{condition}---a @term{condition} @term{object}, or @nil{}.

@param{restart}---a @term{restart} or @nil{}.

@subsubheading Description:

@code{find-restart} searches for a particular @term{restart} in the 
current @term{dynamic environment}.

When @param{condition} is @term{non-nil}, only those @term{restarts}
are considered that are either explicitly associated with that @param{condition},
or not associated with any @term{condition}; that is, the excluded @term{restarts} 
are those that are associated with a non-empty set of @term{conditions} of 
which the given @param{condition} is not an @term{element}.
If @param{condition} is @nil{}, all @term{restarts} are considered.

If @param{identifier} is a @term{symbol}, then the innermost 
(most recently established) @term{applicable restart} with that @term{name} is returned.
@nil{}@spc{}is returned if no such restart is found.

If @param{identifier} is a currently active restart, then it is returned.
Otherwise, @nil{}@spc{}is returned.

@subsubheading Examples:

@lisp
 (restart-case
     (let ((r (find-restart 'my-restart)))
       (format t "~S is named ~S" r (restart-name r)))
   (my-restart () nil))
@OUT{} #<RESTART 32307325> is named MY-RESTART
@EV{} NIL
 (find-restart 'my-restart)
@EV{} NIL
@end lisp


@subsubheading Affected By:

Existing restarts.

@code{restart-case}, @code{restart-bind}, @code{with-condition-restarts}.

@subsubheading See Also:

@ref{compute-restarts}

@subsubheading Notes:

@lisp
 (find-restart @param{identifier})
 @EQ{} (find @param{identifier} (compute-restarts) :key :restart-name)
@end lisp


Although anonymous restarts have a name of @nil{},
the consequences are unspecified if @nil{}@spc{}is given as an @param{identifier}.  
Occasionally, programmers lament that @nil{}@spc{}is not permissible as an
@param{identifier} argument.  In most such cases, @code{compute-restarts}
can probably be used to simulate the desired effect.


@node invoke-restart
@heading invoke-restart (Function)
@syindex invoke-restart
@cindex invoke-restart


@subsubheading Syntax:

@DefunWithValues{invoke-restart, restart @rest{} arguments, @starparam{result}}

@subsubheading Arguments and Values:

@param{restart}---a @term{restart designator}.

@param{argument}---an @term{object}.

@param{results}---the @term{values} returned by the @term{function}
associated with @param{restart}, if that @term{function} returns.

@subsubheading Description:

Calls the @term{function} associated with @param{restart},
passing @param{arguments} to it.  
@param{Restart} must be valid in the current @term{dynamic environment}.  

@subsubheading Examples:
@lisp
 (defun add3 (x) (check-type x number) (+ x 3))
 
 (foo 'seven)
@OUT{} Error: The value SEVEN was not of type NUMBER.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Specify a different value to use.
@OUT{}  2: Return to Lisp Toplevel.
@OUT{} Debug> @IN{(invoke-restart 'store-value 7)}
@EV{} 10
@end lisp


@subsubheading Side Effects:

A non-local transfer of control might be done by the restart.

@subsubheading Affected By:

Existing restarts.

@subsubheading Exceptional Situations:

If @param{restart} is not valid, an error @oftype{control-error} is signaled.

@subsubheading See Also:

@ref{find-restart},
@ref{restart-bind},
@ref{restart-case},
@ref{invoke-restart-interactively}

@subsubheading Notes:

The most common use for @code{invoke-restart} is in a @term{handler}.
It might be used explicitly, or implicitly through @code{invoke-restart-interactively}
or a @term{restart function}.

@term{Restart functions} call @code{invoke-restart}, not vice versa.  That is,
@term{invoke-restart} provides primitive functionality, and @term{restart functions}
are non-essential ``syntactic sugar.''


@node invoke-restart-interactively
@heading invoke-restart-interactively (Function)
@syindex invoke-restart-interactively
@cindex invoke-restart-interactively


@subsubheading Syntax:

@DefunWithValues{invoke-restart-interactively, restart, @starparam{result}}

@subsubheading Arguments and Values:

@param{restart}---a @term{restart designator}.

@param{results}---the @term{values} returned by the @term{function} 
associated with @param{restart}, if that @term{function} returns.

@subsubheading Description:

@code{invoke-restart-interactively} calls the @term{function} associated
with @param{restart}, prompting for any necessary arguments. 
If @param{restart} is a name, it must be valid in the current @term{dynamic environment}.  

@code{invoke-restart-interactively} 
prompts for arguments by executing
the code provided in the @kwd{interactive} keyword to 
@code{restart-case} or 
@kwd{interactive-function} keyword to @code{restart-bind}.

If no such options have been supplied in the corresponding
@code{restart-bind} or @code{restart-case}, 
then the consequences are undefined if the @param{restart} takes
required arguments.  If the arguments are optional, an argument list of
@nil{}@spc{}is used.

Once the arguments have been determined, 
@code{invoke-restart-interactively}
executes the following:

@lisp
 (apply #'invoke-restart @i{restart} @i{arguments})
@end lisp



@subsubheading Examples:

@lisp
 (defun add3 (x) (check-type x number) (+ x 3))
 
 (add3 'seven)
@OUT{} Error: The value SEVEN was not of type NUMBER.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Specify a different value to use.
@OUT{}  2: Return to Lisp Toplevel.
@OUT{} Debug> @IN{(invoke-restart-interactively 'store-value)}
@OUT{} Type a form to evaluate and use: @IN{7}
@EV{} 10
@end lisp


@subsubheading Side Effects:

If prompting for arguments is necesary,
some typeout may occur (on @term{query I/O}).

A non-local transfer of control might be done by the restart.

@subsubheading Affected By:

@code{*query-io*}, active @term{restarts}

@subsubheading Exceptional Situations:

If @param{restart} is not valid, an error @oftype{control-error}
is signaled.

@subsubheading See Also:

@ref{find-restart},
@ref{invoke-restart},
@ref{restart-case},
@ref{restart-bind}

@subsubheading Notes:

@code{invoke-restart-interactively} is used internally by the debugger
and may also be useful in implementing other portable, interactive debugging 
tools.


@node restart-bind
@heading restart-bind (Macro)
@syindex restart-bind
@cindex restart-bind


@subsubheading Syntax:

@DefmacWithValuesNewline{restart-bind, @paren{@curly{@paren{name function @stardown{key-val-pair}}}} @starparam{form}, @starparam{result}}

@auxbnf{key-val-pair, @kwd{interactive-function} interactive-function | @CR{} @kwd{report-function} report-function | @CR{} @kwd{test-function} test-function}

@subsubheading Arguments and Values:

@param{name}---a @term{symbol}; @noeval{}.

@param{function}---a @term{form}; @eval{}.

@param{forms}---an @term{implicit progn}.

@param{interactive-function}---a @term{form}; @eval{}.

@param{report-function}---a @term{form}; @eval{}.

@param{test-function}---a @term{form}; @eval{}.

@param{results}---the @term{values} returned by the @term{forms}.

@subsubheading Description:

@code{restart-bind} executes the body of @param{forms} 
in a @term{dynamic environment} where @term{restarts} with the given @param{names} are in effect.

If a @param{name} is @nil{}, it indicates an anonymous restart;
if a @param{name} is a @term{non-nil} @term{symbol}, it indicates a named restart.

The @param{function}, @param{interactive-function}, and @param{report-function}
are unconditionally evaluated in the current lexical and dynamic environment
prior to evaluation of the body. Each of these @term{forms} must evaluate to
a @term{function}.

If @code{invoke-restart} is done on that restart,
the @term{function} which resulted from evaluating @param{function} 
is called, in the @term{dynamic environment} of the @code{invoke-restart},
with the @term{arguments} given to @code{invoke-restart}. 
The @term{function} may either perform a non-local transfer of control or may return normally.

If the restart is invoked interactively from the debugger 
(using @code{invoke-restart-interactively}), 
the arguments are defaulted by calling the @term{function} 
which resulted from evaluating @param{interactive-function}.
That @term{function} may optionally prompt interactively on @term{query I/O}, 
and should return a @term{list} of arguments to be used by
@code{invoke-restart-interactively} when invoking the restart. 

If a restart is invoked interactively but no @param{interactive-function} is used,
then an argument list of @nil{}@spc{}is used. In that case, the @term{function}
must be compatible with an empty argument list.

If the restart is presented interactively (@eg{} by the debugger),
the presentation is done by calling the @term{function} which resulted
from evaluating @param{report-function}.
This @term{function} must be a @term{function} of one argument, a @term{stream}. 
It is expected to print a description of the action that the restart takes
to that @term{stream}. 
This @term{function} is called any time the restart is printed 
while @code{*print-escape*} is @nil{}.

In the case of interactive invocation, 
the result is dependent on the value of @kwd{interactive-function}
as follows.


@table @asis
@item @id{@kwd{interactive-function}}


@param{Value} is evaluated in the current lexical environment and
should return a @term{function} of no arguments which constructs a 
@term{list} of arguments to be used by @code{invoke-restart-interactively} 
when invoking this restart.  The @term{function} may prompt interactively
using @term{query I/O} if necessary.

@item @id{@kwd{report-function}}


@param{Value} is evaluated in the current lexical environment and
should return a @term{function} of one argument, a @term{stream}, which
prints on the @term{stream} a summary of the action that this restart
takes.  This @term{function} is called whenever the restart is
reported (printed while @code{*print-escape*} is @nil{}).
If no @kwd{report-function} option is provided, the manner in which the
@term{restart} is reported is @term{implementation-dependent}.

@item @id{@kwd{test-function}}


@param{Value} is evaluated in the current lexical environment and
should return a @term{function} of one argument, a @term{condition}, which
returns @term{true} if the restart is to be considered visible.
@end table


@subsubheading Affected By:

@code{*query-io*}.

@subsubheading See Also:

@ref{restart-case}, @ref{with-simple-restart}

@subsubheading Notes:

@code{restart-bind} is primarily intended to be used to implement
@code{restart-case} and  might be useful in implementing other
macros. Programmers who are uncertain about whether to use @code{restart-case}
or @code{restart-bind} should prefer @code{restart-case} for the cases where
it is powerful enough, using @code{restart-bind} only in cases where its full
generality is really needed.


@node restart-case
@heading restart-case (Macro)
@syindex restart-case
@cindex restart-case



@subsubheading Syntax:

@DefmacWithValues{restart-case, restartable-form @curly{@down{clause}}, @starparam{result}}

@auxbnf{clause, @lparen{} case-name lambda-list @CR{} @spc{}@interleave{@kwd{interactive} interactive-expression | @kwd{report} report-expression | @kwd{test} test-expression} @CR{} @spc{}@starparam{declaration} @starparam{form}@rparen{}}

@subsubheading Arguments and Values:

@param{restartable-form}---a @term{form}.

@param{case-name}---a @term{symbol} or @nil{}.

@param{lambda-list}---an @term{ordinary lambda list}.

@param{interactive-expression}---a @term{symbol} or a @term{lambda expression}.

@param{report-expression}---a @term{string},
a @term{symbol},
or a @term{lambda expression}.                                 

@param{test-expression}---a @term{symbol} or a @term{lambda expression}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{form}---a @term{form}.

@param{results}---the @term{values} resulting from the @term{evaluation}
of @param{restartable-form}, 
or the @term{values} returned by the last @param{form}
executed in a chosen @term{clause},
or @nil{}.

@subsubheading Description:

@code{restart-case} evaluates @param{restartable-form} in a @term{dynamic environment}
where the clauses have special meanings as points to which control may be transferred.  
If @param{restartable-form} finishes executing and returns any values, 
all values returned are returned by @code{restart-case} and 
processing has completed. While @param{restartable-form} is executing, any code may
transfer control to one of the clauses (see @code{invoke-restart}).  
If a transfer
occurs, the forms in the body of that clause is evaluated and any values
returned by the last such form are returned by 
@code{restart-case}.
In this case, the 
dynamic state is unwound appropriately (so that the restarts established
around the @param{restartable-form} are no longer active) prior to execution of the
clause.

If there are no @param{forms} 
in a selected clause, @code{restart-case} returns @nil{}.

If @param{case-name} is a @term{symbol}, it names this restart.

It is possible to have more than one clause use the same @param{case-name}.
In this case, the first clause with that name is found by @code{find-restart}.  
The other clauses are accessible using @code{compute-restarts}.

Each @param{arglist} is an @term{ordinary lambda list} to be bound during the 
execution of its corresponding @param{forms}.  These parameters are used 
by the @code{restart-case} clause to receive any necessary data from a call
to @code{invoke-restart}.

By default, @code{invoke-restart-interactively} passes no arguments and
all arguments must be optional in order to accomodate interactive
restarting.  However, the arguments need not be optional if the
@kwd{interactive} 
keyword has been used to inform @code{invoke-restart-interactively}
about how to compute a proper argument list.

@param{Keyword} options have the following meaning.

@table @asis
@item @id{@kwd{interactive}}


The @param{value} supplied by @f{:interactive @param{value}}
must be a suitable argument to @code{function}. 
@f{(function @param{value})} is evaluated in the current lexical
environment.  It should return a @term{function} of no arguments which 
returns arguments to be used by 
@code{invoke-restart-interactively} when it is invoked.
@code{invoke-restart-interactively} 
is called in the dynamic
environment available prior to any restart attempt, and uses 
@term{query I/O} for user interaction.

If a restart is invoked interactively but no @kwd{interactive} option
was supplied, the argument list used in the invocation is the empty
list.

@item @id{@kwd{report}}


If the @param{value} supplied by @f{:report @param{value}}
is a @term{lambda expression} or a @term{symbol}, it 
must be acceptable to @code{function}.
@f{(function @param{value})} is evaluated in the current lexical
environment.  It should return a @term{function} of one
argument, a @term{stream}, which prints on the @term{stream} a 
description of the restart.  This @term{function} is called 
whenever the restart is printed while @code{*print-escape*} is @nil{}.

If @param{value} is a @term{string}, it is a shorthand for

@lisp
 (lambda (stream) (write-string value stream))
@end lisp


If a named restart is asked to report but no report information has been
supplied, the name of the restart is used in generating default report text.

When @code{*print-escape*} is @nil{}, the 
printer uses the report information for
a restart.  For example, a debugger might announce the action of typing
a ``continue'' command by:

@lisp
 (format t "~&~S -- ~A~%" ':continue some-restart)
@end lisp

which might then display as something like:

@lisp
 :CONTINUE -- Return to command level
@end lisp


The consequences are unspecified if an unnamed restart is specified
but no @kwd{report} option is provided.

@item @id{@kwd{test}}


The @param{value} supplied by @f{:test @param{value}}
must be a suitable argument to @code{function}. 
@f{(function @param{value})} is evaluated in the current lexical
environment.  It should return a @term{function} of one @term{argument}, the
@term{condition}, that
returns @term{true} if the restart is to be considered visible.

The default for this option is equivalent to @f{(lambda (c) (declare (ignore c)) t)}.
@end table


If the @param{restartable-form} is a @term{list} whose @term{car} is any of
the @term{symbols} @code{signal}, @code{error}, @code{cerror},
or @code{warn} (or is a @term{macro form} which macroexpands into such a
@term{list}), then @code{with-condition-restarts} is used implicitly
to associate the indicated @term{restarts} with the @term{condition} to be
signaled.

@subsubheading Examples:

@lisp
 (restart-case
     (handler-bind ((error #'(lambda (c)
                             (declare (ignore condition))
                             (invoke-restart 'my-restart 7))))
       (error "Foo."))
   (my-restart (&optional v) v))
@EV{} 7

 (define-condition food-error (error) ())
@EV{} FOOD-ERROR
 (define-condition bad-tasting-sundae (food-error) 
   ((ice-cream :initarg :ice-cream :reader bad-tasting-sundae-ice-cream)
    (sauce :initarg :sauce :reader bad-tasting-sundae-sauce)
    (topping :initarg :topping :reader bad-tasting-sundae-topping))
   (:report (lambda (condition stream)
              (format stream "Bad tasting sundae with ~S, ~S, and ~S"
                      (bad-tasting-sundae-ice-cream condition)
                      (bad-tasting-sundae-sauce condition)
                      (bad-tasting-sundae-topping condition)))))
@EV{} BAD-TASTING-SUNDAE
 (defun all-start-with-same-letter (symbol1 symbol2 symbol3)
   (let ((first-letter (char (symbol-name symbol1) 0)))
     (and (eql first-letter (char (symbol-name symbol2) 0))
          (eql first-letter (char (symbol-name symbol3) 0)))))
@EV{} ALL-START-WITH-SAME-LETTER
 (defun read-new-value ()
   (format t "Enter a new value: ")
   (multiple-value-list (eval (read))))
@EV{} READ-NEW-VALUE@eject{}
 (defun verify-or-fix-perfect-sundae (ice-cream sauce topping)
   (do ()
      ((all-start-with-same-letter ice-cream sauce topping))
     (restart-case
       (error 'bad-tasting-sundae
              :ice-cream ice-cream
              :sauce sauce
              :topping topping)
       (use-new-ice-cream (new-ice-cream)
         :report "Use a new ice cream."
         :interactive read-new-value  
         (setq ice-cream new-ice-cream))
       (use-new-sauce (new-sauce)
         :report "Use a new sauce."
         :interactive read-new-value
         (setq sauce new-sauce))
       (use-new-topping (new-topping)
         :report "Use a new topping."
         :interactive read-new-value
         (setq topping new-topping))))
   (values ice-cream sauce topping))
@EV{} VERIFY-OR-FIX-PERFECT-SUNDAE
 (verify-or-fix-perfect-sundae 'vanilla 'caramel 'cherry)
@OUT{} Error: Bad tasting sundae with VANILLA, CARAMEL, and CHERRY.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Use a new ice cream.
@OUT{}  2: Use a new sauce.
@OUT{}  3: Use a new topping.
@OUT{}  4: Return to Lisp Toplevel.
@OUT{} Debug> @IN{:continue 1}
@OUT{} Use a new ice cream.
@OUT{} Enter a new ice cream: @IN{'chocolate}
@EV{} CHOCOLATE, CARAMEL, CHERRY
@end lisp


@subsubheading See Also:

@ref{restart-bind}, @ref{with-simple-restart}.

@subsubheading Notes:

@lisp
 (restart-case @i{expression}
    (@i{name1} @i{arglist1} ...@i{options1}... . @i{body1})
    (@i{name2} @i{arglist2} ...@i{options2}... . @i{body2}))
@end lisp

is essentially equivalent to

@lisp
 (block #1=#:g0001
   (let ((#2=#:g0002 nil))
        (tagbody
        (restart-bind ((name1 #'(lambda (&rest temp)
                                (setq #2# temp)
                                (go #3=#:g0003))
                          ...@i{slightly-transformed-options1}...)
                       (name2 #'(lambda (&rest temp)
                                (setq #2# temp)
                                (go #4=#:g0004))
                          ...@i{slightly-transformed-options2}...))
        (return-from #1# @i{expression}))
          #3# (return-from #1#
                  (apply #'(lambda @i{arglist1} . @i{body1}) #2#))
          #4# (return-from #1#
                  (apply #'(lambda @i{arglist2} . @i{body2}) #2#)))))
@end lisp


Unnamed restarts are generally only useful interactively
and an interactive option which has no description is of little value.
Implementations are encouraged to warn if 
an unnamed restart is used and no report information
is provided
at compilation    time.  
At runtime, this error might be noticed when entering
the debugger.  Since signaling an error would probably cause recursive
entry into the debugger (causing yet another recursive error, etc.) it is
suggested that the debugger print some indication of such problems when
they occur but not actually signal errors.

@lisp
 (restart-case (signal fred)
   (a ...)
   (b ...))
 @EQ{}
 (restart-case
     (with-condition-restarts fred 
                              (list (find-restart 'a) 
                                    (find-restart 'b))
       (signal fred))
   (a ...)
   (b ...))
@end lisp




@node restart-name
@heading restart-name (Function)
@syindex restart-name
@cindex restart-name


@subsubheading Syntax:

@DefunWithValues{restart-name, restart, name}

@subsubheading Arguments and Values:

@param{restart}---a @term{restart}.

@param{name}---a @term{symbol}.

@subsubheading Description:

Returns the name of the @param{restart},
or @nil{}@spc{}if the @param{restart} is not named.

@subsubheading Examples:

@lisp
 (restart-case 
     (loop for restart in (compute-restarts)
               collect (restart-name restart))
   (case1 () :report "Return 1." 1)
   (nil   () :report "Return 2." 2)
   (case3 () :report "Return 3." 3)
   (case1 () :report "Return 4." 4))
@EV{} (CASE1 NIL CASE3 CASE1 ABORT)
 ;; In the example above the restart named ABORT was not created
 ;; explicitly, but was implicitly supplied by the system.
@end lisp


@subsubheading See Also:

@ref{compute-restarts}
@ref{find-restart}


@node with-condition-restarts
@heading with-condition-restarts (Macro)
@syindex with-condition-restarts
@cindex with-condition-restarts



@subsubheading Syntax:

@DefmacWithValuesNewline{with-condition-restarts, condition-form restarts-form @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{condition-form}---a @term{form}; @term{evaluated} to produce a @param{condition}.

@param{condition}---a @term{condition} @term{object} resulting from the 
@term{evaluation} of @param{condition-form}.

@param{restart-form}---a @term{form}; @term{evaluated} to produce a @param{restart-list}.

@param{restart-list}---a @term{list} of @term{restart} @term{objects} resulting 
from the @term{evaluation} of @param{restart-form}.

@param{forms}---an @term{implicit progn}; @eval{}.

@param{results}---the @term{values} returned by @param{forms}.

@subsubheading Description:

First, the @param{condition-form} and @param{restarts-form} are @term{evaluated}
in normal left-to-right order; the @term{primary values} yielded by these
@term{evaluations} are respectively called the @param{condition} 
and the @param{restart-list}.

Next, the @param{forms} are @term{evaluated} in a @term{dynamic environment}
in which each @term{restart} in @param{restart-list} is associated with
the @param{condition}.  See @ref{AssocRestartWithCond, Section 9.1.4.2.4 (Associating a Restart with a Condition)}.

@subsubheading See Also:

@ref{restart-case}

@subsubheading Notes:

Usually this @term{macro} is not used explicitly in code, 
since @code{restart-case} handles most of the common cases
in a way that is syntactically more concise.



@node with-simple-restart
@heading with-simple-restart (Macro)
@syindex with-simple-restart
@cindex with-simple-restart


@subsubheading Syntax:

@DefmacWithValuesNewline{with-simple-restart, @paren{name format-control @starparam{format-argument}} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{name}---a @term{symbol}.

@param{format-control}---a @term{format control}.

@param{format-argument}---an @term{object} (@ie{} a @term{format argument}).

@param{forms}---an @term{implicit progn}.

@param{results}---in the normal situation,
the @term{values} returned by the @param{forms};
in the exceptional situation where the @term{restart} named @param{name} is invoked,
two values---@nil{}@spc{}and @code{t}.

@subsubheading Description:

@code{with-simple-restart} establishes a restart.  

If the restart designated by @param{name} is not invoked while executing @param{forms},
all values returned by the last of @param{forms} are returned. 
If the restart designated by @param{name} is invoked,
control is transferred to @code{with-simple-restart},
which returns two values, @nil{}@spc{}and @code{t}.

If @param{name} is @nil{}, an anonymous restart is established.

The @param{format-control} and @param{format-arguments} are used 
report the @term{restart}.

@subsubheading Examples:

@lisp
 (defun read-eval-print-loop (level)
   (with-simple-restart (abort "Exit command level ~D." level)
     (loop
       (with-simple-restart (abort "Return to command level ~D." level)
         (let ((form (prog2 (fresh-line) (read) (fresh-line))))
           (prin1 (eval form)))))))
@EV{} READ-EVAL-PRINT-LOOP
 (read-eval-print-loop 1)
 (+ 'a 3)
@OUT{} Error: The argument, A, to the function + was of the wrong type.
@OUT{}        The function expected a number.
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Specify a value to use this time.
@OUT{}  2: Return to command level 1.
@OUT{}  3: Exit command level 1.
@OUT{}  4: Return to Lisp Toplevel.
@end lisp


@lisp
 (defun compute-fixnum-power-of-2 (x)
   (with-simple-restart (nil "Give up on computing 2@hat{}~D." x)
     (let ((result 1))
       (dotimes (i x result)
         (setq result (* 2 result))
         (unless (fixnump result)
           (error "Power of 2 is too large."))))))
COMPUTE-FIXNUM-POWER-OF-2
 (defun compute-power-of-2 (x)
   (or (compute-fixnum-power-of-2 x) 'something big))
COMPUTE-POWER-OF-2
 (compute-power-of-2 10)
1024
 (compute-power-of-2 10000)
@OUT{} Error: Power of 2 is too large.
@OUT{} To continue, type :CONTINUE followed by an option number.
@OUT{}  1: Give up on computing 2@hat{}10000.
@OUT{}  2: Return to Lisp Toplevel
@OUT{} Debug> @IN{:continue 1}
@EV{} SOMETHING-BIG
@end lisp


@subsubheading See Also:

@ref{restart-case}

@subsubheading Notes:

@code{with-simple-restart} is shorthand for one of the most
common uses of @code{restart-case}.

@code{with-simple-restart} could be defined by:

@lisp
 (defmacro with-simple-restart ((restart-name format-control
                                              &rest format-arguments)
                                &body forms)
   `(restart-case (progn ,@@forms)
      (,restart-name ()
          :report (lambda (stream)
                    (format stream ,format-control ,@@format-arguments))
         (values nil t))))
@end lisp


Because the second return value is @code{t}@spc{}in the exceptional case,
it is common (but not required) to arrange for the second return value
in the normal case to be missing or @nil{}@spc{}so that the two situations
can be distinguished.


@node abort (Restart)
@heading abort (Restart)
@syindex abort
@cindex abort


@subsubheading Data Arguments Required:

None.

@subsubheading Description:

The intent of the @t{abort} restart is to allow return to the
innermost ``command level.''  Implementors are encouraged to make 
sure that there is always a restart named @code{abort} 
around any user code so that user code can call @code{abort} 
at any time and expect something reasonable to happen;
exactly what the reasonable thing is may vary somewhat.  Typically,
in an interactive listener, the invocation of @code{abort}
returns to the @term{Lisp reader} phase of the @term{Lisp read-eval-print loop},
though in some batch or multi-processing
situations there may be situations in which having it kill the running 
process is more appropriate.

@subsubheading See Also:

@ref{Restarts, Section 9.1.4.2 (Restarts)},
@ref{InterfacesToRestarts, Section 9.1.4.2.2 (Interfaces to Restarts)},
@ref{invoke-restart},
@ref{abort} (@term{function})


@node continue (Restart)
@heading continue (Restart)
@syindex continue
@cindex continue


@subsubheading Data Arguments Required:

None.

@subsubheading Description:

@Therestart{continue} is generally part of protocols where there is
a single ``obvious'' way to continue, such as in 
@code{break} and @code{cerror}.  Some
user-defined protocols may also wish to incorporate it for similar reasons.
In general, however, it is more reliable to design a special purpose restart
with a name that more directly suits the particular application.

@subsubheading Examples:

@lisp
 (let ((x 3))
   (handler-bind ((error #'(lambda (c)
                             (let ((r (find-restart 'continue c)))
                               (when r (invoke-restart r))))))
     (cond ((not (floatp x))
            (cerror "Try floating it." "~D is not a float." x)
            (float x))
           (t x)))) @EV{} 3.0
@end lisp


@subsubheading See Also:

@ref{Restarts, Section 9.1.4.2 (Restarts)},
@ref{InterfacesToRestarts, Section 9.1.4.2.2 (Interfaces to Restarts)},
@ref{invoke-restart},
@ref{continue} (@term{function}),
@ref{assert},
@ref{cerror}


@node muffle-warning (Restart)
@heading muffle-warning (Restart)
@syindex muffle-warning
@cindex muffle-warning


@subsubheading Data Arguments Required:

None.

@subsubheading Description:

This @term{restart} is established by @code{warn} so that @term{handlers}
of @code{warning} @term{conditions} have a way to tell @code{warn} 
that a warning has already been dealt with and that no further action is warranted.

@subsubheading Examples:

@lisp
 (defvar *all-quiet* nil) @EV{} *ALL-QUIET*
 (defvar *saved-warnings* '()) @EV{} *SAVED-WARNINGS*
 (defun quiet-warning-handler (c)
   (when *all-quiet*
     (let ((r (find-restart 'muffle-warning c)))
       (when r 
         (push c *saved-warnings*)
         (invoke-restart r)))))
@EV{} CUSTOM-WARNING-HANDLER
 (defmacro with-quiet-warnings (&body forms)
   `(let ((*all-quiet* t)
          (*saved-warnings* '()))
      (handler-bind ((warning #'quiet-warning-handler))
        ,@@forms
        *saved-warnings*)))
@EV{} WITH-QUIET-WARNINGS
 (setq saved
   (with-quiet-warnings
     (warn "Situation #1.")
     (let ((*all-quiet* nil))
       (warn "Situation #2."))
     (warn "Situation #3.")))
@OUT{} Warning: Situation #2.
@EV{} (#<SIMPLE-WARNING 42744421> #<SIMPLE-WARNING 42744365>)
 (dolist (s saved) (format t "~&~A~%" s))
@OUT{} Situation #3.
@OUT{} Situation #1.
@EV{} NIL
@end lisp


@subsubheading See Also:

@ref{Restarts, Section 9.1.4.2 (Restarts)},
@ref{InterfacesToRestarts, Section 9.1.4.2.2 (Interfaces to Restarts)},
@ref{invoke-restart},
@ref{muffle-warning} (@term{function}),
@ref{warn}


@node store-value (Restart)
@heading store-value (Restart)
@syindex store-value
@cindex store-value


@subsubheading Data Arguments Required:

a value to use instead (on an ongoing basis).

@subsubheading Description:

@Therestart{store-value} is generally used by @term{handlers}
trying to recover from errors of @term{types} such as @code{cell-error} 
or @code{type-error}, which may wish to supply a replacement datum to
be stored permanently.

@subsubheading Examples:

@lisp
 (defun type-error-auto-coerce (c)
   (when (typep c 'type-error)
     (let ((r (find-restart 'store-value c)))
       (handler-case (let ((v (coerce (type-error-datum c)
                                      (type-error-expected-type c))))
                       (invoke-restart r v))
         (error ()))))) @EV{} TYPE-ERROR-AUTO-COERCE
 (let ((x 3))
   (handler-bind ((type-error #'type-error-auto-coerce))
     (check-type x float)
     x)) @EV{} 3.0
@end lisp


@subsubheading See Also:

@ref{Restarts, Section 9.1.4.2 (Restarts)},
@ref{InterfacesToRestarts, Section 9.1.4.2.2 (Interfaces to Restarts)},
@ref{invoke-restart},
@ref{store-value} (@term{function}),
@ref{ccase},
@ref{check-type},
@ref{ctypecase},
@ref{use-value} (@term{function} and @term{restart})


@node use-value (Restart)
@heading use-value (Restart)
@syindex use-value
@cindex use-value


@subsubheading Data Arguments Required:

a value to use instead (once).

@subsubheading Description:

@Therestart{use-value} is generally used by @term{handlers} trying 
to recover from errors of @term{types} such as @code{cell-error}, 
where the handler may wish to supply a replacement datum for one-time use.

@subsubheading See Also:

@ref{Restarts, Section 9.1.4.2 (Restarts)},
@ref{InterfacesToRestarts, Section 9.1.4.2.2 (Interfaces to Restarts)},
@ref{invoke-restart},
@ref{use-value} (@term{function}),
@ref{store-value} (@term{function} and @term{restart})


@node abort; continue; muffle-warning; store-value; use-value
@heading abort, continue, muffle-warning, store-value, use-value (Function)
@syindex abort
@cindex abort
@syindex continue
@cindex continue
@syindex muffle-warning
@cindex muffle-warning
@syindex store-value
@cindex store-value
@syindex use-value
@cindex use-value
@anchor{abort}
@anchor{continue}
@anchor{muffle-warning}
@anchor{store-value}
@anchor{use-value}

@cindex abort
@cindex continue
@cindex muffle-warning
@cindex store-value
@cindex use-value

@subsubheading Syntax:

@DefunNoReturn{abort, @opt{} condition}
@DefunWithValues{continue, @opt{} condition, @nil{}}
@DefunNoReturn{muffle-warning, @opt{} condition}
@DefunWithValues{store-value, value @opt{} condition, @nil{}}
@DefunWithValues{use-value, value @opt{} condition, @nil{}}

@subsubheading Arguments and Values:

@param{value}---an @term{object}.

@param{condition}---a @term{condition} @term{object}, or @nil{}.

@subsubheading Description:

Transfers control to the most recently established @term{applicable restart}
having the same name as the function.  That is,
@thefunction{abort}    searches for an @term{applicable} @t{abort}    @term{restart}, 
@thefunction{continue} searches for an @term{applicable} @t{continue} @term{restart},
and so on.

If no such @term{restart} exists, 
the functions
@code{continue},
@code{store-value}, 
and @code{use-value}
return @nil{}, and 
the functions
@code{abort}
and @code{muffle-warning}
signal an error @oftype{control-error}.

When @param{condition} is @term{non-nil},
only those @term{restarts} are considered that are 
either explicitly associated with that @param{condition},
or not associated with any @term{condition};
that is, the excluded @term{restarts} are 
those that are associated with a non-empty set of @term{conditions}
of which the given @param{condition} is not an @term{element}.
If @param{condition} is @nil{}, all @term{restarts} are considered.

@subsubheading Examples:

@lisp
;;; Example of the ABORT retart

 (defmacro abort-on-error (&body forms)
   `(handler-bind ((error #'abort))
      ,@@forms)) @EV{} ABORT-ON-ERROR
 (abort-on-error (+ 3 5)) @EV{} 8
 (abort-on-error (error "You lose."))
@OUT{} Returned to Lisp Top Level.

;;; Example of the CONTINUE restart

 (defun real-sqrt (n)
   (when (minusp n)
     (setq n (- n))
     (cerror "Return sqrt(~D) instead." "Tried to take sqrt(-~D)." n))
   (sqrt n))

 (real-sqrt 4) @EV{} 2
 (real-sqrt -9)
@OUT{} Error: Tried to take sqrt(-9).
@OUT{} To continue, type :CONTINUE followed by an option number:
@OUT{}  1: Return sqrt(9) instead.
@OUT{}  2: Return to Lisp Toplevel.
@OUT{} Debug> @IN{(continue)}
@OUT{} Return sqrt(9) instead.
@EV{} 3
 
 (handler-bind ((error #'(lambda (c) (continue))))
   (real-sqrt -9)) @EV{} 3

;;; Example of the MUFFLE-WARNING restart

 (defun count-down (x)
   (do ((counter x (1- counter)))
       ((= counter 0) 'done)
     (when (= counter 1)
       (warn "Almost done"))
     (format t "~&~D~%" counter)))
@EV{} COUNT-DOWN
 (count-down 3)
@OUT{} 3
@OUT{} 2
@OUT{} Warning: Almost done
@OUT{} 1
@EV{} DONE
 (defun ignore-warnings-while-counting (x)
   (handler-bind ((warning #'ignore-warning))
     (count-down x)))
@EV{} IGNORE-WARNINGS-WHILE-COUNTING
 (defun ignore-warning (condition)
   (declare (ignore condition))
   (muffle-warning))
@EV{} IGNORE-WARNING
 (ignore-warnings-while-counting 3)
@OUT{} 3
@OUT{} 2
@OUT{} 1
@EV{} DONE

;;; Example of the STORE-VALUE and USE-VALUE restarts

 (defun careful-symbol-value (symbol)
   (check-type symbol symbol)
   (restart-case (if (boundp symbol)
                     (return-from careful-symbol-value 
                                  (symbol-value symbol))
                     (error 'unbound-variable
                            :name symbol))
     (use-value (value)
       :report "Specify a value to use this time."
       value)
     (store-value (value)
       :report "Specify a value to store and use in the future."
       (setf (symbol-value symbol) value))))
 (setq a 1234) @EV{} 1234
 (careful-symbol-value 'a) @EV{} 1234
 (makunbound 'a) @EV{} A
 (careful-symbol-value 'a)
@OUT{} Error: A is not bound.
@OUT{} To continue, type :CONTINUE followed by an option number.
@OUT{}  1: Specify a value to use this time.
@OUT{}  2: Specify a value to store and use in the future.
@OUT{}  3: Return to Lisp Toplevel.
@OUT{} Debug> @IN{(use-value 12)}
@EV{} 12
 (careful-symbol-value 'a)
@OUT{} Error: A is not bound.
@OUT{} To continue, type :CONTINUE followed by an option number.
@OUT{}   1: Specify a value to use this time.
@OUT{}   2: Specify a value to store and use in the future.
@OUT{}   3: Return to Lisp Toplevel.
@OUT{} Debug> @IN{(store-value 24)}
@EV{} 24
 (careful-symbol-value 'a)
@EV{} 24

;;; Example of the USE-VALUE restart

 (defun add-symbols-with-default (default &rest symbols)
   (handler-bind ((sys:unbound-symbol
                    #'(lambda (c)
                        (declare (ignore c)) 
                        (use-value default))))
     (apply #'+ (mapcar #'careful-symbol-value symbols))))
@EV{} ADD-SYMBOLS-WITH-DEFAULT
 (setq x 1 y 2) @EV{} 2
 (add-symbols-with-default 3 'x 'y 'z) @EV{} 6


@end lisp


@subsubheading Side Effects:

A transfer of control may occur if an appropriate @term{restart} is available,
or (in the case of @thefunction{abort} or @thefunction{muffle-warning})
execution may be stopped.

@subsubheading Affected By:

Each of these functions can be affected by 
the presence of a @term{restart} having the same name.

@subsubheading Exceptional Situations:

If an appropriate @t{abort} @term{restart}
is not available for @thefunction{abort},
or an appropriate @t{muffle-warning} @term{restart} 
is not available for @thefunction{muffle-warning},
an error @oftype{control-error} is signaled.

@subsubheading See Also:

@ref{invoke-restart},
@ref{Restarts, Section 9.1.4.2 (Restarts)},
@ref{InterfacesToRestarts, Section 9.1.4.2.2 (Interfaces to Restarts)},
@ref{assert},
@ref{ccase},
@ref{cerror},
@ref{check-type},
@ref{ctypecase},
@ref{use-value},
@ref{warn}

@subsubheading Notes:

@lisp
 (abort condition) @EQ{} (invoke-restart 'abort)
 (muffle-warning)  @EQ{} (invoke-restart 'muffle-warning)
 (continue)        @EQ{} (let ((r (find-restart 'continue))) (if r (invoke-restart r)))
 (use-value @param{x}) @EQ{} (let ((r (find-restart 'use-value))) (if r (invoke-restart r @param{x})))
 (store-value x) @EQ{} (let ((r (find-restart 'store-value))) (if r (invoke-restart r @param{x})))
@end lisp


No functions defined in this specification are required to provide
a @t{use-value} @term{restart}.




@node Symbols
@chapter Symbols
@menu
* Symbol Concepts::

Dictionary

* symbol::
* keyword::
* symbolp::
* keywordp::
* make-symbol::
* copy-symbol::
* gensym::
* *gensym-counter*::
* gentemp::
* symbol-function::
* symbol-name::
* symbol-package::
* symbol-plist::
* symbol-value::
* get::
* remprop::
* boundp::
* makunbound::
* set::
* unbound-variable::
@end menu

@node Symbol Concepts
@section Symbol Concepts

@Thenextfigure{}@spc{}lists some
@term{defined names} that are applicable to the @term{property lists} of @term{symbols}.


@float Figure,fig10.1
@cartouche
@multitable{get}{remprop}{symbol-plist}

@item get @tab remprop @tab symbol-plist
@end multitable
@end cartouche
@caption{Property list defined names}
@end float


@Thenextfigure{}@spc{}lists some @term{defined names} that are applicable 
to the creation of and inquiry about @term{symbols}.


@float Figure,fig10.2
@cartouche
@multitable{copy-symbol}{make-symbol}{symbol-package}

@item copy-symbol @tab keywordp @tab symbol-package
@item gensym @tab make-symbol @tab symbol-value
@item gentemp @tab symbol-name @tab 
@end multitable
@end cartouche
@caption{Symbol creation and inquiry defined names}
@end float



@node symbol
@heading symbol (System Class)
@syindex symbol
@cindex symbol


@subsubheading Class Precedence List:
@code{symbol},
@code{t}

@subsubheading Description:

@term{Symbols} are used for their @term{object} identity to name various entities
in @clisp{}, including (but not limited to) linguistic entities such as
@term{variables} and @term{functions}.

@term{Symbols} can be collected together into @term{packages}.
A @term{symbol} is said to be @term{interned} in a @term{package} 
if it is @term{accessible} in that @term{package};
the same @term{symbol} can be @term{interned} in more than one @term{package}.
If a @term{symbol} is not @term{interned} in any @term{package}, 
it is called @term{uninterned}.

An @term{interned} @term{symbol} is uniquely identifiable by its @term{name} from 
any @term{package} in which it is @term{accessible}.

@term{Symbols} have the following attributes. 
For historical reasons,
these are sometimes referred to as @term{cells}, although the actual
internal representation of @term{symbols} and their attributes is
@term{implementation-dependent}.


@table @asis

@item @id{@b{Name}}


The @term{name} of a @term{symbol} is a @term{string} used to identify the @term{symbol}.
Every @term{symbol} has a @term{name}, 
and the consequences are undefined if that @term{name} is altered.  
The @term{name} is used as part of the external, printed representation of
the @term{symbol}; see @ref{Character Syntax, Section 2.1 (Character Syntax)}.
@Thefunction{symbol-name} returns the @term{name} of a given @term{symbol}.
A @term{symbol} may have any @term{character} in its @term{name}.

@item @id{@b{Package}}


The @term{object} in this @term{cell} is called the @term{home package} 
of the @term{symbol}.  If the @term{home package} is @nil{}, the @term{symbol}
is sometimes said to have no @term{home package}.

When a @term{symbol} is first created, it has no @term{home package}.
When it is first @term{interned}, the @term{package} in which it is
initially @term{interned} becomes its @term{home package}.
The @term{home package} of a @term{symbol} can be @term{accessed}
by using @thefunction{symbol-package}.

If a @term{symbol} is @term{uninterned} from the @term{package} 
which is its @term{home package}, its @term{home package} is set to @nil{}.
Depending on whether there is another @term{package} in which the @term{symbol}
is @term{interned}, the symbol might or might not really be an @term{uninterned} @term{symbol}.
A @term{symbol} with no @term{home package} is therefore called 
@term{apparently uninterned}.

The consequences are undefined if an attempt is made to alter the @term{home package}
of a @term{symbol} 
external
in the @code{COMMON-LISP} @term{package} or the @code{KEYWORD} @term{package}.

@item @id{@b{Property list}}


The @term{property list} of a @term{symbol} provides a mechanism for
associating named attributes with that @term{symbol}.
The operations for adding and removing entries are @term{destructive}
to the @term{property list}.  @clisp{}@spc{}provides @term{operators} both for
direct manipulation of @term{property list} @term{objects} 
(@eg{} see @code{getf}, @code{remf}, and @code{symbol-plist})
and for implicit manipulation of a @term{symbol}'s @term{property list} 
by reference to the @term{symbol} 
(@eg{} see @code{get} and @code{remprop}).
The @term{property list} associated with a @term{fresh} @term{symbol} is 
initially @term{null}.

@item @id{@b{Value}}


If a symbol has a value attribute, it is said to be @term{bound},
and that fact can be detected by @thefunction{boundp}.
The @term{object} contained in the @term{value cell} of a @term{bound} @term{symbol}
is the @term{value} of the @term{global variable} named by that @term{symbol}, 
and can be @term{accessed} by @thefunction{symbol-value}.
A @term{symbol} can be made to be @term{unbound} by @thefunction{makunbound}.

The consequences are undefined if an attempt is made to change the @term{value}
of a @term{symbol} that names a @term{constant variable}, or to make such a 
@term{symbol} be @term{unbound}.

@item @id{@b{Function}}


If a symbol has a function attribute, it is said to be @term{fbound},
and that fact can be detected by @thefunction{fboundp}.
If the @term{symbol} is the @term{name} of a @term{function} in the @term{global environment},
the @term{function cell} contains the @term{function}, 
and can be @term{accessed} by @thefunction{symbol-function}.
If the @term{symbol} is the @term{name} of either
a @term{macro} in the @term{global environment} (see @code{macro-function})
or a @term{special operator} (see @code{special-operator-p}),
the @term{symbol} is @term{fbound}, 
and can be @term{accessed} by @thefunction{symbol-function},
but the @term{object} which the @term{function cell}
contains is of @term{implementation-dependent} @term{type} and purpose.
A @term{symbol} can be made to be @term{funbound} by @thefunction{fmakunbound}.

The consequences are undefined if an attempt is made to change the @term{functional value}
of a @term{symbol} that names a @term{special form}.
@end table


Operations on a @term{symbol}'s @term{value cell} and @term{function cell} are
sometimes described in terms of their effect on the @term{symbol} itself, but 
the user should keep in mind that there is an intimate relationship between the
contents of those @term{cells} and the @term{global variable} or 
global @term{function} definition, respectively.

@term{Symbols} are used as identifiers for @term{lexical variables} and 
lexical @term{function} definitions, but in that role, only their @term{object}
identity is significant.  @clisp{}@spc{}provides no operation on a @term{symbol} that
can have any effect on a @term{lexical variable} or 
on a lexical @term{function} definition.

@subsubheading See Also:

@ref{Symbols as Tokens, Section 2.3.4 (Symbols as Tokens)},
@ref{PotentialNumbersAsTokens, Section 2.3.1.1 (Potential Numbers as Tokens)},
@ref{PrintingSymbols, Section 22.1.3.3 (Printing Symbols)}


@node keyword
@heading keyword (Type)
@syindex keyword
@cindex keyword


@subsubheading Supertypes:

@code{keyword},
@code{symbol},
@code{t}

@subsubheading Description:

@Thetype{keyword} includes all @term{symbols} @term{interned} the @code{KEYWORD} @term{package}.

@term{Interning} a @term{symbol} in the @code{KEYWORD} @term{package} has three automatic effects:


@enumerate 1
@item It causes the @term{symbol} to become @term{bound} to itself.
@item It causes the @term{symbol} to become an @term{external symbol}
of the @code{KEYWORD} @term{package}.
@item It causes the @term{symbol} to become a @term{constant variable}.
@end enumerate


@subsubheading See Also:

@ref{keywordp}


@node symbolp
@heading symbolp (Function)
@syindex symbolp
@cindex symbolp


@subsubheading Syntax:

@DefunWithValues{symbolp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, symbol}

@subsubheading Examples:

@lisp
 (symbolp 'elephant) @EV{} @term{true}
 (symbolp 12) @EV{} @term{false}
 (symbolp nil) @EV{} @term{true}
 (symbolp '()) @EV{} @term{true}
 (symbolp :test) @EV{} @term{true}
 (symbolp "hello") @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{keywordp},
@ref{symbol},
@ref{typep}

@subsubheading Notes:

@lisp
 (symbolp @param{object}) @EQ{} (typep @param{object} 'symbol)
@end lisp



@node keywordp
@heading keywordp (Function)
@syindex keywordp
@cindex keywordp


@subsubheading Syntax:

@DefunWithValues{keywordp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@Predicate{object, a @term{keyword}@sub1{}}

@subsubheading Examples:

@lisp
 (keywordp 'elephant) @EV{} @term{false}
 (keywordp 12) @EV{} @term{false}
 (keywordp :test) @EV{} @term{true}
 (keywordp ':test) @EV{} @term{true}
 (keywordp nil) @EV{} @term{false}
 (keywordp :nil) @EV{} @term{true}
 (keywordp '(:test)) @EV{} @term{false}
 (keywordp "hello") @EV{} @term{false}
 (keywordp ":hello") @EV{} @term{false}
 (keywordp '&optional) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{constantp},
@ref{keyword},
@ref{symbolp},
@ref{symbol-package}


@node make-symbol
@heading make-symbol (Function)
@syindex make-symbol
@cindex make-symbol


@subsubheading Syntax:

@DefunWithValues{make-symbol, name, new-symbol}

@subsubheading Arguments and Values:

@param{name}---a @term{string}.

@param{new-symbol}---a @term{fresh}, @term{uninterned} @term{symbol}.

@subsubheading Description:

@code{make-symbol} creates and returns a @term{fresh}, @term{uninterned}
@term{symbol} whose @term{name} is the given @param{name}.
The @param{new-symbol} is neither @term{bound} nor @term{fbound} 
and has a @term{null} @term{property list}.

It is @term{implementation-dependent} whether the @term{string} 
that becomes the @param{new-symbol}'s @term{name} is the given
@param{name} or a copy of it.  Once a @term{string}
has been given as the @param{name} @term{argument} to
@term{make-symbol}, the consequences are undefined if a
subsequent attempt is made to alter that @term{string}.

@subsubheading Examples:

@lisp
 (setq temp-string "temp") @EV{} "temp"
 (setq temp-symbol (make-symbol temp-string)) @EV{} #:|temp|
 (symbol-name temp-symbol) @EV{} "temp"
 (eq (symbol-name temp-symbol) temp-string) @EV{} @term{implementation-dependent}
 (find-symbol "temp") @EV{} NIL, NIL
 (eq (make-symbol temp-string) (make-symbol temp-string)) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{name, a @term{string}}

@subsubheading See Also:

@ref{copy-symbol}

@subsubheading Notes:

No attempt is made by @code{make-symbol} to convert the case
of the @term{name} to uppercase.  The only case conversion which ever 
occurs for @term{symbols} is done by the @term{Lisp reader}.
The program interface to @term{symbol} creation retains case,
and the program interface to interning symbols is case-sensitive.


@node copy-symbol
@heading copy-symbol (Function)
@syindex copy-symbol
@cindex copy-symbol


@subsubheading Syntax:

@DefunWithValues{copy-symbol, symbol @opt{} copy-properties, new-symbol}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{copy-properties}---a @term{generalized boolean}.
@Default{@term{false}}

@param{new-symbol}---a @term{fresh}, @term{uninterned} @term{symbol}.

@subsubheading Description:

@code{copy-symbol} returns a @term{fresh}, @term{uninterned} @term{symbol},
the @term{name} of which is @code{string=} to and possibly the @term{same} as
the @term{name} of the given @param{symbol}.

If @param{copy-properties} is @term{false},
the @param{new-symbol} is neither @term{bound} nor @term{fbound} 
and has a @term{null} @term{property list}.
If @param{copy-properties} is @term{true}, then
the initial @term{value} of @param{new-symbol} is
the @term{value} of @param{symbol},
the initial @term{function} definition of @param{new-symbol} is
the @term{functional value} of @param{symbol},
and the @term{property list} of @param{new-symbol} is
a @term{copy}@sub2{} of the @term{property list} of @param{symbol}.

@subsubheading Examples:

@lisp
 (setq fred 'fred-smith) @EV{} FRED-SMITH
 (setf (symbol-value fred) 3) @EV{} 3
 (setq fred-clone-1a (copy-symbol fred nil)) @EV{} #:FRED-SMITH
 (setq fred-clone-1b (copy-symbol fred nil)) @EV{} #:FRED-SMITH
 (setq fred-clone-2a (copy-symbol fred t))   @EV{} #:FRED-SMITH
 (setq fred-clone-2b (copy-symbol fred t))   @EV{} #:FRED-SMITH
 (eq fred fred-clone-1a) @EV{} @term{false}
 (eq fred-clone-1a fred-clone-1b) @EV{} @term{false}
 (eq fred-clone-2a fred-clone-2b) @EV{} @term{false}
 (eq fred-clone-1a fred-clone-2a) @EV{} @term{false}
 (symbol-value fred) @EV{} 3
 (boundp fred-clone-1a) @EV{} @term{false}
 (symbol-value fred-clone-2a) @EV{} 3
 (setf (symbol-value fred-clone-2a) 4) @EV{} 4
 (symbol-value fred) @EV{} 3
 (symbol-value fred-clone-2a) @EV{} 4
 (symbol-value fred-clone-2b) @EV{} 3
 (boundp fred-clone-1a) @EV{} @term{false}
 (setf (symbol-function fred) #'(lambda (x) x)) @EV{} #<FUNCTION anonymous>
 (fboundp fred) @EV{} @term{true}
 (fboundp fred-clone-1a) @EV{} @term{false}
 (fboundp fred-clone-2a) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{symbol, a @term{symbol}}

@subsubheading See Also:

@ref{make-symbol}

@subsubheading Notes:

Implementors are encouraged not to copy the @term{string} 
which is the @term{symbol}'s @term{name} unnecessarily.  
Unless there is a good reason to do so, the normal implementation
strategy is for the @param{new-symbol}'s @term{name} to
be @term{identical} to the given @param{symbol}'s @term{name}.


@node gensym
@heading gensym (Function)
@syindex gensym
@cindex gensym


@subsubheading Syntax:

@DefunWithValues{gensym, @opt{} x, new-symbol}

@subsubheading Arguments and Values:

@param{x}---a @term{string} or a non-negative @term{integer}.
@HairyDefault{}.

@param{new-symbol}---a @term{fresh}, @term{uninterned} @term{symbol}.

@subsubheading Description:

Creates and returns a @term{fresh}, @term{uninterned} @term{symbol},
as if by calling @code{make-symbol}.  (The only difference between
@code{gensym} and @code{make-symbol} is in how the @param{new-symbol}'s 
@term{name} is determined.)

The @term{name} of the @param{new-symbol} is the concatenation 
of a prefix, which defaults to @f{"G"}, and
a suffix, which is the decimal representation of a number that
defaults to @thevalueof{*gensym-counter*}.

If @param{x} is supplied, and is a @term{string}, then that @term{string} 
is used as a prefix instead of @f{"G"} for this call to @code{gensym} only.

If @param{x} is supplied, and is an @term{integer}, then that @term{integer},
instead of @thevalueof{*gensym-counter*}, is used as the suffix
for this call to @code{gensym} only.

If and only if no explicit suffix is supplied,
@code{*gensym-counter*} is incremented after it is used.

@subsubheading Examples:

@lisp
 (setq sym1 (gensym)) @EV{} #:G3142
 (symbol-package sym1) @EV{} NIL
 (setq sym2 (gensym 100)) @EV{} #:G100
 (setq sym3 (gensym 100)) @EV{} #:G100
 (eq sym2 sym3) @EV{} @term{false}
 (find-symbol "G100") @EV{} NIL, NIL
 (gensym "T") @EV{} #:T3143
 (gensym) @EV{} #:G3144
@end lisp


@subsubheading Side Effects:

Might increment @code{*gensym-counter*}.

@subsubheading Affected By:

@code{*gensym-counter*}

@subsubheading Exceptional Situations:

@Shouldchecktype{x, a @term{string} or a non-negative @term{integer}}

@subsubheading See Also:

@ref{gentemp},
@ref{*gensym-counter*}

@subsubheading Notes:

The ability to pass a numeric argument to @code{gensym} has been deprecated;
explicitly @term{binding} @code{*gensym-counter*} is now stylistically preferred.
(The somewhat baroque conventions for the optional argument are historical
in nature, and supported primarily for compatibility with older dialects
of @Lisp{}.   In modern code, it is recommended that the only kind of argument
used be a string prefix.  In general, though, to obtain more flexible control
of the @param{new-symbol}'s @term{name}, consider using @code{make-symbol} instead.)


@node *gensym-counter*
@heading *gensym-counter* (Variable)
@syindex *gensym-counter*
@cindex *gensym-counter*


@subsubheading Value Type:

a non-negative @term{integer}.

@subsubheading Initial Value:

@term{implementation-dependent}.

@subsubheading Description:

A number which will be used in constructing the @term{name} of 
the next @term{symbol} generated by @thefunction{gensym}.

@code{*gensym-counter*} can be either @term{assigned} or @term{bound}
at any time, but its value must always be a non-negative @term{integer}.

@subsubheading Affected By:

@code{gensym}.

@subsubheading See Also:

@ref{gensym}

@subsubheading Notes:

The ability to pass a numeric argument to @code{gensym} has been deprecated;
explicitly @term{binding} @code{*gensym-counter*} is now stylistically preferred.

@node gentemp
@heading gentemp (Function)
@syindex gentemp
@cindex gentemp


@subsubheading Syntax:

@DefunWithValues{gentemp, @opt{} prefix package, new-symbol}

@subsubheading Arguments and Values:

@param{prefix}---a @term{string}.
@Default{@f{"T"}}

@param{package}---a @term{package designator}.
@Default{the @term{current package}}

@param{new-symbol}---a @term{fresh}, @term{interned} @term{symbol}.

@subsubheading Description:

@code{gentemp} creates and returns a @term{fresh} @term{symbol},
@term{interned} in the indicated @param{package}.
The @term{symbol} is guaranteed to be one that was not previously
@term{accessible} in @param{package}.
It is neither @term{bound} nor @term{fbound}, and has a @term{null}
@term{property list}.

The @term{name} of the @param{new-symbol} is the concatenation 
of the @param{prefix} and a suffix, which is taken from an internal
counter used only by @code{gentemp}.  (If a @term{symbol} by that name
is already @term{accessible} in @param{package}, the counter is incremented as
many times as is necessary to produce a @term{name} that is not already the
@term{name} of a @term{symbol} @term{accessible} in @param{package}.)

@subsubheading Examples:

@lisp
 (gentemp) @EV{} T1298
 (gentemp "FOO") @EV{} FOO1299
 (find-symbol "FOO1300") @EV{} NIL, NIL
 (gentemp "FOO") @EV{} FOO1300
 (find-symbol "FOO1300") @EV{} FOO1300, :INTERNAL
 (intern "FOO1301") @EV{} FOO1301, :INTERNAL
 (gentemp "FOO") @EV{} FOO1302
 (gentemp) @EV{} T1303
@end lisp


@subsubheading Side Effects:

Its internal counter is incremented one or more times.

@term{Interns} the @param{new-symbol} in @param{package}.

@subsubheading Affected By:

The current state of its internal counter, and
the current state of the @param{package}.

@subsubheading Exceptional Situations:

@Shouldchecktype{prefix, a @term{string}}
@Shouldchecktype{package, a @term{package designator}}

@subsubheading See Also:

@ref{gensym}

@subsubheading Notes:

The function @code{gentemp} is deprecated.

If @param{package} is the @code{KEYWORD} @term{package},
the result is an @term{external symbol} of @param{package}.
Otherwise, the result is an @term{internal symbol} of @param{package}.

The @code{gentemp} internal counter is independent of
@code{*gensym-counter*}, the counter used by @code{gensym}.  
There is no provision for accessing the @code{gentemp} internal counter.

Just because @code{gentemp} creates a @term{symbol} which did not
previously exist does not mean that such a @term{symbol} might not be
seen in the future (@eg{} in a data file---perhaps even created by the
same program in another session).  As such, this symbol is not truly
unique in the same sense as a @term{gensym} would be.  In particular,
programs which do automatic code generation should be careful not to
attach global attributes to such generated @term{symbols} (@eg{}
@code{special} @term{declarations}) and then write them into a file
because such global attributes might, in a different session, end up
applying to other @term{symbols} that were automatically generated on
another day for some other purpose.


@node symbol-function
@heading symbol-function (Accessor)
@syindex symbol-function
@cindex symbol-function


@subsubheading Syntax:

@DefunWithValues{symbol-function, symbol, contents}
@Defsetf{symbol-function, symbol, new-contents}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{contents}---
If the @param{symbol} is globally defined as a @term{macro} or a @term{special operator},
an @term{object} of @term{implementation-dependent} nature and identity is returned.
If the @param{symbol} is not globally defined as 
either a @term{macro} or a @term{special operator},
and
if the @param{symbol} is @term{fbound},
a @term{function} @term{object} is returned.

@param{new-contents}---a @term{function}.

@subsubheading Description:

@term{Accesses} the @term{symbol}'s @term{function cell}.

@subsubheading Examples:

@lisp
 (symbol-function 'car) @EV{} #<FUNCTION CAR>
 (symbol-function 'twice) is an error   ;because TWICE isn't defined.
 (defun twice (n) (* n 2)) @EV{} TWICE
 (symbol-function 'twice) @EV{} #<FUNCTION TWICE>
 (list (twice 3)
       (funcall (function twice) 3)
       (funcall (symbol-function 'twice) 3))
@EV{} (6 6 6)
 (flet ((twice (x) (list x x)))
   (list (twice 3)
         (funcall (function twice) 3)
         (funcall (symbol-function 'twice) 3)))
@EV{} ((3 3) (3 3) 6)   
 (setf (symbol-function 'twice) #'(lambda (x) (list x x)))
@EV{} #<FUNCTION anonymous>
 (list (twice 3)
       (funcall (function twice) 3)
       (funcall (symbol-function 'twice) 3))
@EV{} ((3 3) (3 3) (3 3))
 (fboundp 'defun) @EV{} @term{true}
 (symbol-function 'defun)
@EV{} @term{implementation-dependent}
 (functionp (symbol-function 'defun))
@EV{} @term{implementation-dependent}
 (defun symbol-function-or-nil (symbol)
   (if (and (fboundp symbol) 
            (not (macro-function symbol))
            (not (special-operator-p symbol)))
       (symbol-function symbol)
       nil)) @EV{} SYMBOL-FUNCTION-OR-NIL
 (symbol-function-or-nil 'car) @EV{} #<FUNCTION CAR>
 (symbol-function-or-nil 'defun) @EV{} NIL
@end lisp


@subsubheading Affected By:

@code{defun}

@subsubheading Exceptional Situations:

@Shouldchecktype{symbol, a @term{symbol}}

Should signal @code{undefined-function} if @param{symbol} is not @term{fbound}
and an attempt is made to @term{read} its definition.  (No such error is signaled
on an attempt to @term{write} its definition.)

@subsubheading See Also:

@ref{fboundp},
@ref{fmakunbound},
@ref{macro-function},
@ref{special-operator-p}

@subsubheading Notes:
@code{symbol-function} cannot @term{access} the value of a lexical function name
produced by @code{flet} or @code{labels}; it can @term{access} only
the global function value.

@code{setf} may be used with 
@code{symbol-function} to replace a global function
definition when the @term{symbol}'s function definition 
does not represent a @term{special operator}.

@lisp
(symbol-function @param{symbol}) @EQ{} (fdefinition @param{symbol})
@end lisp

However, @code{fdefinition} accepts arguments other than just @term{symbols}.


@node symbol-name
@heading symbol-name (Function)
@syindex symbol-name
@cindex symbol-name


@subsubheading Syntax:

@DefunWithValues{symbol-name, symbol, name}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{name}---a @term{string}.

@subsubheading Description:

@code{symbol-name} returns the @term{name} of @param{symbol}.
The consequences are undefined if @param{name} is ever modified.

@subsubheading Examples:

@lisp
 (symbol-name 'temp) @EV{} "TEMP" 
 (symbol-name :start) @EV{} "START"
 (symbol-name (gensym)) @EV{} "G1234" ;for example
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{symbol, a @term{symbol}}


@node symbol-package
@heading symbol-package (Function)
@syindex symbol-package
@cindex symbol-package


@subsubheading Syntax:

@DefunWithValues{symbol-package, symbol, contents}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{contents}---a @term{package} @term{object} or @nil{}.

@subsubheading Description:

Returns the @term{home package} of @param{symbol}.

@subsubheading Examples:

@lisp
 (in-package "CL-USER") @EV{} #<PACKAGE "COMMON-LISP-USER">
 (symbol-package 'car) @EV{} #<PACKAGE "COMMON-LISP">
 (symbol-package 'bus) @EV{} #<PACKAGE "COMMON-LISP-USER">
 (symbol-package :optional) @EV{} #<PACKAGE "KEYWORD">
 ;; Gensyms are uninterned, so have no home package.
 (symbol-package (gensym)) @EV{} NIL
 (make-package 'pk1) @EV{} #<PACKAGE "PK1">
 (intern "SAMPLE1" "PK1") @EV{} PK1::SAMPLE1, NIL
 (export (find-symbol "SAMPLE1" "PK1") "PK1") @EV{} T
 (make-package 'pk2 :use '(pk1)) @EV{} #<PACKAGE "PK2">
 (find-symbol "SAMPLE1" "PK2") @EV{} PK1:SAMPLE1, :INHERITED
 (symbol-package 'pk1::sample1) @EV{} #<PACKAGE "PK1">
 (symbol-package 'pk2::sample1) @EV{} #<PACKAGE "PK1">
 (symbol-package 'pk1::sample2) @EV{} #<PACKAGE "PK1">
 (symbol-package 'pk2::sample2) @EV{} #<PACKAGE "PK2">
 ;; The next several forms create a scenario in which a symbol
 ;; is not really uninterned, but is "apparently uninterned",
 ;; and so SYMBOL-PACKAGE still returns NIL.
 (setq s3 'pk1::sample3) @EV{} PK1::SAMPLE3
 (import s3 'pk2) @EV{} T
 (unintern s3 'pk1) @EV{} T
 (symbol-package s3) @EV{} NIL
 (eq s3 'pk2::sample3) @EV{} T
@end lisp


@subsubheading Affected By:

@code{import},
@code{intern},
@code{unintern}

@subsubheading Exceptional Situations:

@Shouldchecktype{symbol, a @term{symbol}}

@subsubheading See Also:

@ref{intern}


@node symbol-plist
@heading symbol-plist (Accessor)
@syindex symbol-plist
@cindex symbol-plist


@subsubheading Syntax:

@DefunWithValues{symbol-plist, symbol, plist}
@Defsetf{symbol-plist, symbol, new-plist}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{plist}, @param{new-plist}---a @term{property list}.

@subsubheading Description:

@term{Accesses} the @term{property list} of @param{symbol}.

@subsubheading Examples:

@lisp
 (setq sym (gensym)) @EV{} #:G9723
 (symbol-plist sym) @EV{} ()
 (setf (get sym 'prop1) 'val1) @EV{} VAL1
 (symbol-plist sym) @EV{} (PROP1 VAL1)
 (setf (get sym 'prop2) 'val2) @EV{} VAL2
 (symbol-plist sym) @EV{} (PROP2 VAL2 PROP1 VAL1)
 (setf (symbol-plist sym) (list 'prop3 'val3)) @EV{} (PROP3 VAL3)
 (symbol-plist sym) @EV{} (PROP3 VAL3)
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{symbol, a @term{symbol}}

@subsubheading See Also:

@ref{get},
@ref{remprop}

@subsubheading Notes:

The use of @code{setf} should be avoided, since a @term{symbol}'s
@term{property list} is a global resource that can contain information 
established and depended upon by unrelated programs in the same @term{Lisp image}.


@node symbol-value
@heading symbol-value (Accessor)
@syindex symbol-value
@cindex symbol-value


@subsubheading Syntax:

@DefunWithValues{symbol-value, symbol, value}
@Defsetf{symbol-value, symbol, new-value}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol} that must have a @term{value}.

@param{value}, @param{new-value}---an @term{object}.

@subsubheading Description:

@term{Accesses} the @term{symbol}'s @term{value cell}.

@subsubheading Examples:

@lisp
 (setf (symbol-value 'a) 1) @EV{} 1
 (symbol-value 'a) @EV{} 1
 ;; SYMBOL-VALUE cannot see lexical variables.
 (let ((a 2)) (symbol-value 'a)) @EV{} 1
 (let ((a 2)) (setq a 3) (symbol-value 'a)) @EV{} 1
 ;; SYMBOL-VALUE can see dynamic variables.
 (let ((a 2)) 
   (declare (special a)) 
   (symbol-value 'a)) @EV{} 2
 (let ((a 2)) 
   (declare (special a)) 
   (setq a 3)
   (symbol-value 'a)) @EV{} 3
 (let ((a 2))
   (setf (symbol-value 'a) 3)
   a) @EV{} 2
 a @EV{} 3
 (symbol-value 'a) @EV{} 3
 (let ((a 4))
   (declare (special a))
   (let ((b (symbol-value 'a)))
     (setf (symbol-value 'a) 5)
     (values a b))) @EV{} 5, 4
 a @EV{} 3
 (symbol-value :any-keyword) @EV{} :ANY-KEYWORD
 (symbol-value 'nil) @EV{} NIL
 (symbol-value '()) @EV{} NIL
 ;; The precision of this next one is @term{implementation-dependent}.
 (symbol-value 'pi) @EV{} 3.141592653589793d0  
@end lisp


@subsubheading Affected By:

@code{makunbound},
@code{set},
@code{setq}

@subsubheading Exceptional Situations:

@Shouldchecktype{symbol, a @term{symbol}}

Should signal @code{unbound-variable} if @param{symbol} is @term{unbound}
and an attempt is made to @term{read} its @term{value}.  (No such error is signaled
on an attempt to @term{write} its @term{value}.)

@subsubheading See Also:

@ref{boundp}, @ref{makunbound}, @ref{set}, @ref{setq}

@subsubheading Notes:

@code{symbol-value} can be used to get the value of a @term{constant variable}.
@code{symbol-value} cannot @term{access} the value of a @term{lexical variable}.


@node get
@heading get (Accessor)
@syindex get
@cindex get


@subsubheading Syntax:

@DefunWithValues{get, symbol indicator @opt{} default, value}
@Defsetf{get, symbol indicator @opt{} default, new-value}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{indicator}---an @term{object}.

@param{default}---an @term{object}.
@Default{@nil{}}

@param{value}---if the indicated property exists,
the @term{object} that is its @term{value};
otherwise, the specified @param{default}.

@param{new-value}---an @term{object}.

@subsubheading Description:

@code{get} finds a @term{property} 
on the @term{property list}@sub2{} of @param{symbol} 
whose @term{property indicator} is @term{identical} to @param{indicator},
and returns its corresponding @term{property value}.
If there are multiple @term{properties}@sub1{} with that @term{property indicator},
@code{get} uses the first such @term{property}.
If there is no @term{property} with that @term{property indicator},
@param{default} is returned.

@code{setf} of @code{get} may be used to associate a new @term{object}
with an existing indicator already on the @param{symbol}'s @term{property list},
or to create a new assocation if none exists.
If there are multiple @term{properties}@sub1{} with that @term{property indicator},
@code{setf} of @code{get} associates the @param{new-value} 
with the first such @term{property}.
When a @code{get} @term{form} is used as a @code{setf} @param{place},
any @param{default} which is supplied is evaluated according to normal
left-to-right evaluation rules, but its @term{value} is ignored.

@subsubheading Examples:

@lisp
 (defun make-person (first-name last-name)
   (let ((person (gensym "PERSON")))
     (setf (get person 'first-name) first-name)
     (setf (get person 'last-name) last-name)
     person)) @EV{} MAKE-PERSON
 (defvar *john* (make-person "John" "Dow")) @EV{} *JOHN*
 *john* @EV{} #:PERSON4603
 (defvar *sally* (make-person "Sally" "Jones")) @EV{} *SALLY*
 (get *john* 'first-name) @EV{} "John"
 (get *sally* 'last-name) @EV{} "Jones"
 (defun marry (man woman married-name)
   (setf (get man 'wife) woman)
   (setf (get woman 'husband) man)
   (setf (get man 'last-name) married-name)
   (setf (get woman 'last-name) married-name)
   married-name) @EV{} MARRY
 (marry *john* *sally* "Dow-Jones") @EV{} "Dow-Jones"
 (get *john* 'last-name) @EV{} "Dow-Jones"
 (get (get *john* 'wife) 'first-name) @EV{} "Sally"
 (symbol-plist *john*)
@EV{} (WIFE #:PERSON4604 LAST-NAME "Dow-Jones" FIRST-NAME "John")
 (defmacro age (person &optional (default ''thirty-something)) 
   `(get ,person 'age ,default)) @EV{} AGE
 (age *john*) @EV{} THIRTY-SOMETHING
 (age *john* 20) @EV{} 20
 (setf (age *john*) 25) @EV{} 25
 (age *john*) @EV{} 25
 (age *john* 20) @EV{} 25
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{symbol, a @term{symbol}}

@subsubheading See Also:

@ref{getf},
@ref{symbol-plist},
@ref{remprop}

@subsubheading Notes:

@lisp
 (get x y) @EQ{} (getf (symbol-plist x) y)
@end lisp


@term{Numbers} and @term{characters} are not recommended for use 
as @param{indicators} in portable code since @code{get} tests 
with @code{eq} rather than @code{eql}, and consequently 
the effect of using such @param{indicators} is 
@term{implementation-dependent}.

There is no way using @code{get} to distinguish an absent property from
one whose value is @param{default}.  However, see @code{get-properties}.



@node remprop
@heading remprop (Function)
@syindex remprop
@cindex remprop


@subsubheading Syntax:

@DefunWithValues{remprop, symbol indicator, generalized-boolean}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{indicator}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@code{remprop} removes from the @term{property list}@sub2{} of @param{symbol}
a @term{property}@sub1{} with a @term{property indicator}
@term{identical} to @param{indicator}.
If there are multiple @term{properties}@sub1{} with the @term{identical} key,
@code{remprop} only removes the first such @term{property}.
@code{remprop} returns @term{false} if no such @term{property} was found,
or @term{true} if a property was found.

The @term{property indicator} 
and the corresponding @term{property value} 
are removed in an undefined order
by destructively splicing the property list.  
The permissible side-effects correspond to those permitted for @code{remf},
such that:

@lisp
 (remprop @i{x} @i{y}) @EQ{} (remf (symbol-plist @i{x}) @i{y})
@end lisp


@subsubheading Examples:

@lisp
 (setq test (make-symbol "PSEUDO-PI")) @EV{} #:PSEUDO-PI
 (symbol-plist test) @EV{} ()
 (setf (get test 'constant) t) @EV{} T
 (setf (get test 'approximation) 3.14) @EV{} 3.14
 (setf (get test 'error-range) 'noticeable) @EV{} NOTICEABLE
 (symbol-plist test) 
@EV{} (ERROR-RANGE NOTICEABLE APPROXIMATION 3.14 CONSTANT T)
 (setf (get test 'approximation) nil) @EV{} NIL
 (symbol-plist test) 
@EV{} (ERROR-RANGE NOTICEABLE APPROXIMATION NIL CONSTANT T)
 (get test 'approximation) @EV{} NIL
 (remprop test 'approximation) @EV{} @term{true}
 (get test 'approximation) @EV{} NIL
 (symbol-plist test)
@EV{} (ERROR-RANGE NOTICEABLE CONSTANT T)
 (remprop test 'approximation) @EV{} NIL
 (symbol-plist test)
@EV{} (ERROR-RANGE NOTICEABLE CONSTANT T)
 (remprop test 'error-range) @EV{} @term{true}
 (setf (get test 'approximation) 3) @EV{} 3
 (symbol-plist test)
@EV{} (APPROXIMATION 3 CONSTANT T)
@end lisp


@subsubheading Side Effects:

The @term{property list} of @param{symbol} is modified.

@subsubheading Exceptional Situations:

@Shouldchecktype{symbol, a @term{symbol}}

@subsubheading See Also:

@ref{remf}, @ref{symbol-plist}

@subsubheading Notes:

@term{Numbers} and @term{characters} are not recommended for use as
@param{indicators} in portable code since @code{remprop} tests with
@code{eq} rather than @code{eql}, and consequently the effect of
using such @param{indicators} is @term{implementation-dependent}.  
Of course, if you've gotten as far as needing to remove such a
@term{property}, you don't have much choice---the time to have been
thinking about this was when you used @code{setf} of @code{get} to
establish the @term{property}.


@node boundp
@heading boundp (Function)
@syindex boundp
@cindex boundp


@subsubheading Syntax:

@DefunWithValues{boundp, symbol, generalized-boolean}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@Predicate{symbol, @term{bound}}

@subsubheading Examples:

@lisp
 (setq x 1) @EV{} 1
 (boundp 'x) @EV{} @term{true}
 (makunbound 'x) @EV{} X
 (boundp 'x) @EV{} @term{false}
 (let ((x 2)) (boundp 'x)) @EV{} @term{false}
 (let ((x 2)) (declare (special x)) (boundp 'x)) @EV{} @term{true}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{symbol, a @term{symbol}}

@subsubheading See Also:

@ref{set},
@ref{setq},
@ref{symbol-value},
@ref{makunbound}

@subsubheading Notes:

@Thefunction{bound} determines only whether a @term{symbol} has a
value in the @term{global environment}; any @term{lexical bindings}
are ignored.


@node makunbound
@heading makunbound (Function)
@syindex makunbound
@cindex makunbound


@subsubheading Syntax:

@DefunWithValues{makunbound, symbol, symbol}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}

@subsubheading Description:

Makes the @param{symbol} be @term{unbound},
regardless of whether it was previously @term{bound}.

@subsubheading Examples:

@lisp
 (setf (symbol-value 'a) 1)
 (boundp 'a) @EV{} @term{true}
 a @EV{} 1
 (makunbound 'a) @EV{} A
 (boundp 'a) @EV{} @term{false}
@end lisp


@subsubheading Side Effects:

The @term{value cell} of @param{symbol} is modified.

@subsubheading Exceptional Situations:

@Shouldchecktype{symbol, a @term{symbol}}

@subsubheading See Also:

@ref{boundp}, @ref{fmakunbound}


@node set
@heading set (Function)
@syindex set
@cindex set


@subsubheading Syntax:

@DefunWithValues{set, symbol value, value}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{value}---an @term{object}.

@subsubheading Description:

@code{set} changes the contents of the @term{value cell} of @term{symbol}
to the given @term{value}.

@lisp
(set @param{symbol} @param{value}) @EQ{} (setf (symbol-value @param{symbol}) @param{value})
@end lisp


@subsubheading Examples:

@lisp
 (setf (symbol-value 'n) 1) @EV{} 1
 (set 'n 2) @EV{} 2
 (symbol-value 'n) @EV{} 2
 (let ((n 3))
   (declare (special n))
   (setq n (+ n 1))
   (setf (symbol-value 'n) (* n 10))
   (set 'n (+ (symbol-value 'n) n))
   n) @EV{} 80
 n @EV{} 2
 (let ((n 3))
   (setq n (+ n 1))
   (setf (symbol-value 'n) (* n 10))
   (set 'n (+ (symbol-value 'n) n))
   n) @EV{} 4
 n @EV{} 44
 (defvar *n* 2)
 (let ((*n* 3))
   (setq *n* (+ *n* 1))
   (setf (symbol-value '*n*) (* *n* 10))
   (set '*n* (+ (symbol-value '*n*) *n*))
   *n*) @EV{} 80
  *n* @EV{} 2
 (defvar *even-count* 0) @EV{} *EVEN-COUNT*
 (defvar *odd-count* 0) @EV{} *ODD-COUNT*
 (defun tally-list (list)
   (dolist (element list)
     (set (if (evenp element) '*even-count* '*odd-count*)
          (+ element (if (evenp element) *even-count* *odd-count*)))))
 (tally-list '(1 9 4 3 2 7)) @EV{} NIL
 *even-count* @EV{} 6
 *odd-count* @EV{} 20
@end lisp


@subsubheading Side Effects:

The @term{value} of @param{symbol} is changed.

@subsubheading See Also:

@ref{setq}, @ref{progv}, @ref{symbol-value}

@subsubheading Notes:

The function @code{set} is deprecated.

@code{set} cannot change the value of a @term{lexical variable}.


@node unbound-variable
@heading unbound-variable (Condition Type)
@syindex unbound-variable
@cindex unbound-variable


@subsubheading Class Precedence List:
@code{unbound-variable},
@code{cell-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{unbound-variable} consists of @term{error} @term{conditions}
that represent attempts to @term{read} the @term{value} of an @term{unbound variable}.

The name of the cell (see @code{cell-error}) is the @term{name} of the 
@term{variable} that was @term{unbound}.

@subsubheading See Also:

@ref{cell-error-name}




@node Packages
@chapter Packages
@menu
* Package Concepts::

Dictionary

* package::
* export::
* find-symbol::
* find-package::
* find-all-symbols::
* import::
* list-all-packages::
* rename-package::
* shadow::
* shadowing-import::
* delete-package::
* make-package::
* with-package-iterator::
* unexport::
* unintern::
* in-package::
* unuse-package::
* use-package::
* defpackage::
* do-symbols; do-external-symbols; do-all-symbols::
* intern::
* package-name::
* package-nicknames::
* package-shadowing-symbols::
* package-use-list::
* package-used-by-list::
* packagep::
* *package*::
* package-error::
* package-error-package::
@end menu

@node Package Concepts
@section Package Concepts

@menu
* Introduction to Packages::
* Standardized Packages::
@end menu
@node Introduction to Packages
@subsection Introduction to Packages

A @newterm{package} establishes a mapping from names to @term{symbols}. 
At any given time, one @term{package} is current.
The @newterm{current package} is the one that is @thevalueof{*package*}.
When using the @term{Lisp reader},
it is possible to refer to @term{symbols} in @term{packages} 
other than the current one through the use of @term{package prefixes} in the 
printed representation of the @term{symbol}.

@Thenextfigure{}@spc{}lists some @term{defined names} that are applicable
to @term{packages}.
Where an @term{operator} 
takes an argument that is either a @term{symbol} or a @term{list} 
of @term{symbols},
an argument of @nil{}@spc{}is treated as an empty @term{list} of @term{symbols}.
Any @param{package} argument may be either a @term{string}, a @term{symbol}, or
a @term{package}.  If a @term{symbol} is supplied, its name will be used
as the @term{package} name.

@float Figure,fig11.1
@cartouche
@multitable{do-external-symbols}{package-shadowing-symbols}{shadowing-import}

@item *modules* @tab import @tab provide
@item *package* @tab in-package @tab rename-package
@item defpackage @tab intern @tab require
@item do-all-symbols @tab list-all-packages @tab shadow
@item do-external-symbols @tab make-package @tab shadowing-import
@item do-symbols @tab package-name @tab unexport
@item export @tab package-nicknames @tab unintern
@item find-all-symbols @tab package-shadowing-symbols @tab unuse-package
@item find-package @tab package-use-list @tab use-package
@item find-symbol @tab package-used-by-list @tab 
@end multitable
@end cartouche
@caption{Some Defined Names related to Packages}
@end float


@subsubsection Package Names and Nicknames

Each @term{package} has a @term{name} (a @term{string}) and perhaps some @term{nicknames}
(also @term{strings}).
These are assigned when the @term{package} is created and can be changed later.  

There is a single namespace for @term{packages}.  
@Thefunction{find-package} translates a package
@term{name} or @term{nickname} into the associated @term{package}.  
@Thefunction{package-name} returns the @term{name} of a @term{package}.  
@Thefunction{package-nicknames} returns 
a @term{list} of all @term{nicknames} for a @term{package}.
@code{rename-package} removes a @term{package}'s
current @term{name} and @term{nicknames} and replaces them with new ones
specified by the caller.


@subsubsection Symbols in a Package

@unnumberedsubsubsec 11.1.1.2.1 Internal and External Symbols


The mappings in a @term{package} are divided into two classes, external and internal.
The @term{symbols} targeted by these different mappings 
are called @term{external symbols} and @term{internal symbols}
@cindex internal symbol 
of the
@term{package}. Within a @term{package}, a name refers to one
@term{symbol} or to none; if it does refer
to a @term{symbol}, then it is either external or internal in that
@term{package}, but not both.
@cindex external symbol
@dfn{External symbols}
are part of the package's public interface to other @term{packages}.
@term{Symbols} become @term{external symbols} of a given
@term{package} if they have been @term{exported} from that @term{package}.

A @term{symbol} has the same @term{name} no matter what @term{package} 
it is @term{present} in, but it might be an @term{external symbol} of some @term{packages}
and an @term{internal symbol} of others. 


@unnumberedsubsubsec 11.1.1.2.2 Package Inheritance


@term{Packages} can be built up in layers.  From one point of view,
a @term{package} is a single collection
of mappings from @term{strings} into @term{internal symbols} and 
@term{external symbols}.
However, some of these mappings might be established within the @term{package} 
itself, while other mappings are inherited from other @term{packages} 
via @code{use-package}.
A @term{symbol} is said to be @newterm{present} in a @term{package} 
if the mapping is in the @term{package} itself and is
not inherited from somewhere else.

There is no way to inherit the @term{internal symbols} of another @term{package};
to refer to an @term{internal symbol} using the @term{Lisp reader}, 
a @term{package} containing the @term{symbol} 
must be made to be the @term{current package},
a @term{package prefix} must be used,
or the @term{symbol} must be @term{imported} into the @term{current package}.


@unnumberedsubsubsec 11.1.1.2.3 Accessibility of Symbols in a Package


A @term{symbol} becomes @newterm{accessible} in a @term{package} 
if that is its @term{home package} when it is created,
or if it is @term{imported} into that @term{package},
or by inheritance via @code{use-package}.

If a @term{symbol} is @term{accessible} in a @term{package},
it can be referred to when using the @term{Lisp reader}
without a @term{package prefix} when that @term{package} is the @term{current package},
regardless of whether it is @term{present} or inherited.

@term{Symbols} from one @term{package} can be made @term{accessible} 
in another @term{package} in two ways.


@itemize --
@item
Any individual @term{symbol} can be added to a @term{package} by use
of @code{import}.  After the call to @code{import} the
@term{symbol} is @term{present} in the importing @term{package}.
The status of the @term{symbol} in the @term{package} 
it came from (if any) is unchanged, and the @term{home package} for
this @term{symbol} is unchanged.
Once @term{imported}, a @term{symbol} is @term{present} in the
importing @term{package}
and can be removed only by calling @code{unintern}.

A @term{symbol} is @term{shadowed}@sub3{} by another @term{symbol} 
in some @term{package} if the first @term{symbol} would be @term{accessible}
by inheritance if not for the presence of the second @term{symbol}.
See @code{shadowing-import}.

@item
The second mechanism for making @term{symbols} from one @term{package}
@term{accessible} in another is provided by @code{use-package}.  
All of the @term{external symbols} of the used @term{package} are inherited
by the using @term{package}.
@Thefunction{unuse-package} undoes the effects of a previous @code{use-package}.  
@end itemize



@unnumberedsubsubsec 11.1.1.2.4 Locating a Symbol in a Package


When a @term{symbol} is to be located in a given @term{package} 
the following occurs:

@itemize --
@item The @term{external symbols} and @term{internal symbols} of the 
@term{package} are searched for the @term{symbol}.
@item The @term{external symbols} of the used @term{packages} are 
searched
in some unspecified order.  The
order does not matter; see the rules for handling name
conflicts listed below. 
@end itemize



@unnumberedsubsubsec 11.1.1.2.5 Prevention of Name Conflicts in Packages


Within one @term{package}, any particular name can refer to at most one
@term{symbol}.  A name conflict is said to occur when there would be more than
one candidate @term{symbol}.  Any time a name conflict is about to occur,
a @term{correctable} @term{error} is signaled.  

The following rules apply to name conflicts:

@itemize --
@item
Name conflicts are detected when they become possible, that is, when the
package structure is altered.  Name
conflicts are not checked during every name lookup.

@item
If the @term{same} @term{symbol} is @term{accessible} to a @term{package} 
through more than one path, there is no name conflict.
A @term{symbol} cannot conflict with itself. 
Name conflicts occur only between @term{distinct} @term{symbols} with
the same name (under @code{string=}).

@item Every @term{package} has a list of shadowing @term{symbols}.  
A shadowing @term{symbol} takes precedence over any other @term{symbol} of
the same name that would otherwise be @term{accessible} in the @term{package}.  
A name conflict involving a shadowing symbol is always resolved in favor of
the shadowing @term{symbol}, without signaling an error (except for one
exception involving @code{import}).
See @code{shadow} and @code{shadowing-import}.

@item 
The functions @code{use-package}, @code{import}, and 
@code{export} check for name conflicts.  

@item 
@code{shadow} and @code{shadowing-import} 
never signal a name-conflict error.

@item 
@code{unuse-package} and @code{unexport}
do not need to do any name-conflict checking.
@code{unintern} does name-conflict checking only when a @term{symbol} 
being @term{uninterned} is a @term{shadowing symbol}
@cindex shadowing symbol
.

@item 
Giving a shadowing symbol to @code{unintern} 
can uncover a name conflict that had
previously been resolved by the shadowing.  

@item 
Package functions signal name-conflict errors @oftype{package-error} before making any
change to the package structure.  When multiple changes are to be made,
it is
permissible for the implementation to process each change separately.
For example, when @code{export} is given a 
@term{list} of 
@term{symbols},
aborting from a name
conflict caused by the second @term{symbol} 
in the @term{list} might still export the
first @term{symbol} in the @term{list}.  
However, a name-conflict error caused by @code{export}
of a single @term{symbol} will be signaled before
that @term{symbol}'s @term{accessibility} in any @term{package} is changed.

@item 
Continuing from a name-conflict error must offer the user a chance to
resolve the name conflict in favor of either of the candidates.  The
@term{package} 
structure should be altered to reflect the resolution of the
name conflict, via @code{shadowing-import}, 
@code{unintern},
or @code{unexport}.

@item 
A name conflict in @code{use-package} between a @term{symbol} 
@term{present} in the using @term{package} and an @term{external symbol} of the used 
@term{package} is resolved in favor of the first @term{symbol} by making it a
shadowing @term{symbol}, or in favor of the second @term{symbol} by uninterning
the first @term{symbol} from the using @term{package}. 

@item 
A name conflict in @code{export} or @code{unintern} 
due to a @term{package}'s inheriting two @term{distinct} @term{symbols} 
with the @term{same} @term{name} (under @code{string=})
from two other @term{packages} can be resolved in
favor of either @term{symbol} by importing it into the using
@term{package} and making it a @term{shadowing symbol}
@cindex shadowing symbol
,
just as with @code{use-package}.
@end itemize





@node Standardized Packages
@subsection Standardized Packages

This section describes the @term{packages} that are available
in every @term{conforming implementation}.  A summary of the
@term{names} and @term{nicknames} of those @term{standardized} @term{packages} 
is given in @thenextfigure{}.


@float Figure,fig11.2
@cartouche
@multitable{@code{COMMON-LISP-USER}}{@code{CL-USER}}
@headitem Name @tab Nicknames
@item @code{COMMON-LISP} @tab @code{CL}
@item @code{COMMON-LISP-USER} @tab @code{CL-USER}
@item @code{KEYWORD} @tab @i{none}
@end multitable
@end cartouche
@caption{Standardized Package Names}
@end float




@subsubsection The COMMON-LISP Package
@cindex COMMON-LISP
@cindex CL


The @code{COMMON-LISP} @term{package} contains the primitives of the @clisp{}@spc{}system as
defined by this specification.  Its @term{external} @term{symbols} include
all of the @term{defined names} (except for @term{defined names} in
the @code{KEYWORD} @term{package}) that are present in the @clisp{}@spc{}system, 
such as @code{car}, @code{cdr},  @code{*package*}, etc.
The @code{COMMON-LISP} @term{package} has the @term{nickname} @code{CL}.

The @code{COMMON-LISP} @term{package} has as @term{external} @term{symbols} those 
symbols enumerated in the figures in @ref{Symbols in the COMMON-LISP Package, Section 1.9 (Symbols in the COMMON-LISP Package)}, and no others.
These @term{external} @term{symbols} are @term{present} in the @code{COMMON-LISP} @term{package}
but their @term{home package} need not be the @code{COMMON-LISP} @term{package}.

For example, the symbol @f{HELP} cannot be an @term{external symbol} of
the @code{COMMON-LISP} @term{package} because it is not mentioned in @ref{Symbols in the COMMON-LISP Package, Section 1.9 (Symbols in the COMMON-LISP Package)}.
In contrast, the @term{symbol} @t{variable}
must be an @term{external symbol} of the @code{COMMON-LISP} @term{package} 
even though it has no definition
because it is listed in that section
(to support its use as a valid second @term{argument} to @thefunction{documentation}). 

The @code{COMMON-LISP} @term{package} can have additional @term{internal symbols}.

@unnumberedsubsubsec 11.1.2.1.1 Constraints on the COMMON-LISP Package for Conforming Implementations


In a @term{conforming implementation},
an @term{external} @term{symbol} of the @code{COMMON-LISP} @term{package} can have
a @term{function}, @term{macro}, or @term{special operator} definition, 
a @term{global variable} definition
(or other status as a @term{dynamic variable} 
due to a @code{special} @term{proclamation}),
or a @term{type} definition
only if explicitly permitted in this standard.
For example,
@code{fboundp} @term{yields} @term{false} 
for any @term{external symbol} of the @code{COMMON-LISP} @term{package} 
that is not the @term{name} of a @term{standardized} 
@term{function}, @term{macro} or @term{special operator},
and
@code{boundp} returns @term{false} 
for any @term{external symbol} of the @code{COMMON-LISP} @term{package} 
that is not the @term{name} of a @term{standardized} @term{global variable}.
It also follows that
@term{conforming programs} can use @term{external symbols} of the @code{COMMON-LISP} @term{package} 
as the @term{names} of local @term{lexical variables} 
with confidence that those @term{names} have not been @term{proclaimed} @code{special} 
by the @term{implementation}
unless those @term{symbols} are
@term{names} of @term{standardized} @term{global variables}.

A @term{conforming implementation} must not place any @term{property} on
an @term{external symbol} of the @code{COMMON-LISP} @term{package} using a @term{property indicator}
that is either an @term{external symbol} of any @term{standardized} @term{package}
or a @term{symbol} that is otherwise @term{accessible} in the @code{COMMON-LISP-USER} @term{package}.


@unnumberedsubsubsec 11.1.2.1.2 Constraints on the COMMON-LISP Package for Conforming Programs

@cindex redefinition
Except where explicitly allowed, the consequences are undefined if any
of the following actions are performed on an @term{external symbol} 
of the @code{COMMON-LISP} @term{package}:


@enumerate 1

@item @term{Binding} or altering its value (lexically or dynamically).
(Some exceptions are noted below.)

@item Defining, 
undefining, 
or @term{binding} it as a @term{function}.
(Some exceptions are noted below.)

@item Defining,
undefining, 
or @term{binding} it as a @term{macro}
or @term{compiler macro}.
(Some exceptions are noted below.)

@item Defining it as a @term{type specifier} 
(via @code{defstruct}, 
@code{defclass},
@code{deftype},
@code{define-condition}).

@item Defining it as a structure (via @code{defstruct}).

@item Defining it as a @term{declaration} 
with a @code{declaration} @term{proclamation}.

@item Defining it as a @term{symbol macro}.

@item Altering its @term{home package}.

@item Tracing it  (via @code{trace}).

@item Declaring or proclaiming it
@code{special}
(via @t{declare},
@code{declaim},
or @code{proclaim}).

@item Declaring or proclaiming its @code{type} or @code{ftype}
(via @t{declare},
@code{declaim},
or @code{proclaim}).
(Some exceptions are noted below.)

@item Removing it from the @code{COMMON-LISP} @term{package}.


@item Defining a @term{setf expander} for it 
(via @code{defsetf} or @code{define-setf-method}).

@item Defining, undefining, or binding its @term{setf function name}.

@item Defining it as a @term{method combination} type 
(via @code{define-method-combination}).

@item Using it as the class-name argument 
to @code{setf} of @code{find-class}.

@item Binding it as a @term{catch tag}.

@item Binding it as a @term{restart} @term{name}.

@item Defining a @term{method} 
for a @term{standardized} @term{generic function} 
which is @term{applicable} when all of the @term{arguments}
are @term{direct instances} of @term{standardized} @term{classes}.

@end enumerate


@unnumberedsubsubsec 11.1.2.1.2.1 Some Exceptions to Constraints on the COMMON-LISP Package for Conforming Programs


If an @term{external symbol} of the @code{COMMON-LISP} @term{package}
is not globally defined as a @term{standardized} @term{dynamic variable} 
or @term{constant variable},
it is allowed to lexically @term{bind} it 
and to declare the @code{type} of that @term{binding}, 
and
it is allowed to locally @term{establish} it as a @term{symbol macro} 
(@eg{} with @code{symbol-macrolet}).

Unless explicitly specified otherwise,
if an @term{external symbol} of the @code{COMMON-LISP} @term{package} 
is globally defined as a @term{standardized} @term{dynamic variable},
it is permitted to @term{bind} or @term{assign} that @term{dynamic variable}
provided that the ``Value Type'' constraints on the @term{dynamic variable} 
are maintained, and that the new @term{value} of the @term{variable} 
is consistent with the stated purpose of the @term{variable}.

If an @term{external symbol} of the @code{COMMON-LISP} @term{package} is not defined
as a @term{standardized} @term{function}, @term{macro}, or @term{special operator},
it is allowed to lexically @term{bind} it as a @term{function} (@eg{} with @code{flet}),
to declare the @code{ftype} of that @term{binding}, 
and 
(in @term{implementations} which provide the ability to do so)
to @code{trace} that @term{binding}.

If an @term{external symbol} of the @code{COMMON-LISP} @term{package} is not defined
as a @term{standardized} @term{function}, @term{macro}, or @term{special operator},
it is allowed to lexically @term{bind} it as a @term{macro} (@eg{} with @code{macrolet}).


If an @term{external symbol} of the @code{COMMON-LISP} @term{package} is not defined 
as a @term{standardized} @term{function}, @term{macro}, or @term{special operator},
it is allowed to lexically @term{bind} its @term{setf function name}
as a @term{function},
and to declare the @code{ftype} of that @term{binding}.




@subsubsection The COMMON-LISP-USER Package
@cindex COMMON-LISP-USER
@cindex CL-USER

The @code{COMMON-LISP-USER} @term{package} is the @term{current package} when 
a @clisp{}@spc{}system starts up.  This @term{package} @term{uses} the @code{COMMON-LISP} @term{package}.
The @code{COMMON-LISP-USER} @term{package} has the @term{nickname} @code{CL-USER}.
The @code{COMMON-LISP-USER} @term{package} can have additional @term{symbols} @term{interned} within it;
it can @term{use} other @term{implementation-defined} @term{packages}.


@subsubsection The KEYWORD Package
@cindex KEYWORD

The @code{KEYWORD} @term{package} contains @term{symbols}, called @term{keywords}@sub1{},
that are typically used as special markers in @term{programs} 
and their associated data @term{expressions}@sub1{}.

@term{Symbol} @term{tokens} that start with a @term{package marker} 
are parsed by the @term{Lisp reader} as @term{symbols} 
in the @code{KEYWORD} @term{package}; see @ref{Symbols as Tokens, Section 2.3.4 (Symbols as Tokens)}.
This makes it notationally convenient to use @term{keywords}
when communicating between programs in different @term{packages}.  
For example, the mechanism for passing @term{keyword parameters} in a @term{call} uses 
@term{keywords}@sub1{} to name the corresponding @term{arguments};
see @ref{Ordinary Lambda Lists, Section 3.4.1 (Ordinary Lambda Lists)}.

@term{Symbols} in the @code{KEYWORD} @term{package} are, by definition, @oftype{keyword}.

@unnumberedsubsubsec 11.1.2.3.1 Interning a Symbol in the KEYWORD Package


The @code{KEYWORD} @term{package} is treated differently than other @term{packages}
in that special actions are taken when a @term{symbol} is @term{interned} in it.
In particular, when a @term{symbol} is @term{interned} in the @code{KEYWORD} @term{package},
it is automatically made to be an @term{external symbol} 
and is automatically made to be a @term{constant variable} with itself as a @term{value}.


@unnumberedsubsubsec 11.1.2.3.2 Notes about The KEYWORD Package


It is generally best to confine the use of @term{keywords} to situations in which
there are a finitely enumerable set of names to be selected between.  For example,
if there were two states of a light switch, they might be called @kwd{on} and @kwd{off}.

In situations where the set of names is not finitely enumerable
(@ie{} where name conflicts might arise)
it is frequently best to use @term{symbols} in some @term{package}
other than @code{KEYWORD} so that conflicts will be naturally avoided.
For example, it is generally not wise for a @term{program} to use a @term{keyword}@sub1{} 
as a @term{property indicator}, since if there were ever another @term{program}
that did the same thing, each would clobber the other's data.



@subsubsection Implementation-Defined Packages

Other, @term{implementation-defined} @term{packages} might be present
in the initial @clisp{}@spc{}environment.

It is recommended, but not required, that the documentation for a
@term{conforming implementation} contain a full list of all @term{package} names
initially present in that @term{implementation} but not specified in this specification.
(See also the @term{function} @code{list-all-packages}.)




@node package
@heading package (System Class)
@syindex package
@cindex package


@subsubheading Class Precedence List:
@code{package},
@code{t}

@subsubheading Description:

A @term{package} is a @term{namespace} that maps @term{symbol} @term{names}
to @term{symbols}; see @ref{Package Concepts, Section 11.1 (Package Concepts)}.

@subsubheading See Also:

@ref{Package Concepts, Section 11.1 (Package Concepts)},
@ref{PrintingOtherObjects, Section 22.1.3.13 (Printing Other Objects)},
@ref{Symbols as Tokens, Section 2.3.4 (Symbols as Tokens)}


@node export
@heading export (Function)
@syindex export
@cindex export


@subsubheading Syntax:

@DefunWithValues{export, symbols @opt{} package, @code{t}}

@subsubheading Arguments and Values:

@param{symbols}---a @term{designator} for a @term{list} of @term{symbols}.

@param{package}---a @term{package designator}.
@Default{the @term{current package}}

@subsubheading Description:

@code{export} makes one or more @param{symbols} that are @term{accessible} 
in @param{package} (whether directly or by inheritance) be @term{external symbols}
of that @param{package}. 

If any of the @param{symbols} is already @term{accessible} as 
an @term{external symbol} of @param{package},
@code{export} has no effect on that @term{symbol}.
If the @param{symbol} is 
@term{present} in @param{package} 
as an internal symbol, it is simply changed to external status.  
If it is @term{accessible} as an @term{internal symbol} via @code{use-package}, 
it
is first @term{imported} into @param{package},
then @term{exported}.
(The @param{symbol} is then @term{present} in the @param{package} 
whether or not @param{package} continues to use the @term{package} through 
which the @term{symbol} was originally inherited.)  

@code{export} makes 
each @param{symbol}
@term{accessible} to all the @term{packages} that use @param{package}.
All of these @term{packages} are checked for name conflicts:
@f{(export @i{s} @i{p})} does
@f{(find-symbol (symbol-name @i{s}) @i{q})} for each package @i{q}
in @f{(package-used-by-list @i{p})}.  Note that in the usual case of
an @code{export} during the initial definition of a @term{package}, 
the
result of @code{package-used-by-list}
is @nil{}@spc{}and the name-conflict checking
takes negligible time.
When multiple changes are to be made,
for example when @code{export} 
is given a @param{list} of @param{symbols}, it is
permissible for the implementation to process each change separately,
so that aborting from a name
conflict caused by any but the first @param{symbol} in the 
@term{list} does not unexport the
first @param{symbol} in the @param{list}. 
However, aborting from a name-conflict error
caused by @code{export} 
of one of @param{symbols} does not leave that @term{symbol} 
@term{accessible}
to some @term{packages} 
and @term{inaccessible} to others; with respect to
each of @param{symbols} processed, @code{export}
behaves as if it were as an atomic operation.

A name conflict in @code{export} between one of
@param{symbols} being exported and a
@term{symbol} already @term{present} in a @term{package} 
that would inherit the
newly-exported @term{symbol} 
may be resolved in favor of the exported @term{symbol}
by uninterning the other one, or in favor of the already-present
@term{symbol} by making it a shadowing symbol.

@subsubheading Examples:

@lisp
 (make-package 'temp :use nil) @EV{} #<PACKAGE "TEMP">
 (use-package 'temp) @EV{} T
 (intern "TEMP-SYM" 'temp) @EV{} TEMP::TEMP-SYM, NIL
 (find-symbol "TEMP-SYM") @EV{} NIL, NIL
 (export (find-symbol "TEMP-SYM" 'temp) 'temp) @EV{} T
 (find-symbol "TEMP-SYM") @EV{} TEMP-SYM, :INHERITED
@end lisp


@subsubheading Side Effects:

The package system is modified.

@subsubheading Affected By:

@term{Accessible} @term{symbols}.

@subsubheading Exceptional Situations:

If any of the @param{symbols} is not @term{accessible} at all in @param{package},
an error @oftype{package-error} is signaled that is @term{correctable} 
by permitting the @term{user}
to interactively specify whether that @term{symbol} should be @term{imported}.

@subsubheading See Also:

@ref{import},
@ref{unexport},
@ref{Package Concepts, Section 11.1 (Package Concepts)}


@node find-symbol
@heading find-symbol (Function)
@syindex find-symbol
@cindex find-symbol


@subsubheading Syntax:

@DefunWithValues{find-symbol, string @opt{} package, symbol\, status}

@subsubheading Arguments and Values:

@param{string}---a @term{string}.

@param{package}---a @term{package designator}.
@Default{the @term{current package}}

@param{symbol}---a @term{symbol} accessible in the @param{package}, 
or @nil{}.

@param{status}---one of @kwd{inherited}, @kwd{external}, @kwd{internal}, or @nil{}.

@subsubheading Description:

@code{find-symbol} locates a @term{symbol} whose @term{name} is
@param{string} in a @term{package}.
If a @term{symbol} named @param{string} is found in @param{package},
directly or by inheritance, the @term{symbol} 
found is returned as the first
value; the second value is as follows:


@table @asis
@item @id{@kwd{internal}}


If the @term{symbol} is @term{present} in @param{package}
as an @term{internal symbol}.

@item @id{@kwd{external}}


If the @term{symbol} is @term{present} in @param{package}
as an @term{external symbol}.

@item @id{@kwd{inherited}}


If the @term{symbol} is inherited by @param{package} 
through @code{use-package},
but is not @term{present} in @param{package}.
@end table


If no such @term{symbol} is @term{accessible} in @param{package},
both values are @nil{}.

@subsubheading Examples:

@lisp
 (find-symbol "NEVER-BEFORE-USED") @EV{} NIL, NIL
 (find-symbol "NEVER-BEFORE-USED") @EV{} NIL, NIL
 (intern "NEVER-BEFORE-USED") @EV{} NEVER-BEFORE-USED, NIL
 (intern "NEVER-BEFORE-USED") @EV{} NEVER-BEFORE-USED, :INTERNAL
 (find-symbol "NEVER-BEFORE-USED") @EV{} NEVER-BEFORE-USED, :INTERNAL
 (find-symbol "never-before-used") @EV{} NIL, NIL
 (find-symbol "CAR" 'common-lisp-user) @EV{} CAR, :INHERITED
 (find-symbol "CAR" 'common-lisp) @EV{} CAR, :EXTERNAL
 (find-symbol "NIL" 'common-lisp-user) @EV{} NIL, :INHERITED
 (find-symbol "NIL" 'common-lisp) @EV{} NIL, :EXTERNAL
 (find-symbol "NIL" (prog1 (make-package "JUST-TESTING" :use '())
                           (intern "NIL" "JUST-TESTING")))
@EV{} JUST-TESTING::NIL, :INTERNAL
 (export 'just-testing::nil 'just-testing)
 (find-symbol "NIL" 'just-testing) @EV{} JUST-TESTING:NIL, :EXTERNAL
 (find-symbol "NIL" "KEYWORD")
@EV{} NIL, NIL
@OV{} :NIL, :EXTERNAL
 (find-symbol (symbol-name :nil) "KEYWORD") @EV{} :NIL, :EXTERNAL
@end lisp


@subsubheading Affected By:

@code{intern},
@code{import},
@code{export},
@code{use-package},
@code{unintern},
@code{unexport},
@code{unuse-package}

@subsubheading See Also:

@ref{intern}, @ref{find-all-symbols}

@subsubheading Notes:

@code{find-symbol} is operationally equivalent to @code{intern}, 
except that it never creates a new @term{symbol}.


@node find-package
@heading find-package (Function)
@syindex find-package
@cindex find-package


@subsubheading Syntax:

@DefunWithValues{find-package, name, package}

@subsubheading Arguments and Values:

@param{name}---a @term{string designator} or a @term{package} @term{object}.

@param{package}---a @term{package} @term{object} or @nil{}.

@subsubheading Description:

If @param{name} is a @term{string designator},
@code{find-package} locates and returns the
@term{package} whose name or nickname is @param{name}.
This
search is case sensitive.
If there is no such @term{package},
@code{find-package} returns @nil{}.

If @param{name} is a @term{package} @term{object},
that @term{package} @term{object} is returned.

@subsubheading Examples:

@lisp
 (find-package 'common-lisp) @EV{} #<PACKAGE "COMMON-LISP">
 (find-package "COMMON-LISP-USER") @EV{} #<PACKAGE "COMMON-LISP-USER">
 (find-package 'not-there) @EV{} NIL
@end lisp


@subsubheading Affected By:

The set of @term{packages} created by the @term{implementation}.

@code{defpackage},
@code{delete-package},
@code{make-package},
@code{rename-package}

@subsubheading See Also:

@ref{make-package}


@node find-all-symbols
@heading find-all-symbols (Function)
@syindex find-all-symbols
@cindex find-all-symbols


@subsubheading Syntax:

@DefunWithValues{find-all-symbols, string, symbols}

@subsubheading Arguments and Values:

@param{string}---a @term{@symbolnamedesignator{}}.

@param{symbols}---a @term{list} of @term{symbols}.

@subsubheading Description:

@code{find-all-symbols} searches
@term{name} that is the @term{same} (under @code{string=}) as
@param{string}.  A @term{list} of all such @term{symbols} is returned.
Whether or how the @term{list} is ordered is
@term{implementation-dependent}.

@subsubheading Examples:

@lisp
 (find-all-symbols 'car)
@EV{} (CAR)
@OV{} (CAR VEHICLES:CAR)
@OV{} (VEHICLES:CAR CAR)
 (intern "CAR" (make-package 'temp :use nil)) @EV{} TEMP::CAR, NIL
 (find-all-symbols 'car)
@EV{} (TEMP::CAR CAR)
@OV{} (CAR TEMP::CAR)
@OV{} (TEMP::CAR CAR VEHICLES:CAR)
@OV{} (CAR TEMP::CAR VEHICLES:CAR)
@end lisp


@subsubheading See Also:

@ref{find-symbol}


@node import
@heading import (Function)
@syindex import
@cindex import


@subsubheading Syntax:

@DefunWithValues{import, symbols @opt{} package, @code{t}}

@subsubheading Arguments and Values:

@param{symbols}---a @term{designator} for a @term{list} of @term{symbols}.

@param{package}---a @term{package designator}.
@Default{the @term{current package}}

@subsubheading Description:

@code{import} adds @param{symbol} or
@param{symbols} to the internals of @param{package}, checking for name
conflicts with existing @term{symbols} either @term{present} in @param{package}
or @term{accessible} to it.  Once the @param{symbols} have been
@term{imported}, they may be referenced in the @term{importing}
@param{package} without the use of a @term{package prefix} when using the @term{Lisp reader}.

A name conflict in @code{import} between the
@param{symbol} being imported and a symbol inherited from some other @term{package} can 
be resolved in favor of the
@param{symbol} being @term{imported} 
by making it a shadowing symbol, or in favor
of the @term{symbol} already @term{accessible} by 
not doing the @code{import}.  A
name conflict in @code{import} with a @term{symbol} 
already @term{present} in the
@param{package} 
may be resolved by uninterning that @term{symbol}, or by not
doing the @code{import}.

The imported @term{symbol} is
not automatically exported from the @term{current package}, but if it is
already @term{present} and external, then the fact that it
is external is not changed.  
If any @term{symbol} to be @term{imported} has no home
package (@ie{} @tt{(symbol-package @param{symbol}) @EV{}@spc{}nil}), 
@code{import} sets the @term{home package}
of the @param{symbol} to @param{package}.

If the @param{symbol} is already @term{present} in the importing @param{package},
@code{import} has no effect.  

@subsubheading Examples:

@lisp
 (import 'common-lisp::car (make-package 'temp :use nil)) @EV{} T
 (find-symbol "CAR" 'temp) @EV{} CAR, :INTERNAL
 (find-symbol "CDR" 'temp) @EV{} NIL, NIL 
@end lisp


The form @f{(import 'editor:buffer)} takes the external symbol named 
@f{buffer} in the @code{EDITOR} @term{package} (this symbol was located when the form
was read by the @term{Lisp reader}) and adds it to the @term{current package}
as an @term{internal symbol}. The symbol @f{buffer} is then @term{present} in
the @term{current package}.

@subsubheading Side Effects:

The package system is modified.

@subsubheading Affected By:

Current state of the package system.

@subsubheading Exceptional Situations:

@code{import} signals a @term{correctable} error @oftype{package-error}
if any of the @param{symbols} to be @term{imported} has the @term{same} @term{name}
(under @code{string=}) as some distinct @term{symbol} (under @code{eql})
already @term{accessible} in the @param{package}, even if the conflict is
with a @term{shadowing symbol} of the @param{package}.

@subsubheading See Also:

@ref{shadow}, @ref{export}


@node list-all-packages
@heading list-all-packages (Function)
@syindex list-all-packages
@cindex list-all-packages


@subsubheading Syntax:

@DefunWithValues{list-all-packages, @noargs{}, packages}

@subsubheading Arguments and Values:

@param{packages}---a @term{list} of @term{package} @term{objects}.

@subsubheading Description:

@code{list-all-packages} returns a 
@term{fresh}
@term{list} of 
all @term{registered packages}.

@subsubheading Examples:

@lisp
 (let ((before (list-all-packages)))
    (make-package 'temp)
    (set-difference (list-all-packages) before)) @EV{} (#<PACKAGE "TEMP">)
@end lisp


@subsubheading Affected By:

@code{defpackage},
@code{delete-package},
@code{make-package}


@node rename-package
@heading rename-package (Function)
@syindex rename-package
@cindex rename-package


@subsubheading Syntax:

@DefunWithValues{rename-package, package new-name @opt{} new-nicknames, package-object}

@subsubheading Arguments and Values:

@param{package}---a @term{package designator}.

@param{new-name}---a @term{package designator}.

@param{new-nicknames}---a @term{list} of @term{@packagenamedesignators{}}.
@Default{the @term{empty list}}

@param{package-object}---the renamed @param{package} @term{object}.

@subsubheading Description:

Replaces the name and nicknames of @param{package}.
The old name and all of the old nicknames of @param{package} are eliminated
and are replaced by @param{new-name} and @param{new-nicknames}.

The consequences are undefined if @param{new-name} or any @param{new-nickname}
conflicts with any existing package names.

@subsubheading Examples:

@lisp
 (make-package 'temporary :nicknames '("TEMP")) @EV{} #<PACKAGE "TEMPORARY">
 (rename-package 'temp 'ephemeral) @EV{} #<PACKAGE "EPHEMERAL">
 (package-nicknames (find-package 'ephemeral)) @EV{} ()
 (find-package 'temporary) @EV{} NIL
 (rename-package 'ephemeral 'temporary '(temp fleeting))
@EV{} #<PACKAGE "TEMPORARY">
 (package-nicknames (find-package 'temp)) @EV{} ("TEMP" "FLEETING")
@end lisp


@subsubheading See Also:

@ref{make-package}


@node shadow
@heading shadow (Function)
@syindex shadow
@cindex shadow


@subsubheading Syntax:

@DefunWithValues{shadow, symbol-names @opt{} package, @code{t}}

@subsubheading Arguments and Values:

@param{symbol-names}---a @term{designator} for 
a @term{list} of @term{@symbolnamedesignators{}}.

@param{package}---a @term{package designator}.
@Default{the @term{current package}}

@subsubheading Description:

@code{shadow} assures that @term{symbols} with names given 
by @param{symbol-names} are @term{present} 
in
the @param{package}.

Specifically, @param{package} is searched for @term{symbols} 
with the @term{names} supplied by @param{symbol-names}.
For each such @term{name}, if a corresponding @term{symbol} 
is not @term{present} in @param{package} (directly, not by inheritance), 
then a corresponding @term{symbol} is created with that @term{name},
and inserted into @param{package} as an @term{internal symbol}.
The corresponding @term{symbol}, whether pre-existing or newly created,
is then added, if not already present, to the @term{shadowing symbols list}
of @param{package}.

@subsubheading Examples:

@lisp
 (package-shadowing-symbols (make-package 'temp)) @EV{} NIL
 (find-symbol 'car 'temp) @EV{} CAR, :INHERITED
 (shadow 'car 'temp) @EV{} T
 (find-symbol 'car 'temp) @EV{} TEMP::CAR, :INTERNAL
 (package-shadowing-symbols 'temp) @EV{} (TEMP::CAR)
@end lisp


@lisp
 (make-package 'test-1) @EV{} #<PACKAGE "TEST-1">
 (intern "TEST" (find-package 'test-1)) @EV{} TEST-1::TEST, NIL
 (shadow 'test-1::test (find-package 'test-1)) @EV{} T
 (shadow 'TEST (find-package 'test-1)) @EV{} T
 (assert (not (null (member 'test-1::test (package-shadowing-symbols
                                            (find-package 'test-1))))))
 
 (make-package 'test-2) @EV{} #<PACKAGE "TEST-2">
 (intern "TEST" (find-package 'test-2)) @EV{} TEST-2::TEST, NIL
 (export 'test-2::test (find-package 'test-2)) @EV{} T
 (use-package 'test-2 (find-package 'test-1))    ;should not error
 
@end lisp


@subsubheading Side Effects:

@code{shadow} changes the state of the package system in such a 
way that the package consistency rules do not hold across the change.

@subsubheading Affected By:

Current state of the package system.

@subsubheading See Also:

@ref{package-shadowing-symbols},
@ref{Package Concepts, Section 11.1 (Package Concepts)}

@subsubheading Notes:

If a @term{symbol} with a name in @param{symbol-names} already exists
in @param{package}, but by inheritance, the inherited symbol becomes
@term{shadowed}@sub3{} by a newly created @term{internal symbol}.


@node shadowing-import
@heading shadowing-import (Function)
@syindex shadowing-import
@cindex shadowing-import


@subsubheading Syntax:

@DefunWithValues{shadowing-import, symbols @opt{} package, @code{t}}

@subsubheading Arguments and Values:

@param{symbols}---a @term{designator} for a @term{list} of @term{symbols}.

@param{package} ---a @term{package designator}.
@Default{the @term{current package}}

@subsubheading Description:

@code{shadowing-import} is like @code{import}, 
but it does not signal an error even if the importation of a @term{symbol} 
would shadow some @term{symbol} already @term{accessible} in @param{package}.  

@code{shadowing-import} inserts each of @param{symbols} 
into @param{package} as an internal symbol, regardless
of whether another @term{symbol} of the same name is shadowed by this
action.
If a different @term{symbol} of the same name is already @term{present}
in @param{package},
that @term{symbol} is first @term{uninterned} from @param{package}.
The new @term{symbol} is added to @param{package}'s shadowing-symbols list.  

@code{shadowing-import} does name-conflict
checking to the extent that it checks whether a distinct existing
@term{symbol} with the same name is @term{accessible}; if so, it is shadowed by
the new @term{symbol}, which implies that it must be uninterned
if it was 
@term{present} in @param{package}.

@subsubheading Examples:
@lisp
 (in-package "COMMON-LISP-USER") @EV{} #<PACKAGE "COMMON-LISP-USER">
 (setq sym (intern "CONFLICT")) @EV{} CONFLICT
 (intern "CONFLICT" (make-package 'temp)) @EV{} TEMP::CONFLICT, NIL
 (package-shadowing-symbols 'temp) @EV{} NIL
 (shadowing-import sym 'temp) @EV{} T 
 (package-shadowing-symbols 'temp) @EV{} (CONFLICT)
@end lisp


@subsubheading Side Effects:

@code{shadowing-import} 
changes the state of the package system in such a way that
the consistency rules do not hold across the change.

@param{package}'s shadowing-symbols list is modified.

@subsubheading Affected By:

Current state of the package system.

@subsubheading See Also:

@ref{import}, @ref{unintern}, @ref{package-shadowing-symbols}


@node delete-package
@heading delete-package (Function)
@syindex delete-package
@cindex delete-package



@subsubheading Syntax:

@DefunWithValues{delete-package, package, generalized-boolean}

@subsubheading Arguments and Values:

@param{package}---a @term{package designator}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@code{delete-package} deletes @param{package} from all package system
data structures. 
If the operation is successful, @code{delete-package} returns
true, otherwise @nil{}.
The effect of @code{delete-package} is that the name and nicknames
of @param{package} cease to be recognized package names.
The package @term{object} is still a @term{package} 
(@ie{} @code{packagep} is @term{true} of it)
but @code{package-name} returns @nil{}.
The consequences of deleting the @code{COMMON-LISP} @term{package} or the @code{KEYWORD} @term{package} are undefined.
The consequences of invoking any other package operation on @param{package}
once it has been deleted are unspecified.
In particular, the consequences of invoking @code{find-symbol},
@code{intern} and other functions that look for a symbol name in
a @term{package} are unspecified if they are called with @code{*package*}
bound to the deleted @param{package} or with the deleted @param{package} 
as an argument.

If @param{package} is a @term{package} @term{object} that has already
been deleted, @code{delete-package} immediately returns @nil{}.

After this operation completes, the 
@term{home package}
of any @term{symbol} whose @term{home package} 
had previously been
@param{package} 
is
@term{implementation-dependent}.
Except for this, @term{symbols} @term{accessible}
in @param{package} are not modified in any other way;
@term{symbols} whose @term{home package} is not @param{package} remain unchanged.

@subsubheading Examples:

@lisp
 (setq *foo-package* (make-package "FOO" :use nil))
 (setq *foo-symbol*  (intern "FOO" *foo-package*))
 (export *foo-symbol* *foo-package*)

 (setq *bar-package* (make-package "BAR" :use '("FOO")))
 (setq *bar-symbol*  (intern "BAR" *bar-package*))
 (export *foo-symbol* *bar-package*)
 (export *bar-symbol* *bar-package*)

 (setq *baz-package* (make-package "BAZ" :use '("BAR")))

 (symbol-package *foo-symbol*) @EV{} #<PACKAGE "FOO">
 (symbol-package *bar-symbol*) @EV{} #<PACKAGE "BAR">

 (prin1-to-string *foo-symbol*) @EV{} "FOO:FOO"
 (prin1-to-string *bar-symbol*) @EV{} "BAR:BAR"

 (find-symbol "FOO" *bar-package*) @EV{} FOO:FOO, :EXTERNAL

 (find-symbol "FOO" *baz-package*) @EV{} FOO:FOO, :INHERITED
 (find-symbol "BAR" *baz-package*) @EV{} BAR:BAR, :INHERITED

 (packagep *foo-package*) @EV{} @term{true}
 (packagep *bar-package*) @EV{} @term{true}
 (packagep *baz-package*) @EV{} @term{true}

 (package-name *foo-package*) @EV{} "FOO"
 (package-name *bar-package*) @EV{} "BAR"
 (package-name *baz-package*) @EV{} "BAZ"

 (package-use-list *foo-package*) @EV{} ()
 (package-use-list *bar-package*) @EV{} (#<PACKAGE "FOO">)
 (package-use-list *baz-package*) @EV{} (#<PACKAGE "BAR">)

 (package-used-by-list *foo-package*) @EV{} (#<PACKAGE "BAR">)
 (package-used-by-list *bar-package*) @EV{} (#<PACKAGE "BAZ">)
 (package-used-by-list *baz-package*) @EV{} ()

 (delete-package *bar-package*)
@OUT{} Error: Package BAZ uses package BAR.
@OUT{} If continued, BAZ will be made to unuse-package BAR,
@OUT{} and then BAR will be deleted.
@OUT{} Type :CONTINUE to continue.
@OUT{} Debug> @IN{:CONTINUE}
@EV{} T

 (symbol-package *foo-symbol*) @EV{} #<PACKAGE "FOO">
 (symbol-package *bar-symbol*) is unspecified

 (prin1-to-string *foo-symbol*) @EV{} "FOO:FOO"
 (prin1-to-string *bar-symbol*) is unspecified

 (find-symbol "FOO" *bar-package*) is unspecified

 (find-symbol "FOO" *baz-package*) @EV{} NIL, NIL
 (find-symbol "BAR" *baz-package*) @EV{} NIL, NIL

 (packagep *foo-package*) @EV{} T
 (packagep *bar-package*) @EV{} T
 (packagep *baz-package*) @EV{} T

 (package-name *foo-package*) @EV{} "FOO"
 (package-name *bar-package*) @EV{} NIL
 (package-name *baz-package*) @EV{} "BAZ"

 (package-use-list *foo-package*) @EV{} ()
 (package-use-list *bar-package*) is unspecified
 (package-use-list *baz-package*) @EV{} ()

 (package-used-by-list *foo-package*) @EV{} ()
 (package-used-by-list *bar-package*) is unspecified
 (package-used-by-list *baz-package*) @EV{} ()
@end lisp


@subsubheading Exceptional Situations:

If the @param{package} @term{designator} is a @term{name} that does not 
currently name a @term{package}, 
a @term{correctable} error @oftype{package-error} is signaled.
If correction is attempted, no deletion action is attempted; 
instead, @code{delete-package} immediately returns @nil{}.

If @param{package} is used by other @term{packages}, 
a @term{correctable} error @oftype{package-error} is signaled.
If correction is attempted,
@code{unuse-package} is effectively called to remove any dependencies, 
causing @param{package}'s @term{external symbols} to cease being @term{accessible} to those 
@term{packages} that use @param{package}. 
@code{delete-package} then deletes @param{package} just as it would have had 
there been no @term{packages} that used it.

@subsubheading See Also:

@ref{unuse-package}



@node make-package
@heading make-package (Function)
@syindex make-package
@cindex make-package


@subsubheading Syntax:

@DefunWithValues{make-package, package-name @key{} nicknames use, package}

@subsubheading Arguments and Values:

@param{package-name}---a @term{@packagenamedesignator{}}.

@param{nicknames}---a @term{list} of @term{@packagenamedesignators{}}.
@Default{the @term{empty list}}

@param{use}---
a @term{list} of @term{package designators}.
@Default{@term{implementation-defined}}

@param{package}---a @term{package}.

@subsubheading Description:

Creates a new @term{package} with the name @param{package-name}.  

@param{Nicknames} are additional @term{names} which may be used
to refer to the new @term{package}.

@param{use} specifies zero or more @term{packages} 
the @term{external symbols} of which are to be inherited by
the new @term{package}.  See the @term{function} @ref{use-package}.

@subsubheading Examples:

@lisp
 (make-package 'temporary :nicknames '("TEMP" "temp")) @EV{} #<PACKAGE "TEMPORARY">
 (make-package "OWNER" :use '("temp")) @EV{} #<PACKAGE "OWNER">
 (package-used-by-list 'temp) @EV{} (#<PACKAGE "OWNER">)
 (package-use-list 'owner) @EV{} (#<PACKAGE "TEMPORARY">)
@end lisp


@subsubheading Affected By:

The existence of other @term{packages} in the system.

@subsubheading Exceptional Situations:

The consequences are unspecified if @term{packages} denoted by @param{use}
do not exist.

A @term{correctable} error is signaled if the @param{package-name} 
or any of the @param{nicknames} is already 
the @term{name} or @term{nickname} of an existing @term{package}.

@subsubheading See Also:

@ref{defpackage},
@ref{use-package}

@subsubheading Notes:

In situations where the @term{packages} to be used contain symbols which would conflict,
it is necessary to first create the package with @f{:use '()},
then to use @code{shadow} or @code{shadowing-import} to address the conflicts,
and then after that to use @code{use-package} once the conflicts have been addressed.

When packages are being created as part of the static definition of a program
rather than dynamically by the program, it is generally considered more stylistically
appropriate to use @code{defpackage} rather than @code{make-package}.


@node with-package-iterator
@heading with-package-iterator (Macro)
@syindex with-package-iterator
@cindex with-package-iterator




@subsubheading Syntax:

@DefmacWithValuesNewline{with-package-iterator, @paren{name package-list-form @rest{} symbol-types} @starparam{declaration} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{name}---a @term{symbol}.

@param{package-list-form}---a @term{form}; evaluated once to produce a @param{package-list}.

@param{package-list}---a @term{designator} for a list of @term{package designators}.

@param{symbol-type}---one of the @term{symbols} 
@kwd{internal}, @kwd{external}, or @kwd{inherited}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} of the @param{forms}.

@subsubheading Description:

Within the lexical scope of the body @param{forms},
the @param{name} is defined via @code{macrolet} 
such that successive invocations of @tt{(@param{name})}
will return the @term{symbols}, one by one, 
from the @term{packages} in @param{package-list}. 

It is unspecified whether @term{symbols} inherited from
multiple @term{packages} are returned more than once.  
The order of @term{symbols} returned does not necessarily reflect the order
of @term{packages} in @param{package-list}.  When @param{package-list} has 
more than one element, it is unspecified whether duplicate @term{symbols} are
returned once or more than once.  

@param{Symbol-types} controls which @term{symbols} that are @term{accessible}
in a @term{package} are returned as follows:


@table @asis
@item @id{@kwd{internal}}


The @term{symbols} that are @term{present} in the @term{package},
but that are not @term{exported}.

@item @id{@kwd{external}}


The @term{symbols} that are @term{present} in the @term{package}
and are @term{exported}.

@item @id{@kwd{inherited}}


The @term{symbols} that are @term{exported} by used @term{packages}
and that are not @term{shadowed}.
@end table


When more than one argument is supplied for @param{symbol-types}, 
a @term{symbol} is returned if its @term{accessibility} matches 
any one of the @param{symbol-types} supplied.  
Implementations may extend this syntax by recognizing additional 
symbol accessibility types.

An invocation of @tt{(@param{name})} returns four values as follows:


@enumerate 1
@item A flag that indicates whether a @term{symbol} is returned
(true means that a @term{symbol} is returned).
@item A @term{symbol} that is @term{accessible} in one the
indicated @term{packages}.
@item The accessibility type for that @term{symbol}; 
@ie{} one of the symbols @kwd{internal}, @kwd{external}, or @kwd{inherited}.
@item The @term{package} from which the @term{symbol} was obtained.
The @term{package} is one of the @term{packages} present 
or named in @param{package-list}.
@end enumerate


After all @term{symbols} have been returned by successive invocations of
@tt{(@param{name})}, then only one value is returned, namely @nil{}.

The meaning of the second, third, and fourth @term{values} is that the returned 
@term{symbol} is @term{accessible} in the returned @term{package}
in the way indicated by the second return value as follows:


@table @asis
@item @id{@kwd{internal}}


Means @term{present} and not @term{exported}.

@item @id{@kwd{external}}


Means @term{present} and @term{exported}.

@item @id{@kwd{inherited}}


Means not @term{present} (thus not @term{shadowed}) but inherited
from some used @term{package}.
@end table


It is unspecified what happens if any of the implicit interior state 
of an iteration is returned outside the dynamic extent of the 
@code{with-package-iterator}
form such as by returning some @term{closure} over the invocation @term{form}.

Any number of invocations of @code{with-package-iterator} 
can be nested, and the body of the innermost one can invoke all of the
locally @term{established} @term{macros}, provided all those @term{macros}
have distinct names.

@subsubheading Examples:

The following function should return @code{t}@spc{}on any @term{package}, and signal
an error if the usage of @code{with-package-iterator} does not agree
with the corresponding usage of @code{do-symbols}.

@lisp
 (defun test-package-iterator (package)
   (unless (packagep package)
     (setq package (find-package package)))
   (let ((all-entries '())
         (generated-entries '()))
     (do-symbols (x package) 
       (multiple-value-bind (symbol accessibility) 
           (find-symbol (symbol-name x) package)
         (push (list symbol accessibility) all-entries)))
     (with-package-iterator (generator-fn package 
                             :internal :external :inherited)
       (loop     
         (multiple-value-bind (more? symbol accessibility pkg)
             (generator-fn)
           (unless more? (return))
           (let ((l (multiple-value-list (find-symbol (symbol-name symbol) 
                                                      package))))
             (unless (equal l (list symbol accessibility))
               (error "Symbol ~S not found as ~S in package ~A [~S]"
                      symbol accessibility (package-name package) l))
             (push l generated-entries)))))
     (unless (and (subsetp all-entries generated-entries :test #'equal)
                  (subsetp generated-entries all-entries :test #'equal))
      (error "Generated entries and Do-Symbols entries don't correspond"))
     t))
@end lisp


The following function prints out every @term{present} @term{symbol} 
(possibly more than once):

@lisp
 (defun print-all-symbols () 
   (with-package-iterator (next-symbol (list-all-packages)
                           :internal :external)
     (loop
       (multiple-value-bind (more? symbol) (next-symbol)
         (if more? 
            (print symbol)
            (return))))))
@end lisp


@subsubheading Exceptional Situations:

@code{with-package-iterator} signals an error @oftype{program-error} if 
no @param{symbol-types} are supplied or if a @param{symbol-type} is not
recognized  by the implementation is supplied.  

The consequences are undefined if the local function named @param{name}
@term{established} by @code{with-package-iterator} is called after it 
has returned @term{false} as its @term{primary value}.

@subsubheading See Also:

@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}



@node unexport
@heading unexport (Function)
@syindex unexport
@cindex unexport


@subsubheading Syntax:

@DefunWithValues{unexport, symbols @opt{} package, @code{t}}

@subsubheading Arguments and Values:

@param{symbols}---a @term{designator} for a @term{list} of @term{symbols}.

@param{package}---a @term{package designator}.
@Default{the @term{current package}}

@subsubheading Description:

@code{unexport} reverts external @param{symbols} in @param{package} to
internal status; it undoes the effect of @code{export}.

@code{unexport} works only on @term{symbols} 
@term{present}
in @param{package}, switching them back to internal status.
If @code{unexport} is given a @term{symbol} that is 
already @term{accessible} as an @term{internal symbol} in @param{package},
it does nothing.

@subsubheading Examples:

@lisp
 (in-package "COMMON-LISP-USER") @EV{} #<PACKAGE "COMMON-LISP-USER">
 (export (intern "CONTRABAND" (make-package 'temp)) 'temp) @EV{} T
 (find-symbol "CONTRABAND") @EV{} NIL, NIL 
 (use-package 'temp) @EV{} T 
 (find-symbol "CONTRABAND") @EV{} CONTRABAND, :INHERITED
 (unexport 'contraband 'temp) @EV{} T
 (find-symbol "CONTRABAND") @EV{} NIL, NIL
@end lisp


@subsubheading Side Effects:

Package system is modified.

@subsubheading Affected By:

Current state of the package system.

@subsubheading Exceptional Situations:

If @code{unexport} is given a @term{symbol}
not @term{accessible} in @param{package} at all, 
an error @oftype{package-error} is signaled.

The consequences are undefined if @param{package} is the @code{KEYWORD} @term{package}
or the @code{COMMON-LISP} @term{package}.

@subsubheading See Also:

@ref{export}, @ref{Package Concepts, Section 11.1 (Package Concepts)}


@node unintern
@heading unintern (Function)
@syindex unintern
@cindex unintern


@subsubheading Syntax:

@DefunWithValues{unintern, symbol @opt{} package, generalized-boolean}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol}.

@param{package}---a @term{package designator}.
@Default{the @term{current package}}

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:
@code{unintern} removes @param{symbol} from @param{package}.
If @param{symbol} is @term{present} in @param{package}, it is
removed from @param{package} and also from @param{package}'s 
@term{shadowing symbols list} if it is present there.  If @param{package} is the
@term{home package} for @param{symbol}, @param{symbol} is made to have no 
@term{home package}.
@param{Symbol} may continue to be @term{accessible}
in @param{package} by inheritance.

Use of @code{unintern} can result in a @term{symbol} 
that has no
recorded @term{home package},
but that in fact is @term{accessible} in some @term{package}.
@clisp{}@spc{}does not check for this pathological case, 
and such @term{symbols}
are always printed preceded by @f{#:}.

@code{unintern} returns @term{true} if it removes @param{symbol}, and @nil{}@spc{}otherwise.

@subsubheading Examples:

@lisp
 (in-package "COMMON-LISP-USER") @EV{} #<PACKAGE "COMMON-LISP-USER">
 (setq temps-unpack (intern "UNPACK" (make-package 'temp))) @EV{} TEMP::UNPACK 
 (unintern temps-unpack 'temp) @EV{} T
 (find-symbol "UNPACK" 'temp) @EV{} NIL, NIL 
 temps-unpack @EV{} #:UNPACK 
@end lisp


@subsubheading Side Effects:

@code{unintern} changes the state of the
package system in such a way that the consistency rules do not hold
across the change.

@subsubheading Affected By:
Current state of the package system.

@subsubheading Exceptional Situations:
Giving a shadowing symbol to @code{unintern} 
can uncover a name conflict that had
previously been resolved by the shadowing.  If package A uses packages
B and C, A contains a shadowing symbol @f{x}, and B and C each contain external
symbols named @f{x}, then removing the shadowing symbol @f{x}
from A will reveal a name
conflict between @f{b:x} and @f{c:x} if those two @term{symbols} are distinct.
In this case @code{unintern} will signal an error.

@subsubheading See Also:

@ref{Package Concepts, Section 11.1 (Package Concepts)}


@node in-package
@heading in-package (Macro)
@syindex in-package
@cindex in-package



@subsubheading Syntax:

@DefmacWithValues{in-package, name, package}

@subsubheading Arguments and Values:

@param{name}---a @term{@packagenamedesignator{}}; @noeval{}.

@param{package}---the @term{package} named by @param{name}.

@subsubheading Description:

Causes the the @term{package} named by @param{name} 
to become the @term{current package}---that is, @thevalueof{*package*}.
If no such @term{package} already exists, an error @oftype{package-error} is signaled.

Everything @code{in-package} does is also performed at compile time
if the call appears as a @term{top level form}.

@subsubheading Side Effects:

@Thevariable{*package*} is assigned.
If the @code{in-package} @term{form} is a @term{top level form}, 
this assignment also occurs at compile time.

@subsubheading Exceptional Situations:

An error @oftype{package-error} is signaled if the specified @term{package} does not exist.

@subsubheading See Also:

@ref{*package*}



@node unuse-package
@heading unuse-package (Function)
@syindex unuse-package
@cindex unuse-package


@subsubheading Syntax:

@DefunWithValues{unuse-package, packages-to-unuse @opt{} package, @code{t}}

@subsubheading Arguments and Values:

@param{packages-to-unuse}---a @term{designator} for
a @term{list} of @term{package designators}.

@param{package}---a @term{package designator}.
@Default{the @term{current package}}

@subsubheading Description:

@code{unuse-package} causes @param{package} to cease inheriting
all the @term{external symbols} of 
@param{packages-to-unuse}; @code{unuse-package} undoes
the effects of @code{use-package}.   The 
@param{packages-to-unuse} 
are removed from the @term{use list} of @param{package}.

Any @term{symbols} that have been
@term{imported} into @param{package} continue to be @term{present} in @param{package}.

@subsubheading Examples:

@lisp
 (in-package "COMMON-LISP-USER") @EV{} #<PACKAGE "COMMON-LISP-USER">
 (export (intern "SHOES" (make-package 'temp)) 'temp) @EV{} T
 (find-symbol "SHOES") @EV{} NIL, NIL
 (use-package 'temp) @EV{} T
 (find-symbol "SHOES") @EV{} SHOES, :INHERITED
 (find (find-package 'temp) (package-use-list 'common-lisp-user)) @EV{} #<PACKAGE "TEMP">
 (unuse-package 'temp) @EV{} T
 (find-symbol "SHOES") @EV{} NIL, NIL
@end lisp


@subsubheading Side Effects:

The @term{use list} of @param{package} is modified.

@subsubheading Affected By:
Current state of the package system.
@subsubheading See Also:

@ref{use-package}, @ref{package-use-list}


@node use-package
@heading use-package (Function)
@syindex use-package
@cindex use-package


@subsubheading Syntax:

@DefunWithValues{use-package, packages-to-use @opt{} package, @code{t}}

@subsubheading Arguments and Values:

@param{packages-to-use}---a @term{designator} for 
a @term{list} of @term{package designators}.
The @code{KEYWORD} @term{package} may not be supplied.

@param{package}---a @term{package designator}.
@Default{the @term{current package}}
The @param{package} cannot be the @code{KEYWORD} @term{package}.

@subsubheading Description:

@code{use-package} causes @param{package} to inherit all the
@term{external symbols} of @param{packages-to-use}.
The inherited @term{symbols} become @term{accessible} as 
@term{internal symbols} of @param{package}.  

@param{Packages-to-use} are added to the @term{use list} of @param{package}
if they are not there already.  All @term{external symbols} in
@param{packages-to-use} become @term{accessible} in @param{package}
as @term{internal symbols}.
@code{use-package} does not cause any new @term{symbols} to be @term{present}
in @param{package} but only makes them @term{accessible} by inheritance.

@code{use-package} checks for
name conflicts between the newly imported symbols and those already
@term{accessible} in @param{package}.  
A name conflict in @code{use-package} 
between two external symbols inherited
by @param{package} from @param{packages-to-use} may be resolved in favor of
either @term{symbol} 
by @term{importing} one of them into @param{package} and making it a
shadowing symbol. 

@subsubheading Examples:

@lisp
 (export (intern "LAND-FILL" (make-package 'trash)) 'trash) @EV{} T
 (find-symbol "LAND-FILL" (make-package 'temp)) @EV{} NIL, NIL
 (package-use-list 'temp) @EV{} (#<PACKAGE "TEMP">)
 (use-package 'trash 'temp) @EV{} T
 (package-use-list 'temp) @EV{} (#<PACKAGE "TEMP"> #<PACKAGE "TRASH">)
 (find-symbol "LAND-FILL" 'temp) @EV{} TRASH:LAND-FILL, :INHERITED
@end lisp


@subsubheading Side Effects:

The @term{use list} of @param{package} may be modified.

@subsubheading See Also:

@ref{unuse-package},
@ref{package-use-list},
@ref{Package Concepts, Section 11.1 (Package Concepts)}

@subsubheading Notes:

It is permissible for a @term{package} @mat{P@sub1{}} 
to @term{use} a @term{package} @mat{P@sub2{}}
even if @mat{P@sub2{}} already uses @mat{P@sub1{}}.
The using of @term{packages} is not transitive, 
so no problem results from the apparent circularity.


@node defpackage
@heading defpackage (Macro)
@syindex defpackage
@cindex defpackage



@subsubheading Syntax:

@DefmacWithValues{defpackage, defined-package-name @interleave{@down{option}}, package}

@auxbnf{option, @starparen{@kwd{nicknames} @starparam{nickname}} | @CR{} @paren{@kwd{documentation} @i{string}} | @CR{} @starparen{@kwd{use} @starparam{package-name}} | @CR{} @starparen{@kwd{shadow} @stardown{symbol-name}} | @CR{} @starparen{@kwd{shadowing-import-from} @param{package-name} @stardown{symbol-name}} | @CR{} @starparen{@kwd{import-from} @param{package-name} @stardown{symbol-name}} | @CR{} @starparen{@kwd{export} @stardown{symbol-name}} | @CR{} @starparen{@kwd{intern} @stardown{symbol-name}} | @CR{} @paren{@kwd{size} @term{integer}}}

@subsubheading Arguments and Values:

@param{defined-package-name}---a @term{@packagenamedesignator{}}.

@param{package-name}---a @term{package designator}.

@param{nickname}---a @term{@packagenamedesignator{}}.

@param{symbol-name}---a @term{@symbolnamedesignator{}}.

@param{package}---the @term{package} named @param{package-name}.

@subsubheading Description:

@code{defpackage} creates a @term{package} as specified and returns 
the @term{package}.

If @param{defined-package-name} already refers to an existing 
@term{package}, the name-to-package mapping for that name is not changed.
If the new definition is at variance with the current state of that
@term{package}, the consequences are undefined;  an implementation
might choose to modify the existing @term{package} to reflect the
new definition.  If @param{defined-package-name} is a @term{symbol},
its @term{name} is used.

The standard @i{options} are described below. 


@table @asis
@item @id{@kwd{nicknames}}


The arguments to @kwd{nicknames} set the @term{package}'s nicknames to the
supplied names.

@item @id{@kwd{documentation}}


The argument to @kwd{documentation} specifies a @term{documentation string};
it is attached as a @term{documentation string} to the @term{package}.
At most one @kwd{documentation} option 
can appear in a single @code{defpackage} @term{form}.

@item @id{@kwd{use}}


The arguments to @kwd{use} set the @term{packages} that the @term{package}
named by @param{package-name}
will inherit from. If @kwd{use} is not supplied,
it defaults to the same @term{implementation-dependent} value as @thekeyarg{use} to
@code{make-package}.

@item @id{@kwd{shadow}}


The arguments to @kwd{shadow}, @param{symbol-names}, name @term{symbols} 
that are to be created in the @term{package} being defined.
These @term{symbols} are added to the list of shadowing
@term{symbols} effectively as if by @code{shadow}.

@item @id{@kwd{shadowing-import-from}}


The @term{symbols} named by the argument @param{symbol-names}
are found (involving a lookup as if by @code{find-symbol})
in the specified @param{package-name}.  The resulting @term{symbols}
are @term{imported} into the @term{package} being defined, and 
placed on the shadowing symbols list as if by @code{shadowing-import}.
In no case are @term{symbols} created in any @term{package}
other than the one being defined.

@item @id{@kwd{import-from}}


The @term{symbols} named by the argument @param{symbol-names}
are found in the @term{package} named by @param{package-name} and 
they are @term{imported} into the @term{package} being defined.
In no case are @term{symbols} created in any @term{package}
other than the one being defined.

@item @id{@kwd{export}}


The @term{symbols} named by
the argument @param{symbol-names}  are found 
or created in the @term{package} being defined
and @term{exported}.
The @kwd{export} option interacts
with the @kwd{use} option, since inherited @term{symbols} 
can be used rather than new ones created.
The @kwd{export} option interacts
with the 
@kwd{import-from} and @kwd{shadowing-import-from} options, since 
@term{imported} 
symbols can be used rather than new ones created.
If an argument to the @kwd{export} option is @term{accessible} as
an (inherited) @term{internal symbol} via @code{use-package}, that the
@term{symbol} named by @param{symbol-name}
is first @term{imported} into the @term{package} being
defined, and is then @term{exported} from that @term{package}.

@item @id{@kwd{intern}}


The @term{symbols} named by the argument @param{symbol-names} 
are found or created in the @term{package} being defined.
The @kwd{intern} option interacts with the 
@kwd{use} option, since inherited @term{symbols} 
can be used rather than new ones created.  

@item @id{@kwd{size}}


The argument to the @kwd{size} option
declares the approximate number of @term{symbols} expected in the 
@term{package}.
This is an efficiency hint only and might be ignored by an
implementation.
@end table


The order in which the options appear in a 
@code{defpackage} form is irrelevant.
The order in which they are executed is as follows:

@enumerate 1
@item
@kwd{shadow} and @kwd{shadowing-import-from}.
@item
@kwd{use}. 
@item
@kwd{import-from} and @kwd{intern}.
@item
@kwd{export}.
@end enumerate

Shadows are established first, since they might  be necessary to block 
spurious name conflicts when the @kwd{use} 
option is processed. The @kwd{use} option is executed
next so that @kwd{intern} and @kwd{export} options can refer to normally 
inherited @term{symbols}.  
The @kwd{export} option is executed last so that it can refer to 
@term{symbols} created by any of the other options; in 
particular, @term{shadowing symbols} and 
@term{imported} @term{symbols} can be made external.  

If a defpackage @term{form} appears as a @term{top level form},
all of the actions normally performed by this @term{macro} 
at load time must also be performed at compile time.

@subsubheading Examples:

@lisp
 (defpackage "MY-PACKAGE"
   (:nicknames "MYPKG" "MY-PKG")
   (:use "COMMON-LISP")
   (:shadow "CAR" "CDR")
   (:shadowing-import-from "VENDOR-COMMON-LISP"  "CONS")
   (:import-from "VENDOR-COMMON-LISP"  "GC")
   (:export "EQ" "CONS" "FROBOLA")
   )
 
 
 (defpackage my-package
   (:nicknames mypkg :MY-PKG)  ; remember Common Lisp conventions for case
   (:use common-lisp)          ; conversion on symbols
   (:shadow CAR :cdr #:cons)                              
   (:export "CONS")            ; this is the shadowed one.
   )
@end lisp


@subsubheading Affected By:

Existing @term{packages}.

@subsubheading Exceptional Situations:

If one of the supplied @kwd{nicknames} already
refers to an existing @term{package}, 
an error @oftype{package-error} is signaled.

An error @oftype{program-error} should be signaled if @kwd{size} or @kwd{documentation}
appears more than once.

Since @term{implementations} might allow extended @i{options}
an error @oftype{program-error} should be signaled
if an @i{option} is present that is not 
actually supported in the host @term{implementation}.

The collection of @param{symbol-name} arguments given to the options 
@kwd{shadow}, @kwd{intern}, 
@kwd{import-from}, and @kwd{shadowing-import-from} must 
all be disjoint; additionally, the @param{symbol-name} arguments given to 
@kwd{export} and @kwd{intern} 
must be disjoint. 
Disjoint in this context is defined as no two of the @param{symbol-names}
being @code{string=} with each other. If either condition is 
violated, an error @oftype{program-error} should be signaled.

For the @kwd{shadowing-import-from} and @kwd{import-from} options,
a @term{correctable} @term{error} @oftype{package-error}
is signaled if no @term{symbol} is 
@term{accessible} in the @term{package} named by
@param{package-name} for one of the argument @param{symbol-names}.

Name conflict errors are handled by the underlying calls to 
@code{make-package}, @code{use-package}, @code{import}, and 
@code{export}. See @ref{Package Concepts, Section 11.1 (Package Concepts)}.

@subsubheading See Also:

@ref{documentation},
@ref{Package Concepts, Section 11.1 (Package Concepts)},
@ref{Compilation, Section 3.2 (Compilation)}

@subsubheading Notes:

The @kwd{intern} option is useful if an @kwd{import-from} or a 
@kwd{shadowing-import-from} option in a subsequent call to @code{defpackage} 
(for some other @term{package}) expects to find
these @term{symbols} @term{accessible} but not necessarily external.


It is recommended that the entire @term{package} definition is put
in a single place, and that all the @term{package} definitions of a
program are in a single file.  This file can be @term{loaded} before
@term{loading} or compiling anything else that depends on those 
@term{packages}. Such a file can be read in the @code{COMMON-LISP-USER} @term{package},
avoiding any initial state issues.

@code{defpackage} cannot be used to create two ``mutually
recursive'' packages, such as:

@lisp
 (defpackage my-package
   (:use common-lisp your-package)    ;requires your-package to exist first
   (:export "MY-FUN"))                
 (defpackage your-package
   (:use common-lisp)
   (:import-from my-package "MY-FUN") ;requires my-package to exist first
   (:export "MY-FUN"))
@end lisp


However, nothing prevents the user from using the 
@term{package}-affecting functions 
such as @code{use-package}, 
@code{import}, and @code{export} to establish such links
after a more standard use of @code{defpackage}.

The macroexpansion of @code{defpackage} 
could usefully canonicalize the names
into @term{strings}, 
so that even if a source file has random @term{symbols} in the
@code{defpackage} form, the compiled file would only contain 
@term{strings}.

Frequently additional @term{implementation-dependent} options take the
form of a @term{keyword} standing by itself as an abbreviation for a list
@tt{(keyword T)}; this syntax should be properly reported as an unrecognized
option in implementations that do not support it.


@node do-symbols; do-external-symbols; do-all-symbols
@heading do-symbols, do-external-symbols, do-all-symbols (Macro)
@syindex do-symbols
@cindex do-symbols
@syindex do-external-symbols
@cindex do-external-symbols
@syindex do-all-symbols
@cindex do-all-symbols



@subsubheading Syntax:

@DefmacWithValuesNewline{do-symbols, @vtop{@hbox{@paren{var @brac{package @brac{result-form}}}} @hbox{@starparam{declaration} @star{@curly{tag | statement}}}}, @starparam{result}}

@DefmacWithValuesNewline{do-external-symbols, @vtop{@hbox{@paren{var @brac{package @brac{result-form}}}} @hbox{@starparam{declaration} @star{@curly{tag | statement}}}}, @starparam{result}}

@DefmacWithValuesNewline{do-all-symbols, @vtop{@hbox{@paren{var @brac{result-form}}} @hbox{@starparam{declaration} @star{@curly{tag | statement}}}}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{variable} @term{name}; @noeval{}.

@param{package}---a @term{package designator}; @eval{}.
@DefaultIn{@code{do-symbols} and @code{do-external-symbols}, the @term{current package}}

@param{result-form}---a @term{form}; @evalspecial{}.
@Default{@nil{}}

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{tag}---a @term{go tag}; @noeval{}.

@param{statement}---a @term{compound form}; @evalspecial{}.

@param{results}---the @term{values} returned by the @param{result-form} 
if a @term{normal return} occurs,
or else, if an @term{explicit return} occurs, the @term{values} that were transferred.

@subsubheading Description:

@code{do-symbols},
@code{do-external-symbols}, and
@code{do-all-symbols} iterate over the @term{symbols} 
of @term{packages}.
For each @term{symbol} in the set of @term{packages} chosen,
the @param{var} is bound to the @term{symbol},
and the @param{statements} in the body are executed.  
When all the @term{symbols} have been processed,
@param{result-form} is evaluated and returned as the value of the macro.  

@code{do-symbols} iterates 
over the @term{symbols} @term{accessible} in
@param{package}.
@param{Statements} may execute more than once for @term{symbols} 
that are inherited from multiple @term{packages}.

@code{do-all-symbols} iterates on every @term{registered package}. 
@code{do-all-symbols} will not process every @term{symbol}
whatsoever, because a @term{symbol} not @term{accessible} in any
@term{registered package} will not be processed.
@code{do-all-symbols} may cause a @term{symbol} that is @term{present} in
several @term{packages} to be processed more than once.

@code{do-external-symbols} iterates on the external symbols of @param{package}.

When @param{result-form} is evaluated, @param{var} is bound and has the value @nil{}.

An @term{implicit block} named @nil{}@spc{}surrounds the entire @code{do-symbols},
@code{do-external-symbols}, or @code{do-all-symbols} @term{form}.
@code{return} or @code{return-from} may be used to terminate the 
iteration prematurely.  

If execution of the body affects which @term{symbols} 
are contained in the set of @term{packages} over which iteration
is occurring, other than to
remove the @term{symbol} 
currently the value of @param{var} by using @code{unintern},
the consequences are undefined.

For each of these macros, the 
@term{scope} of the name binding does not include any
initial value form, but the optional result forms are included.

Any @param{tag} in the body is treated as with @code{tagbody}.

@subsubheading Examples:

@lisp
 (make-package 'temp :use nil) @EV{} #<PACKAGE "TEMP">
 (intern "SHY" 'temp) @EV{} TEMP::SHY, NIL ;SHY will be an internal symbol
                                         ;in the package TEMP
 (export (intern "BOLD" 'temp) 'temp)  @EV{} T  ;BOLD will be external  
 (let ((lst ()))
   (do-symbols (s (find-package 'temp)) (push s lst))
   lst)
@EV{} (TEMP::SHY TEMP:BOLD)
@OV{} (TEMP:BOLD TEMP::SHY)
 (let ((lst ()))
   (do-external-symbols (s (find-package 'temp) lst) (push s lst))
   lst) 
@EV{} (TEMP:BOLD)
 (let ((lst ()))                                                     
   (do-all-symbols (s lst)
     (when (eq (find-package 'temp) (symbol-package s)) (push s lst)))
   lst)
@EV{} (TEMP::SHY TEMP:BOLD)
@OV{} (TEMP:BOLD TEMP::SHY)
@end lisp


@subsubheading See Also:

@ref{intern},
@ref{export},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}



@node intern
@heading intern (Function)
@syindex intern
@cindex intern


@subsubheading Syntax:

@DefunWithValues{intern, string @opt{} package, symbol\, status}

@subsubheading Arguments and Values:

@param{string}---a @term{string}.

@param{package}---a @term{package designator}.
@Default{the @term{current package}}

@param{symbol}---a @term{symbol}.

@param{status}---one of @kwd{inherited}, @kwd{external}, @kwd{internal}, or @nil{}.

@subsubheading Description:

@code{intern} enters a @term{symbol} named @param{string} into @param{package}.
If a @term{symbol} whose name is the same as @param{string} 
is already @term{accessible} in @param{package}, it is returned.
If no such @term{symbol} is @term{accessible} in @param{package}, 
a new @term{symbol} with the given name is created 
and entered into @param{package} as an @term{internal symbol},
or as an @term{external symbol} if the @param{package} is the @code{KEYWORD} @term{package}; 
@param{package} becomes the @term{home package} of the created @term{symbol}.

The first value returned by @code{intern}, @param{symbol},
is the @term{symbol} that was found or
created.  
The meaning of the @term{secondary value}, @param{status}, is as follows:

@table @asis
@item @id{@kwd{internal}}


The @term{symbol} was found 
and is
@term{present} in @param{package} as an @term{internal symbol}.

@item @id{@kwd{external}}


The @term{symbol} was found
and is
@term{present} as an @term{external symbol}.

@item @id{@kwd{inherited}}


The @term{symbol} was found
and is inherited via @code{use-package} 
(which implies that the @term{symbol} is internal).

@item @id{@nil{}}


No pre-existing @term{symbol} was found,
so one was created.

It is @term{implementation-dependent} whether the @term{string} 
that becomes the new @term{symbol}'s @term{name} is the given
@param{string} or a copy of it.  Once a @term{string}
has been given as the @param{string} @term{argument} to
@term{intern} in this situation where a new @term{symbol} is created,
the consequences are undefined if a
subsequent attempt is made to alter that @term{string}.
@end table


@subsubheading Examples:

@lisp
 (in-package "COMMON-LISP-USER") @EV{} #<PACKAGE "COMMON-LISP-USER">
 (intern "Never-Before") @EV{} |Never-Before|, NIL
 (intern "Never-Before") @EV{} |Never-Before|, :INTERNAL 
 (intern "NEVER-BEFORE" "KEYWORD") @EV{} :NEVER-BEFORE, NIL
 (intern "NEVER-BEFORE" "KEYWORD") @EV{} :NEVER-BEFORE, :EXTERNAL
@end lisp


@subsubheading See Also:

@ref{find-symbol},
@ref{read},
@ref{symbol},
@ref{unintern},
@ref{Symbols as Tokens, Section 2.3.4 (Symbols as Tokens)}

@subsubheading Notes:

@code{intern} does not need to do any name conflict checking 
because it never creates a new @term{symbol} 
if there is already an @term{accessible} @term{symbol} with the name given.


@node package-name
@heading package-name (Function)
@syindex package-name
@cindex package-name


@subsubheading Syntax:

@DefunWithValues{package-name, package, name}

@subsubheading Arguments and Values:

@param{package}---a @term{package designator}.

@param{name}---a @term{string} 
or @nil{}.

@subsubheading Description:

@code{package-name} returns the @term{string} that names @param{package},
or @nil{}@spc{}if the @param{package} @term{designator}
is a @term{package} @term{object} that has no name (see the @term{function} @ref{delete-package}).

@subsubheading Examples:

@lisp
 (in-package "COMMON-LISP-USER") @EV{} #<PACKAGE "COMMON-LISP-USER">
 (package-name *package*) @EV{} "COMMON-LISP-USER"
 (package-name (symbol-package :test)) @EV{} "KEYWORD"
 (package-name (find-package 'common-lisp)) @EV{} "COMMON-LISP"
@end lisp


@lisp
 (defvar *foo-package* (make-package "FOO"))
 (rename-package "FOO" "FOO0")
 (package-name *foo-package*) @EV{} "FOO0"
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{package, a @term{package designator}}


@node package-nicknames
@heading package-nicknames (Function)
@syindex package-nicknames
@cindex package-nicknames


@subsubheading Syntax:

@DefunWithValues{package-nicknames, package, nicknames}

@subsubheading Arguments and Values:

@param{package}---a @term{package designator}.

@param{nicknames}---a @term{list} of @term{strings}.

@subsubheading Description:

Returns the @term{list} of nickname @term{strings}
for @param{package}, not including the name of @param{package}.

@subsubheading Examples:

@lisp
 (package-nicknames (make-package 'temporary
                                   :nicknames '("TEMP" "temp")))
@EV{} ("temp" "TEMP") 
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{package, a @term{package designator}}


@node package-shadowing-symbols
@heading package-shadowing-symbols (Function)
@syindex package-shadowing-symbols
@cindex package-shadowing-symbols


@subsubheading Syntax:

@DefunWithValues{package-shadowing-symbols, package, symbols}

@subsubheading Arguments and Values:

@param{package}---a @term{package designator}.

@param{symbols}---a @term{list} of @term{symbols}.

@subsubheading Description:

Returns a @term{list} of @term{symbols} that have been declared 
as @term{shadowing symbols} in @param{package} by @code{shadow} 
or @code{shadowing-import} (or the equivalent @code{defpackage} options).
All @term{symbols} on this @term{list} are @term{present} in @param{package}.

@subsubheading Examples:

@lisp
 (package-shadowing-symbols (make-package 'temp)) @EV{} ()
 (shadow 'cdr 'temp) @EV{} T
 (package-shadowing-symbols 'temp) @EV{} (TEMP::CDR)
 (intern "PILL" 'temp) @EV{} TEMP::PILL, NIL
 (shadowing-import 'pill 'temp) @EV{} T
 (package-shadowing-symbols 'temp) @EV{} (PILL TEMP::CDR)
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{package, a @term{package designator}}

@subsubheading See Also:

@ref{shadow},
@ref{shadowing-import}

@subsubheading Notes:

Whether the list of @param{symbols} is @term{fresh} is @term{implementation-dependent}.


@node package-use-list
@heading package-use-list (Function)
@syindex package-use-list
@cindex package-use-list


@subsubheading Syntax:

@DefunWithValues{package-use-list, package, use-list}

@subsubheading Arguments and Values:

@param{package}---a @term{package designator}.

@param{use-list}---a @term{list} of @term{package} @term{objects}.

@subsubheading Description:

Returns a @term{list} of other @term{packages} used by @param{package}.

@subsubheading Examples:

@lisp
 (package-use-list (make-package 'temp)) @EV{} (#<PACKAGE "COMMON-LISP">)
 (use-package 'common-lisp-user 'temp) @EV{} T
 (package-use-list 'temp) @EV{} (#<PACKAGE "COMMON-LISP"> #<PACKAGE "COMMON-LISP-USER">)
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{package, a @term{package designator}}

@subsubheading See Also:

@ref{use-package},
@ref{unuse-package}


@node package-used-by-list
@heading package-used-by-list (Function)
@syindex package-used-by-list
@cindex package-used-by-list


@subsubheading Syntax:

@DefunWithValues{package-used-by-list, package, used-by-list}

@subsubheading Arguments and Values:

@param{package}---a @term{package designator}.

@param{used-by-list}---a @term{list} of @term{package} @term{objects}.

@subsubheading Description:

@code{package-used-by-list} returns a @term{list} 
of other @term{packages} that use @param{package}.

@subsubheading Examples:

@lisp
 (package-used-by-list (make-package 'temp)) @EV{} ()
 (make-package 'trash :use '(temp)) @EV{} #<PACKAGE "TRASH">
 (package-used-by-list 'temp) @EV{} (#<PACKAGE "TRASH">)
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{package, a @term{package}}

@subsubheading See Also:

@ref{use-package},
@ref{unuse-package}


@node packagep
@heading packagep (Function)
@syindex packagep
@cindex packagep


@subsubheading Syntax:

@DefunWithValues{packagep, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, package}

@subsubheading Examples:
@lisp
 (packagep *package*) @EV{} @term{true} 
 (packagep 'common-lisp) @EV{} @term{false} 
 (packagep (find-package 'common-lisp)) @EV{} @term{true} 
@end lisp


@subsubheading Notes:

@lisp
 (packagep @param{object}) @EQ{} (typep @param{object} 'package)
@end lisp



@node *package*
@heading *package* (Variable)
@syindex *package*
@cindex *package*


@subsubheading Value Type:

a @term{package} @term{object}.

@subsubheading Initial Value:

the @code{COMMON-LISP-USER} @term{package}.

@subsubheading Description:

Whatever @term{package} @term{object} is currently 
@thevalueof{*package*} is referred to as the @term{current package}.

@subsubheading Examples:

@lisp
 (in-package "COMMON-LISP-USER") @EV{} #<PACKAGE "COMMON-LISP-USER">
 *package* @EV{} #<PACKAGE "COMMON-LISP-USER">
 (make-package "SAMPLE-PACKAGE" :use '("COMMON-LISP"))
@EV{} #<PACKAGE "SAMPLE-PACKAGE">
 (list 
   (symbol-package
     (let ((*package* (find-package 'sample-package)))
       (setq *some-symbol* (read-from-string "just-testing"))))
   *package*)
@EV{} (#<PACKAGE "SAMPLE-PACKAGE"> #<PACKAGE "COMMON-LISP-USER">)
 (list (symbol-package (read-from-string "just-testing"))
       *package*)
@EV{} (#<PACKAGE "COMMON-LISP-USER"> #<PACKAGE "COMMON-LISP-USER">)
 (eq 'foo (intern "FOO")) @EV{} @term{true}
 (eq 'foo (let ((*package* (find-package 'sample-package)))
            (intern "FOO")))
@EV{} @term{false}
@end lisp


@subsubheading Affected By:

@code{load},
@code{compile-file},
@code{in-package}

@subsubheading See Also:

@ref{compile-file},
@ref{in-package},
@ref{load},
@ref{package}


@node package-error
@heading package-error (Condition Type)
@syindex package-error
@cindex package-error


@subsubheading Class Precedence List:
@code{package-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{package-error} consists of @term{error} @term{conditions}
related to operations on @term{packages}.
The offending @term{package} (or @term{package} @term{name})
is initialized by @theinitkeyarg{package} to @code{make-condition}, 
and is @term{accessed} by @thefunction{package-error-package}.

@subsubheading See Also:

@ref{package-error-package},
@ref{Conditions, Chapter 9 (Conditions)}


@node package-error-package
@heading package-error-package (Function)
@syindex package-error-package
@cindex package-error-package


@subsubheading Syntax:

@DefunWithValues{package-error-package, condition, package}

@subsubheading Arguments and Values:

@param{condition}---a @term{condition} @oftype{package-error}.

@param{package}---a @term{package designator}.

@subsubheading Description:

Returns a @term{designator} for the offending @term{package}
in the @term{situation} represented by the @param{condition}.

@subsubheading Examples:

@lisp
 (package-error-package 
   (make-condition 'package-error
     :package (find-package "COMMON-LISP")))
@EV{} #<Package "COMMON-LISP">
@end lisp


@subsubheading See Also:

@ref{package-error}




@node Numbers
@chapter Numbers
@menu
* Number Concepts::

Dictionary

* number::
* complex (System Class)::
* real::
* float (System Class)::
* short-float; single-float; double-float; long-float::
* rational (System Class)::
* ratio::
* integer::
* signed-byte::
* unsigned-byte::
* mod (Type Specifier)::
* bit (Type)::
* fixnum::
* bignum::
* =; /=; <; >; <=; >=::
* max; min::
* minusp; plusp::
* zerop::
* floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround::
* sin; cos; tan::
* asin; acos; atan::
* pi::
* sinh; cosh; tanh; asinh; acosh; atanh::
* * (Function)::
* + (Function)::
* - (Function)::
* / (Function)::
* 1+; 1-::
* abs::
* evenp; oddp::
* exp; expt::
* gcd::
* incf; decf::
* lcm::
* log::
* mod; rem::
* signum::
* sqrt; isqrt::
* random-state::
* make-random-state::
* random::
* random-state-p::
* *random-state*::
* numberp::
* cis::
* complex (Function)::
* complexp::
* conjugate::
* phase::
* realpart; imagpart::
* upgraded-complex-part-type::
* realp::
* numerator; denominator::
* rational; rationalize::
* rationalp::
* ash::
* integer-length::
* integerp::
* parse-integer::
* boole::
* boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+::
* logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+::
* logbitp::
* logcount::
* logtest::
* byte; byte-size; byte-position::
* deposit-field::
* dpb::
* ldb::
* ldb-test::
* mask-field::
* most-positive-fixnum; most-negative-fixnum::
* decode-float; scale-float; float-radix; float-sign; float-digits; float+::
* float (Function)::
* floatp::
* most-positive-short-float; least-positive-short-float; least-positive-n+::
* short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+::
* arithmetic-error::
* arithmetic-error-operands; arithmetic-error-operation::
* division-by-zero::
* floating-point-invalid-operation::
* floating-point-inexact::
* floating-point-overflow::
* floating-point-underflow::
@end menu

@node Number Concepts
@section Number Concepts

@menu
* Numeric Operations::
* Implementation-Dependent Numeric Constants::
* Rational Computations::
* Floating-point Computations::
* Complex Computations::
* Interval Designators::
* Random-State Operations::
@end menu
@node Numeric Operations
@subsection Numeric Operations

@clisp{}@spc{}provides a large variety of operations related to @term{numbers}.
This section provides an overview of those operations by grouping them
into categories that emphasize some of the relationships among them.

@Thenextfigure{}@spc{}shows @term{operators} relating to
arithmetic operations.


@float Figure,fig12.1
@cartouche
@multitable{*}{conjugate}{incf}

@item * @tab 1+ @tab gcd
@item + @tab 1- @tab incf
@item - @tab conjugate @tab lcm
@item / @tab decf @tab 
@end multitable
@end cartouche
@caption{Operators relating to Arithmetic.}
@end float


@Thenextfigure{}@spc{}shows @term{defined names} relating to
exponential, logarithmic, and trigonometric operations.


@float Figure,fig12.2
@cartouche
@multitable{acosh}{isqrt}{signum}

@item abs @tab cos @tab signum
@item acos @tab cosh @tab sin
@item acosh @tab exp @tab sinh
@item asin @tab expt @tab sqrt
@item asinh @tab isqrt @tab tan
@item atan @tab log @tab tanh
@item atanh @tab phase @tab 
@item cis @tab pi @tab 
@end multitable
@end cartouche
@caption{Defined names relating to Exponentials, Logarithms, and Trigonometry.}
@end float


@Thenextfigure{}@spc{}shows @term{operators} relating to
numeric comparison and predication.


@float Figure,fig12.3
@cartouche
@multitable{/=}{minusp}{plusp}

@item /= @tab >= @tab oddp
@item < @tab evenp @tab plusp
@item <= @tab max @tab zerop
@item = @tab min @tab 
@item > @tab minusp @tab 
@end multitable
@end cartouche
@caption{Operators for numeric comparison and predication.}
@end float


@Thenextfigure{}@spc{}shows @term{defined names} relating to
numeric type manipulation and coercion.


@float Figure,fig12.4
@cartouche
@multitable{float-precision}{integer-decode-float}{rationalize}

@item ceiling @tab float-radix @tab rational
@item complex @tab float-sign @tab rationalize
@item decode-float @tab floor @tab realpart
@item denominator @tab fround @tab rem
@item fceiling @tab ftruncate @tab round
@item ffloor @tab imagpart @tab scale-float
@item float @tab integer-decode-float @tab truncate
@item float-digits @tab mod @tab 
@item float-precision @tab numerator @tab 
@end multitable
@end cartouche
@caption{Defined names relating to numeric type manipulation and coercion.}
@end float


@subsubsection Associativity and Commutativity in Numeric Operations

For functions that are mathematically associative (and possibly commutative),
a @term{conforming implementation} may process the @term{arguments} in any manner 
consistent with associative (and possibly commutative) rearrangement.  This does not
affect the order in which the @term{argument} @term{forms} are @term{evaluated};
for a discussion of evaluation order, see @ref{FunctionForms, Section 3.1.2.1.2.3 (Function Forms)}.
What is unspecified is only the order in which the @term{parameter} @term{values}
are processed.  This implies that @term{implementations} may differ in which 
automatic @term{coercions} are applied; see @ref{NumericContagionRules, Section 12.1.1.2 (Contagion in Numeric Operations)}.

A @term{conforming program} can control the order of processing explicitly by 
separating the operations into separate (possibly nested) @term{function forms},
or by writing explicit calls to @term{functions} that perform coercions.

@unnumberedsubsubsec 12.1.1.1.1 Examples of Associativity and Commutativity in Numeric Operations


Consider the following expression, in which we assume that @f{1.0} and
@f{1.0e-15} both denote @term{single floats}:

@lisp
 (+ 1/3 2/3 1.0d0 1.0 1.0e-15)
@end lisp


One @term{conforming implementation} might
process the @term{arguments} from left to right,
first adding @f{1/3} and @f{2/3} to get @f{1}, 
then converting that to a @term{double float} 
for combination with @f{1.0d0},
then successively converting and adding @f{1.0} and @f{1.0e-15}.

Another @term{conforming implementation} might process the @term{arguments} from
right to left, first performing a @term{single float} addition of @f{1.0} and
@f{1.0e-15} (perhaps losing accuracy in the process), then converting the sum to 
a @term{double float} and adding @f{1.0d0}, then converting @f{2/3} to a
@term{double float} and adding it, and then converting @f{1/3} and adding that.

A third @term{conforming implementation} might first scan all the @term{arguments},
process all the @term{rationals} first to keep that part of the computation exact,
then find an @term{argument} of the largest floating-point format among all the
@term{arguments} and add that, and then add in all other @term{arguments}, converting
each in turn (all in a perhaps misguided attempt to make the computation as accurate
as possible).

In any case, all three strategies are legitimate.

A @term{conforming program} could control the order by writing, for example,

@lisp
 (+ (+ 1/3 2/3) (+ 1.0d0 1.0e-15) 1.0)
@end lisp




@subsubsection Contagion in Numeric Operations
@anchor{NumericContagionRules}

For information about the contagion rules for implicit coercions of @term{arguments} 
in numeric operations, see
@ref{RuleOfFloatPrecisionContagion, Section 12.1.4.4 (Rule of Float Precision Contagion)}, 
@ref{RuleOfFloatAndRationalContagion, Section 12.1.4.1 (Rule of Float and Rational Contagion)},
and @ref{RuleOfComplexContagion, Section 12.1.5.2 (Rule of Complex Contagion)}.


@subsubsection Viewing Integers as Bits and Bytes

@unnumberedsubsubsec 12.1.1.3.1 Logical Operations on Integers


Logical operations require @term{integers} as arguments;
an error @oftype{type-error} should be signaled 
if an argument is supplied that is not an @term{integer}.
@term{Integer} arguments to logical operations are treated as if
they were represented in two's-complement notation.

@Thenextfigure{}@spc{}shows @term{defined names} relating to
logical operations on numbers.


@float Figure,fig12.5
@cartouche
@multitable{boole-andc1}{integer-length}{logcount}

@item ash @tab boole-ior @tab logbitp
@item boole @tab boole-nand @tab logcount
@item boole-1 @tab boole-nor @tab logeqv
@item boole-2 @tab boole-orc1 @tab logior
@item boole-and @tab boole-orc2 @tab lognand
@item boole-andc1 @tab boole-set @tab lognor
@item boole-andc2 @tab boole-xor @tab lognot
@item boole-c1 @tab integer-length @tab logorc1
@item boole-c2 @tab logand @tab logorc2
@item boole-clr @tab logandc1 @tab logtest
@item boole-eqv @tab logandc2 @tab logxor
@end multitable
@end cartouche
@caption{Defined names relating to logical operations on numbers.}
@end float
                    


@unnumberedsubsubsec 12.1.1.3.2 Byte Operations on Integers


The byte-manipulation @term{functions} use @term{objects} 
called @term{byte specifiers} to designate the size and position
of a specific @term{byte} within an @term{integer}.
The representation of a @term{byte specifier} is @term{implementation-dependent};
it might or might not be a @term{number}.
@Thefunction{byte} will construct a @term{byte specifier},
which various other byte-manipulation @term{functions} will accept.

@Thenextfigure{}@spc{}shows @term{defined names} relating to
manipulating @term{bytes} of @term{numbers}.


@float Figure,fig12.6
@cartouche
@multitable{byte-position}{deposit-field}{mask-field}

@item byte @tab deposit-field @tab ldb-test
@item byte-position @tab dpb @tab mask-field
@item byte-size @tab ldb @tab 
@end multitable
@end cartouche
@caption{Defined names relating to byte manipulation.}
@end float





@node Implementation-Dependent Numeric Constants
@subsection Implementation-Dependent Numeric Constants

@Thenextfigure{}@spc{}shows @term{defined names} relating to
@term{implementation-dependent} details about @term{numbers}.


@float Figure,fig12.7
@cartouche
@multitable{double-float-negative-epsilon}{single-float-negative-epsilon}

@item double-float-epsilon @tab most-negative-fixnum
@item double-float-negative-epsilon @tab most-negative-long-float
@item least-negative-double-float @tab most-negative-short-float
@item least-negative-long-float @tab most-negative-single-float
@item least-negative-short-float @tab most-positive-double-float
@item least-negative-single-float @tab most-positive-fixnum
@item least-positive-double-float @tab most-positive-long-float
@item least-positive-long-float @tab most-positive-short-float
@item least-positive-short-float @tab most-positive-single-float
@item least-positive-single-float @tab short-float-epsilon
@item long-float-epsilon @tab short-float-negative-epsilon
@item long-float-negative-epsilon @tab single-float-epsilon
@item most-negative-double-float @tab single-float-negative-epsilon
@end multitable
@end cartouche
@caption{Defined names relating to implementation-dependent details about numbers.}
@end float


@node Rational Computations
@subsection Rational Computations

The rules in this section apply to @term{rational} computations.

@subsubsection Rule of Unbounded Rational Precision

Rational computations cannot overflow in the usual sense 
(though there may not be enough storage to represent a result), 
since @term{integers} and @term{ratios} may in principle be of any magnitude.


@subsubsection Rule of Canonical Representation for Rationals

If any computation produces a result that is a mathematical ratio of two integers
such that the denominator evenly divides the numerator, then the result is converted
to the equivalent @term{integer}.  

If the denominator does not evenly divide the numerator,
the canonical representation of a @term{rational} number is as the @term{ratio}
that numerator and that denominator, where the greatest common divisor of
the numerator and denominator is one, and where the denominator is positive
and greater than one.

When used as input (in the default syntax),
the notation @f{-0} always denotes the @term{integer} @f{0}.
A @term{conforming implementation} must not have a
representation of ``minus zero'' for @term{integers}
that is distinct from its representation of zero for @term{integers}.
However, such a distinction is possible for @term{floats}; 
see @thetype{float}.


@subsubsection Rule of Float Substitutability
@anchor{FloatSubstitutability}

When the arguments to an irrational mathematical @term{function} 
@reviewer{Barmar: There should be a table of these functions.}
are all @term{rational} and the true mathematical result
is also (mathematically) rational, then unless otherwise noted
an implementation is free to return either an accurate
@term{rational} result
or a @term{single float} approximation.
If the arguments are all @term{rational} 
but the result cannot be expressed
as a @term{rational} number, then a @term{single float} 
approximation is always returned.

If the arguments to 
an irrational
mathematical @term{function} are all of type
@f{(or rational (complex rational))} 
and the true mathematical result is
(mathematically) a complex number with rational real and imaginary
parts, then unless otherwise noted an implementation is free to return
either an accurate result of type @f{(or rational (complex rational))} 
or
a @term{single float}
(permissible only if the imaginary part of the true mathematical
result is zero) or @f{(complex single-float)}. If the arguments are
all of type @f{(or rational (complex rational))}
but the result cannot be
expressed as a @term{rational} or @term{complex rational},
then the returned
value will be @oftype{single-float} 
(permissible only if the imaginary
part of the true mathematical result is zero) or @f{(complex single-float)}.

Float substitutability applies neither to the rational @term{functions} 
@code{+},
@code{-},
@code{*},
and @code{/} 
nor to the related @term{operators} 
@code{1+},
@code{1-},
@code{incf},
@code{decf},
and @code{conjugate}.
For rational @term{functions},
if all arguments are @term{rational},
then the result is @term{rational}; 
if all arguments are of type @f{(or rational (complex rational))},
then the result is of type @f{(or rational (complex rational))}.


@float Figure,fig12.8
@cartouche
@multitable{@code{signum}}{@f{(signum #c(3 4)) @EV{}@spc{}#c(3/5 4/5) @i{or} #c(0.6 0.8)}}
@headitem Function @tab Sample Results
@item @code{abs} @tab @f{(abs #c(3 4)) @EV{}@spc{}5 @i{or} 5.0}
@item @code{acos} @tab @f{(acos 1) @EV{}@spc{}0 @i{or} 0.0}
@item @code{acosh} @tab @f{(acosh 1) @EV{}@spc{}0 @i{or} 0.0}
@item @code{asin} @tab @f{(asin 0) @EV{}@spc{}0 @i{or} 0.0}
@item @code{asinh} @tab @f{(asinh 0) @EV{}@spc{}0 @i{or} 0.0}
@item @code{atan} @tab @f{(atan 0) @EV{}@spc{}0 @i{or} 0.0}
@item @code{atanh} @tab @f{(atanh 0) @EV{}@spc{}0 @i{or} 0.0}
@item @code{cis} @tab @f{(cis 0) @EV{}@spc{}1 @i{or} #c(1.0 0.0)}
@item @code{cos} @tab @f{(cos 0) @EV{}@spc{}1 @i{or} 1.0}
@item @code{cosh} @tab @f{(cosh 0) @EV{}@spc{}1 @i{or} 1.0}
@item @code{exp} @tab @f{(exp 0) @EV{}@spc{}1 @i{or} 1.0}
@item @code{expt} @tab @f{(expt 8 1/3) @EV{}@spc{}2 @i{or} 2.0}
@item @code{log} @tab @f{(log 1) @EV{}@spc{}0 @i{or} 0.0}
@item  @tab @f{(log 8 2) @EV{}@spc{}3 @i{or} 3.0}
@item @code{phase} @tab @f{(phase 7) @EV{}@spc{}0 @i{or} 0.0}
@item @code{signum} @tab @f{(signum #c(3 4)) @EV{}@spc{}#c(3/5 4/5) @i{or} #c(0.6 0.8)}
@item @code{sin} @tab @f{(sin 0) @EV{}@spc{}0 @i{or} 0.0}
@item @code{sinh} @tab @f{(sinh 0) @EV{}@spc{}0 @i{or} 0.0}
@item @code{sqrt} @tab @f{(sqrt 4) @EV{}@spc{}2 @i{or} 2.0}
@item  @tab @f{(sqrt 9/16) @EV{}@spc{}3/4 @i{or} 0.75}
@item @code{tan} @tab @f{(tan 0) @EV{}@spc{}0 @i{or} 0.0}
@item @code{tanh} @tab @f{(tanh 0) @EV{}@spc{}0 @i{or} 0.0}
@end multitable
@end cartouche
@caption{Functions Affected by Rule of Float Substitutability}
@end float



@node Floating-point Computations
@subsection Floating-point Computations

The following rules apply to floating point computations.

@subsubsection Rule of Float and Rational Contagion
@anchor{RuleOfFloatAndRationalContagion}

When @term{rationals} and @term{floats} are combined by a numerical function, 
the @term{rational} is first converted to a @term{float} of the same format.
For @term{functions} such as @code{+} that take more than two arguments,
it is permitted that part of the operation be carried out exactly using
@term{rationals} and the rest be done using floating-point arithmetic.

When @term{rationals} and @term{floats} are compared by a numerical function, 
@thefunction{rational} is effectively called to convert the @term{float} 
to a @term{rational} and then an exact
comparison is performed. In the case of @term{complex} numbers,
the real and imaginary parts are effectively handled individually.

@unnumberedsubsubsec 12.1.4.1.1 Examples of Rule of Float and Rational Contagion


@lisp
 ;;;; Combining rationals with floats.
 ;;; This example assumes an implementation in which 
 ;;; (float-radix 0.5) is 2 (as in IEEE) or 16 (as in IBM/360),
 ;;; or else some other implementation in which 1/2 has an exact 
 ;;;  representation in floating point.
 (+ 1/2 0.5) @EV{} 1.0
 (- 1/2 0.5d0) @EV{} 0.0d0
 (+ 0.5 -0.5 1/2) @EV{} 0.5

 ;;;; Comparing rationals with floats.
 ;;; This example assumes an implementation in which the default float 
 ;;; format is IEEE single-float, IEEE double-float, or some other format
 ;;; in which 5/7 is rounded upwards by FLOAT.
 (< 5/7 (float 5/7)) @EV{} @term{true}
 (< 5/7 (rational (float 5/7))) @EV{} @term{true}
 (< (float 5/7) (float 5/7)) @EV{} @term{false}
@end lisp





@subsubsection Rule of Float Approximation
Computations with @term{floats} are only approximate,
although they are described as if the results
were mathematically accurate. 
Two mathematically identical
expressions may be computationally different because of errors
inherent in the floating-point approximation process.
The precision of a @term{float} is not necessarily
correlated with the accuracy of that number.
For instance, 3.142857142857142857 is a more precise approximation
to @mat{@pi{}} than 3.14159, but the latter is more accurate.
The precision refers to the number of bits retained in the representation.
When an operation combines a @term{short float} with a 
@term{long float},
the result will be a @term{long float}. 
@clisp{}@spc{}functions assume that the accuracy of
arguments to them does not exceed their precision.  Therefore
when two @term{small floats} 
are combined, the result is a @term{small float}. 
@clisp{}@spc{}functions 
never convert automatically from a larger size to a smaller one.

@subsubsection Rule of Float Underflow and Overflow

An error of @term{type} @code{floating-point-overflow}
or @code{floating-point-underflow} should be signaled if a 
floating-point computation causes exponent overflow or underflow, respectively.


@subsubsection Rule of Float Precision Contagion
@anchor{RuleOfFloatPrecisionContagion}

The result of a numerical function is a @term{float} of the 
largest format among all the floating-point arguments to the @term{function}. 


@node Complex Computations
@subsection Complex Computations

The following rules apply to @term{complex} computations:

@subsubsection Rule of Complex Substitutability

Except during the execution of irrational and transcendental @term{functions},
no numerical @term{function} ever @term{yields} a @term{complex} unless 
one or more of its @term{arguments} is a @term{complex}.


@subsubsection Rule of Complex Contagion

@anchor{RuleOfComplexContagion}
When a 
@term{real}
and 
a @term{complex} are both part of a computation, 
the 
@term{real}
is first converted to a @term{complex} by providing an imaginary part of @f{0}.

@subsubsection Rule of Canonical Representation for Complex Rationals
@anchor{RuleOfCanonRepForComplexRationals}

If the result of any computation would be a @term{complex}
number whose real part is @oftype{rational} and whose imaginary
part is zero, the result is converted to the @term{rational} 
which is the real part.
This rule does not apply to @term{complex} numbers whose parts
are @term{floats}. 
For example, @f{#C(5 0)} and @f{5} are not @term{different} @term{objects} in @clisp{}
(they are always the @term{same} under @code{eql});
@f{#C(5.0 0.0)} and @f{5.0} are always @term{different} @term{objects} in @clisp{}
(they are never the @term{same} under @code{eql},
although they are the @term{same} under @code{equalp} and @code{=}).

@unnumberedsubsubsec 12.1.5.3.1 Examples of Rule of Canonical Representation for Complex Rationals


@lisp
 #c(1.0 1.0) @EV{} #C(1.0 1.0)
 #c(0.0 0.0) @EV{} #C(0.0 0.0)
 #c(1.0 1) @EV{} #C(1.0 1.0)
 #c(0.0 0) @EV{} #C(0.0 0.0)
 #c(1 1) @EV{} #C(1 1)
 #c(0 0) @EV{} 0
 (typep #c(1 1) '(complex (eql 1))) @EV{} @term{true}
 (typep #c(0 0) '(complex (eql 0))) @EV{} @term{false}
@end lisp




@subsubsection Principal Values and Branch Cuts

Many of the irrational and transcendental functions are multiply defined
in the complex domain; for example, there are in general an infinite
number of complex values for the logarithm function.  In each such
case, a @term{principal} @term{value} must be chosen for the function to return.
In general, such values cannot be chosen so as to make the range
continuous; lines in the domain
called branch cuts must be defined, which in turn
define the discontinuities in the range.
@clisp{}@spc{}defines the branch cuts, @term{principal} @term{values}, and boundary
conditions for the complex functions following ``@PrincipalValues{}.'' The branch
cut rules that apply to each function are located with the description of
that function.

@Thenextfigure{}@spc{}lists
the identities that are obeyed
throughout the applicable portion of the complex domain, even on
the branch cuts:


@float Figure,fig12.9
@cartouche
@multitable{sin i z = i sinh z}{arcsin i z = i arcsinh z}{arctan  i z = i arctanh z}

@item sin i z = i sinh z @tab sinh i z = i sin z @tab arctan  i z = i arctanh z
@item cos i z = cosh z @tab cosh i z = cos z @tab arcsinh i z = i arcsin z
@item tan i z = i tanh z @tab arcsin i z = i arcsinh z @tab arctanh i z = i arctan z
@end multitable
@end cartouche
@caption{Trigonometric Identities for Complex Domain}
@end float


The quadrant numbers referred to in the discussions of branch cuts are as illustrated
in @thenextfigure{}.

@quadrant{}


@node Interval Designators
@subsection Interval Designators

The @term{compound type specifier} form of the numeric @term{type specifiers}
permit the user to specify an interval on the real number line
which describe a @term{subtype} of the @term{type} which would be described by the
corresponding @term{atomic type specifier}.  A @term{subtype} of some @term{type}
@param{T} is specified using an ordered pair of @term{objects} called
@term{interval designators} for @term{type} @param{T}.

The first of the two @term{interval designators} for @term{type} @param{T} can be
any of the following:


@table @asis

@item @id{a number @param{N} of @term{type} @param{T}}


This denotes a lower inclusive bound of @param{N}.  That is, @term{elements}
of the @term{subtype} of @param{T} will be greater than or equal to @param{N}.

@item @id{a @term{singleton} @term{list} whose @term{element} is a number @param{M} of @term{type} @param{T}}


This denotes a lower exclusive bound of @param{M}.  That is, @term{elements}
of the @term{subtype} of @param{T} will be greater than @param{M}.

@item @id{the symbol @t{*}}


This denotes the absence of a lower bound on the interval.
@end table


The second of the two @term{interval designators} for @term{type} @param{T} can be
any of the following:


@table @asis

@item @id{a number @param{N} of @term{type} @param{T}}


This denotes an upper inclusive bound of @param{N}.  That is, @term{elements}
of the @term{subtype} of @param{T} will be less than or equal to @param{N}.

@item @id{a @term{singleton} @term{list} whose @term{element} is a number @param{M} of @term{type} @param{T}}


This denotes an upper exclusive bound of @param{M}.  That is, @term{elements}
of the @term{subtype} of @param{T} will be less than @param{M}.

@item @id{the symbol @t{*}}


This denotes the absence of an upper bound on the interval.
@end table



@node Random-State Operations
@subsection Random-State Operations

@Thenextfigure{}@spc{}lists some @term{defined names} that are applicable to @term{random states}.


@float Figure,fig12.11
@cartouche
@multitable{make-random-state}{random-state-p}{}

@item *random-state* @tab random @tab 
@item make-random-state @tab random-state-p @tab 
@end multitable
@end cartouche
@caption{Random-state defined names}
@end float



@node number
@heading number (System Class)
@syindex number
@cindex number


@subsubheading Class Precedence List:
@code{number},
@code{t}

@subsubheading Description:

@Thetype{number} contains @term{objects} which represent
mathematical numbers.
The @term{types} @code{real} and @code{complex} are @term{disjoint} 
@term{subtypes} of @code{number}.

@Thefunction{=} tests for numerical equality.
@Thefunction{eql}, when its arguments are both @term{numbers}, 
tests that they have both the same @term{type} and numerical value.
Two @term{numbers} that are the @term{same} under @code{eql} or @code{=}
are not necessarily the @term{same} under @code{eq}.

@subsubheading Notes:

@clisp{}@spc{}differs from mathematics on some naming issues.  In mathematics,
the set of real numbers is traditionally described as a subset of the
complex numbers, but in @clisp{}, @thetype{real} and @thetype{complex} are
disjoint.  The @clisp{}@spc{}type which includes all mathematical complex
numbers is called @code{number}.  The reasons for these differences
include historical precedent, compatibility with most other popular
computer languages, and various issues of time and space efficiency.

@node complex (System Class)
@heading complex (System Class)
@syindex complex
@cindex complex


@subsubheading Class Precedence List:
@code{complex},
@code{number},
@code{t}

@subsubheading Description:

@Thetype{complex} includes all mathematical complex numbers
other than those included in @thetype{rational}.
@term{Complexes} are 
expressed
in Cartesian form with a
real part and an imaginary part, each of which is a @term{real}.
The real part and imaginary part are either both
@term{rational} or both of the same @term{float} @term{type}.
The imaginary part can be a @term{float} zero, but can never
be a @term{rational} zero, for such a number is always represented
by @clisp{}@spc{}as a @term{rational} rather than a @term{complex}.

@subsubheading Compound Type Specifier Kind:

Specializing.

@subsubheading Compound Type Specifier Syntax:

@Deftype{complex, @ttbrac{typespec | @t{*}}}

@subsubheading Compound Type Specifier Arguments:

@param{typespec}---a @term{type specifier} that denotes a @subtypeof{real}.

@subsubheading Compound Type Specifier Description:

@editornote{KMP: If you ask me, this definition is a complete mess.  Looking at
issue ARRAY-TYPE-ELEMENT-TYPE-SEMANTICS:UNIFY-UPGRADING does not help me figure 
it out, either.  Anyone got any suggestions?}

Every element of this @term{type} is a @term{complex} whose
real part and imaginary part are each of type
@f{(upgraded-complex-part-type @param{typespec})}.
This @term{type} encompasses those @term{complexes}
that can result by giving numbers of @term{type} @param{typespec}
to @code{complex}.

@tt{(complex @param{type-specifier})}
refers to all @term{complexes} that can result from giving
@term{numbers} of @param{type} @param{type-specifier} to @thefunction{complex}, 
plus all other @term{complexes} of the same specialized representation.      


@subsubheading See Also:

@ref{RuleOfCanonRepForComplexRationals, Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals)},
@ref{Constructing Numbers from Tokens, Section 2.3.2 (Constructing Numbers from Tokens)},
@ref{PrintingComplexes, Section 22.1.3.1.4 (Printing Complexes)}

@subsubheading Notes:

The input syntax for a @term{complex} with real part @mat{r} and 
imaginary part @mat{i} is @f{#C(@mat{r} @mat{i})}.  
For further details, see @ref{Standard Macro Characters, Section 2.4 (Standard Macro Characters)}.

For every @term{float}, @mat{n}, there is a @term{complex}
which represents the same mathematical number 
and which can be obtained by @tt{(COERCE @mat{n} 'COMPLEX)}.

@node real
@heading real (System Class)
@syindex real
@cindex real



@subsubheading Class Precedence List:
@code{real},
@code{number},
@code{t}

@subsubheading Description:

@Thetype{real} includes all @term{numbers} that
represent mathematical real numbers, though there are mathematical real
numbers (@eg{} irrational numbers) that do not have an exact representation 
in @clisp{}.  Only @term{reals} can be ordered using the
@code{<}, @code{>}, @code{<=}, and @code{>=} functions.

The @term{types} @code{rational} and @code{float} are @term{disjoint}
@subtypesof{real}.

@realtypespec{real}


@node float (System Class)
@heading float (System Class)
@syindex float
@cindex float


@subsubheading Class Precedence List:
@code{float},
@code{real},
@code{number},
@code{t}

@subsubheading Description:

A @term{float}
is a mathematical rational (but @i{not} a @clisp{}@spc{}@term{rational})
of the form
@mat{s@cdot{} f@cdot{} b^e-p},
where @mat{s} is @mat{+1} or @mat{-1}, the @i{sign};
@mat{b} is an @term{integer} 
greater than@tie{}1, the @i{base} or @i{radix} of the representation;
@mat{p} is a positive @term{integer}, 
the @i{precision} (in base-@mat{b} digits) of the @term{float};
@mat{f} is a positive @term{integer} 
between @mat{b^p-1} and
@mat{b^p-1} (inclusive), the significand;
and @mat{e} is an @term{integer}, the exponent.
The value of @mat{p} and the range of@tie{}@mat{e}
depends on the implementation and on the type of @term{float} 
within that implementation. In addition, there is a floating-point zero;
depending on the implementation, there can also be a ``minus zero''. If there
is no minus zero, then @mat{0.0} and@tie{}@mat{-0.0} are both interpreted as simply a
floating-point zero.
@tt{(= 0.0 -0.0)} is always true.  
If there is a minus zero, @tt{(eql -0.0 0.0)} is @term{false},
otherwise it is @term{true}.

@reviewer{Barmar: What about IEEE NaNs and infinities?}

@reviewer{RWK: In the following, what is the ``ordering''?  precision? range?
Can there be additional subtypes of float or does ``others'' in the
list of four?}

The @term{types} @code{short-float}, @code{single-float}, @code{double-float}, 
and @code{long-float} are @subtypesof{float}.  Any two of them must be
either @term{disjoint} @term{types} or the @term{same} @term{type};
if the @term{same} @term{type}, then any other @term{types} between them in the
above ordering must also be the @term{same} @term{type}.  For example, 
if @thetype{single-float} and @thetype{long-float} are the @term{same} @term{type},
then @thetype{double-float} must be the @term{same} @term{type} also.

@realtypespec{float}

@subsubheading See Also:

@ref{SyntaxForNumericTokens, Figure 2.9},
@ref{Constructing Numbers from Tokens, Section 2.3.2 (Constructing Numbers from Tokens)},
@ref{PrintingFloats, Section 22.1.3.1.3 (Printing Floats)}

@subsubheading Notes:

Note that all mathematical integers are representable not only as
@clisp{}@spc{}@term{reals}, but also as @term{complex floats}.  For example,
possible representations of the mathematical number @mat{1} 
include the @term{integer} @f{1},
the @term{float} @f{1.0},
or the @term{complex} @f{#C(1.0 0.0)}.  

@node short-float; single-float; double-float; long-float
@heading short-float, single-float, double-float, long-float (Type)
@syindex short-float
@cindex short-float
@syindex single-float
@cindex single-float
@syindex double-float
@cindex double-float
@syindex long-float
@cindex long-float


@subsubheading Supertypes:

@code{short-float}: 
@code{short-float},
@code{float}, 
@code{real},
@code{number},
@code{t}

@code{single-float}: 
@code{single-float},
@code{float}, 
@code{real},
@code{number},
@code{t}

@code{double-float}: 
@code{double-float},
@code{float}, 
@code{real},
@code{number},
@code{t}

@code{long-float}: 
@code{long-float},
@code{float}, 
@code{real},
@code{number},
@code{t}

@subsubheading Description:

For the four defined @subtypesof{float}, it is true that
intermediate between @thetype{short-float} and @thetype{long-float} are
@thetype{single-float} and @thetype{double-float}.
The precise definition of these categories is 
@term{implementation-defined}.
The precision (measured in ``bits'', computed as @mat{p@log{}@sub2{}b})
and the exponent size (also measured in ``bits,'' computed as
@mat{@log{}@sub2{}(n+1)}, where @mat{n} is the maximum exponent value) is recommended
to be at least as great
as the values in @thenextfigure{}. 
Each of the defined @subtypesof{float} might or might not have a minus zero.


@float Figure,fig12.12
@cartouche
@multitable{@hfil{}@b{Format}}{@b{Minimum Precision}}{@b{Minimum Exponent Size}}

@item @hfil{}@b{Format} @tab @b{Minimum Precision} @tab @b{Minimum Exponent Size}
@item Short @tab 13 bits @tab 5 bits
@item Single @tab 24 bits @tab 8 bits
@item Double @tab 50 bits @tab 8 bits
@item Long @tab 50 bits @tab 8 bits
@end multitable
@end cartouche
@caption{Recommended Minimum Floating-Point Precision and Exponent Size}
@end float


There can be fewer than four internal 
representations for @term{floats}. 
If there are fewer distinct representations, the following rules apply:

@itemize --
@item If there is only one, it is 
@thetype{single-float}.
In this representation, an @term{object} is simultaneously of @term{types} 
@code{single-float}, @code{double-float}, @code{short-float}, 
and @code{long-float}.
@item Two internal representations can be arranged in either of the
following ways:

@itemize @bullet{}
@item Two @term{types} are provided: @code{single-float} and
@code{short-float}.  An @term{object} is simultaneously 
of @term{types} @code{single-float}, @code{double-float}, and @code{long-float}.
@item Two @term{types} are provided: @code{single-float} and
@code{double-float}. An @term{object} is simultaneously of @term{types}
@code{single-float} and @code{short-float}, or
@code{double-float} and @code{long-float}.
@end itemize

@item Three internal representations can be arranged in either
of the following ways:

@itemize @bullet{}
@item Three @term{types} are provided: @code{short-float}, 
@code{single-float}, and @code{double-float}.
An @term{object} can simultaneously be of @term{type} @code{double-float}
and @code{long-float}.
@item Three @term{types} are provided: 
@code{single-float}, @code{double-float},
and @code{long-float}. An @term{object} can simultaneously
be of @term{types} @code{single-float} and @code{short-float}.
@end itemize
@end itemize


@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{short-float, @ttbrac{short-lower-limit   @brac{short-upper-limit}}}
@Deftype{single-float, @ttbrac{single-lower-limit @brac{single-upper-limit}}}
@Deftype{double-float, @ttbrac{double-lower-limit @brac{double-upper-limit}}}
@Deftype{long-float, @ttbrac{long-lower-limit     @brac{long-upper-limit}}}

@subsubheading Compound Type Specifier Arguments:

@param{short-lower-limit}, @param{short-upper-limit}---@term{interval designators} 
for @term{type} @code{short-float}.
@DefaultEach{@param{lower-limit} and @param{upper-limit}, the @term{symbol} @t{*}}

@param{single-lower-limit}, @param{single-upper-limit}---@term{interval designators} 
for @term{type} @code{single-float}.
@DefaultEach{@param{lower-limit} and @param{upper-limit}, the @term{symbol} @t{*}}

@param{double-lower-limit}, @param{double-upper-limit}---@term{interval designators} 
for @term{type} @code{double-float}.
@DefaultEach{@param{lower-limit} and @param{upper-limit}, the @term{symbol} @t{*}}

@param{long-lower-limit}, @param{long-upper-limit}---@term{interval designators} 
for @term{type} @code{long-float}.
@DefaultEach{@param{lower-limit} and @param{upper-limit}, the @term{symbol} @t{*}}

@subsubheading Compound Type Specifier Description:

Each of these denotes the set of @term{floats} of the indicated @term{type} 
that are on the interval specified by the @term{interval designators}.

@node rational (System Class)
@heading rational (System Class)
@syindex rational
@cindex rational


@subsubheading Class Precedence List:
@code{rational},
@code{real},
@code{number},
@code{t}

@subsubheading Description:

The canonical representation of a @term{rational} 
is as an @term{integer} if its value is integral,
and otherwise as a @term{ratio}.

The @term{types} @code{integer} and @code{ratio} 
are @term{disjoint} @subtypesof{rational}.

@realtypespec{rational}

@node ratio
@heading ratio (System Class)
@syindex ratio
@cindex ratio


@subsubheading Class Precedence List:
@code{ratio},
@code{rational},
@code{real},
@code{number},
@code{t}

@subsubheading Description:

A @term{ratio} is a @term{number} 
representing the mathematical ratio of two non-zero integers,
the numerator and denominator,
whose greatest common divisor is one,
and of which the denominator is positive and greater than one.

@subsubheading See Also:

@ref{SyntaxForNumericTokens, Figure 2.9},
@ref{Constructing Numbers from Tokens, Section 2.3.2 (Constructing Numbers from Tokens)},
@ref{PrintingRatios, Section 22.1.3.1.2 (Printing Ratios)}

@node integer
@heading integer (System Class)
@syindex integer
@cindex integer


@subsubheading Class Precedence List:
@code{integer},
@code{rational},
@code{real},
@code{number},
@code{t}

@subsubheading Description:

An @term{integer} is a mathematical integer. There is no limit on the 
magnitude of an @term{integer}.

The @term{types} @code{fixnum} and @code{bignum} 
form an @term{exhaustive partition} of @term{type} @code{integer}.

@realtypespec{integer}

@subsubheading See Also:

@ref{SyntaxForNumericTokens, Figure 2.9},
@ref{Constructing Numbers from Tokens, Section 2.3.2 (Constructing Numbers from Tokens)},
@ref{PrintingIntegers, Section 22.1.3.1.1 (Printing Integers)}

@subsubheading Notes:

The @term{type} @f{(integer @i{lower} @i{upper})},
where @i{lower} and @i{upper} 
are @code{most-negative-fixnum} and @code{most-positive-fixnum}, respectively,
is also called @code{fixnum}.

The @term{type} @f{(integer 0 1)} is also called @code{bit}.
The @term{type} @f{(integer 0 *)} is also called @code{unsigned-byte}.

@node signed-byte
@heading signed-byte (Type)
@syindex signed-byte
@cindex signed-byte


@subsubheading Supertypes:

@code{signed-byte},
@code{integer},
@code{rational},
@code{real},
@code{number},
@code{t}

@subsubheading Description:

The atomic @term{type specifier} @code{signed-byte} denotes the same 
type as is denoted by the @term{type specifier} @code{integer};
however, the list forms of these two @term{type specifiers} have different semantics.

@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{signed-byte, @ttbrac{s | @t{*}}}

@subsubheading Compound Type Specifier Arguments:

@param{s}---a positive @term{integer}.

@subsubheading Compound Type Specifier Description:

This denotes the set of @term{integers} that can be represented
in two's-complement form in a @term{byte} of @param{s} bits.  This is
equivalent to @f{(integer @mat{-2^s-1} @mat{2^s-1-1})}.  The type
@code{signed-byte} or the type @f{(signed-byte *)} is the same
as @thetype{integer}.

@node unsigned-byte
@heading unsigned-byte (Type)
@syindex unsigned-byte
@cindex unsigned-byte


@subsubheading Supertypes:

@code{unsigned-byte},
@code{signed-byte},
@code{integer},
@code{rational},
@code{real},
@code{number},
@code{t}

@subsubheading Description:

The atomic @term{type specifier} @code{unsigned-byte} denotes the same 
type as is denoted by the @term{type specifier} @f{(integer 0 *)}.  

@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{unsigned-byte, @ttbrac{@param{s} | @t{*}}}

@subsubheading Compound Type Specifier Arguments:

@param{s}---a positive @term{integer}.

@subsubheading Compound Type Specifier Description:

This denotes the set of non-negative @term{integers} that can be
represented in a byte of size @param{s} (bits).  
This is equivalent 
to @f{(mod @param{m})} for @mat{@hbox{@param{m}}=2^s}, or
to @f{(integer 0 @param{n})} for @mat{@hbox{@param{n}}=2^s-1}.
@Thetype{unsigned-byte} or 
the type @f{(unsigned-byte *)} is the same as
the type @f{(integer 0 *)}, the set of non-negative @term{integers}.

@subsubheading Notes:

The @term{type} @f{(unsigned-byte 1)} is also called @code{bit}.


@node mod (Type Specifier)
@heading mod (Type Specifier)
@syindex mod
@cindex mod


@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{mod, n}

@subsubheading Compound Type Specifier Arguments:

@param{n}---a positive @term{integer}.

@subsubheading Compound Type Specifier Description:

This denotes the set of non-negative @term{integers} less than @param{n}.
This is equivalent to 
@f{(integer 0 (@param{n}))}
or to
@f{(integer 0 @param{m})},
where @mat{@hbox{@param{m}}=@hbox{@param{n}}-1}.

The argument is required, and cannot be @t{*}.

The symbol @code{mod} is not valid as a @term{type specifier}.


@node bit (Type)
@heading bit (Type)
@syindex bit
@cindex bit


@subsubheading Supertypes:

@code{bit},
@code{unsigned-byte},
@code{signed-byte},
@code{integer},
@code{rational},
@code{real},
@code{number},
@code{t}

@subsubheading Description:

@Thetype{bit} is equivalent to the @term{type} @f{(integer 0 1)}
and @f{(unsigned-byte 1)}.


@node fixnum
@heading fixnum (Type)
@syindex fixnum
@cindex fixnum


@subsubheading Supertypes:

@code{fixnum},
@code{integer},
@code{rational},
@code{real},
@code{number},
@code{t}

@subsubheading Description:

A @term{fixnum} is an @term{integer} whose value is between 
@code{most-negative-fixnum} and @code{most-positive-fixnum} inclusive.
Exactly which @term{integers} are @term{fixnums} is 
@term{implementation-defined}.
The @term{type} @code{fixnum} is required to be a supertype of
@f{(signed-byte 16)}.


@node bignum
@heading bignum (Type)
@syindex bignum
@cindex bignum


@subsubheading Supertypes:

@code{bignum},
@code{integer},
@code{rational},
@code{real},
@code{number},
@code{t}

@subsubheading Description:

@Thetype{bignum} is defined to be exactly @f{(and integer (not fixnum))}.


@node =; /=; <; >; <=; >=
@heading =, /=, <, >, <=, >= (Function)
@syindex =
@cindex =
@syindex /=
@cindex /=
@syindex <
@cindex <
@syindex >
@cindex >
@syindex <=
@cindex <=
@syindex >=
@cindex >=
@anchor{=}


@subsubheading Syntax:

@DefunWithValues{=, @rest{} @plus{numbers}, generalized-boolean}
@DefunWithValues{/=, @rest{} @plus{numbers}, generalized-boolean}
@DefunWithValues{<, @rest{} @plus{numbers}, generalized-boolean}
@DefunWithValues{>, @rest{} @plus{numbers}, generalized-boolean}
@DefunWithValues{<=, @rest{} @plus{numbers}, generalized-boolean}
@DefunWithValues{>=, @rest{} @plus{numbers}, generalized-boolean}

@subsubheading Arguments and Values:

@param{number}---for @code{<}, @code{>}, @code{<=}, @code{>=}: a @term{real};
for @code{=}, @code{/=}: a @term{number}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@code{=}, @code{/=}, @code{<}, @code{>}, @code{<=}, and @code{>=} 
perform arithmetic comparisons on their arguments as follows:


@table @asis
@item @id{@code{=}}
 

The value of @code{=} is @term{true} if all @param{numbers} are the same in value;
otherwise it is @term{false}.
Two @term{complexes} are considered equal by @code{=}
if their real and imaginary parts are equal according to @code{=}.

@item @id{@code{/=}}
 

The value of @code{/=} is @term{true} if no two @param{numbers} are the same in value;
otherwise it is @term{false}.

@item @id{@code{<}}
 

The value of @code{<} is @term{true} if the @param{numbers} are in monotonically increasing order;
otherwise it is @term{false}.

@item @id{@code{>}}
 

The value of @code{>} is @term{true} if the @param{numbers} are in monotonically decreasing order;
otherwise it is @term{false}.

@item @id{@code{<=}}
 

The value of @code{<=} is @term{true} if the @param{numbers} are in monotonically 
nondecreasing order;
otherwise it is @term{false}.

@item @id{@code{>=}}
 

The value of @code{>=} is @term{true} if the @param{numbers} are in monotonically
nonincreasing order;
otherwise it is @term{false}.
@end table


@code{=}, @code{/=}, @code{<}, @code{>}, @code{<=}, and @code{>=} 
perform necessary type conversions. 

@subsubheading Examples:

The uses of these functions are illustrated in @thenextfigure{}.


@float Figure,fig12.13
@cartouche
@multitable{@f{(= 3.0 #c(3.0 0.0))} is @term{true}.}{@f{(/= 3.0 #c(3.0 1.0))} is @term{true}.}

@item @f{(= 3 3)} is @term{true}. @tab @f{(/= 3 3)} is @term{false}.
@item @f{(= 3 5)} is @term{false}. @tab @f{(/= 3 5)} is @term{true}.
@item @f{(= 3 3 3 3)} is @term{true}. @tab @f{(/= 3 3 3 3)} is @term{false}.
@item @f{(= 3 3 5 3)} is @term{false}. @tab @f{(/= 3 3 5 3)} is @term{false}.
@item @f{(= 3 6 5 2)} is @term{false}. @tab @f{(/= 3 6 5 2)} is @term{true}.
@item @f{(= 3 2 3)} is @term{false}. @tab @f{(/= 3 2 3)} is @term{false}.
@item @f{(< 3 5)} is @term{true}. @tab @f{(<= 3 5)} is @term{true}.
@item @f{(< 3 -5)} is @term{false}. @tab @f{(<= 3 -5)} is @term{false}.
@item @f{(< 3 3)} is @term{false}. @tab @f{(<= 3 3)} is @term{true}.
@item @f{(< 0 3 4 6 7)} is @term{true}. @tab @f{(<= 0 3 4 6 7)} is @term{true}.
@item @f{(< 0 3 4 4 6)} is @term{false}. @tab @f{(<= 0 3 4 4 6)} is @term{true}.
@item @f{(> 4 3)} is @term{true}. @tab @f{(>= 4 3)} is @term{true}.
@item @f{(> 4 3 2 1 0)} is @term{true}. @tab @f{(>= 4 3 2 1 0)} is @term{true}.
@item @f{(> 4 3 3 2 0)} is @term{false}. @tab @f{(>= 4 3 3 2 0)} is @term{true}.
@item @f{(> 4 3 1 2 0)} is @term{false}. @tab @f{(>= 4 3 1 2 0)} is @term{false}.
@item @f{(= 3)} is @term{true}. @tab @f{(/= 3)} is @term{true}.
@item @f{(< 3)} is @term{true}. @tab @f{(<= 3)} is @term{true}.
@item @f{(= 3.0 #c(3.0 0.0))} is @term{true}. @tab @f{(/= 3.0 #c(3.0 1.0))} is @term{true}.
@item @f{(= 3 3.0)} is @term{true}. @tab @f{(= 3.0s0 3.0d0)} is @term{true}.
@item @f{(= 0.0 -0.0)} is @term{true}. @tab @f{(= 5/2 2.5)} is @term{true}.
@item @f{(> 0.0 -0.0)} is @term{false}. @tab @f{(= 0 -0.0)} is @term{true}.
@end multitable
@end cartouche
@caption{Uses of /=, =, <, >, <=, and >=}
@end float


@subsubheading Exceptional Situations:

Might signal @code{type-error} if some @term{argument} is not a @term{real}.
Might signal @code{arithmetic-error} if otherwise unable to fulfill its contract.

@subsubheading Notes:

@code{=} differs from @code{eql} in that
@f{(= 0.0 -0.0)} is always true,
because @code{=} compares the mathematical values of its operands,
whereas @code{eql} compares the representational values, so to speak.


@node max; min
@heading max, min (Function)
@syindex max
@cindex max
@syindex min
@cindex min


@subsubheading Syntax:

@DefunWithValues{max, @rest{} @plus{reals}, max-real}
@DefunWithValues{min, @rest{} @plus{reals}, min-real}

@subsubheading Arguments and Values:

@param{real}---a @term{real}.

@param{max-real}, @param{min-real}---a @term{real}.

@subsubheading Description:

@code{max} returns the @param{real} that is greatest (closest to positive infinity).
@code{min} returns the @param{real} that is least (closest to negative infinity).

For @code{max},
the implementation has the choice of returning the largest
argument as is or applying the rules of floating-point @term{contagion},
taking all the arguments into consideration for @term{contagion} purposes.
Also, if one or more of the arguments are @code{=}, then any one
of them may be chosen as the value to return.
For example, if the @param{reals} are a mixture of @term{rationals} and @term{floats},
and the largest argument is a @term{rational},
then the implementation is free to
produce either that @term{rational} 
or its @term{float} approximation;
if the largest argument is a 
@term{float} of a smaller format
than the largest format of any @term{float} argument,
then the implementation is free to
return the argument in its given format or expanded to the larger format.
Similar remarks apply to @code{min} 
(replacing ``largest argument'' by ``smallest argument'').

@subsubheading Examples:

@lisp
 (max 3) @EV{} 3 
 (min 3) @EV{} 3
 (max 6 12) @EV{} 12 
 (min 6 12) @EV{} 6
 (max -6 -12) @EV{} -6 
 (min -6 -12) @EV{} -12
 (max 1 3 2 -7) @EV{} 3 
 (min 1 3 2 -7) @EV{} -7
 (max -2 3 0 7) @EV{} 7 
 (min -2 3 0 7) @EV{} -2
 (max 5.0 2) @EV{} 5.0 
 (min 5.0 2)
@EV{} 2
@OV{} 2.0
 (max 3.0 7 1)
@EV{} 7
@OV{} 7.0 
 (min 3.0 7 1)
@EV{} 1
@OV{} 1.0
 (max 1.0s0 7.0d0) @EV{} 7.0d0
 (min 1.0s0 7.0d0)
@EV{} 1.0s0
@OV{} 1.0d0
 (max 3 1 1.0s0 1.0d0)
@EV{} 3
@OV{} 3.0d0
 (min 3 1 1.0s0 1.0d0)
@EV{} 1
@OV{} 1.0s0 
@OV{} 1.0d0
@end lisp


@subsubheading Exceptional Situations:

@Shouldcheckanytype{number, a @term{real}}


@node minusp; plusp
@heading minusp, plusp (Function)
@syindex minusp
@cindex minusp
@syindex plusp
@cindex plusp


@subsubheading Syntax:

@DefunWithValues{minusp, real, generalized-boolean}

@DefunWithValues{plusp, real, generalized-boolean}

@subsubheading Arguments and Values:

@param{real}---a @term{real}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@NamedPredicate{minusp, real, less than zero}

@NamedPredicate{plusp, real, greater than zero}

Regardless of whether an @term{implementation} provides distinct
representations for positive and negative @term{float} zeros,
@f{(minusp -0.0)} always returns @term{false}.

@subsubheading Examples:
@lisp
 (minusp -1) @EV{} @term{true}
 (plusp 0) @EV{} @term{false}
 (plusp least-positive-single-float) @EV{} @term{true}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{real, a @term{real}}


@node zerop
@heading zerop (Function)
@syindex zerop
@cindex zerop


@subsubheading Syntax:

@DefunWithValues{zerop, number, generalized-boolean}

@subsubheading Pronunciation:

@pronounced{@Stress{z@harde{}}(@stress{})r@hardo{}(@stress{})p@harde{}}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@Predicate{number, zero (@term{integer}\, @term{float}\, or @term{complex})}

Regardless of whether an @term{implementation} provides distinct representations
for positive and negative floating-point zeros, @f{(zerop -0.0)} 
always returns @term{true}.

@subsubheading Examples:

@lisp
 (zerop 0) @EV{} @term{true}
 (zerop 1) @EV{} @term{false}
 (zerop -0.0) @EV{} @term{true}
 (zerop 0/100) @EV{} @term{true}
 (zerop #c(0 0.0)) @EV{} @term{true}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{number, a @term{number}}

@subsubheading Notes:

@lisp
 (zerop @param{number}) @EQ{} (= @param{number} 0)
@end lisp



@node floor; ffloor; ceiling; fceiling; truncate; ftruncate; round; fround
@heading floor, ffloor, ceiling, fceiling, truncate, ftruncate, round, fround (Function)
@syindex floor
@cindex floor
@syindex ffloor
@cindex ffloor
@syindex ceiling
@cindex ceiling
@syindex fceiling
@cindex fceiling
@syindex truncate
@cindex truncate
@syindex ftruncate
@cindex ftruncate
@syindex round
@cindex round
@syindex fround
@cindex fround
@anchor{floor}
@anchor{ceiling}
@anchor{truncate}
@anchor{round}


@subsubheading Syntax:

@DefunWithValues{floor, number @opt{} divisor, quotient\, remainder}
@DefunWithValues{ffloor, number @opt{} divisor, quotient\, remainder}
@DefunWithValues{ceiling, number @opt{} divisor, quotient\, remainder}
@DefunWithValues{fceiling, number @opt{} divisor, quotient\, remainder}
@DefunWithValues{truncate, number @opt{} divisor, quotient\, remainder}
@DefunWithValues{ftruncate, number @opt{} divisor, quotient\, remainder}
@DefunWithValues{round, number @opt{} divisor, quotient\, remainder}
@DefunWithValues{fround, number @opt{} divisor, quotient\, remainder}


@subsubheading Arguments and Values:

@param{number}---a @term{real}.

@param{divisor}---a non-zero @term{real}.
@Default{the @term{integer} @f{1}}

@param{quotient}---for @code{floor}, @code{ceiling}, 
@code{truncate}, and @code{round}: an @term{integer};
for @code{ffloor}, @code{fceiling}, 
@code{ftruncate}, and @code{fround}: a @term{float}.

@param{remainder}---a @term{real}.

@subsubheading Description:

These functions divide @param{number} by @param{divisor}, 
returning a @param{quotient} and @param{remainder}, such that 

@quad{}@param{quotient}@centerdot{} @param{divisor}+@param{remainder}=@param{number}

The @param{quotient} always represents a mathematical integer.
When more than one mathematical integer might be possible
(@ie{} when the remainder is not zero),
the kind of rounding or truncation depends on the @term{operator}:


@table @asis

@item @id{@code{floor}, @code{ffloor}}


@code{floor} and @code{ffloor} produce a @param{quotient} 
that has been truncated toward negative infinity;
that is, the @param{quotient} represents the largest mathematical integer
that is not larger than the mathematical quotient.

@item @id{@code{ceiling}, @code{fceiling}}


@code{ceiling} and @code{fceiling} produce a @param{quotient}
that has been truncated toward positive infinity;
that is, the @param{quotient} represents the smallest mathematical integer
that is not smaller than the mathematical result.

@item @id{@code{truncate}, @code{ftruncate}}


@code{truncate} and @code{ftruncate} produce a @param{quotient}
that has been truncated towards zero;
that is, the @param{quotient} represents the mathematical integer
of the same sign as the mathematical quotient, and
that has the greatest integral magnitude not greater than that of the mathematical quotient.

@item @id{@code{round}, @code{fround}}


@code{round} and @code{fround} produce a @param{quotient}
that has been rounded to the nearest mathematical integer;
if the mathematical quotient is exactly halfway between two integers,
(that is, it has the form @i{integer}+@mat{1@over2{}}),
then the @param{quotient} has been rounded to the even (divisible by two) integer.
@end table


All of these functions perform type conversion operations on @param{numbers}.

The @param{remainder}
is an @term{integer}  if both   @f{x} and @f{y} are @term{integers},
is a  @term{rational} if both   @f{x} and @f{y} are @term{rationals}, and
is a  @term{float}    if either @f{x} or  @f{y} is  a @term{float}.

@code{ffloor}, @code{fceiling}, @code{ftruncate}, and @code{fround} 
handle arguments of different @term{types} in the following way:
If  @param{number}  is     a @term{float},
and @param{divisor} is not a @term{float} of longer format,
then the first result is a @term{float} of the same @term{type} as @param{number}.
Otherwise, the first result is of the @term{type} determined by @term{contagion} rules;
see @ref{NumericContagionRules, Section 12.1.1.2 (Contagion in Numeric Operations)}.

@subsubheading Examples:

@lisp
 (floor 3/2) @EV{} 1, 1/2
 (ceiling 3 2) @EV{} 2, -1
 (ffloor 3 2) @EV{} 1.0, 1
 (ffloor -4.7) @EV{} -5.0, 0.3
 (ffloor 3.5d0) @EV{} 3.0d0, 0.5d0
 (fceiling 3/2) @EV{} 2.0, -1/2
 (truncate 1) @EV{} 1, 0
 (truncate .5) @EV{} 0, 0.5
 (round .5) @EV{} 0, 0.5
 (ftruncate -7 2) @EV{} -3.0, -1
 (fround -7 2) @EV{} -4.0, 1
 (dolist (n '(2.6 2.5 2.4 0.7 0.3 -0.3 -0.7 -2.4 -2.5 -2.6))
   (format t "~&~4,1@@F ~2,' D ~2,' D ~2,' D ~2,' D"
           n (floor n) (ceiling n) (truncate n) (round n)))
@OUT{} +2.6  2  3  2  3
@OUT{} +2.5  2  3  2  2
@OUT{} +2.4  2  3  2  2
@OUT{} +0.7  0  1  0  1
@OUT{} +0.3  0  1  0  0
@OUT{} -0.3 -1  0  0  0
@OUT{} -0.7 -1  0  0 -1
@OUT{} -2.4 -3 -2 -2 -2
@OUT{} -2.5 -3 -2 -2 -2
@OUT{} -2.6 -3 -2 -2 -3
@EV{} NIL
@end lisp


@subsubheading Notes:

When only @param{number} is given, the two results are exact;
the mathematical sum of the two results is always equal to the
mathematical value of @param{number}.

@f{(@i{function} @param{number} @param{divisor})}
and @f{(@i{function} (/ @param{number} @param{divisor}))}
(where @i{function} is any of one
of @code{floor}, @code{ceiling}, @code{ffloor}, 
@code{fceiling}, @code{truncate}, 
@code{round}, @code{ftruncate}, and @code{fround})
return the same first value, but
they return different remainders as the second value. For example:

@lisp
 (floor 5 2) @EV{} 2, 1
 (floor (/ 5 2)) @EV{} 2, 1/2
@end lisp


If an effect is desired that is similar to @code{round},
but that always rounds up or down (rather than toward the nearest even integer) 
if the mathematical quotient is exactly halfway between two integers, 
the programmer should consider a construction such as
@f{(floor (+ x 1/2))}
or @f{(ceiling (- x 1/2))}.


@node sin; cos; tan
@heading sin, cos, tan (Function)
@syindex sin
@cindex sin
@syindex cos
@cindex cos
@syindex tan
@cindex tan


@subsubheading Syntax:

@DefunWithValues{sin, radians, number}
@DefunWithValues{cos, radians, number}
@DefunWithValues{tan, radians, number}

@subsubheading Arguments and Values:

@param{radians}---a @term{number} given in radians.

@param{number}---a @term{number}.

@subsubheading Description:

@code{sin}, @code{cos}, and @code{tan} 
return the sine, cosine, and tangent, respectively, of @param{radians}.

@subsubheading Examples:

@lisp
 (sin 0) @EV{} 0.0
 (cos 0.7853982) @EV{} 0.707107
 (tan #c(0 1)) @EV{} #C(0.0 0.761594)
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{radians, a @term{number}}
Might signal @code{arithmetic-error}.

@subsubheading See Also:

@ref{asin},
@ref{acos},
@ref{atan},
@ref{FloatSubstitutability, Section 12.1.3.3 (Rule of Float Substitutability)}


@node asin; acos; atan
@heading asin, acos, atan (Function)
@syindex asin
@cindex asin
@syindex acos
@cindex acos
@syindex atan
@cindex atan
@anchor{asin}
@anchor{acos}
@anchor{atan}


@subsubheading Syntax:

@DefunWithValues{asin, number, radians}
@DefunWithValues{acos, number, radians}
@DefunWithValues{atan, number1 @opt{} number2, radians}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{number1}---a @term{number} if @param{number2} is not supplied,
or a @term{real}   if @param{number2} is     supplied.

@param{number2}---a @term{real}.

@param{radians}---a @term{number} (of radians).

@subsubheading Description:

@code{asin}, @code{acos}, and @code{atan}
compute the arc sine, arc cosine, and arc tangent respectively.

The arc sine, arc cosine, and arc tangent (with only @param{number1} supplied)
functions can be defined mathematically for
@param{number} or @param{number1} specified as @i{x} as in @thenextfigure{}.


@float Figure,fig12.14
@cartouche
@multitable{Arc tangent}{@mat{ -i@spc{}@ff{log} @bigl{}((1+ix)@spc{}@sqrt{1/(1+x^2)} @bigr{}) }}
@headitem Function @tab Definition
@item Arc sine @tab @mat{ -i@spc{}@ff{log} @bigl{}(ix+     @sqrt{1-x^2}     @bigr{}) }
@item Arc cosine @tab @mat{ (@pi{}/2) - @ff{arcsin} x }
@item Arc tangent @tab @mat{ -i@spc{}@ff{log} @bigl{}((1+ix)@spc{}@sqrt{1/(1+x^2)} @bigr{}) }
@end multitable
@end cartouche
@caption{Mathematical definition of arc sine, arc cosine, and arc tangent}
@end float


These formulae are mathematically correct, assuming
completely accurate computation. They are not necessarily
the simplest ones for real-valued computations. 

If both @param{number1} and @param{number2} are supplied
for @code{atan}, the result is the arc tangent 
of @hbox{@param{number1}/@param{number2}}.
The value of @code{atan} is always between
@mat{-@pi{}} (exclusive) and@tie{}@mat{@pi{}} (inclusive)
when minus zero is not supported.
The range of the two-argument arc tangent when minus zero is supported
includes @mat{-@pi{}}.

For a 
@term{real}
@param{number1}, 
the result is 
a @term{real}
and lies between
@mat{-@pi{}/2} and@tie{}@mat{@pi{}/2} (both exclusive).
@param{number1} can be a @term{complex} if @param{number2}
is not supplied. If both are supplied, @param{number2} can be zero provided
@param{number1} is not zero.  
@reviewer{Barmar: Should add ``However, if the implementation distinguishes 
positive and negative zero, both may be signed zeros, 
and limits are used to define the result.''}

The following definition for arc sine determines the range and
branch cuts:


@quotation
@mat{ @ff{arcsin} z = -i@spc{}@ff{log} @Bigl{}(iz+@sqrt{1-z^2}@Bigr{}) }
@end quotation


The branch cut for the arc sine function is in two pieces:
one along the negative real axis to the left of@tie{}@mat{-1}
(inclusive), continuous with quadrant II, and one along the positive real
axis to the right of@tie{}@mat{1} (inclusive), continuous with quadrant IV.  The
range is that strip of the complex plane containing numbers whose real
part is between @mat{-@pi{}/2} and@tie{}@mat{@pi{}/2}.  A number with real
part equal to @mat{-@pi{}/2} is in the range if and only if its imaginary
part is non-negative; a number with real part equal to @mat{@pi{}/2} is in
the range if and only if its imaginary part is non-positive.

The following definition for arc cosine determines the range and
branch cuts:



@quotation
@mat{ @ff{arccos} z = @pi{}@over2{}- @ff{arcsin} z}
@end quotation


or, which are equivalent,


@quotation
@mat{ @ff{arccos} z = -i@spc{}@ff{log} @Bigl{}(z+i@spc{}@sqrt{1-z^2}@Bigr{}) }
@end quotation



@quotation
@mat{ @ff{arccos} z = 2@spc{}@ff{log} @bigl{}(@sqrt{(1+z)/2} + i@spc{}@sqrt{(1-z)/2}@bigr{})@over{i}}
@end quotation


The branch cut for the arc cosine function is in two pieces:
one along the negative real axis to the left of@tie{}@mat{-1}
(inclusive), continuous with quadrant II, and one along the positive real
axis to the right of@tie{}@mat{1} (inclusive), continuous with quadrant IV.  
This is the same branch cut as for arc sine.
The range is that strip of the complex plane containing numbers whose real
part is between 0 and@tie{}@mat{@pi{}}.  A number with real
part equal to 0 is in the range if and only if its imaginary
part is non-negative; a number with real part equal to @mat{@pi{}} is in
the range if and only if its imaginary part is non-positive.

The following definition for (one-argument) arc tangent determines the
range and branch cuts:


@quotation
@mat{ @ff{arctan} z = (@ff{log} (1+iz) - @ff{log} (1-iz))/2i }
@end quotation

Beware of simplifying this formula; ``obvious'' simplifications are likely
to alter the branch cuts or the values on the branch cuts incorrectly.
The branch cut for the arc tangent function is in two pieces:
one along the positive imaginary axis above @mat{i}
(exclusive), continuous with quadrant II, and one along the negative imaginary
axis below @mat{-i} (exclusive), continuous with quadrant IV.  
The points @mat{i} and@tie{}@mat{-i} are excluded from the domain.
The range is that strip of the complex plane containing numbers whose real
part is between @mat{-@pi{}/2} and@tie{}@mat{@pi{}/2}.  A number with real
part equal to @mat{-@pi{}/2} is in the range if and only if its imaginary
part is strictly positive; a number with real part equal to @mat{@pi{}/2} is in
the range if and only if its imaginary part is strictly negative.  Thus the range of
arc tangent is identical to that of arc sine with the points
@mat{-@pi{}/2} and@tie{}@mat{@pi{}/2} excluded.

For @code{atan},
the signs of @param{number1} (indicated as @i{x})
and @param{number2} (indicated as @i{y}) are used to derive quadrant
information. @Thenextfigure{}@spc{}details various special cases.
The asterisk (*) indicates that the entry in the figure applies to
implementations that support minus zero.


@float Figure,fig12.15
@cartouche
@multitable{@starN{}@i{y} Condition}{@i{x} Condition}{Cartesian locus}{@mat{-@pi{} < @Result{} < -@pi{}/2}}
@headitem @starN{}@i{y} Condition @tab @i{x} Condition @tab Cartesian locus @tab Range of result
@item @starN{}@mat{ y =  0 } @tab @mat{ x >  0 } @tab Positive x-axis @tab @mat{ 0}
@item @starY{}@mat{ y = +0 } @tab @mat{ x >  0 } @tab Positive x-axis @tab @mat{+0}
@item @starY{}@mat{ y = -0 } @tab @mat{ x >  0 } @tab Positive x-axis @tab @mat{-0}
@item @starN{}@mat{ y >  0 } @tab @mat{ x >  0 } @tab Quadrant I @tab @mat{0 < @Result{} < @pi{}/2 }
@item @starN{}@mat{ y >  0 } @tab @mat{ x =  0 } @tab Positive y-axis @tab @mat{@pi{}/2}
@item @starN{}@mat{ y >  0 } @tab @mat{ x <  0 } @tab Quadrant II @tab @mat{@pi{}/2 < @Result{} < @pi{}}
@item @starN{}@mat{ y =  0 } @tab @mat{ x <  0 } @tab Negative x-axis @tab @mat{ @pi{}}
@item @starY{}@mat{ y = +0 } @tab @mat{ x <  0 } @tab Negative x-axis @tab @mat{+@pi{}}
@item @starY{}@mat{ y = -0 } @tab @mat{ x <  0 } @tab Negative x-axis @tab @mat{-@pi{}}
@item @starN{}@mat{ y <  0 } @tab @mat{ x <  0 } @tab Quadrant III @tab @mat{-@pi{} < @Result{} < -@pi{}/2}
@item @starN{}@mat{ y <  0 } @tab @mat{ x =  0 } @tab Negative y-axis @tab @mat{-@pi{}/2}
@item @starN{}@mat{ y <  0 } @tab @mat{ x >  0 } @tab Quadrant IV @tab @mat{-@pi{}/2 < @Result{} < 0 }
@item @starN{}@mat{ y =  0 } @tab @mat{ x =  0 } @tab Origin @tab undefined consequences
@item @starY{}@mat{ y = +0 } @tab @mat{ x = +0 } @tab Origin @tab @mat{+0}
@item @starY{}@mat{ y = -0 } @tab @mat{ x = +0 } @tab Origin @tab @mat{-0}
@item @starY{}@mat{ y = +0 } @tab @mat{ x = -0 } @tab Origin @tab @mat{+@pi{}}
@item @starY{}@mat{ y = -0 } @tab @mat{ x = -0 } @tab Origin @tab @mat{-@pi{}}
@end multitable
@end cartouche
@caption{Quadrant information for arc tangent}
@end float


@subsubheading Examples:

@lisp
 (asin 0) @EV{} 0.0 
 (acos #c(0 1))  @EV{} #C(1.5707963267948966 -0.8813735870195432)
 (/ (atan 1 (sqrt 3)) 6)  @EV{} 0.087266 
 (atan #c(0 2)) @EV{} #C(-1.5707964 0.54930615)
@end lisp


@subsubheading Exceptional Situations:

@code{acos} and @code{asin} @shouldchecktype{number, a @term{number}}
@code{atan} should signal @code{type-error} if
one argument is supplied and that argument is not a @term{number},
or if two arguments are supplied and both of those arguments are not @term{reals}.

@code{acos}, @code{asin}, and @code{atan} might signal @code{arithmetic-error}.

@subsubheading See Also:

@ref{log},
@ref{sqrt},
@ref{FloatSubstitutability, Section 12.1.3.3 (Rule of Float Substitutability)}

@subsubheading Notes:

The result of either @code{asin} or @code{acos} can be a @term{complex}
even if @param{number} is not a @term{complex}; this occurs when the 
absolute value of @param{number} is greater than one.


@node pi
@heading pi (Constant Variable)
@syindex pi
@cindex pi


@subsubheading Value:

an @term{implementation-dependent} @term{long float}.

@subsubheading Description:

The best @term{long float} approximation to the mathematical constant @mat{@pi{}}.

@subsubheading Examples:

@lisp
 ;; In each of the following computations, the precision depends 
 ;; on the implementation.  Also, if `long float' is treated by 
 ;; the implementation as equivalent to some other float format 
 ;; (e.g., `double float') the exponent marker might be the marker
 ;; for that equivalent (e.g., `D' instead of `L').
 pi @EV{} 3.141592653589793L0
 (cos pi) @EV{} -1.0L0

 (defun sin-of-degrees (degrees)
   (let ((x (if (floatp degrees) degrees (float degrees pi))))
     (sin (* x (/ (float pi x) 180)))))
@end lisp


@subsubheading Notes:

An approximation to @mat{@pi{}} in some other precision can be obtained
by writing @f{(float pi x)}, where @f{x} is a @term{float} of the
desired precision, or by writing @f{(coerce pi @i{type})}, 
where @i{type} is the desired type, such as @code{short-float}.


@node sinh; cosh; tanh; asinh; acosh; atanh
@heading sinh, cosh, tanh, asinh, acosh, atanh (Function)
@syindex sinh
@cindex sinh
@syindex cosh
@cindex cosh
@syindex tanh
@cindex tanh
@syindex asinh
@cindex asinh
@syindex acosh
@cindex acosh
@syindex atanh
@cindex atanh


@subsubheading Syntax:

@DefunWithValues{sinh, number, result}
@DefunWithValues{cosh, number, result}
@DefunWithValues{tanh, number, result}
@DefunWithValues{asinh, number, result}
@DefunWithValues{acosh, number, result}
@DefunWithValues{atanh, number, result}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{result}---a @term{number}.

@subsubheading Description:

These functions compute the hyperbolic sine, cosine, tangent,
arc sine, arc cosine, and arc tangent functions, 
which are mathematically defined for an argument @i{x}
as given in @thenextfigure{}.


@float Figure,fig12.16
@cartouche
@multitable{Hyperbolic arc tangent}{@mat{ 2@spc{}@ff{log} (@sqrt{(x+1)/2} + @sqrt{(x-1)/2}) }}
@headitem Function @tab Definition
@item Hyperbolic sine @tab @mat{ (e^x-e^-x)/2                       }
@item Hyperbolic cosine @tab @mat{ (e^x+e^-x)/2                       }
@item Hyperbolic tangent @tab @mat{ (e^x-e^-x)/(e^x+e^-x)            }
@item Hyperbolic arc sine @tab @mat{ @ff{log} (x+@sqrt{1+x^2})            }
@item Hyperbolic arc cosine @tab @mat{ 2@spc{}@ff{log} (@sqrt{(x+1)/2} + @sqrt{(x-1)/2}) }
@item Hyperbolic arc tangent @tab @mat{ (@ff{log} (1+x) - @ff{log}(1-x))/2   }
@end multitable
@end cartouche
@caption{Mathematical definitions for hyperbolic functions}
@end float


The following definition for the inverse hyperbolic cosine
determines the range and branch cuts:


@quotation
@mat{ @ff{arccosh} z = 2@spc{}@ff{log} @Bigl{}(@sqrt{(z+1)/2} + @sqrt{(z-1)/2}@Bigr{}). }
@end quotation


The branch cut for the inverse hyperbolic cosine function
lies along the real axis to the left of@tie{}@mat{1} (inclusive), extending
indefinitely along the negative real axis, continuous with quadrant II
and (between @mat{0} and@tie{}@mat{1}) with quadrant I.
The range is that half-strip of the complex plane containing numbers whose
real part is non-negative and whose imaginary
part is between @mat{-@pi{}} (exclusive) and@tie{}@mat{@pi{}} (inclusive).
A number with real part zero is in the range 
if its imaginary part is between zero (inclusive) and@tie{}@mat{@pi{}} (inclusive).

The following definition for the inverse hyperbolic sine determines
the range and branch cuts:


@quotation
@mat{ @ff{arcsinh} z = @ff{log} @Bigl{}(z+@sqrt{1+z^2}@Bigr{}). }
@end quotation


The branch cut for the inverse hyperbolic sine function is in two pieces:
one along the positive imaginary axis above @mat{i}
(inclusive), continuous with quadrant I, and one along the negative imaginary
axis below @mat{-i} (inclusive), continuous with quadrant III.
The range is that strip of the complex plane containing numbers whose imaginary
part is between @mat{-@pi{}/2} and@tie{}@mat{@pi{}/2}.  A number with imaginary
part equal to @mat{-@pi{}/2} is in the range if and only if its real
part is non-positive; a number with imaginary part equal to @mat{@pi{}/2} is in
the range if and only if its imaginary part is non-negative.

The following definition for the inverse hyperbolic tangent
determines the range and branch cuts:


@quotation
@mat{ @ff{arctanh} z = (@ff{log} (1+z) - @ff{log} (1-z))/2. }
@end quotation
 
Note that:


@quotation
@mat{ i@spc{}@ff{arctan} z = @ff{arctanh} iz. }
@end quotation


The branch cut for the inverse hyperbolic tangent function
is in two pieces: one along the negative real axis to the left of
@mat{-1} (inclusive), continuous with quadrant III, and one along
the positive real axis to the right of@tie{}@mat{1} (inclusive), continuous with
quadrant I.  The points @mat{-1} and@tie{}@mat{1} are excluded from the
domain.
The range is that strip of the complex plane containing
numbers whose imaginary part is between @mat{-@pi{}/2} and
@mat{@pi{}/2}.  A number with imaginary part equal to @mat{-@pi{}/2}
is in the range if and only if its real part is strictly negative; a number with
imaginary part equal to @mat{@pi{}/2} is in the range if and only if its imaginary
part is strictly positive.  
Thus the range of the inverse hyperbolic tangent function is identical to
that of the inverse hyperbolic sine function with the points
@mat{-@pi{} i/2} and@tie{}@mat{@pi{} i/2} excluded.

@subsubheading Examples:

@lisp
 (sinh 0) @EV{} 0.0 
 (cosh (complex 0 -1)) @EV{} #C(0.540302 -0.0)
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{number, a @term{number}}
Might signal @code{arithmetic-error}.

@subsubheading See Also:

@ref{log},
@ref{sqrt},
@ref{FloatSubstitutability, Section 12.1.3.3 (Rule of Float Substitutability)}

@subsubheading Notes:

The result of @code{acosh} may be a @term{complex} even if @param{number} 
is not a @term{complex}; this occurs when @param{number} is less than one.
Also, the result of @code{atanh} may be a @term{complex} even if @param{number} 
is not a @term{complex}; this occurs when the absolute value of @param{number} 
is greater than one.

The branch cut formulae are mathematically correct, assuming
completely accurate computation.  
Implementors should consult a good text on
numerical analysis.  The formulae given above are not necessarily
the simplest ones for real-valued computations; they are chosen
to define the branch cuts in desirable ways for the complex case.


@node * (Function)
@heading * (Function)
@syindex *
@cindex *


@subsubheading Syntax:

@DefunWithValues{*, @rest{} numbers, product}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{product}---a @term{number}.

@subsubheading Description:

Returns the product of @param{numbers},
performing any necessary type conversions in the process.
If no @param{numbers} are supplied, @f{1} is returned.

@subsubheading Examples:

@lisp
 (*) @EV{} 1
 (* 3 5) @EV{} 15
 (* 1.0 #c(22 33) 55/98) @EV{} #C(12.346938775510203 18.520408163265305)
@end lisp


@subsubheading Exceptional Situations:

Might signal @code{type-error} if some @term{argument} is not a @term{number}.
Might signal @code{arithmetic-error}.

@subsubheading See Also:

@ref{Numeric Operations, Section 12.1.1 (Numeric Operations)},
@ref{Rational Computations, Section 12.1.3 (Rational Computations)},
@ref{Floating-point Computations, Section 12.1.4 (Floating-point Computations)},
@ref{Complex Computations, Section 12.1.5 (Complex Computations)}


@node + (Function)
@heading + (Function)
@syindex +
@cindex +


@subsubheading Syntax:

@DefunWithValues{+, @rest{} numbers, sum}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{sum}---a @term{number}.

@subsubheading Description:

Returns the sum of @param{numbers},
performing any necessary type conversions in the process.
If no @param{numbers} are supplied, @f{0} is returned.

@subsubheading Examples:
@lisp
 (+) @EV{} 0
 (+ 1) @EV{} 1
 (+ 31/100 69/100) @EV{} 1
 (+ 1/5 0.8) @EV{} 1.0
@end lisp


@subsubheading Exceptional Situations:

Might signal @code{type-error} if some @term{argument} is not a @term{number}.
Might signal @code{arithmetic-error}.

@subsubheading See Also:

@ref{Numeric Operations, Section 12.1.1 (Numeric Operations)},
@ref{Rational Computations, Section 12.1.3 (Rational Computations)},
@ref{Floating-point Computations, Section 12.1.4 (Floating-point Computations)},
@ref{Complex Computations, Section 12.1.5 (Complex Computations)}


@node - (Function)
@heading - (Function)
@syindex -
@cindex -


@subsubheading Syntax:

@DefunWithValues{-, number, negation}

@DefunWithValues{-, minuend @rest{} @plus{subtrahends}, difference}

@subsubheading Arguments and Values:

@param{number}, @param{minuend}, @param{subtrahend}---a @term{number}.

@param{negation}, @param{difference}---a @term{number}.

@subsubheading Description:

@Thefunction{-} performs arithmetic subtraction and negation.

If only one @param{number} is supplied,
the negation of that @param{number} is returned.

If more than one @term{argument} is given, 
it subtracts all of the @param{subtrahends} from the @param{minuend}
and returns the result.

@Thefunction{-} performs necessary type conversions. 

@subsubheading Examples:

@lisp
 (- 55.55) @EV{} -55.55
 (- #c(3 -5)) @EV{} #C(-3 5)
 (- 0) @EV{} 0
 (eql (- 0.0) -0.0) @EV{} @term{true}
 (- #c(100 45) #c(0 45)) @EV{} 100
 (- 10 1 2 3 4) @EV{} 0
@end lisp


@subsubheading Exceptional Situations:

Might signal @code{type-error} if some @term{argument} is not a @term{number}.
Might signal @code{arithmetic-error}.

@subsubheading See Also:

@ref{Numeric Operations, Section 12.1.1 (Numeric Operations)},
@ref{Rational Computations, Section 12.1.3 (Rational Computations)},
@ref{Floating-point Computations, Section 12.1.4 (Floating-point Computations)},
@ref{Complex Computations, Section 12.1.5 (Complex Computations)}


@node / (Function)
@heading / (Function)
@syindex /
@cindex /


@subsubheading Syntax:

@DefunWithValues{/, number, reciprocal}
@DefunWithValues{/, numerator @rest{} @plus{denominators}, quotient}

@subsubheading Arguments and Values:

@param{number}, @param{denominator}---a non-zero @term{number}.

@param{numerator}, @param{quotient}, @param{reciprocal}---a @term{number}.

@subsubheading Description:

@Thefunction{/} performs division or reciprocation.

If no @param{denominators} are supplied,
@thefunction{/} returns the reciprocal of @param{number}.

If at least one @param{denominator} is supplied,
@thefunction{/} divides the @param{numerator} by all of the @param{denominators} 
and returns the resulting @param{quotient}.

If each @term{argument} is either an @term{integer} or a @term{ratio},
and the result is not an @term{integer}, then it is a @term{ratio}.

@Thefunction{/} performs necessary type conversions.

If any @param{argument} is a @term{float} then 
the rules of floating-point contagion apply;
see @ref{Floating-point Computations, Section 12.1.4 (Floating-point Computations)}.

@subsubheading Examples:

@lisp
 (/ 12 4) @EV{} 3
 (/ 13 4) @EV{} 13/4
 (/ -8) @EV{} -1/8
 (/ 3 4 5) @EV{} 3/20
 (/ 0.5) @EV{} 2.0
 (/ 20 5) @EV{} 4
 (/ 5 20) @EV{} 1/4
 (/ 60 -2 3 5.0) @EV{} -2.0
 (/ 2 #c(2 2)) @EV{} #C(1/2 -1/2)
@end lisp


@subsubheading Exceptional Situations:

The consequences are unspecified if any @term{argument} other than the first is zero.
If there is only one @term{argument}, the consequences are unspecified if it is zero.

Might signal @code{type-error} if some @term{argument} is not a @term{number}.
Might signal @code{division-by-zero} if division by zero is attempted.
Might signal @code{arithmetic-error}.

@subsubheading See Also:

@ref{floor}, @ref{ceiling}, @ref{truncate}, @ref{round}


@node 1+; 1-
@heading 1+, 1- (Function)
@syindex 1+
@cindex 1+
@syindex 1-
@cindex 1-
@anchor{1+}
@anchor{1- (Function)}


@subsubheading Syntax:

@DefunWithValues{1+, number, successor}
@DefunWithValues{1-, number, predecessor}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{successor}, @param{predecessor}---a @term{number}.

@subsubheading Description:

@code{1+} returns a @term{number} that is one more than its argument @param{number}.
@code{1-} returns a @term{number} that is one less than its argument @param{number}.

@subsubheading Examples:

@lisp
 (1+ 99) @EV{} 100 
 (1- 100) @EV{} 99 
 (1+ (complex 0.0)) @EV{} #C(1.0 0.0) 
 (1- 5/3) @EV{} 2/3 
@end lisp


@subsubheading Exceptional Situations:

Might signal @code{type-error} if its @term{argument} is not a @term{number}.
Might signal @code{arithmetic-error}.

@subsubheading See Also:

@ref{incf}, @ref{decf}

@subsubheading Notes:

@lisp
 (1+ @param{number}) @EQ{} (+ @param{number} 1)
 (1- @param{number}) @EQ{} (- @param{number} 1)
@end lisp

Implementors are encouraged to make the performance of both the previous
expressions be the same.


@node abs
@heading abs (Function)
@syindex abs
@cindex abs


@subsubheading Syntax:

@DefunWithValues{abs, number, absolute-value}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{absolute-value}---a non-negative @term{real}.

@subsubheading Description:

@code{abs} returns the absolute value of @param{number}.

If @param{number} is 
a @term{real},
the result is  of the same @term{type} as @param{number}.

If @param{number} is a @term{complex}, 
the result is a positive 
@term{real}
with
the same magnitude as @param{number}.  
The result can be a @term{float} 
@reviewer{Barmar: Single-float.}
even if @param{number}'s components are @term{rationals} 
and an exact rational result
would have been possible.
Thus the result of @f{(abs #c(3 4))} can be either @f{5} or @f{5.0},
depending on the implementation.

@subsubheading Examples:

@lisp
 (abs 0) @EV{} 0
 (abs 12/13) @EV{} 12/13
 (abs -1.09) @EV{} 1.09
 (abs #c(5.0 -5.0)) @EV{} 7.071068
 (abs #c(5 5)) @EV{} 7.071068
 (abs #c(3/5 4/5)) @EV{} 1 or approximately 1.0
 (eql (abs -0.0) -0.0) @EV{} @term{true}
@end lisp


@subsubheading See Also:

@ref{FloatSubstitutability, Section 12.1.3.3 (Rule of Float Substitutability)}

@subsubheading Notes:

If @param{number} is a @term{complex}, 
the result is equivalent to the following: 

@f{(sqrt (+ (expt (realpart @param{number}) 2)  (expt (imagpart @param{number}) 2)))}

An implementation should not use this formula directly
for all @term{complexes}
but should handle very large or very small components specially
to avoid intermediate overflow or underflow.


@node evenp; oddp
@heading evenp, oddp (Function)
@syindex evenp
@cindex evenp
@syindex oddp
@cindex oddp


@subsubheading Syntax:

@DefunWithValues{evenp, integer, generalized-boolean}
@DefunWithValues{oddp, integer, generalized-boolean}

@subsubheading Arguments and Values:

@param{integer}---an @term{integer}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@NamedPredicate{evenp, integer, even (divisible by two)}

@NamedPredicate{oddp, integer, odd (not divisible by two)}

@subsubheading Examples:

@lisp
 (evenp 0) @EV{} @term{true}
 (oddp 10000000000000000000000) @EV{} @term{false}
 (oddp -1) @EV{} @term{true}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{integer, an @term{integer}}

@subsubheading Notes:

@lisp
 (evenp @param{integer}) @EQ{} (not (oddp @param{integer}))
 (oddp @param{integer})  @EQ{} (not (evenp @param{integer}))
@end lisp



@node exp; expt
@heading exp, expt (Function)
@syindex exp
@cindex exp
@syindex expt
@cindex expt
@anchor{exp}
@anchor{expt}


@subsubheading Syntax:

@DefunWithValues{exp, number, result}
@DefunWithValues{expt, base-number power-number, result}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{base-number}---a @term{number}.

@param{power-number}---a @term{number}.

@param{result}---a @term{number}.

@subsubheading Description:

@code{exp} and @code{expt} perform exponentiation.

@code{exp} returns @i{e} raised to the power @param{number},
where @i{e} is the base of the natural logarithms.
@code{exp} has no branch cut.

@code{expt} returns @param{base-number} 
raised to the power @param{power-number}.
If the @param{base-number} is a @term{rational} 
and @param{power-number} is
an @term{integer},
the calculation is exact and the result will be @oftype{rational};
otherwise a floating-point approximation might result.
For @code{expt} of a @term{complex rational} to an @term{integer} power,
the calculation must be exact and the result is
of type @f{(or rational (complex rational))}.

The result of @code{expt} can be a @term{complex},
even when neither argument is a @term{complex},
if @param{base-number} is negative and @param{power-number}
is not an @term{integer}. 
The result is always the @term{principal} @term{complex} @term{value}.
For example, @f{(expt -8 1/3)} is not permitted to return @f{-2},
even though @f{-2} is one of the cube roots of @f{-8}. 
The @term{principal} cube root is a @term{complex}
approximately equal to @f{#C(1.0 1.73205)}, not @f{-2}.

@code{expt} is defined
as @i{@mat{b^x} = @mat{e^x log b}}.
This defines the @term{principal} @term{values} precisely.  The range of
@code{expt} is the entire complex plane.  Regarded
as a function of @i{x}, with @i{b} fixed, there is no branch cut.
Regarded as a function of @i{b}, with @i{x} fixed, there is in general
a branch cut along the negative real axis, continuous with quadrant II.
The domain excludes the origin.
By definition, @mat{0^0}=1.  If @i{b}=0 and the real part of @i{x} is strictly
positive, then 
@i{@mat{b^x}}=0. For all other values of @i{x}, @mat{0^@i{x}} 
is an error.

When @param{power-number} is an @term{integer} @f{0},
then the result is always the value one in the @term{type} 
of @param{base-number},
even if the @param{base-number} is zero (of any @term{type}).  That is:

@lisp
 (expt x 0) @EQ{} (coerce 1 (type-of x))
@end lisp

If @param{power-number} is a zero of any other @term{type},
then the result is also the value one, in the @term{type} of the arguments
after the application of the contagion rules in @ref{NumericContagionRules, Section 12.1.1.2 (Contagion in Numeric Operations)},
with one exception:
the consequences are undefined if @param{base-number} is zero when @param{power-number}
is zero and not @oftype{integer}.

@subsubheading Examples:

@lisp
 (exp 0) @EV{} 1.0
 (exp 1) @EV{} 2.718282
 (exp (log 5)) @EV{} 5.0 
 (expt 2 8) @EV{} 256
 (expt 4 .5) @EV{} 2.0
 (expt #c(0 1) 2) @EV{} -1
 (expt #c(2 2) 3) @EV{} #C(-16 16)
 (expt #c(2 2) 4) @EV{} -64 
@end lisp


@subsubheading See Also:

@ref{log},
@ref{FloatSubstitutability, Section 12.1.3.3 (Rule of Float Substitutability)}

@subsubheading Notes:

Implementations of @code{expt} are permitted to use different algorithms
for the cases of a @param{power-number} @oftype{rational} 
and a @param{power-number} @oftype{float}.


Note that by the following logic, 
@f{(sqrt (expt @i{x} 3))} is not equivalent to 
@f{(expt @i{x} 3/2)}.

@lisp
 (setq x (exp (/ (* 2 pi #c(0 1)) 3)))         ;exp(2.pi.i/3)
 (expt x 3) @EV{} 1 ;except for round-off error
 (sqrt (expt x 3)) @EV{} 1 ;except for round-off error
 (expt x 3/2) @EV{} -1 ;except for round-off error
@end lisp



@node gcd
@heading gcd (Function)
@syindex gcd
@cindex gcd


@subsubheading Syntax:

@DefunWithValues{gcd, @rest{} integers, greatest-common-denominator}

@subsubheading Arguments and Values:

@param{integer}---an @term{integer}.

@param{greatest-common-denominator}---a non-negative @term{integer}.

@subsubheading Description:

Returns the greatest common divisor of @param{integers}.
If only one @param{integer} is supplied, its absolute value is returned.
If no @param{integers} are given, @code{gcd} returns @f{0},
which is an identity for this operation.

@subsubheading Examples:

@lisp
 (gcd) @EV{} 0
 (gcd 60 42) @EV{} 6
 (gcd 3333 -33 101) @EV{} 1
 (gcd 3333 -33 1002001) @EV{} 11
 (gcd 91 -49) @EV{} 7
 (gcd 63 -42 35) @EV{} 7
 (gcd 5) @EV{} 5
 (gcd -4) @EV{} 4
@end lisp


@subsubheading Exceptional Situations:

@Shouldcheckanytype{integer, an @term{integer}}

@subsubheading See Also:

@ref{lcm}

@subsubheading Notes:
For three or more arguments,

@lisp
 (gcd b c ... z) @EQ{} (gcd (gcd a b) c ... z)
@end lisp


@node incf; decf
@heading incf, decf (Macro)
@syindex incf
@cindex incf
@syindex decf
@cindex decf
@anchor{incf}
@anchor{decf}
                         

@subsubheading Syntax:

@DefmacWithValues{incf, place @brac{delta-form}, new-value}
@DefmacWithValues{decf, place @brac{delta-form}, new-value}

@subsubheading Arguments and Values:

@param{place}---a @term{place}.

@param{delta-form}---a @term{form}; evaluated to produce a @param{delta}.
@Default{@f{1}}

@param{delta}---a @term{number}.

@param{new-value}---a @term{number}.

@subsubheading Description:

@code{incf} and @code{decf} are used for incrementing and
decrementing the @term{value} of @param{place}, respectively.

The @param{delta} is 
added to        (in the case of @code{incf})
or subtracted from (in the case of @code{decf})
the number in @param{place} and the result is stored in @param{place}.

Any necessary type conversions are performed automatically.

For information about the @term{evaluation} of @term{subforms} of @param{places},
see @ref{GenRefSubFormEval, Section 5.1.1.1 (Evaluation of Subforms to Places)}.  

@subsubheading Examples:
@lisp
 (setq n 0)
 (incf n) @EV{} 1      
 n @EV{} 1
 (decf n 3) @EV{} -2   
 n @EV{} -2
 (decf n -5) @EV{} 3      
 (decf n) @EV{} 2      
 (incf n 0.5) @EV{} 2.5
 (decf n) @EV{} 1.5
 n @EV{} 1.5
@end lisp


@subsubheading Side Effects:

@param{Place} is modified.

@subsubheading See Also:

@ref{+ (Function)}, @ref{- (Function)}, @ref{1+}, @ref{1- (Function)}, @ref{setf}


@node lcm
@heading lcm (Function)
@syindex lcm
@cindex lcm


@subsubheading Syntax:

@DefunWithValues{lcm, @rest{} integers, least-common-multiple}

@subsubheading Arguments and Values:

@param{integer}---an @term{integer}.

@param{least-common-multiple}---a non-negative @term{integer}.

@subsubheading Description:

@code{lcm} returns the least common multiple of the @param{integers}.

If no @param{integer} is supplied, the @term{integer} @f{1} is returned.

If only one @param{integer} is supplied, 
the absolute value of that @param{integer} is returned.

For two arguments that are not both zero,

@lisp
 (lcm a b) @EQ{} (/ (abs (* a b)) (gcd a b))
@end lisp


If one or both arguments are zero,

@lisp
 (lcm a 0) @EQ{} (lcm 0 a) @EQ{} 0
@end lisp


For three or more arguments,

@lisp
 (lcm a b c ... z) @EQ{} (lcm (lcm a b) c ... z)
@end lisp


@subsubheading Examples:
@lisp
 (lcm 10) @EV{} 10
 (lcm 25 30) @EV{} 150
 (lcm -24 18 10) @EV{} 360
 (lcm 14 35) @EV{} 70
 (lcm 0 5) @EV{} 0
 (lcm 1 2 3 4 5 6) @EV{} 60
@end lisp


@subsubheading Exceptional Situations:

Should signal @code{type-error} if any argument is not an @term{integer}.

@subsubheading See Also:

@ref{gcd}


@node log
@heading log (Function)
@syindex log
@cindex log


@subsubheading Syntax:

@DefunWithValues{log, number @opt{} base, logarithm}

@subsubheading Arguments and Values:

@param{number}---a non-zero @term{number}.

@param{base}---a @term{number}.

@param{logarithm}---a @term{number}.

@subsubheading Description:

@code{log} returns the logarithm of @param{number} in base @param{base}.
If @param{base} is not supplied its value is @i{e}, 
the base of the natural logarithms.

@code{log} may return a @term{complex} when given a 
@term{real}
negative @param{number}.

@lisp
 (log -1.0) @EQ{} (complex 0.0 (float pi 0.0))
@end lisp


If @param{base} is zero,
@code{log} returns zero.

The result of @f{(log 8 2)} may be either @f{3} or @f{3.0}, depending on the
implementation. An implementation can use floating-point calculations
even if an exact integer result is possible.

The branch cut for the logarithm function of one argument (natural
logarithm) lies along the negative real axis, continuous with quadrant II.
The domain excludes the origin.

The mathematical definition of a complex logarithm 
is as follows, whether or not minus zero is supported by the
implementation:

@lisp
(log @i{x}) @EQ{} (complex (log (abs @i{x})) (phase @i{x}))
@end lisp


Therefore the range of the one-argument logarithm function is that strip
of the complex plane containing numbers with imaginary parts between
@mat{-@pi{}} (exclusive) and@tie{}@mat{@pi{}} (inclusive) if minus zero is not supported,
or @mat{-@pi{}} (inclusive) and@tie{}@mat{@pi{}} (inclusive) if minus zero is supported.

The two-argument logarithm function is defined as 

@lisp
 (log @param{base} @param{number})
 @EQ{} (/ (log @param{number}) (log @param{base}))
@end lisp


This defines the @term{principal} @term{values} precisely.  
The range of the two-argument logarithm function is the entire complex plane.

@subsubheading Examples:

@lisp
 (log 100 10)
@EV{} 2.0
@EV{} 2
 (log 100.0 10) @EV{} 2.0
 (log #c(0 1) #c(0 -1))
@EV{} #C(-1.0 0.0)
@OV{} #C(-1 0)
 (log 8.0 2) @EV{} 3.0
@end lisp


@lisp
 (log #c(-16 16) #c(2 2)) @EV{} 3 or approximately #c(3.0 0.0)
                               or approximately 3.0 (unlikely)
@end lisp


@subsubheading Affected By:

The implementation.

@subsubheading See Also:

@ref{exp},
@ref{expt},
@ref{FloatSubstitutability, Section 12.1.3.3 (Rule of Float Substitutability)}


@node mod; rem
@heading mod, rem (Function)
@syindex mod
@cindex mod
@syindex rem
@cindex rem


@subsubheading Syntax:

@DefunWithValues{mod, number divisor, modulus}
@DefunWithValues{rem, number divisor, remainder}

@subsubheading Arguments and Values:

@param{number}---a @term{real}.

@param{divisor}---a @term{real}.

@param{modulus}, @param{remainder}---a @term{real}.

@subsubheading Description:

@code{mod} and @code{rem} are generalizations of the modulus
and remainder functions respectively.

@code{mod} performs the operation @code{floor} 
on @param{number} and @param{divisor} 
and returns the remainder of the @code{floor} operation.

@code{rem} performs the operation @code{truncate} 
on @param{number} and @param{divisor}
and returns the remainder of the @code{truncate} operation.

@code{mod} and @code{rem} are 
the modulus and remainder functions 
when @param{number} and @param{divisor} are @term{integers}.

@subsubheading Examples:
@lisp
 (rem -1 5) @EV{} -1
 (mod -1 5) @EV{} 4
 (mod 13 4) @EV{} 1
 (rem 13 4) @EV{} 1
 (mod -13 4) @EV{} 3
 (rem -13 4) @EV{} -1
 (mod 13 -4) @EV{} -3
 (rem 13 -4) @EV{} 1
 (mod -13 -4) @EV{} -1
 (rem -13 -4) @EV{} -1
 (mod 13.4 1) @EV{} 0.4
 (rem 13.4 1) @EV{} 0.4
 (mod -13.4 1) @EV{} 0.6
 (rem -13.4 1) @EV{} -0.4
@end lisp


@subsubheading See Also:

@ref{floor}, @ref{truncate}

@subsubheading Notes:

The result of @code{mod} is either zero or a 
@term{real}
with the same sign as @param{divisor}.

@node signum
@heading signum (Function)
@syindex signum
@cindex signum


@subsubheading Syntax:

@DefunWithValues{signum, number, signed-prototype}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{signed-prototype}---a @term{number}.

@subsubheading Description:

@code{signum} determines a numerical value that indicates whether
@param{number} is negative, zero, or positive.

For a @term{rational},
@code{signum} returns one of @f{-1}, @f{0}, or @f{1}
according to whether @param{number} is negative, zero, or positive.
For a @term{float}, 
the result is a @term{float} of the same format
whose value is minus one, zero, or one.
For a @term{complex} number @f{z},
@f{(signum @i{z})} is a complex number of the same phase but with unit magnitude,
unless @f{z} is a complex zero, in which case the result is @f{z}.

For @term{rational} @term{arguments}, @code{signum} is a rational function,
but it may be irrational for @term{complex} @term{arguments}.

If @param{number} is a @term{float}, the result is a @term{float}.
If @param{number} is a @term{rational}, the result is a @term{rational}.
If @param{number} is a @term{complex float}, the result is a @term{complex float}.
If @param{number} is a @term{complex rational}, the result is a @term{complex}, 
but it is @term{implementation-dependent} whether that result is a
@term{complex rational} or a @term{complex float}.

@subsubheading Examples:

@lisp
 (signum 0) @EV{} 0
 (signum 99) @EV{} 1
 (signum 4/5) @EV{} 1
 (signum -99/100) @EV{} -1
 (signum 0.0) @EV{} 0.0
 (signum #c(0 33)) @EV{} #C(0.0 1.0)
 (signum #c(7.5 10.0)) @EV{} #C(0.6 0.8)
 (signum #c(0.0 -14.7)) @EV{} #C(0.0 -1.0)
 (eql (signum -0.0) -0.0) @EV{} @term{true}
@end lisp


@subsubheading See Also:

@ref{FloatSubstitutability, Section 12.1.3.3 (Rule of Float Substitutability)}

@subsubheading Notes:
@lisp
 (signum x) @EQ{} (if (zerop x) x (/ x (abs x)))
@end lisp



@node sqrt; isqrt
@heading sqrt, isqrt (Function)
@syindex sqrt
@cindex sqrt
@syindex isqrt
@cindex isqrt
@anchor{sqrt}


@subsubheading Syntax:

@DefunWithValues{sqrt, number, root}
@DefunWithValues{isqrt, natural, natural-root}

@subsubheading Arguments and Values:

@param{number}, @param{root}---a @term{number}.

@param{natural}, @param{natural-root}---a non-negative @term{integer}.

@subsubheading Description:

@code{sqrt} and @code{isqrt} compute square roots.

@code{sqrt} returns the @term{principal} square root of @param{number}.
If the @param{number} is not a @term{complex} but is negative,
then the result is a @term{complex}.

@code{isqrt} returns the greatest @term{integer} 
less than or equal to the exact positive square root of @param{natural}.

If @param{number} is a positive @term{rational},
it is @term{implementation-dependent} 
whether @param{root} is a @term{rational} or a @term{float}.
If @param{number} is a negative @term{rational},
it is @term{implementation-dependent} 
whether @param{root} is a @term{complex rational} or a @term{complex float}.

The mathematical definition of complex square root (whether or not
minus zero is supported) follows:

@f{(sqrt @i{x}) = (exp (/ (log @i{x}) 2))}


The branch cut for square root lies along the negative real axis,
continuous with quadrant II.
The range consists of the right half-plane, including the non-negative
imaginary axis and excluding the negative imaginary axis.

@subsubheading Examples:

@lisp
 (sqrt 9.0) @EV{} 3.0
 (sqrt -9.0) @EV{} #C(0.0 3.0)
 (isqrt 9) @EV{} 3
 (sqrt 12) @EV{} 3.4641016
 (isqrt 12) @EV{} 3
 (isqrt 300) @EV{} 17
 (isqrt 325) @EV{} 18
 (sqrt 25)
@EV{} 5
@OV{} 5.0
 (isqrt 25) @EV{} 5
 (sqrt -1) @EV{} #C(0.0 1.0)
 (sqrt #c(0 2)) @EV{} #C(1.0 1.0)
@end lisp


@subsubheading Exceptional Situations:

@Thefunction{sqrt} should signal @code{type-error} if its argument 
is not a @term{number}.

@Thefunction{isqrt} should signal @code{type-error} if its argument 
is not a non-negative @term{integer}.

The functions @code{sqrt} and @code{isqrt} might signal @code{arithmetic-error}.

@subsubheading See Also:

@ref{exp},
@ref{log},
@ref{FloatSubstitutability, Section 12.1.3.3 (Rule of Float Substitutability)}

@subsubheading Notes:

@lisp
 (isqrt x) @EQ{} (values (floor (sqrt x))) 
@end lisp

but it is potentially more efficient.


@node random-state
@heading random-state (System Class)
@syindex random-state
@cindex random-state


@subsubheading Class Precedence List:
@code{random-state},
@code{t}

@subsubheading Description:

A @term{random state} @term{object} contains state
information used by the pseudo-random number generator.
The nature of a @term{random state} @term{object} is @term{implementation-dependent}.
It can be printed out and successfully read back in by the same @term{implementation},
but might not function correctly as a @term{random state} in another @term{implementation}.

@term{Implementations} are required to provide a read syntax for
@term{objects} @oftype{random-state}, but the specific nature of that syntax 
is @term{implementation-dependent}.

@subsubheading See Also:

@ref{*random-state*},
@ref{random},
@ref{PrintingRandomStates, Section 22.1.3.10 (Printing Random States)}


@node make-random-state
@heading make-random-state (Function)
@syindex make-random-state
@cindex make-random-state


@subsubheading Syntax:

@DefunWithValues{make-random-state, @opt{} state, new-state}

@subsubheading Arguments and Values:

@param{state}---a @term{random state}, or @nil{}, or @code{t}.
@Default{@nil{}}

@param{new-state}---a @term{random state} @term{object}.

@subsubheading Description:

Creates a @term{fresh} @term{object} @oftype{random-state} suitable
for use as @thevalueof{*random-state*}.

If @param{state} is a @term{random state} @term{object},
the @param{new-state} is a @term{copy}@sub5{} of that @term{object}.
If @param{state} is @nil{},
the @param{new-state} is a @term{copy}@sub5{} of the @term{current random state}.
If @param{state} is @code{t},
the @param{new-state} is a @term{fresh} @term{random state} @term{object}
that has been randomly initialized by some means.

@subsubheading Examples:

@lisp
 (let* ((rs1 (make-random-state nil))
        (rs2 (make-random-state t))
        (rs3 (make-random-state rs2))
        (rs4 nil))
   (list (loop for i from 1 to 10 
               collect (random 100)
               when (= i 5)
                do (setq rs4 (make-random-state)))
         (loop for i from 1 to 10 collect (random 100 rs1))
         (loop for i from 1 to 10 collect (random 100 rs2))
         (loop for i from 1 to 10 collect (random 100 rs3))
         (loop for i from 1 to 10 collect (random 100 rs4))))
@EV{} ((29 25 72 57 55 68 24 35 54 65)
    (29 25 72 57 55 68 24 35 54 65)
    (93 85 53 99 58 62 2 23 23 59)
    (93 85 53 99 58 62 2 23 23 59)
    (68 24 35 54 65 54 55 50 59 49))
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{state, a @term{random state}\, or @nil{}\, or @code{t}}

@subsubheading See Also:

@ref{random}, @ref{*random-state*}

@subsubheading Notes:

One important use of @code{make-random-state} is to allow the same
series of pseudo-random @term{numbers} to be generated many times within a 
single program.


@node random
@heading random (Function)
@syindex random
@cindex random


@subsubheading Syntax:

@DefunWithValues{random, limit @opt{} random-state, random-number}

@subsubheading Arguments and Values:

@param{limit}---a positive @term{integer},
or a positive @term{float}.

@param{random-state}---a @term{random state}.
@Default{the @term{current random state}}

@param{random-number}---a non-negative @term{number}
less than @param{limit} 
and of the same @term{type} as @param{limit}.

@subsubheading Description:

Returns a pseudo-random number that is a non-negative @term{number}
less than @param{limit} and of the same @term{type} as @param{limit}.

The @param{random-state}, which is modified by this function,
encodes the internal state maintained by the random number generator.

An approximately uniform choice distribution is used.  If @param{limit}
is an @term{integer}, each of the possible results occurs with
(approximate) probability 1/@param{limit}.

@subsubheading Examples:

@lisp
 (<= 0 (random 1000) 1000) @EV{} @term{true}
 (let ((state1 (make-random-state))
       (state2 (make-random-state)))
   (= (random 1000 state1) (random 1000 state2))) @EV{} @term{true}
@end lisp


@subsubheading Side Effects:

The @param{random-state} is modified.

@subsubheading Exceptional Situations:

@Shouldchecktype{limit, a positive @term{integer} or a positive @term{real}}

@subsubheading See Also:

@ref{make-random-state}, @ref{*random-state*}

@subsubheading Notes:

See @CLtL{}@spc{}for information about generating random numbers.


@node random-state-p
@heading random-state-p (Function)
@syindex random-state-p
@cindex random-state-p


@subsubheading Syntax:

@DefunWithValues{random-state-p, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, random-state}

@subsubheading Examples:

@lisp
 (random-state-p *random-state*) @EV{} @term{true}
 (random-state-p (make-random-state)) @EV{} @term{true}
 (random-state-p 'test-function) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{make-random-state}, @ref{*random-state*}

@subsubheading Notes:

@lisp
 (random-state-p @param{object}) @EQ{} (typep @param{object} 'random-state)
@end lisp



@node *random-state*
@heading *random-state* (Variable)
@syindex *random-state*
@cindex *random-state*


@subsubheading Value Type:

a @term{random state}.

@subsubheading Initial Value:

@term{implementation-dependent}.

@subsubheading Description:

The @term{current random state}, which is used, for example,
by @thefunction{random} when a @term{random state} is not explicitly supplied.

@subsubheading Examples:

@lisp
 (random-state-p *random-state*) @EV{} @term{true}
 (setq snap-shot (make-random-state))
 ;; The series from any given point is random,
 ;; but if you backtrack to that point, you get the same series.
 (list (loop for i from 1 to 10 collect (random))
       (let ((*random-state* snap-shot))
         (loop for i from 1 to 10 collect (random)))
       (loop for i from 1 to 10 collect (random))
       (let ((*random-state* snap-shot))
         (loop for i from 1 to 10 collect (random))))
@EV{} ((19 16 44 19 96 15 76 96 13 61)
    (19 16 44 19 96 15 76 96 13 61)
    (16 67 0 43 70 79 58 5 63 50)
    (16 67 0 43 70 79 58 5 63 50))
@end lisp


@subsubheading Affected By:

The @term{implementation}.

@code{random}.

@subsubheading See Also:

@ref{make-random-state},
@ref{random},
@ref{random-state}

@subsubheading Notes:

@term{Binding} @code{*random-state*} to a different 
@term{random state} @term{object} correctly saves and 
restores the old @term{random state} @term{object}.


@node numberp
@heading numberp (Function)
@syindex numberp
@cindex numberp


@subsubheading Syntax:

@DefunWithValues{numberp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, number}

@subsubheading Examples:

@lisp
 (numberp 12) @EV{} @term{true}
 (numberp (expt 2 130)) @EV{} @term{true}
 (numberp #c(5/3 7.2)) @EV{} @term{true}
 (numberp nil) @EV{} @term{false}
 (numberp (cons 1 2)) @EV{} @term{false}
@end lisp


@subsubheading Notes:

@lisp
 (numberp @param{object}) @EQ{} (typep @param{object} 'number)
@end lisp



@node cis
@heading cis (Function)
@syindex cis
@cindex cis


@subsubheading Syntax:

@DefunWithValues{cis, radians, number}

@subsubheading Arguments and Values:

@param{radians}---a @term{real}.

@param{number}---a @term{complex}.

@subsubheading Description:

@code{cis} returns the value of@tie{}@mat{@i{e}^i@cdot{}@spc{}@i{radians}},
which is a @term{complex} in which the
real part is equal to the cosine of @param{radians}, and the 
imaginary part is equal to the sine of @param{radians}.

@subsubheading Examples:
@lisp
 (cis 0) @EV{} #C(1.0 0.0)
@end lisp


@subsubheading See Also:

@ref{FloatSubstitutability, Section 12.1.3.3 (Rule of Float Substitutability)}


@node complex (Function)
@heading complex (Function)
@syindex complex
@cindex complex


@subsubheading Syntax:

@DefunWithValues{complex, realpart @opt{} imagpart, complex}

@subsubheading Arguments and Values:

@param{realpart}---a @term{real}.

@param{imagpart}---a @term{real}.

@param{complex}---a @term{rational} or a @term{complex}.

@subsubheading Description:

@code{complex} returns a @term{number} 
whose real      part is @param{realpart} 
and whose imaginary part is @param{imagpart}.

If @param{realpart} is a @term{rational}
and @param{imagpart} is the @term{rational} number zero, 
the result of @code{complex} is @param{realpart}, a @term{rational}.
Otherwise, the result is a @term{complex}.

If either @param{realpart} or @param{imagpart} is a @term{float},
the non-@term{float} is converted to a @term{float} 
before the @term{complex} is created.
If @param{imagpart} is not supplied, the imaginary part is a 
zero of the same @term{type} as @param{realpart}; @ie{}
@tt{(coerce 0 (type-of @param{realpart}))} is
effectively used.  


Type upgrading implies a movement upwards in the type 
hierarchy lattice.  
In the case of @term{complexes}, the @param{type-specifier} 
@reviewer{Barmar: What type specifier?}
must be a subtype of 
@tt{(upgraded-complex-part-type @param{type-specifier})}.
If @param{type-specifier1} is a subtype of @param{type-specifier2}, then
@tt{(upgraded-complex-element-type '@param{type-specifier1})}
must also be a subtype of
@tt{(upgraded-complex-element-type '@param{type-specifier2})}.  
Two disjoint types can be upgraded into 
the same thing.


@subsubheading Examples:
@lisp
 (complex 0) @EV{} 0
 (complex 0.0) @EV{} #C(0.0 0.0)
 (complex 1 1/2) @EV{} #C(1 1/2)
 (complex 1 .99) @EV{} #C(1.0 0.99)
 (complex 3/2 0.0) @EV{} #C(1.5 0.0)
@end lisp


@subsubheading See Also:

@ref{realpart},
@ref{imagpart},
@ref{SharpsignC, Section 2.4.8.11 (Sharpsign C)}


@node complexp
@heading complexp (Function)
@syindex complexp
@cindex complexp


@subsubheading Syntax:

@DefunWithValues{complexp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, complex}

@subsubheading Examples:
@lisp
 (complexp 1.2d2) @EV{} @term{false}
 (complexp #c(5/3 7.2)) @EV{} @term{true}

@end lisp


@subsubheading See Also:

@ref{complex (Function)} (@term{function} and @term{type}), @ref{typep}

@subsubheading Notes:

@lisp
 (complexp @param{object}) @EQ{} (typep @param{object} 'complex)
@end lisp



@node conjugate
@heading conjugate (Function)
@syindex conjugate
@cindex conjugate


@subsubheading Syntax:

@DefunWithValues{conjugate, number, conjugate}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{conjugate}---a @term{number}.

@subsubheading Description:

Returns the complex conjugate of @param{number}.
The conjugate of a 
@term{real}
number is itself.  

@subsubheading Examples:

@lisp
 (conjugate #c(0 -1)) @EV{} #C(0 1)
 (conjugate #c(1 1)) @EV{} #C(1 -1)
 (conjugate 1.5) @EV{} 1.5
 (conjugate #C(3/5 4/5)) @EV{} #C(3/5 -4/5)
 (conjugate #C(0.0D0 -1.0D0)) @EV{} #C(0.0D0 1.0D0)
 (conjugate 3.7) @EV{} 3.7
@end lisp


@subsubheading Notes:

For a @term{complex} number @f{z},

@lisp
 (conjugate z) @EQ{} (complex (realpart z) (- (imagpart z)))
@end lisp



@node phase
@heading phase (Function)
@syindex phase
@cindex phase


@subsubheading Syntax:

@DefunWithValues{phase, number, phase}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{phase}---a @term{number}.

@subsubheading Description:

@code{phase} 
returns the phase 
of @param{number} (the angle part of its polar representation)
in radians, in the range 
@mat{-@pi{}} (exclusive) if minus zero is not supported, or 
@mat{-@pi{}} (inclusive) if minus zero is supported, 
to @mat{@pi{}} (inclusive).  The phase of a positive 
@term{real}
number
is zero; that of a negative 
@term{real}
number is @mat{@pi{}}.
The phase of zero is defined to be zero.

If @param{number} is a @term{complex float},  
the result is a @term{float} of the same @term{type} 
as the components of @param{number}.
If @param{number} is a @term{float}, the result is a
@term{float} of the same @term{type}.
If @param{number} is a @term{rational} or a @term{complex rational},
the result is a @term{single float}.  

The branch cut for @code{phase} lies along the negative real
axis, continuous with quadrant II.  The range consists of that portion of
the real axis between @mat{-@pi{}} (exclusive) and@tie{}@mat{@pi{}} (inclusive).

The mathematical definition of @code{phase} is as follows:

@f{(phase @i{x}) = (atan (imagpart @i{x}) (realpart @i{x}))}

@subsubheading Examples:

@lisp
 (phase 1) @EV{} 0.0s0
 (phase 0) @EV{} 0.0s0
 (phase (cis 30)) @EV{} -1.4159266
 (phase #c(0 1)) @EV{} 1.5707964
@end lisp


@subsubheading Exceptional Situations:

Should signal @code{type-error} if its argument is not a @term{number}.
Might signal @code{arithmetic-error}.

@subsubheading See Also:

@ref{FloatSubstitutability, Section 12.1.3.3 (Rule of Float Substitutability)}


@node realpart; imagpart
@heading realpart, imagpart (Function)
@syindex realpart
@cindex realpart
@syindex imagpart
@cindex imagpart
@anchor{realpart}
@anchor{imagpart}


@subsubheading Syntax:

@DefunWithValues{realpart, number, real}
@DefunWithValues{imagpart, number, real}

@subsubheading Arguments and Values:

@param{number}---a @term{number}.

@param{real}---a @term{real}.

@subsubheading Description:

@code{realpart} and @code{imagpart} return the real and
imaginary parts of @param{number} respectively.
If @param{number} is 
@term{real},
then @code{realpart} returns @param{number} and @code{imagpart}
returns @f{(* 0 @param{number})}, which has the effect that the
imaginary part of a @term{rational} is @f{0} and that of
a @term{float} is a floating-point zero of the same format.

@subsubheading Examples:

@lisp
 (realpart #c(23 41)) @EV{} 23
 (imagpart #c(23 41.0)) @EV{} 41.0
 (realpart #c(23 41.0)) @EV{} 23.0
 (imagpart 23.0) @EV{} 0.0
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{number, a @term{number}}

@subsubheading See Also:

@ref{complex (Function)}


@node upgraded-complex-part-type
@heading upgraded-complex-part-type (Function)
@syindex upgraded-complex-part-type
@cindex upgraded-complex-part-type



@subsubheading Syntax:

@DefunWithValues{upgraded-complex-part-type, typespec @opt{} environment, upgraded-typespec}

@subsubheading Arguments and Values:

@param{typespec}---a @term{type specifier}.

@param{environment}---an @term{environment} @term{object}.
@Default{@nil{}, denoting the @term{null lexical environment}
and the and current @term{global environment}}

@param{upgraded-typespec}---a @term{type specifier}.

@subsubheading Description:

@code{upgraded-complex-part-type} returns the part type of the
most specialized @term{complex} number representation that can
hold parts of @term{type} @term{typespec}.

The @param{typespec} is a @term{subtype} of 
(and possibly @term{type equivalent} to)
the @param{upgraded-typespec}.

The purpose of @code{upgraded-complex-part-type}
is to reveal how an implementation does its @term{upgrading}.

@subsubheading See Also:

@ref{complex (Function)} (@term{function} and @term{type})

@subsubheading Notes:



@node realp
@heading realp (Function)
@syindex realp
@cindex realp



@subsubheading Syntax:

@DefunWithValues{realp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, real}

@subsubheading Examples:
@lisp
 (realp 12) @EV{} @term{true}
 (realp #c(5/3 7.2)) @EV{} @term{false}
 (realp nil) @EV{} @term{false}
 (realp (cons 1 2)) @EV{} @term{false}
@end lisp


@subsubheading Notes:

@lisp
 (realp @param{object}) @EQ{} (typep @param{object} 'real)
@end lisp



@node numerator; denominator
@heading numerator, denominator (Function)
@syindex numerator
@cindex numerator
@syindex denominator
@cindex denominator


@subsubheading Syntax:

@DefunWithValues{numerator, rational, numerator}
@DefunWithValues{denominator, rational, denominator}

@subsubheading Arguments and Values:

@param{rational}---a @term{rational}.

@param{numerator}---an @term{integer}.

@param{denominator}---a positive @term{integer}.

@subsubheading Description:

@code{numerator} and @code{denominator} reduce @param{rational}
to canonical form and compute the numerator or denominator of that number.

@code{numerator} and @code{denominator} return the numerator 
or denominator of the canonical form of @param{rational}.

If @param{rational} is an @term{integer}, 
@code{numerator} returns @param{rational}
and @code{denominator} returns 1.

@subsubheading Examples:
@lisp
 (numerator 1/2) @EV{} 1
 (denominator 12/36) @EV{} 3
 (numerator -1) @EV{} -1
 (denominator (/ -33)) @EV{} 33
 (numerator (/ 8 -6)) @EV{} -4
 (denominator (/ 8 -6)) @EV{} 3
@end lisp


@subsubheading See Also:

@ref{/ (Function)}

@subsubheading Notes:
@lisp
 (gcd (numerator x) (denominator x)) @EV{} 1
@end lisp



@node rational; rationalize
@heading rational, rationalize (Function)
@syindex rational
@cindex rational
@syindex rationalize
@cindex rationalize
@anchor{rational}


@subsubheading Syntax:

@DefunWithValues{rational, number, rational}
@DefunWithValues{rationalize, number, rational}

@subsubheading Arguments and Values:

@param{number}---a @term{real}.

@param{rational}---a @term{rational}.

@subsubheading Description:

@code{rational} and @code{rationalize} convert 
@term{reals}
to @term{rationals}.

If @param{number} is already @term{rational}, it is returned.

If @param{number} is a @term{float}, 
@code{rational} returns a @term{rational} 
that is mathematically equal in value to the @term{float}. 
@code{rationalize} returns a @term{rational} that
approximates the @term{float} to the accuracy of 
the underlying floating-point representation. 

@code{rational} assumes that the @term{float} is completely accurate.

@code{rationalize} assumes that the
@term{float} is accurate only to the precision of the
floating-point representation.

@subsubheading Examples:
@lisp
 (rational 0) @EV{} 0
 (rationalize -11/100) @EV{} -11/100
 (rational .1) @EV{} 13421773/134217728 ;implementation-dependent
 (rationalize .1) @EV{} 1/10
@end lisp


@subsubheading Affected By:

The @term{implementation}.

@subsubheading Exceptional Situations:

@Shouldchecktype{number, a @term{real}}
Might signal @code{arithmetic-error}.

@subsubheading Notes:

It is always the case that

@lisp
 (float (rational x) x) @EQ{} x
@end lisp

and

@lisp
 (float (rationalize x) x) @EQ{} x
@end lisp

That is, rationalizing a @term{float} by either method
and then converting it back
to a @term{float} 
of the same format produces the original @param{number}.

@node rationalp
@heading rationalp (Function)
@syindex rationalp
@cindex rationalp


@subsubheading Syntax:

@DefunWithValues{rationalp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, rational}

@subsubheading Examples:

@lisp
 (rationalp 12) @EV{} @term{true}
 (rationalp 6/5) @EV{} @term{true}
 (rationalp 1.212) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{rational}

@subsubheading Notes:
@lisp
 (rationalp @param{object}) @EQ{} (typep @param{object} 'rational)
@end lisp



@node ash
@heading ash (Function)
@syindex ash
@cindex ash


@subsubheading Syntax:

@DefunWithValues{ash, integer count, shifted-integer}

@subsubheading Arguments and Values:

@param{integer}---an @term{integer}.

@param{count}---an @term{integer}.

@param{shifted-integer}---an @term{integer}.

@subsubheading Description:

@code{ash} performs the arithmetic shift operation on the binary
representation of @param{integer}, which is treated as if it were binary.

@code{ash} shifts @param{integer} arithmetically left by @param{count} bit
positions if @param{count} is positive,
or right @param{count} bit positions if @param{count} is negative.
The shifted value of the same sign 
as @param{integer} is returned.

Mathematically speaking, @code{ash} performs the computation
@f{floor}(@param{integer}@centerdot{} @mat{2^@param{count}}).
Logically, @code{ash} 
moves all of the bits in @param{integer} to the left,
adding zero-bits at the right, or moves them to the right,
discarding bits.  

@code{ash} is defined to behave as if @param{integer} were 
represented in two's complement form, regardless of
how @term{integers} are represented internally.
@subsubheading Examples:
@lisp
 (ash 16 1) @EV{} 32
 (ash 16 0) @EV{} 16
 (ash 16 -1) @EV{} 8
 (ash -100000000000000000000000000000000 -100) @EV{} -79
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{integer, an @term{integer}}
@Shouldchecktype{count, an @term{integer}}
Might signal @code{arithmetic-error}.

@subsubheading Notes:

@lisp
 (logbitp @param{j} (ash @param{n} @param{k}))
 @EQ{} (and (>= @param{j} @param{k}) (logbitp (- @param{j} @param{k}) @param{n}))
@end lisp


@node integer-length
@heading integer-length (Function)
@syindex integer-length
@cindex integer-length


@subsubheading Syntax:

@DefunWithValues{integer-length, integer, number-of-bits}

@subsubheading Arguments and Values:

@param{integer}---an @term{integer}.

@param{number-of-bits}---a non-negative @term{integer}.

@subsubheading Description:

Returns the number of bits needed to represent @param{integer}
in binary two's-complement format.

@subsubheading Examples:

@lisp
 (integer-length 0) @EV{} 0
 (integer-length 1) @EV{} 1
 (integer-length 3) @EV{} 2
 (integer-length 4) @EV{} 3
 (integer-length 7) @EV{} 3
 (integer-length -1) @EV{} 0
 (integer-length -4) @EV{} 2
 (integer-length -7) @EV{} 3
 (integer-length -8) @EV{} 3
 (integer-length (expt 2 9)) @EV{} 10
 (integer-length (1- (expt 2 9))) @EV{} 9
 (integer-length (- (expt 2 9))) @EV{} 9
 (integer-length (- (1+ (expt 2 9)))) @EV{} 10
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{integer, an @term{integer}}

@subsubheading Notes:

This function could have been defined by:

@lisp
(defun integer-length (integer)
  (ceiling (log (if (minusp integer)
                    (- integer)
                    (1+ integer))
                2)))
@end lisp


If @param{integer} is non-negative, then its value can be represented
in unsigned binary form in a field whose width in bits is
no smaller than @tt{(integer-length @param{integer})}.
Regardless of the sign of @param{integer}, its value can be
represented in signed binary two's-complement form in a field
whose width in bits is no smaller than @tt{(+ (integer-length @param{integer}) 1)}.


@node integerp
@heading integerp (Function)
@syindex integerp
@cindex integerp


@subsubheading Syntax:

@DefunWithValues{integerp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, integer}

@subsubheading Examples:
@lisp
 (integerp 1) @EV{} @term{true}
 (integerp (expt 2 130)) @EV{} @term{true}
 (integerp 6/5) @EV{} @term{false}
 (integerp nil) @EV{} @term{false}

@end lisp


@subsubheading Notes:

@lisp
 (integerp @param{object}) @EQ{} (typep @param{object} 'integer)
@end lisp



@node parse-integer
@heading parse-integer (Function)
@syindex parse-integer
@cindex parse-integer


@subsubheading Syntax:

@DefunWithValues{parse-integer, string @key{} start end radix junk-allowed, integer\, pos}

@subsubheading Arguments and Values:

@param{string}---a @term{string}.

@param{start}, @param{end}---@term{bounding index designators} of @param{string}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{radix}---a @term{radix}.
@Default{@f{10}}

@param{junk-allowed}---a @term{generalized boolean}.
@Default{@term{false}}

@param{integer}---an @term{integer} or @term{false}.

@param{pos}---a @term{bounding index} of @param{string}.

@subsubheading Description:

@code{parse-integer} parses an @term{integer} in the specified @param{radix}
from the substring of @param{string} delimited by @param{start} and @param{end}.

@code{parse-integer} expects an optional sign (@f{+} or @f{-}) followed by
a a non-empty sequence of digits to be interpreted in the specified @param{radix}.
Optional leading and trailing @term{whitespace}@sub1{} is ignored.

@code{parse-integer} does not recognize the syntactic radix-specifier
prefixes @f{#O}, @f{#B}, @f{#X}, and @f{#@i{n}R}, 
nor does it recognize a trailing decimal point.

If @param{junk-allowed} is @term{false}, an error @oftype{parse-error} is 
signaled if substring does not consist entirely of the representation of a 
signed @term{integer}, possibly surrounded on either side by @term{whitespace}@sub1{} 
@term{characters}.

The first @term{value} returned is either
the @term{integer} that was parsed,
or else @nil{}@spc{}if no syntactically correct @term{integer} 
was seen but @param{junk-allowed} was @term{true}.

The second @term{value} is either 
the index into the @term{string} of the delimiter that terminated the parse,
or the upper @term{bounding index} of the substring if the parse terminated at
the end of the substring (as is always the case if @param{junk-allowed} 
is @term{false}).

@subsubheading Examples:
@lisp
 (parse-integer "123") @EV{} 123, 3
 (parse-integer "123" :start 1 :radix 5) @EV{} 13, 3
 (parse-integer "no-integer" :junk-allowed t) @EV{} NIL, 0
@end lisp


@subsubheading Exceptional Situations:

If @param{junk-allowed} is @term{false}, 
an error is signaled if substring does not consist entirely of
the representation of an @term{integer}, 
possibly surrounded on either side by
@term{whitespace}@sub1{} characters.


@node boole
@heading boole (Function)
@syindex boole
@cindex boole


@subsubheading Syntax:

@DefunWithValues{boole, op integer-1 integer-2, result-integer}

@subsubheading Arguments and Values:

@param{Op}---a @term{bit-wise logical operation specifier}.

@param{integer-1}---an @term{integer}.

@param{integer-2}---an @term{integer}.

@param{result-integer}---an @term{integer}.

@subsubheading Description:

@code{boole} performs bit-wise logical operations on
@param{integer-1} and @param{integer-2}, which are treated as if
they were binary and in two's complement representation.

The operation to be performed and the return value are determined by 
@param{op}.  

@code{boole} returns the values 
specified for any @param{op} in @thenextfigure{}.


@float Figure,fig12.17
@cartouche
@multitable{@code{boole-andc1}}{and complement of @param{integer-1} with @param{integer-2}}
@headitem Op @tab Result
@item @code{boole-1} @tab @param{integer-1}
@item @code{boole-2} @tab @param{integer-2}
@item @code{boole-andc1} @tab and complement of @param{integer-1} with @param{integer-2}
@item @code{boole-andc2} @tab and @param{integer-1} with complement of @param{integer-2}
@item @code{boole-and} @tab and
@item @code{boole-c1} @tab complement of @param{integer-1}
@item @code{boole-c2} @tab complement of @param{integer-2}
@item @code{boole-clr} @tab always 0 (all zero bits)
@item @code{boole-eqv} @tab equivalence (exclusive nor)
@item @code{boole-ior} @tab inclusive or
@item @code{boole-nand} @tab not-and
@item @code{boole-nor} @tab not-or
@item @code{boole-orc1} @tab or complement of @param{integer-1} with @param{integer-2}
@item @code{boole-orc2} @tab or @param{integer-1} with complement of @param{integer-2}
@item @code{boole-set} @tab always -1 (all one bits)
@item @code{boole-xor} @tab exclusive or
@end multitable
@end cartouche
@caption{Bit-Wise Logical Operations}
@end float


@subsubheading Examples:

@lisp
 (boole boole-ior 1 16) @EV{} 17
 (boole boole-and -2 5) @EV{} 4
 (boole boole-eqv 17 15) @EV{} -31

;;; These examples illustrate the result of applying BOOLE and each
;;; of the possible values of OP to each possible combination of bits.
 (progn
   (format t "~&Results of (BOOLE <op> #b0011 #b0101) ...~
           ~%---Op-------Decimal-----Binary----Bits---~%")
   (dolist (symbol '(boole-1     boole-2    boole-and  boole-andc1
                     boole-andc2 boole-c1   boole-c2   boole-clr
                     boole-eqv   boole-ior  boole-nand boole-nor
                     boole-orc1  boole-orc2 boole-set  boole-xor))
     (let ((result (boole (symbol-value symbol) #b0011 #b0101)))
       (format t "~& ~A~13T~3,' D~23T~:*~5,' B~31T ...~4,'0B~%" 
               symbol result (logand result #b1111)))))
@OUT{} Results of (BOOLE <op> #b0011 #b0101) ...
@OUT{} ---Op-------Decimal-----Binary----Bits---
@OUT{}  BOOLE-1       3          11    ...0011
@OUT{}  BOOLE-2       5         101    ...0101
@OUT{}  BOOLE-AND     1           1    ...0001
@OUT{}  BOOLE-ANDC1   4         100    ...0100
@OUT{}  BOOLE-ANDC2   2          10    ...0010
@OUT{}  BOOLE-C1     -4        -100    ...1100
@OUT{}  BOOLE-C2     -6        -110    ...1010
@OUT{}  BOOLE-CLR     0           0    ...0000
@OUT{}  BOOLE-EQV    -7        -111    ...1001
@OUT{}  BOOLE-IOR     7         111    ...0111
@OUT{}  BOOLE-NAND   -2         -10    ...1110
@OUT{}  BOOLE-NOR    -8       -1000    ...1000
@OUT{}  BOOLE-ORC1   -3         -11    ...1101
@OUT{}  BOOLE-ORC2   -5        -101    ...1011
@OUT{}  BOOLE-SET    -1          -1    ...1111
@OUT{}  BOOLE-XOR     6         110    ...0110
@EV{} NIL
@end lisp


@subsubheading Exceptional Situations:

Should signal @code{type-error} if its first argument is not a 
@term{bit-wise logical operation specifier} or if any subsequent argument is not
an @term{integer}.

@subsubheading See Also:

@ref{logand}

@subsubheading Notes:

In general,

@lisp
 (boole boole-and x y) @EQ{} (logand x y)
@end lisp


@term{Programmers} who would prefer to use numeric indices rather than 
@term{bit-wise logical operation specifiers} can get an equivalent effect
by a technique such as the following:

@lisp
;; The order of the values in this `table' are such that
;; (logand (boole (elt boole-n-vector n) #b0101 #b0011) #b1111) => n
 (defconstant boole-n-vector
    (vector boole-clr   boole-and  boole-andc1 boole-2
            boole-andc2 boole-1    boole-xor   boole-ior
            boole-nor   boole-eqv  boole-c1    boole-orc1
            boole-c2    boole-orc2 boole-nand  boole-set))
@EV{} BOOLE-N-VECTOR
 (proclaim '(inline boole-n))
@EV{} @term{implementation-dependent}
 (defun boole-n (n integer &rest more-integers)
   (apply #'boole (elt boole-n-vector n) integer more-integers))
@EV{} BOOLE-N
 (boole-n #b0111 5 3) @EV{} 7
 (boole-n #b0001 5 3) @EV{} 1
 (boole-n #b1101 5 3) @EV{} -3
 (loop for n from #b0000 to #b1111 collect (boole-n n 5 3))
@EV{} (0 1 2 3 4 5 6 7 -8 -7 -6 -5 -4 -3 -2 -1)
@end lisp



@node boole-1; boole-2; boole-and; boole-andc1; boole-andc2; boole-c1; boole-+
@heading boole-1, boole-2, boole-and, boole-andc1, boole-andc2, boole-c1, boole-c2, boole-clr, boole-eqv, boole-ior, boole-nand, boole-nor, boole-orc1, boole-orc2, boole-set, boole-xor (Constant Variable)
@syindex boole-1
@cindex boole-1
@syindex boole-2
@cindex boole-2
@syindex boole-and
@cindex boole-and
@syindex boole-andc1
@cindex boole-andc1
@syindex boole-andc2
@cindex boole-andc2
@syindex boole-c1
@cindex boole-c1
@syindex boole-c2
@cindex boole-c2
@syindex boole-clr
@cindex boole-clr
@syindex boole-eqv
@cindex boole-eqv
@syindex boole-ior
@cindex boole-ior
@syindex boole-nand
@cindex boole-nand
@syindex boole-nor
@cindex boole-nor
@syindex boole-orc1
@cindex boole-orc1
@syindex boole-orc2
@cindex boole-orc2
@syindex boole-set
@cindex boole-set
@syindex boole-xor
@cindex boole-xor


@subsubheading Constant Value:

The identity and nature of the @term{values} of each of these @term{variables} 
is @term{implementation-dependent},
except that it must be @term{distinct} from each of the @term{values} of the others,
and it must be a valid first @term{argument} to @thefunction{boole}.

@subsubheading Description:

Each of these @term{constants} has a @term{value} which is one of the 
sixteen possible @term{bit-wise logical operation specifiers}.

@subsubheading Examples:
@lisp
 (boole boole-ior 1 16) @EV{} 17
 (boole boole-and -2 5) @EV{} 4
 (boole boole-eqv 17 15) @EV{} -31
@end lisp


@subsubheading See Also:

@ref{boole}


@node logand; logandc1; logandc2; logeqv; logior; lognand; lognor; lognot; lo+
@heading logand, logandc1, logandc2, logeqv, logior, lognand, lognor, lognot, logorc1, logorc2, logxor (Function)
@syindex logand
@cindex logand
@syindex logandc1
@cindex logandc1
@syindex logandc2
@cindex logandc2
@syindex logeqv
@cindex logeqv
@syindex logior
@cindex logior
@syindex lognand
@cindex lognand
@syindex lognor
@cindex lognor
@syindex lognot
@cindex lognot
@syindex logorc1
@cindex logorc1
@syindex logorc2
@cindex logorc2
@syindex logxor
@cindex logxor
@anchor{logand}
@anchor{lognot}


@subsubheading Syntax:

@DefunWithValues{logand, @rest{} integers, result-integer}
@DefunWithValues{logandc1, integer-1 integer-2, result-integer}
@DefunWithValues{logandc2, integer-1 integer-2, result-integer}
@DefunWithValues{logeqv, @rest{} integers, result-integer}
@DefunWithValues{logior, @rest{} integers, result-integer}
@DefunWithValues{lognand, integer-1 integer-2, result-integer}
@DefunWithValues{lognor, integer-1 integer-2, result-integer}
@DefunWithValues{lognot, integer, result-integer}
@DefunWithValues{logorc1, integer-1 integer-2, result-integer}
@DefunWithValues{logorc2, integer-1 integer-2, result-integer}
@DefunWithValues{logxor, @rest{} integers, result-integer}

@subsubheading Arguments and Values:

@param{integers}---@term{integers}.

@param{integer}---an @term{integer}.

@param{integer-1}---an @term{integer}.

@param{integer-2}---an @term{integer}.

@param{result-integer}---an @term{integer}.

@subsubheading Description:

The @term{functions}
@code{logandc1},
@code{logandc2},
@code{logand},
@code{logeqv},
@code{logior},
@code{lognand},
@code{lognor}, 
@code{lognot},
@code{logorc1}, 
@code{logorc2},
and @code{logxor}
perform bit-wise logical operations on their @term{arguments},
that are treated as if they were binary.

@Thenextfigure{}@spc{}lists the meaning of each of the @term{functions}.
Where an `identity' is shown, it indicates the @term{value} @term{yielded}
by the @term{function} when no @term{arguments} are supplied.


@float Figure,fig12.18
@cartouche
@multitable{@code{logandc1}}{Identity}{and complement of @param{integer-1} with @param{integer-2}}
@headitem Function @tab Identity @tab Operation performed
@item @code{logandc1} @tab --- @tab and complement of @param{integer-1} with @param{integer-2}
@item @code{logandc2} @tab --- @tab and @param{integer-1} with complement of @param{integer-2}
@item @code{logand} @tab @f{-1} @tab and
@item @code{logeqv} @tab @f{-1} @tab equivalence (exclusive nor)
@item @code{logior} @tab @f{0} @tab inclusive or
@item @code{lognand} @tab --- @tab complement of @param{integer-1} and @param{integer-2}
@item @code{lognor} @tab --- @tab complement of @param{integer-1} or @param{integer-2}
@item @code{lognot} @tab --- @tab complement
@item @code{logorc1} @tab --- @tab or complement of @param{integer-1} with @param{integer-2}
@item @code{logorc2} @tab --- @tab or @param{integer-1} with complement of @param{integer-2}
@item @code{logxor} @tab @f{0} @tab exclusive or
@end multitable
@end cartouche
@caption{Bit-wise Logical Operations on Integers}
@end float


Negative @param{integers} are treated as if they were in two's-complement notation.

@subsubheading Examples:

@lisp
 (logior 1 2 4 8) @EV{} 15
 (logxor 1 3 7 15) @EV{} 10
 (logeqv) @EV{} -1
 (logand 16 31) @EV{} 16
 (lognot 0) @EV{} -1
 (lognot 1) @EV{} -2
 (lognot -1) @EV{} 0
 (lognot (1+ (lognot 1000))) @EV{} 999

;;; In the following example, m is a mask.  For each bit in
;;; the mask that is a 1, the corresponding bits in x and y are
;;; exchanged.  For each bit in the mask that is a 0, the 
;;; corresponding bits of x and y are left unchanged.
 (flet ((show (m x y)
          (format t "~%m = #o~6,'0O~%x = #o~6,'0O~%y = #o~6,'0O~%"
                  m x y)))
   (let ((m #o007750)
         (x #o452576)
         (y #o317407))
     (show m x y)
     (let ((z (logand (logxor x y) m)))
       (setq x (logxor z x))
       (setq y (logxor z y))
       (show m x y))))
@OUT{} m = #o007750
@OUT{} x = #o452576
@OUT{} y = #o317407
@OUT{} 
@OUT{} m = #o007750
@OUT{} x = #o457426
@OUT{} y = #o312557
@EV{} NIL
@end lisp


@subsubheading Exceptional Situations:

Should signal @code{type-error} if any argument is not an @term{integer}.

@subsubheading See Also:

@ref{boole}

@subsubheading Notes:

@f{(logbitp @param{k} -1)} returns @term{true} for all values of @param{k}.

Because the following functions are not associative,
they take exactly two arguments rather than any number
of arguments.

@lisp
 (lognand @param{n1} @param{n2}) @EQ{} (lognot (logand @param{n1} @param{n2}))
 (lognor @param{n1} @param{n2}) @EQ{} (lognot (logior @param{n1} @param{n2}))
 (logandc1 @param{n1} @param{n2}) @EQ{} (logand (lognot @param{n1}) @param{n2})
 (logandc2 @param{n1} @param{n2}) @EQ{} (logand @param{n1} (lognot @param{n2}))
 (logiorc1 @param{n1} @param{n2}) @EQ{} (logior (lognot @param{n1}) @param{n2})
 (logiorc2 @param{n1} @param{n2}) @EQ{} (logior @param{n1} (lognot @param{n2}))
 (logbitp @param{j} (lognot @param{x})) @EQ{} (not (logbitp @param{j} @param{x}))
@end lisp



@node logbitp
@heading logbitp (Function)
@syindex logbitp
@cindex logbitp


@subsubheading Syntax:

@DefunWithValues{logbitp, index integer, generalized-boolean}

@subsubheading Arguments and Values:

@param{index}---a non-negative @term{integer}.

@param{integer}---an @term{integer}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@code{logbitp} is used to test the value of a particular bit 
in @param{integer}, that is treated as if it were binary.
The value of @code{logbitp} is @term{true} if the bit in @param{integer} 
whose index is @param{index} (that is, its weight is @mat{2^@i{index}}) 
is a one-bit; otherwise it is @term{false}.

Negative @param{integers} are treated as if they were in 
two's-complement notation.

@subsubheading Examples:
@lisp
 (logbitp 1 1) @EV{} @term{false}
 (logbitp 0 1) @EV{} @term{true}
 (logbitp 3 10) @EV{} @term{true}
 (logbitp 1000000 -1) @EV{} @term{true}
 (logbitp 2 6) @EV{} @term{true}
 (logbitp 0 6) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{index, a non-negative @term{integer}}
@Shouldchecktype{integer, an @term{integer}}

@subsubheading Notes:

@lisp
 (logbitp @param{k} @param{n}) @EQ{} (ldb-test (byte 1 @param{k}) @param{n})
@end lisp



@node logcount
@heading logcount (Function)
@syindex logcount
@cindex logcount


@subsubheading Syntax:

@DefunWithValues{logcount, integer, number-of-on-bits}

@subsubheading Arguments and Values:

@param{integer}---an @term{integer}.

@param{number-of-on-bits}---a non-negative @term{integer}.

@subsubheading Description:

Computes and returns the number of bits 
in the two's-complement binary representation of @param{integer}
that are `on' or `set'.
If @param{integer} is negative, the @f{0} bits are counted;
otherwise, the @f{1} bits are counted.

@subsubheading Examples:

@lisp
 (logcount 0) @EV{} 0
 (logcount -1) @EV{} 0
 (logcount 7) @EV{} 3
 (logcount  13) @EV{} 3 ;Two's-complement binary: ...0001101
 (logcount -13) @EV{} 2 ;Two's-complement binary: ...1110011
 (logcount  30) @EV{} 4 ;Two's-complement binary: ...0011110
 (logcount -30) @EV{} 4 ;Two's-complement binary: ...1100010
 (logcount (expt 2 100)) @EV{} 1
 (logcount (- (expt 2 100))) @EV{} 100
 (logcount (- (1+ (expt 2 100)))) @EV{} 1
@end lisp


@subsubheading Exceptional Situations:

Should signal @code{type-error} if its argument is not an @term{integer}.

@subsubheading Notes:

Even if the @term{implementation} does not represent @term{integers} internally
in two's complement binary, @code{logcount} behaves as if it did.

The following identity always holds:

@lisp
    (logcount @param{x})
 @EQ{} (logcount (- (+ @param{x} 1)))
 @EQ{} (logcount (lognot @param{x}))
@end lisp



@node logtest
@heading logtest (Function)
@syindex logtest
@cindex logtest


@subsubheading Syntax:

@DefunWithValues{logtest, integer-1 integer-2, generalized-boolean}

@subsubheading Arguments and Values:

@param{integer-1}---an @term{integer}.

@param{integer-2}---an @term{integer}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Returns @term{true} if any of the bits designated by the 1's 
in @param{integer-1} is 1 in @param{integer-2};
otherwise it is @term{false}.
@param{integer-1} and @param{integer-2} are treated as if they were binary.

Negative @param{integer-1} and @param{integer-2} are treated as if
they were represented in two's-complement binary.

@subsubheading Examples:

@lisp
 (logtest 1 7) @EV{} @term{true}
 (logtest 1 2) @EV{} @term{false}
 (logtest -2 -1) @EV{} @term{true}
 (logtest 0 -1) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{integer-1, an @term{integer}}
@Shouldchecktype{integer-2, an @term{integer}}

@subsubheading Notes:

@lisp
 (logtest @param{x} @param{y}) @EQ{} (not (zerop (logand @param{x} @param{y})))
@end lisp



@node byte; byte-size; byte-position
@heading byte, byte-size, byte-position (Function)
@syindex byte
@cindex byte
@syindex byte-size
@cindex byte-size
@syindex byte-position
@cindex byte-position
@anchor{byte}
@anchor{byte-size}
@anchor{byte-position}


@subsubheading Syntax:

@DefunWithValues{byte, size position, bytespec}

@DefunWithValues{byte-size, bytespec, size}
@DefunWithValues{byte-position, bytespec, position}

@subsubheading Arguments and Values:

@param{size}, @param{position}---a non-negative @term{integer}.

@param{bytespec}---a @term{byte specifier}.

@subsubheading Description:

@code{byte} returns a @term{byte specifier} that indicates
a @term{byte} of width @param{size} and whose bits have weights            
@mat{2^@param{position} + @param{size} - 1} through @mat{2^@param{position}},
and whose representation is
@term{implementation-dependent}.                 

@code{byte-size} returns the number of bits specified by @param{bytespec}.

@code{byte-position} returns the position specified by @param{bytespec}.

@subsubheading Examples:

@lisp
 (setq b (byte 100 200)) @EV{} #<BYTE-SPECIFIER size 100 position 200>
 (byte-size b) @EV{} 100
 (byte-position b) @EV{} 200
@end lisp


@subsubheading See Also:

@ref{ldb}, @ref{dpb}

@subsubheading Notes:

@lisp
 (byte-size (byte @param{j} @param{k})) @EQ{} @param{j}
 (byte-position (byte @param{j} @param{k})) @EQ{} @param{k}
@end lisp


A @term{byte} of @term{size} of @f{0} is permissible; 
it refers to a @term{byte} of width zero.  For example,

@lisp
 (ldb (byte 0 3) #o7777) @EV{} 0
 (dpb #o7777 (byte 0 3) 0) @EV{} 0
@end lisp



@node deposit-field
@heading deposit-field (Function)
@syindex deposit-field
@cindex deposit-field


@subsubheading Syntax:

@DefunWithValues{deposit-field, newbyte bytespec integer, result-integer}

@subsubheading Arguments and Values:

@param{newbyte}---an @term{integer}.

@param{bytespec}---a @term{byte specifier}.

@param{integer}---an @term{integer}.

@param{result-integer}---an @term{integer}.

@subsubheading Description:

Replaces a field of bits within @param{integer}; specifically,
returns an @term{integer} that contains the bits of @param{newbyte}
within the @term{byte} specified by @param{bytespec},
and elsewhere contains the bits of @param{integer}.  

@subsubheading Examples:

@lisp
 (deposit-field 7 (byte 2 1) 0) @EV{} 6
 (deposit-field -1 (byte 4 0) 0) @EV{} 15
 (deposit-field 0 (byte 2 1) -3) @EV{} -7
@end lisp


@subsubheading See Also:

@ref{byte},
@ref{dpb}

@subsubheading Notes:

@lisp
 (logbitp @param{j} (deposit-field @param{m} (byte @param{s} @param{p}) @param{n}))
 @EQ{} (if (and (>= @param{j} @param{p}) (< @param{j} (+ @param{p} @param{s})))
        (logbitp @param{j} @param{m})
        (logbitp @param{j} @param{n}))
@end lisp


@code{deposit-field} is to @code{mask-field} 
as @code{dpb}           is to @code{ldb}.


@node dpb
@heading dpb (Function)
@syindex dpb
@cindex dpb


@subsubheading Syntax:

@DefunWithValues{dpb, newbyte bytespec integer, result-integer}

@subsubheading Pronunciation:

@pronounced{@stress{d@schwa{} }@Stress{pib}}
or @pronounced{@stress{d@schwa{} }@Stress{p@schwa{} b}}
or @pronounced{@Stress{d@harde{}}@Stress{p@harde{}}@Stress{b@harde{}}}

@subsubheading Arguments and Values:

@param{newbyte}---an @term{integer}.

@param{bytespec}---a @term{byte specifier}.

@param{integer}---an @term{integer}.

@param{result-integer}---an @term{integer}.

@subsubheading Description:

@code{dpb} (deposit byte) is used to 
replace a field of bits within @param{integer}.  
@code{dpb} returns an @term{integer} that is 
the same as @param{integer} except in the bits specified by @param{bytespec}.

Let @f{s} be the size specified
by @param{bytespec}; then the low @f{s} bits of @param{newbyte} appear in
the result in the byte specified by @param{bytespec}.
@param{Newbyte} is interpreted as
being right-justified, as if it were the result of @code{ldb}.

@subsubheading Examples:

@lisp
 (dpb 1 (byte 1 10) 0) @EV{} 1024
 (dpb -2 (byte 2 10) 0) @EV{} 2048
 (dpb 1 (byte 2 10) 2048) @EV{} 1024
@end lisp


@subsubheading See Also:

@ref{byte}, @ref{deposit-field}, @ref{ldb}

@subsubheading Notes:

@lisp
 (logbitp @param{j} (dpb @param{m} (byte @param{s} @param{p}) @param{n}))
 @EQ{} (if (and (>= @param{j} @param{p}) (< @param{j} (+ @param{p} @param{s})))
        (logbitp (- @param{j} @param{p}) @param{m})
        (logbitp @param{j} @param{n}))
@end lisp


In general,

@lisp
 (dpb @param{x} (byte 0 @param{y}) @param{z}) @EV{} @param{z}
@end lisp


for all valid values of @param{x}, @param{y}, and @param{z}.

Historically, the name ``dpb'' comes from a DEC PDP-10 assembly language
instruction meaning ``deposit byte.''


@node ldb
@heading ldb (Accessor)
@syindex ldb
@cindex ldb


@subsubheading Syntax:

@DefunWithValues{ldb, bytespec integer, byte}

@Defsetf{ldb, bytespec place, new-byte}

@subsubheading Pronunciation:

@pronounced{@Stress{lid}ib}
or @pronounced{@Stress{lid}@schwa{} b}
or @pronounced{@Stress{el}@Stress{d@harde{}}@Stress{b@harde{}}}

@subsubheading Arguments and Values:

@param{bytespec}---a @term{byte specifier}.

@param{integer}---an @term{integer}.

@param{byte}, @param{new-byte}---a non-negative @term{integer}.

@subsubheading Description:

@code{ldb} extracts and returns the @term{byte} of @param{integer}
specified by @param{bytespec}.

@code{ldb} returns an @term{integer} in which the bits with weights 
@mat{2^(@i{s}-1)} through @mat{2^0} are the same as those in 
@param{integer} with weights @mat{2^(@i{p}+@i{s}-1)} 
through @mat{2^@i{p}}, and all other bits zero; @i{s} is
@f{(byte-size @param{bytespec})} 
and @i{p} is @f{(byte-position @param{bytespec})}.

@code{setf} may be used with @code{ldb} to modify
a byte within the @param{integer} that is stored
in a given @param{place}.
The order of evaluation, when an @code{ldb} form is supplied
to @code{setf}, is exactly left-to-right.
@cindex order of evaluation
@cindex evaluation order
The effect is to perform a @code{dpb} operation
and then store the result back into the @param{place}.

@subsubheading Examples:

@lisp
 (ldb (byte 2 1) 10) @EV{} 1
 (setq a (list 8)) @EV{} (8)
 (setf (ldb (byte 2 1) (car a)) 1) @EV{} 1
 a @EV{} (10)
@end lisp


@subsubheading See Also:

@ref{byte},
@ref{byte-position},
@ref{byte-size},
@ref{dpb}

@subsubheading Notes:

@lisp
 (logbitp @param{j} (ldb (byte @param{s} @param{p}) @param{n}))
    @EQ{} (and (< @param{j} @param{s}) (logbitp (+ @param{j} @param{p}) @param{n}))
@end lisp


In general,

@lisp
 (ldb (byte 0 @param{x}) @param{y}) @EV{} 0
@end lisp


for all valid values of @param{x} and @param{y}.

Historically, the name ``ldb'' comes from a DEC PDP-10 assembly language
instruction meaning ``load byte.''


@node ldb-test
@heading ldb-test (Function)
@syindex ldb-test
@cindex ldb-test
              

@subsubheading Syntax:

@DefunWithValues{ldb-test, bytespec integer, generalized-boolean}

@subsubheading Arguments and Values:

@param{bytespec}---a @term{byte specifier}.

@param{integer}---an @term{integer}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Returns @term{true} if any of the bits of the byte in @param{integer}
specified by @param{bytespec} is non-zero; otherwise returns @term{false}.

@subsubheading Examples:

@lisp
 (ldb-test (byte 4 1) 16) @EV{} @term{true}
 (ldb-test (byte 3 1) 16) @EV{} @term{false}
 (ldb-test (byte 3 2) 16) @EV{} @term{true}
@end lisp


@subsubheading See Also:

@ref{byte}, @ref{ldb}, @ref{zerop}

@subsubheading Notes:
@lisp
 (ldb-test bytespec n) @EQ{}
 (not (zerop (ldb bytespec n))) @EQ{}
 (logtest (ldb bytespec -1) n)
@end lisp



@node mask-field
@heading mask-field (Accessor)
@syindex mask-field
@cindex mask-field


@subsubheading Syntax:

@DefunWithValues{mask-field, bytespec integer, masked-integer}
@Defsetf{mask-field, bytespec place, new-masked-integer}

@subsubheading Arguments and Values:

@param{bytespec}---a @term{byte specifier}.

@param{integer}---an @term{integer}.

@param{masked-integer}, @param{new-masked-integer}---a non-negative @term{integer}.

@subsubheading Description:

@code{mask-field} performs a ``mask'' operation on @param{integer}.
It returns an @term{integer} that has the same bits as @param{integer} in 
the @term{byte} specified by @param{bytespec}, but that has zero-bits everywhere else.

@code{setf} may be used with @code{mask-field}
to modify a byte within the @term{integer} that is stored
in a given @param{place}.
The effect is to perform a @code{deposit-field} operation
and then store the result back into the @param{place}.

@subsubheading Examples:

@lisp
 (mask-field (byte 1 5) -1) @EV{} 32
 (setq a 15) @EV{} 15
 (mask-field (byte 2 0) a) @EV{} 3
 a @EV{} 15
 (setf (mask-field (byte 2 0) a) 1) @EV{} 1
 a @EV{} 13
@end lisp


@subsubheading See Also:

@ref{byte},
@ref{ldb}

@subsubheading Notes:

@lisp
 (ldb @param{bs} (mask-field @param{bs} @param{n})) @EQ{} (ldb @param{bs} @param{n})
 (logbitp @param{j} (mask-field (byte @param{s} @param{p}) @param{n}))
   @EQ{} (and (>= @param{j} @param{p}) (< @param{j} @param{s}) (logbitp @param{j} @param{n}))
 (mask-field @param{bs} @param{n}) @EQ{} (logand @param{n} (dpb -1 @param{bs} 0))
@end lisp



@node most-positive-fixnum; most-negative-fixnum
@heading most-positive-fixnum, most-negative-fixnum (Constant Variable)
@syindex most-positive-fixnum
@cindex most-positive-fixnum
@syindex most-negative-fixnum
@cindex most-negative-fixnum


@subsubheading Constant Value:

@term{implementation-dependent}.

@subsubheading Description:

@code{most-positive-fixnum} is that @term{fixnum} closest in value 
to positive infinity provided by the implementation,
and greater than or equal to both @mat{2^15} - 1 and 
@code{array-dimension-limit}.

@code{most-negative-fixnum} is that @term{fixnum} closest in value
to negative infinity provided by the implementation,
and less than or equal to @mat{-2^15}.


@node decode-float; scale-float; float-radix; float-sign; float-digits; float+
@heading decode-float, scale-float, float-radix, float-sign, float-digits, float-precision, integer-decode-float (Function)
@syindex decode-float
@cindex decode-float
@syindex scale-float
@cindex scale-float
@syindex float-radix
@cindex float-radix
@syindex float-sign
@cindex float-sign
@syindex float-digits
@cindex float-digits
@syindex float-precision
@cindex float-precision
@syindex integer-decode-float
@cindex integer-decode-float


@subsubheading Syntax:

@DefunWithValues{decode-float, float, significand\, exponent\, sign}

@DefunWithValues{scale-float, float integer, scaled-float}

@DefunWithValues{float-radix, float, float-radix}

@DefunWithValues{float-sign, float-1 @opt{} float-2, signed-float}

@DefunWithValues{float-digits, float, digits1}

@DefunWithValues{float-precision, float, digits2}

@DefunWithValues{integer-decode-float, float, significand\, exponent\, integer-sign}

@subsubheading Arguments and Values:

@param{digits1}---a non-negative @term{integer}.

@param{digits2}---a non-negative @term{integer}.

@param{exponent}---an @term{integer}.

@param{float}---a @term{float}.

@param{float-1}---a @term{float}.

@param{float-2}---a @term{float}.

@param{float-radix}---an @term{integer}.

@param{integer}---a non-negative @term{integer}.

@param{integer-sign}---the @term{integer} @f{-1},
or the @term{integer} @f{1}.

@param{scaled-float}---a @term{float}.

@param{sign}---A @term{float} of the same @term{type} as @param{float}
but numerically equal to @f{1.0} or @f{-1.0}.

@param{signed-float}---a @term{float}.

@param{significand}---a @term{float}.

@subsubheading Description:

@code{decode-float} computes three values that characterize
@param{float}.
The first value is of the same @term{type}
as @param{float} and 
represents the significand.
The second value represents the exponent
to which the radix (notated in this description by @i{b}) must
be raised to obtain the value that, when multiplied with the first
result, produces the absolute value of @param{float}.
If @param{float} is zero, any @term{integer} value may be returned, 
provided that the identity shown for @code{scale-float} holds.
The third value
is of the same @term{type} as @param{float}
and is 1.0 if @param{float} is greater
than or equal to zero or -1.0 otherwise.

@code{decode-float} 
divides @param{float} by an integral power of @i{b}
so as to bring its value between @mat{1/@i{b}} (inclusive) and@tie{}@mat{1} (exclusive),
and returns the quotient as the first value.
If @param{float} is zero, however, the result
equals the absolute value of @param{float} (that is, if there is a negative
zero, its significand is considered to be a positive zero).

@code{scale-float} returns
@tt{(* @param{float} (expt (float @i{b} @param{float}) 
@param{integer}))}, where @i{b} is the radix of the floating-point
representation. @param{float} is not necessarily between @mat{1/@i{b}} and@tie{}@mat{1}.


@code{float-radix} returns 
the radix of @param{float}.

@code{float-sign} returns a number @f{z} such
that @f{z} and @param{float-1} have the same sign and also such that
@f{z} and @param{float-2} have the same absolute value.
If @param{float-2} is not supplied, its value is @f{(float 1 @param{float-1})}.
If an implementation
has distinct representations for negative zero and positive zero,
then @f{(float-sign -0.0)} @EV{}@spc{}@f{-1.0}.

@code{float-digits} returns
the number of radix @i{b} digits
used in the representation of @param{float} (including any implicit
digits, such as a ``hidden bit'').

@code{float-precision}
returns
the number of significant radix @i{b} digits present in @param{float};
if @param{float} is a @term{float}
zero, then the result is an @term{integer} zero.

For @term{normalized} @term{floats},
the results of @code{float-digits} and @code{float-precision} are the same,
but the precision is less than the number of representation digits 
for a @term{denormalized} or zero number.

@code{integer-decode-float} computes three values that characterize
@param{float} - 
the significand scaled so as to be an @term{integer},
and the same last two
values that are returned by @code{decode-float}.
If @param{float} is zero, @code{integer-decode-float} returns 
zero as the first value.
The second value bears the same relationship to the first value
as for @code{decode-float}:

@lisp
 (multiple-value-bind (signif expon sign)
                      (integer-decode-float f)
   (scale-float (float signif f) expon)) @EQ{} (abs f)
@end lisp


@subsubheading Examples:

@lisp
 ;; Note that since the purpose of this functionality is to expose
 ;; details of the implementation, all of these examples are necessarily
 ;; very implementation-dependent.  Results may vary widely.
 ;; Values shown here are chosen consistently from one particular implementation.
 (decode-float .5) @EV{} 0.5, 0, 1.0
 (decode-float 1.0) @EV{} 0.5, 1, 1.0
 (scale-float 1.0 1) @EV{} 2.0
 (scale-float 10.01 -2) @EV{} 2.5025
 (scale-float 23.0 0) @EV{} 23.0
 (float-radix 1.0) @EV{} 2
 (float-sign 5.0) @EV{} 1.0
 (float-sign -5.0) @EV{} -1.0
 (float-sign 0.0) @EV{} 1.0
 (float-sign 1.0 0.0) @EV{} 0.0
 (float-sign 1.0 -10.0) @EV{} 10.0
 (float-sign -1.0 10.0) @EV{} -10.0
 (float-digits 1.0) @EV{} 24
 (float-precision 1.0) @EV{} 24
 (float-precision least-positive-single-float) @EV{} 1
 (integer-decode-float 1.0) @EV{} 8388608, -23, 1
@end lisp


@subsubheading Affected By:

The implementation's representation for @term{floats}.

@subsubheading Exceptional Situations:

The functions @code{decode-float}, @code{float-radix}, @code{float-digits},
@code{float-precision}, and @code{integer-decode-float} should signal an error
if their only argument is not a @term{float}.

@Thefunction{scale-float} should signal an error if its first argument
is not a @term{float} or if its second argument is not an @term{integer}.

@Thefunction{float-sign} should signal an error if its first argument
is not a @term{float} or if its second argument is supplied but is 
not a @term{float}.

@subsubheading Notes:

The product of the first result of @code{decode-float} or @code{integer-decode-float},
of the radix raised to the power of the second result, and of the third result
is exactly equal to the value of @param{float}.

@lisp
 (multiple-value-bind (signif expon sign)
                      (decode-float f)
   (scale-float signif expon))
@EQ{} (abs f)
@end lisp

and

@lisp
 (multiple-value-bind (signif expon sign)
                      (decode-float f)
   (* (scale-float signif expon) sign))
@EQ{} f
@end lisp


@node float (Function)
@heading float (Function)
@syindex float
@cindex float


@subsubheading Syntax:

@DefunWithValues{float, number @opt{} prototype, float}

@subsubheading Arguments and Values:

@param{number}---a @term{real}.

@param{prototype}---a @term{float}.

@param{float}---a @term{float}.

@subsubheading Description:

@code{float} converts a 
@term{real}
number to a @term{float}.

If a @param{prototype} is supplied,
a @term{float} is returned that is mathematically equal to @param{number}
but has the same format as @param{prototype}.

If @param{prototype} is not supplied,
then if the @param{number} is already a @term{float}, it is returned;
otherwise, a @term{float} is returned that is mathematically equal to @param{number}
but is a @term{single float}.

@subsubheading Examples:

@lisp
 (float 0) @EV{} 0.0
 (float 1 .5) @EV{} 1.0
 (float 1.0) @EV{} 1.0
 (float 1/2) @EV{} 0.5
@EV{} 1.0d0
@OV{} 1.0
 (eql (float 1.0 1.0d0) 1.0d0) @EV{} @term{true}
@end lisp


@subsubheading See Also:

@ref{coerce}


@node floatp
@heading floatp (Function)
@syindex floatp
@cindex floatp


@subsubheading Syntax:

@DefunWithValues{floatp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, float}

@subsubheading Examples:

@lisp
 (floatp 1.2d2) @EV{} @term{true}
 (floatp 1.212) @EV{} @term{true}
 (floatp 1.2s2) @EV{} @term{true}
 (floatp (expt 2 130)) @EV{} @term{false}
@end lisp


@subsubheading Notes:

@lisp
 (floatp @param{object}) @EQ{} (typep @param{object} 'float)
@end lisp



@node most-positive-short-float; least-positive-short-float; least-positive-n+
@heading most-positive-short-float, least-positive-short-float, least-positive-normalized-short-float, most-positive-double-float, least-positive-double-float, least-positive-normalized-double-float, most-positive-long-float, least-positive-long-float, least-positive-normalized-long-float, most-positive-single-float, least-positive-single-float, least-positive-normalized-single-float, most-negative-short-float, least-negative-short-float, least-negative-normalized-short-float, most-negative-single-float, least-negative-single-float, least-negative-normalized-single-float, most-negative-double-float, least-negative-double-float, least-negative-normalized-double-float, most-negative-long-float, least-negative-long-float, least-negative-normalized-long-float (Constant Variable)
@syindex most-positive-short-float
@cindex most-positive-short-float
@syindex least-positive-short-float
@cindex least-positive-short-float
@syindex least-positive-normalized-short-float
@cindex least-positive-normalized-short-float
@syindex most-positive-double-float
@cindex most-positive-double-float
@syindex least-positive-double-float
@cindex least-positive-double-float
@syindex least-positive-normalized-double-float
@cindex least-positive-normalized-double-float
@syindex most-positive-long-float
@cindex most-positive-long-float
@syindex least-positive-long-float
@cindex least-positive-long-float
@syindex least-positive-normalized-long-float
@cindex least-positive-normalized-long-float
@syindex most-positive-single-float
@cindex most-positive-single-float
@syindex least-positive-single-float
@cindex least-positive-single-float
@syindex least-positive-normalized-single-float
@cindex least-positive-normalized-single-float
@syindex most-negative-short-float
@cindex most-negative-short-float
@syindex least-negative-short-float
@cindex least-negative-short-float
@syindex least-negative-normalized-short-float
@cindex least-negative-normalized-short-float
@syindex most-negative-single-float
@cindex most-negative-single-float
@syindex least-negative-single-float
@cindex least-negative-single-float
@syindex least-negative-normalized-single-float
@cindex least-negative-normalized-single-float
@syindex most-negative-double-float
@cindex most-negative-double-float
@syindex least-negative-double-float
@cindex least-negative-double-float
@syindex least-negative-normalized-double-float
@cindex least-negative-normalized-double-float
@syindex most-negative-long-float
@cindex most-negative-long-float
@syindex least-negative-long-float
@cindex least-negative-long-float
@syindex least-negative-normalized-long-float
@cindex least-negative-normalized-long-float



@subsubheading Constant Value:

@term{implementation-dependent}.

@subsubheading Description:

These @term{constant variables} provide a way for programs to examine
the @term{implementation-defined} limits for the various float formats.

Of these @term{variables},
each which has ``@f{-normalized}'' in its @term{name}
must have a @term{value} which is a @term{normalized} @term{float}, and
each which does not have ``@f{-normalized}'' in its name
may have a @term{value} which is either a @term{normalized} @term{float} 
or a @term{denormalized} @term{float}, as appropriate.

Of these @term{variables},
each which has ``@f{short-float}'' in its name
must have a @term{value} which is a @term{short float},
each which has ``@f{single-float}'' in its name
must have a @term{value} which is a @term{single float},
each which has ``@f{double-float}'' in its name
must have a @term{value} which is a @term{double float}, and
each which has ``@f{long-float}'' in its name
must have a @term{value} which is a @term{long float}.


@itemize @bullet{}

@item 
@vtop{@hbox{@code{most-positive-short-float},
@code{most-positive-single-float},}
@hbox{@code{most-positive-double-float},
@code{most-positive-long-float}}}


Each of these @term{constant variables} has as its @term{value} 
the positive @term{float} of the largest magnitude 
(closest in value to, but not equal to, positive infinity)
for the float format implied by its name.

@item
@vtop{@hbox{@code{least-positive-short-float},
@code{least-positive-normalized-short-float},}
@hbox{@code{least-positive-single-float},
@code{least-positive-normalized-single-float},}
@hbox{@code{least-positive-double-float},
@code{least-positive-normalized-double-float},}
@hbox{@code{least-positive-long-float},
@code{least-positive-normalized-long-float}}}


Each of these @term{constant variables} has as its @term{value}
the smallest positive (nonzero) @term{float}
for the float format implied by its name.

@item
@vtop{@hbox{@code{least-negative-short-float},
@code{least-negative-normalized-short-float},}
@hbox{@code{least-negative-single-float},
@code{least-negative-normalized-single-float},}
@hbox{@code{least-negative-double-float},
@code{least-negative-normalized-double-float},}
@hbox{@code{least-negative-long-float},
@code{least-negative-normalized-long-float}}}


Each of these @term{constant variables} has as its @term{value}
the negative (nonzero) @term{float} of the smallest magnitude
for the float format implied by its name.
(If an implementation supports minus zero as a @term{different} 
@term{object} from positive zero, this value must not be minus zero.)

@item
@vtop{@hbox{@code{most-negative-short-float},
@code{most-negative-single-float},}
@hbox{@code{most-negative-double-float},
@code{most-negative-long-float}}}


Each of these @term{constant variables} has as its @term{value}
the negative @term{float} of the largest magnitude 
(closest in value to, but not equal to, negative infinity)
for the float format implied by its name.
@end itemize


@subsubheading Notes:



@node short-float-epsilon; short-float-negative-epsilon; single-float-epsilon+
@heading short-float-epsilon, short-float-negative-epsilon, single-float-epsilon, single-float-negative-epsilon, double-float-epsilon, double-float-negative-epsilon, long-float-epsilon, long-float-negative-epsilon (Constant Variable)
@syindex short-float-epsilon
@cindex short-float-epsilon
@syindex short-float-negative-epsilon
@cindex short-float-negative-epsilon
@syindex single-float-epsilon
@cindex single-float-epsilon
@syindex single-float-negative-epsilon
@cindex single-float-negative-epsilon
@syindex double-float-epsilon
@cindex double-float-epsilon
@syindex double-float-negative-epsilon
@cindex double-float-negative-epsilon
@syindex long-float-epsilon
@cindex long-float-epsilon
@syindex long-float-negative-epsilon
@cindex long-float-negative-epsilon


@subsubheading Constant Value:

@term{implementation-dependent}.

@subsubheading Description:

The value of each of the constants @code{short-float-epsilon}, 
@code{single-float-epsilon},
@code{double-float-epsilon}, and @code{long-float-epsilon} is 
the smallest positive @term{float} @mat{@epsilon{}} of the given format, 
such that the following expression is @term{true} when evaluated:

@tt{(not (= (float 1 @mat{@epsilon{}}) (+ (float 1 @mat{@epsilon{}}) @mat{@epsilon{}})))}

The value of each of the constants @code{short-float-negative-epsilon}, 
@code{single-float-negative-epsilon},
@code{double-float-negative-epsilon}, and  
@code{long-float-negative-epsilon} is the smallest positive
@term{float} @mat{@epsilon{}} of the given format, such that the following
expression is @term{true} when evaluated:

@tt{(not (= (float 1 @mat{@epsilon{}}) (- (float 1 @mat{@epsilon{}}) @mat{@epsilon{}})))}


@node arithmetic-error
@heading arithmetic-error (Condition Type)
@syindex arithmetic-error
@cindex arithmetic-error


@subsubheading Class Precedence List:
@code{arithmetic-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{arithmetic-error} consists of error conditions
that occur during arithmetic operations.
The operation and operands are initialized with
@theinitkeyargs{operation} and @kwd{operands} to @code{make-condition},
and are @term{accessed} by
the functions @code{arithmetic-error-operation} and 
@code{arithmetic-error-operands}.

@subsubheading See Also:

@ref{arithmetic-error-operation}, @ref{arithmetic-error-operands}


@node arithmetic-error-operands; arithmetic-error-operation
@heading arithmetic-error-operands, arithmetic-error-operation (Function)
@syindex arithmetic-error-operands
@cindex arithmetic-error-operands
@syindex arithmetic-error-operation
@cindex arithmetic-error-operation
@anchor{arithmetic-error-operands}
@anchor{arithmetic-error-operation}


@subsubheading Syntax:

@DefunWithValues{arithmetic-error-operands, condition, operands}
@DefunWithValues{arithmetic-error-operation, condition, operation}

@subsubheading Arguments and Values:

@param{condition}---a @term{condition} @oftype{arithmetic-error}.

@param{operands}---a @term{list}.

@param{operation}---a @term{function designator}.

@subsubheading Description:

@code{arithmetic-error-operands} returns a @term{list} of the operands 
which were used in the offending call to the operation that signaled 
the @param{condition}.

@code{arithmetic-error-operation} returns a @term{list} of 
the offending operation in the offending call that signaled the @param{condition}.

@subsubheading See Also:

@ref{arithmetic-error},
@ref{Conditions, Chapter 9 (Conditions)}

@subsubheading Notes:


@node division-by-zero
@heading division-by-zero (Condition Type)
@syindex division-by-zero
@cindex division-by-zero


@subsubheading Class Precedence List:
@code{division-by-zero},
@code{arithmetic-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{division-by-zero} consists of error conditions that
occur because of division by zero.


@node floating-point-invalid-operation
@heading floating-point-invalid-operation (Condition Type)
@syindex floating-point-invalid-operation
@cindex floating-point-invalid-operation



@subsubheading Class Precedence List:
@code{floating-point-invalid-operation},
@code{arithmetic-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{floating-point-invalid-operation} consists of
error conditions that occur because of certain 
floating point traps. 

It is @term{implementation-dependent} whether floating point traps
occur, and whether or how they may be enabled or disabled.  Therefore,
conforming code may establish handlers for this condition, but must not
depend on its being @term{signaled}.



@node floating-point-inexact
@heading floating-point-inexact (Condition Type)
@syindex floating-point-inexact
@cindex floating-point-inexact



@subsubheading Class Precedence List:
@code{floating-point-inexact},
@code{arithmetic-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{floating-point-inexact} consists of 
error conditions that occur because of certain 
floating point traps.

It is @term{implementation-dependent} whether floating point traps
occur, and whether or how they may be enabled or disabled.  Therefore,
conforming code may establish handlers for this condition, but must not
depend on its being @term{signaled}.



@node floating-point-overflow
@heading floating-point-overflow (Condition Type)
@syindex floating-point-overflow
@cindex floating-point-overflow


@subsubheading Class Precedence List:
@code{floating-point-overflow},
@code{arithmetic-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{floating-point-overflow} consists of error
conditions that occur because of floating-point overflow.


@node floating-point-underflow
@heading floating-point-underflow (Condition Type)
@syindex floating-point-underflow
@cindex floating-point-underflow


@subsubheading Class Precedence List:
@code{floating-point-underflow},
@code{arithmetic-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{floating-point-underflow} consists of 
error conditions that occur because of floating-point underflow.




@node Characters
@chapter Characters
@menu
* Character Concepts::

Dictionary

* character (System Class)::
* base-char::
* standard-char::
* extended-char::
* char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+::
* character (Function)::
* characterp::
* alpha-char-p::
* alphanumericp::
* digit-char::
* digit-char-p::
* graphic-char-p::
* standard-char-p::
* char-upcase; char-downcase::
* upper-case-p; lower-case-p; both-case-p::
* char-code::
* char-int::
* code-char::
* char-code-limit::
* char-name::
* name-char::
@end menu

@node Character Concepts
@section Character Concepts

@menu
* Introduction to Characters::
* Introduction to Scripts and Repertoires::
* Character Attributes::
* Character Categories::
* Identity of Characters::
* Ordering of Characters::
* Character Names::
* Treatment of Newline during Input and Output::
* Character Encodings::
* Documentation of Implementation-Defined Scripts::
@end menu
@node Introduction to Characters
@subsection Introduction to Characters

A @newterm{character} is an @term{object} that represents a unitary token 
(@eg{} a letter, a special symbol, or a ``control character'')
in an aggregate quantity of text
(@eg{} a @term{string} or a text @term{stream}).

@clisp{}@spc{}allows an implementation to provide support 
for international language @term{characters} as well
as @term{characters} used in specialized arenas (@eg{} mathematics).

The following figures contain lists of @term{defined names} applicable to 
@term{characters}.

@Thenextfigure{}@spc{}lists some @term{defined names} relating to 
@term{character} @term{attributes} and @term{character} @term{predicates}.


@float Figure,fig13.1
@cartouche
@multitable{char-code-limit}{char-not-greaterp}{standard-char-p}

@item alpha-char-p @tab char-not-equal @tab char>
@item alphanumericp @tab char-not-greaterp @tab char>=
@item both-case-p @tab char-not-lessp @tab digit-char-p
@item char-code-limit @tab char/= @tab graphic-char-p
@item char-equal @tab char< @tab lower-case-p
@item char-greaterp @tab char<= @tab standard-char-p
@item char-lessp @tab char= @tab upper-case-p
@end multitable
@end cartouche
@caption{Character defined names -- 1}
@end float


@Thenextfigure{}@spc{}lists some @term{character} construction and conversion @term{defined names}.


@float Figure,fig13.2
@cartouche
@multitable{char-downcase}{char-upcase}{digit-char}

@item char-code @tab char-name @tab code-char
@item char-downcase @tab char-upcase @tab digit-char
@item char-int @tab character @tab name-char
@end multitable
@end cartouche
@caption{Character defined names -- 2}
@end float



@node Introduction to Scripts and Repertoires
@subsection Introduction to Scripts and Repertoires

@subsubsection Character Scripts
@anchor{CharScripts}

A @term{script} is one of possibly several sets that form an @term{exhaustive partition}
of the type @code{character}.

The number of such sets and boundaries between them is @term{implementation-defined}.
@clisp{}@spc{}does not require these sets to be @term{types}, but an @term{implementation}
is permitted to define such @term{types} as an extension.  Since no @term{character}
from one @term{script} can ever be a member of another @term{script}, it is generally
more useful to speak about @term{character} @term{repertoires}.

Although
the term ``@term{script}'' is chosen for 
definitional 
compatibility with ISO terminology, no @term{conforming implementation} 
is required to use any particular @term{scripts} standardized by ISO
or by any other standards organization.

Whether and how the @term{script} or @term{scripts} used by any given
@term{implementation} are named is @term{implementation-dependent}.


@subsubsection Character Repertoires
@anchor{CharRepertoires}

A @newterm{repertoire} is a @term{type specifier} for a @subtypeof{character}.
This term is generally used when describing a collection of @term{characters}
independent of their coding.
@term{Characters} in @term{repertoires} are only identified
by name,
by @term{glyph}, or
by character description.

A @term{repertoire} can contain @term{characters} from several
@term{scripts}, and a @term{character} can appear in more than
one @term{repertoire}.

For some examples of @term{repertoires}, see the coded character standards
ISO 8859/1, ISO 8859/2, and ISO 6937/2.
Note, however, that although
the term ``@term{repertoire}'' is chosen for 
definitional 
compatibility with ISO terminology, no @term{conforming implementation} 
is required to use @term{repertoires} standardized by ISO or any other 
standards organization.



@node Character Attributes
@subsection Character Attributes

@term{Characters} have only one @term{standardized} @term{attribute}:
a @term{code}.  A @term{character}'s @term{code} is a non-negative @term{integer}.
This @term{code} is composed from a character @term{script} and a character label
in an @term{implementation-dependent} way.  See the @term{functions} @ref{char-code} and @code{code-char}.


Additional, @term{implementation-defined} @term{attributes} of @term{characters}
are also permitted
so that, for example, 
two @term{characters} with the same @term{code} may differ 
in some other, @term{implementation-defined} way.

For any @term{implementation-defined} @term{attribute}
there is a distinguished value
called the @newterm{null} value for that @term{attribute}. 
A @term{character} for which each @term{implementation-defined} @term{attribute}
has the null value for that @term{attribute} is called a @term{simple} @term{character}.
If the @term{implementation} has no @term{implementation-defined} @term{attributes},
then all @term{characters} are @term{simple} @term{characters}.


@node Character Categories
@subsection Character Categories

There are several (overlapping) categories of @term{characters} that have no formally
associated @term{type} but that are nevertheless useful to name. 
They include
@term{graphic} @term{characters}, 
@term{alphabetic}@sub1{} @term{characters},
@term{characters} with @term{case} 
(@term{uppercase} and @term{lowercase} @term{characters}),
@term{numeric} @term{characters},
@term{alphanumeric} @term{characters},
and @term{digits} (in a given @term{radix}).

For each @term{implementation-defined} @term{attribute} of a @term{character},
the documentation for that @term{implementation} must specify whether 
@term{characters} that differ only in that @term{attribute} are permitted to differ
in whether are not they are members of one of the aforementioned categories.

Note that these terms are defined independently of any special syntax 
which might have been enabled in the @term{current readtable}.

@subsubsection Graphic Characters
@anchor{GraphicChars}

@term{Characters} that are classified as @newterm{graphic}, or displayable, are each
associated with a glyph, a visual representation of the @term{character}.

A @term{graphic} @term{character} is one that has a standard textual 
representation as a single @term{glyph}, such as @f{A} or @f{*} or @f{=}.
@term{Space}, which effectively has a blank @term{glyph}, is defined
to be a @term{graphic}.

Of the @term{standard characters},
@term{newline} is @term{non-graphic} 
and all others are @term{graphic}; see @ref{Standard Characters, Section 2.1.3 (Standard Characters)}.

@term{Characters} that are not @term{graphic} are called @newterm{non-graphic}.
@term{Non-graphic} @term{characters} are sometimes informally called
``formatting characters'' 
or ``control characters.''

@f{#@bsl{}Backspace},
@f{#@bsl{}Tab},
@f{#@bsl{}Rubout},
@f{#@bsl{}Linefeed}, 
@f{#@bsl{}Return}, and
@f{#@bsl{}Page},
if they are supported by the @term{implementation},
are @term{non-graphic}.


@subsubsection Alphabetic Characters

The @term{alphabetic}@sub1{} @term{characters} are
a subset of the @term{graphic} @term{characters}.
Of the @term{standard characters}, only these are the @term{alphabetic}@sub1{} @term{characters}:

@f{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}

@f{a b c d e f g h i j k l m n o p q r s t u v w x y z}

Any @term{implementation-defined} @term{character} that has @term{case} 
must be @term{alphabetic}@sub1{}.
For each @term{implementation-defined} @term{graphic} @term{character} 
that has no @term{case},
it is @term{implementation-defined} whether 
that @term{character} is @term{alphabetic}@sub1{}.


@subsubsection Characters With Case
@anchor{CharactersWithCase}

The @term{characters} with @term{case} are 
a subset of the @term{alphabetic}@sub1{} @term{characters}.
A @term{character} with @term{case} has the property of being either
@term{uppercase} or @term{lowercase}.
Every @term{character} with @term{case} is in one-to-one correspondence
with some other @term{character} with the opposite @term{case}.

@unnumberedsubsubsec 13.1.4.3.1 Uppercase Characters


An uppercase @term{character} is one that has a corresponding
@term{lowercase} @term{character} that is @term{different} 
(and can be obtained using @code{char-downcase}).

Of the @term{standard characters}, only these are @term{uppercase} @term{characters}:

@f{A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}


@unnumberedsubsubsec 13.1.4.3.2 Lowercase Characters


A lowercase @term{character} is one that has a corresponding 
@term{uppercase} @term{character} that is @term{different} 
(and can be obtained using @code{char-upcase}).

Of the @term{standard characters}, only these are @term{lowercase} @term{characters}:

@f{a b c d e f g h i j k l m n o p q r s t u v w x y z}


@unnumberedsubsubsec 13.1.4.3.3 Corresponding Characters in the Other Case


The @term{uppercase} @term{standard characters} @f{A} through @f{Z} mentioned above
respectively correspond to
the @term{lowercase} @term{standard characters} @f{a} through @f{z} mentioned above.
For example, the @term{uppercase} @term{character} @f{E} 
corresponds to the @term{lowercase} @term{character} @f{e}, and vice versa.


@unnumberedsubsubsec 13.1.4.3.4 Case of Implementation-Defined Characters


An @term{implementation} may define that other @term{implementation-defined}
@term{graphic} @term{characters} have @term{case}.  Such definitions must always
be done in pairs---one @term{uppercase} @term{character} in one-to-one 
@term{correspondence} with one @term{lowercase} @term{character}.



@subsubsection Numeric Characters

The @term{numeric} @term{characters} are
a subset of the @term{graphic} @term{characters}.
Of the @term{standard characters}, only these are @term{numeric} @term{characters}:

@f{0 1 2 3 4 5 6 7 8 9}

For each @term{implementation-defined} @term{graphic} @term{character} 
that has no @term{case}, the @term{implementation} must define whether
or not it is a @term{numeric} @term{character}.


@subsubsection Alphanumeric Characters

The set of @term{alphanumeric} @term{characters} is the union of 
the set of @term{alphabetic}@sub1{} @term{characters} 
and the set of @term{numeric} @term{characters}.


@subsubsection Digits in a Radix
@anchor{Digits}

What qualifies as a @term{digit} depends on the @term{radix} 
(an @term{integer} between @f{2} and @f{36}, inclusive).
The potential @term{digits} are:

@f{0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z}

Their respective weights are @f{0}, @f{1}, @f{2}, @mat{@ldots{}} @f{35}.
In any given radix @mat{n}, only the first @mat{n} potential @term{digits} 
are considered to be @term{digits}.
For example,
the digits in radix @f{2}  are @f{0} and @f{1}, 
the digits in radix @f{10} are @f{0} through @f{9}, and
the digits in radix @f{16} are @f{0} through @f{F}.

@term{Case} is not significant in @term{digits}; 
for example, in radix @f{16}, both @f{F} and @f{f} 
are @term{digits} with weight @f{15}.



@node Identity of Characters
@subsection Identity of Characters

Two @term{characters} that are @code{eql}, @code{char=}, or @code{char-equal} 
are not necessarily @code{eq}.


@node Ordering of Characters
@subsection Ordering of Characters

The total ordering on @term{characters} is guaranteed to have 
the following properties: 


@itemize @bullet{}


@item 
If two @term{characters} have the same @term{implementation-defined} @term{attributes},
then their ordering by @code{char<} is consistent with the numerical
ordering by the predicate @code{<} on their code @term{attributes}.

@item If two @term{characters} differ in any @term{attribute}, then they
are not @code{char=}.

@reviewer{Barmar: I wonder if we should say that the ordering may be dependent on the
@term{implementation-defined} @term{attributes}.}

@item
The total ordering is not necessarily the same as the total ordering
on the @term{integers} produced by applying @code{char-int} to the
@term{characters}.

@item 
While @term{alphabetic}@sub1{} @term{standard characters} of a given @term{case}
must    
obey a partial ordering,
they need not be contiguous; it is permissible for 
@term{uppercase} and @term{lowercase} @term{characters} to be interleaved. 
Thus @f{(char<= #@bsl{}a x #@bsl{}z)} 
is not a valid way of determining whether or not @f{x} is a
@term{lowercase} @term{character}.  

@end itemize


Of the @term{standard characters}, 
those which are @term{alphanumeric} obey the following partial ordering:

@lisp
 A<B<C<D<E<F<G<H<I<J<K<L<M<N<O<P<Q<R<S<T<U<V<W<X<Y<Z
 a<b<c<d<e<f<g<h<i<j<k<l<m<n<o<p<q<r<s<t<u<v<w<x<y<z
 0<1<2<3<4<5<6<7<8<9
 either 9<A or Z<0
 either 9<a or z<0                                                      
@end lisp

This implies that, for @term{standard characters}, @term{alphabetic}@sub1{} 
ordering holds within each @term{case} (@term{uppercase} and @term{lowercase}), 
and that the @term{numeric} @term{characters} as a group are not interleaved
with @term{alphabetic} @term{characters}.
However, the ordering or possible interleaving of @term{uppercase} @term{characters}
and @term{lowercase} @term{characters} is @term{implementation-defined}.


@node Character Names
@subsection Character Names

The following @term{character} @term{names} must be present in all 
@term{conforming implementations}:


@table @asis
@item @id{@f{Newline}}


The character that represents the division between lines.
An implementation must translate between @f{#@bsl{}Newline}, 
a single-character representation, and whatever external representation(s)
may be used.

@item @id{@f{Space}}


The space or blank character.
@end table


The following names are @term{semi-standard}; 
if an @term{implementation} supports them,
they should be used for the described @term{characters} and no others.


@table @asis
@item @id{@f{Rubout}}


The rubout or delete character.

@item @id{@f{Page}}


The form-feed or page-separator character.

@item @id{@f{Tab}}


The tabulate character.

@item @id{@f{Backspace}}


The backspace character.

@item @id{@f{Return}}


The carriage return character.

@item @id{@f{Linefeed}}


The line-feed character.
@end table


In some @term{implementations},
one or more of these @term{character} @term{names} 
might denote a @term{standard character}; 
for example,
@f{#@bsl{}Linefeed} and @f{#@bsl{}Newline} might be the @term{same} @term{character}
in some @term{implementations}.


@node Treatment of Newline during Input and Output
@subsection Treatment of Newline during Input and Output

When the character @f{#@bsl{}Newline} is written to an output file,
the implementation must take the appropriate action
to produce a line division.  This might involve writing out a
record or translating @f{#@bsl{}Newline} to a CR/LF sequence.
When reading, a corresponding reverse transformation must take place.


@node Character Encodings
@subsection Character Encodings

A @term{character} is sometimes represented merely by its @term{code}, and sometimes
by another @term{integer} value which is composed from the @term{code} and all 
@term{implementation-defined} @term{attributes}
(in an @term{implementation-defined} way
that might vary between @term{Lisp images} even in the same @term{implementation}).
This @term{integer}, returned by the function @code{char-int}, is called the
character's ``encoding.''
There is no corresponding function
from a character's encoding back to the @term{character}, 
since its primary intended uses include things like hashing where an inverse operation
is not really called for.



@node Documentation of Implementation-Defined Scripts
@subsection Documentation of Implementation-Defined Scripts

An @term{implementation} must document the @term{character} @term{scripts} 
it supports. For each @term{character} @term{script} supported,
the documentation must describe at least the following:

@itemize @bullet{}
@item
Character labels, glyphs, and descriptions.
Character labels must be uniquely named using only Latin capital letters A--Z,
hyphen (-), and digits 0--9.
@item
Reader canonicalization.
Any mechanisms by which @code{read} treats
@term{different} characters as equivalent must be documented.
@item
The impact on @code{char-upcase},
@code{char-downcase},
and the case-sensitive @term{format directives}.
In particular, for each @term{character} with @term{case},
whether it is @term{uppercase} or @term{lowercase},
and which @term{character} is its equivalent in the opposite case.
@item
The behavior of the case-insensitive @term{functions}
@code{char-equal}, @code{char-not-equal},
@code{char-lessp}, @code{char-greaterp}, 
@code{char-not-greaterp}, and @code{char-not-lessp}.
@item
The behavior of any @term{character} @term{predicates};
in particular, the effects of
@code{alpha-char-p},
@code{lower-case-p},
@code{upper-case-p},
@code{both-case-p},
@code{graphic-char-p}, 
and
@code{alphanumericp}.
@item
The interaction with file I/O, in particular,
the supported coded character sets (for example, ISO8859/1-1987)
and external encoding schemes supported are documented.
@end itemize



@node character (System Class)
@heading character (System Class)
@syindex character
@cindex character


@subsubheading Class Precedence List:
@code{character},
@code{t}

@subsubheading Description:

A @term{character} is an @term{object} that 
represents a unitary token in an aggregate quantity of text;
see @ref{Character Concepts, Section 13.1 (Character Concepts)}.

@Thetypes{base-char} and @code{extended-char}
form an @term{exhaustive partition} of @thetype{character}.

@subsubheading See Also:

@ref{Character Concepts, Section 13.1 (Character Concepts)},
@ref{SharpsignBackslash, Section 2.4.8.1 (Sharpsign Backslash)},
@ref{PrintingCharacters, Section 22.1.3.2 (Printing Characters)}

@node base-char
@heading base-char (Type)
@syindex base-char
@cindex base-char



@subsubheading Supertypes:

@code{base-char},
@code{character},
@code{t}

@subsubheading Description:

@Thetype{base-char} is defined as the @term{upgraded array element type} 
of @code{standard-char}.
An @term{implementation} can support additional @subtypesof{character}
(besides the ones listed in this standard) 
that might or might not be @supertypesof{base-char}.
In addition, an @term{implementation} can define @code{base-char}
to be the @term{same} @term{type} as @code{character}.

@term{Base characters} are distinguished in the following respects:

@enumerate 1
@item @Thetype{standard-char} is a @term{subrepertoire} of @thetype{base-char}.
@item The selection of @term{base characters} that are not @term{standard characters}
is implementation defined.
@item Only @term{objects} of @thetype{base-char} can be 
@term{elements} of a @term{base string}.
@item
No upper bound is specified for the number of characters in the 
@code{base-char} @term{repertoire}; the size of that @term{repertoire}
is 
@term{implementation-defined}.
The lower bound is@tie{}96, the number of @term{standard characters}.
@end enumerate



Whether a character is a @term{base character} depends on the way 
that an @term{implementation} represents @term{strings}, 
and not any other properties of the @term{implementation} or the host operating system.  
For example, one implementation might encode all @term{strings} 
as characters having 16-bit encodings, and another might have
two kinds of @term{strings}: those with characters having 8-bit 
encodings and those with characters having 16-bit encodings.  In the
first @term{implementation}, @thetype{base-char} is equivalent to
@thetype{character}: there is only one kind of @term{string}.
In the second @term{implementation}, the @term{base characters} might be 
those @term{characters} that could be stored in a @term{string} of @term{characters}
having 8-bit encodings.  In such an implementation,
@thetype{base-char} is a @term{proper subtype} of @thetype{character}.

@Thetype{standard-char} is a 
@subtypeof{base-char}.


@node standard-char
@heading standard-char (Type)
@syindex standard-char
@cindex standard-char



@subsubheading Supertypes:

@code{standard-char},
@code{base-char},
@code{character},
@code{t}

@subsubheading Description:

A fixed set of 96 @term{characters} required to be present in all 
@term{conforming implementations}.  @term{Standard characters} are 
defined in @ref{Standard Characters, Section 2.1.3 (Standard Characters)}.

Any @term{character} that is not @term{simple} is not a @term{standard character}.


@subsubheading See Also:

@ref{Standard Characters, Section 2.1.3 (Standard Characters)}

@node extended-char
@heading extended-char (Type)
@syindex extended-char
@cindex extended-char



@subsubheading Supertypes:

@code{extended-char},
@code{character},
@code{t}

@subsubheading Description:

@Thetype{extended-char} is equivalent to the @term{type} @f{(and character (not base-char))}.

@subsubheading Notes:

@Thetype{extended-char} might 
have no @term{elements}@sub4{}
in @term{implementations} in which all @term{characters} are @oftype{base-char}.



@node char=; char/=; char<; char>; char<=; char>=; char-equal; char-not-equal+
@heading char=, char/=, char<, char>, char<=, char>=, char-equal, char-not-equal, char-lessp, char-greaterp, char-not-greaterp, char-not-lessp (Function)
@syindex char=
@cindex char=
@syindex char/=
@cindex char/=
@syindex char<
@cindex char<
@syindex char>
@cindex char>
@syindex char<=
@cindex char<=
@syindex char>=
@cindex char>=
@syindex char-equal
@cindex char-equal
@syindex char-not-equal
@cindex char-not-equal
@syindex char-lessp
@cindex char-lessp
@syindex char-greaterp
@cindex char-greaterp
@syindex char-not-greaterp
@cindex char-not-greaterp
@syindex char-not-lessp
@cindex char-not-lessp
@anchor{char=}
@anchor{char-equal}


@subsubheading Syntax:

@DefunWithValues{char@mat{=}, @rest{} @plus{characters}, generalized-boolean}
@DefunWithValues{char@mat{/=}, @rest{} @plus{characters}, generalized-boolean}
@DefunWithValues{char@mat{<}, @rest{} @plus{characters}, generalized-boolean}
@DefunWithValues{char@mat{>}, @rest{} @plus{characters}, generalized-boolean}
@DefunWithValues{char@mat{<=}, @rest{} @plus{characters}, generalized-boolean}
@DefunWithValues{char@mat{>=}, @rest{} @plus{characters}, generalized-boolean}
@DefunWithValues{char-equal, @rest{} @plus{characters}, generalized-boolean}
@DefunWithValues{char-not-equal, @rest{} @plus{characters}, generalized-boolean}
@DefunWithValues{char-lessp, @rest{} @plus{characters}, generalized-boolean}
@DefunWithValues{char-greaterp, @rest{} @plus{characters}, generalized-boolean}
@DefunWithValues{char-not-greaterp, @rest{} @plus{characters}, generalized-boolean}
@DefunWithValues{char-not-lessp, @rest{} @plus{characters}, generalized-boolean}


@subsubheading Arguments and Values:

@param{character}---a @term{character}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

These predicates compare @term{characters}.

@code{char=} returns @term{true} if all @param{characters} are the @term{same};
otherwise, it returns @term{false}.
If two @param{characters} differ 
in any @term{implementation-defined} @term{attributes},
then they are not @code{char=}.

@code{char/=} returns @term{true} if all @param{characters} are different;
otherwise, it returns @term{false}.

@code{char<} returns @term{true} if the @param{characters} are monotonically increasing; 
otherwise, it returns @term{false}.
If two @term{characters} 
have @term{identical} @term{implementation-defined} @term{attributes}, 
then their ordering by @code{char<} is 
consistent with the numerical ordering by the predicate @f{<} on their @term{codes}.

@code{char>} returns @term{true} if the @param{characters} are monotonically decreasing; 
otherwise, it returns @term{false}.
If two @term{characters} have 
@term{identical} @term{implementation-defined} @term{attributes},
then their ordering by @code{char>} is 
consistent with the numerical ordering by the predicate @f{>} on their @term{codes}. 

@code{char<=} returns @term{true} 
if the @param{characters} are monotonically nondecreasing; 
otherwise, it returns @term{false}.
If two @term{characters} have
@term{identical} @term{implementation-defined} @term{attributes},
then their ordering by @code{char<=} is
consistent with the numerical ordering by the predicate @f{<=} on their @term{codes}. 

@code{char>=} returns @term{true} 
if the @param{characters} are monotonically nonincreasing; 
otherwise, it returns @term{false}.
If two @term{characters} have
@term{identical} @term{implementation-defined} @term{attributes},
then their ordering by @code{char>=} is 
consistent with the numerical ordering by the predicate @f{>=} on their @term{codes}. 

@code{char-equal},
@code{char-not-equal},
@code{char-lessp},
@code{char-greaterp},
@code{char-not-greaterp},
and @code{char-not-lessp}
are similar to 
@code{char=},
@code{char/=},
@code{char<},
@code{char>},
@code{char<=},
@code{char>=},
respectively,
except that they ignore differences in @term{case} and
might have an @term{implementation-defined} behavior 
for @term{non-simple} @term{characters}.
For example, an @term{implementation} might define that 
@code{char-equal}, @i{etc.} ignore certain 
@term{implementation-defined} @term{attributes}.
The effect, if any, 
of each @term{implementation-defined} @term{attribute}
upon these functions must be specified as part of the definition of that @term{attribute}.

@subsubheading Examples:

@lisp
 (char= #@bsl{}d #@bsl{}d) @EV{} @term{true}
 (char= #@bsl{}A #@bsl{}a) @EV{} @term{false}
 (char= #@bsl{}d #@bsl{}x) @EV{} @term{false}
 (char= #@bsl{}d #@bsl{}D) @EV{} @term{false}
 (char/= #@bsl{}d #@bsl{}d) @EV{} @term{false}
 (char/= #@bsl{}d #@bsl{}x) @EV{} @term{true}
 (char/= #@bsl{}d #@bsl{}D) @EV{} @term{true}
 (char= #@bsl{}d #@bsl{}d #@bsl{}d #@bsl{}d) @EV{} @term{true}
 (char/= #@bsl{}d #@bsl{}d #@bsl{}d #@bsl{}d) @EV{} @term{false}
 (char= #@bsl{}d #@bsl{}d #@bsl{}x #@bsl{}d) @EV{} @term{false}
 (char/= #@bsl{}d #@bsl{}d #@bsl{}x #@bsl{}d) @EV{} @term{false}
 (char= #@bsl{}d #@bsl{}y #@bsl{}x #@bsl{}c) @EV{} @term{false}
 (char/= #@bsl{}d #@bsl{}y #@bsl{}x #@bsl{}c) @EV{} @term{true}
 (char= #@bsl{}d #@bsl{}c #@bsl{}d) @EV{} @term{false}
 (char/= #@bsl{}d #@bsl{}c #@bsl{}d) @EV{} @term{false}
 (char< #@bsl{}d #@bsl{}x) @EV{} @term{true}
 (char<= #@bsl{}d #@bsl{}x) @EV{} @term{true}
 (char< #@bsl{}d #@bsl{}d) @EV{} @term{false}
 (char<= #@bsl{}d #@bsl{}d) @EV{} @term{true}
 (char< #@bsl{}a #@bsl{}e #@bsl{}y #@bsl{}z) @EV{} @term{true}
 (char<= #@bsl{}a #@bsl{}e #@bsl{}y #@bsl{}z) @EV{} @term{true}
 (char< #@bsl{}a #@bsl{}e #@bsl{}e #@bsl{}y) @EV{} @term{false}
 (char<= #@bsl{}a #@bsl{}e #@bsl{}e #@bsl{}y) @EV{} @term{true}
 (char> #@bsl{}e #@bsl{}d) @EV{} @term{true}
 (char>= #@bsl{}e #@bsl{}d) @EV{} @term{true}
 (char> #@bsl{}d #@bsl{}c #@bsl{}b #@bsl{}a) @EV{} @term{true}
 (char>= #@bsl{}d #@bsl{}c #@bsl{}b #@bsl{}a) @EV{} @term{true}
 (char> #@bsl{}d #@bsl{}d #@bsl{}c #@bsl{}a) @EV{} @term{false}
 (char>= #@bsl{}d #@bsl{}d #@bsl{}c #@bsl{}a) @EV{} @term{true}
 (char> #@bsl{}e #@bsl{}d #@bsl{}b #@bsl{}c #@bsl{}a) @EV{} @term{false}
 (char>= #@bsl{}e #@bsl{}d #@bsl{}b #@bsl{}c #@bsl{}a) @EV{} @term{false}
 (char> #@bsl{}z #@bsl{}A) @EV{} @term{implementation-dependent}
 (char> #@bsl{}Z #@bsl{}a) @EV{} @term{implementation-dependent}
 (char-equal #@bsl{}A #@bsl{}a) @EV{} @term{true}
 (stable-sort (list #@bsl{}b #@bsl{}A #@bsl{}B #@bsl{}a #@bsl{}c #@bsl{}C) #'char-lessp)
@EV{} (#@bsl{}A #@bsl{}a #@bsl{}b #@bsl{}B #@bsl{}c #@bsl{}C)
 (stable-sort (list #@bsl{}b #@bsl{}A #@bsl{}B #@bsl{}a #@bsl{}c #@bsl{}C) #'char<)
@EV{} (#@bsl{}A #@bsl{}B #@bsl{}C #@bsl{}a #@bsl{}b #@bsl{}c) ;Implementation A
@EV{} (#@bsl{}a #@bsl{}b #@bsl{}c #@bsl{}A #@bsl{}B #@bsl{}C) ;Implementation B
@EV{} (#@bsl{}a #@bsl{}A #@bsl{}b #@bsl{}B #@bsl{}c #@bsl{}C) ;Implementation C
@EV{} (#@bsl{}A #@bsl{}a #@bsl{}B #@bsl{}b #@bsl{}C #@bsl{}c) ;Implementation D
@EV{} (#@bsl{}A #@bsl{}B #@bsl{}a #@bsl{}b #@bsl{}C #@bsl{}c) ;Implementation E
@end lisp


@subsubheading Exceptional Situations:

@Shouldcheckplus{character}

@subsubheading See Also:

@ref{Character Syntax, Section 2.1 (Character Syntax)},
@ref{Documentation of Implementation-Defined Scripts, Section 13.1.10 (Documentation of Implementation-Defined Scripts)}

@subsubheading Notes:

If characters differ in their @term{code} @term{attribute} 
or any @term{implementation-defined} @term{attribute},
they are considered to be different by @code{char=}.

There is no requirement that @f{(eq c1 c2)} be true merely because
@f{(char= c1 c2)} is @term{true}.  While @code{eq} can distinguish two 
@term{characters}
that @code{char=} does not, it is distinguishing them not
as @term{characters}, but in some sense on the basis of a lower level
implementation characteristic.
If @f{(eq c1 c2)} is @term{true},
then @f{(char= c1 c2)} is also true.
@code{eql} and @code{equal}
compare @term{characters} in the same
way that @code{char=} does.

The manner in which @term{case} is used by 
@code{char-equal},
@code{char-not-equal},
@code{char-lessp},
@code{char-greaterp},
@code{char-not-greaterp},
and @code{char-not-lessp}
implies an ordering for @term{standard characters} such that
@f{A=a}, @f{B=b}, and so on, up to @f{Z=z}, and furthermore either
@f{9<A} or @f{Z<0}.


@node character (Function)
@heading character (Function)
@syindex character
@cindex character


@subsubheading Syntax:

@DefunWithValues{character, character, denoted-character}

@subsubheading Arguments and Values:

@param{character}---a @term{character designator}.

@param{denoted-character}---a @term{character}.

@subsubheading Description:

Returns the @term{character} denoted by the @param{character} @term{designator}.

@subsubheading Examples:

@lisp
 (character #@bsl{}a) @EV{} #@bsl{}a
 (character "a") @EV{} #@bsl{}a
 (character 'a) @EV{} #@bsl{}A
 (character '@bsl{}a) @EV{} #@bsl{}a
 (character 65.) is an error.
 (character 'apple) is an error.
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{object, a @term{character designator}}

@subsubheading See Also:

@ref{coerce}

@subsubheading Notes:

@lisp
 (character @param{object}) @EQ{} (coerce @param{object} 'character)
@end lisp



@node characterp
@heading characterp (Function)
@syindex characterp
@cindex characterp


@subsubheading Syntax:

@DefunWithValues{characterp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, character}

@subsubheading Examples:

@lisp
 (characterp #@bsl{}a) @EV{} @term{true}
 (characterp 'a) @EV{} @term{false}
 (characterp "a") @EV{} @term{false}
 (characterp 65.) @EV{} @term{false}
 (characterp #@bsl{}Newline) @EV{} @term{true}
 ;; This next example presupposes an implementation 
 ;; in which #@bsl{}Rubout is an implementation-defined character.
 (characterp #@bsl{}Rubout) @EV{} @term{true}
@end lisp


@subsubheading See Also:

@ref{character (Function)} (@term{type} and @term{function}), @ref{typep}

@subsubheading Notes:

@lisp
 (characterp @param{object}) @EQ{} (typep @param{object} 'character)
@end lisp



@node alpha-char-p
@heading alpha-char-p (Function)
@syindex alpha-char-p
@cindex alpha-char-p


@subsubheading Syntax:

@DefunWithValues{alpha-char-p, character, generalized-boolean}

@subsubheading Arguments and Values:

@param{character}---a @term{character}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@Predicate{character, an @term{alphabetic}@sub1{} @term{character}}

@subsubheading Examples:

@lisp
 (alpha-char-p #@bsl{}a) @EV{} @term{true}
 (alpha-char-p #@bsl{}5) @EV{} @term{false}
 (alpha-char-p #@bsl{}Newline) @EV{} @term{false}
 ;; This next example presupposes an implementation
 ;; in which #@bsl{}@alfa{} is a defined character.
 (alpha-char-p #@bsl{}@alfa{}) @EV{} @term{implementation-dependent}
@end lisp


@subsubheading Affected By:

None.
(In particular, the results of this predicate are independent 
of any special syntax which might have been enabled in the @term{current readtable}.)

@subsubheading Exceptional Situations:

@Shouldchecktype{character, a @term{character}}

@subsubheading See Also:

@ref{alphanumericp},
@ref{Documentation of Implementation-Defined Scripts, Section 13.1.10 (Documentation of Implementation-Defined Scripts)}


@node alphanumericp
@heading alphanumericp (Function)
@syindex alphanumericp
@cindex alphanumericp


@subsubheading Syntax:

@DefunWithValues{alphanumericp, character, generalized-boolean}

@subsubheading Arguments and Values:

@param{character}---a @term{character}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@Predicate{character, an @term{alphabetic}@sub1{} @term{character}  or a  @term{numeric}    @term{character}}

@subsubheading Examples:

@lisp
 (alphanumericp #@bsl{}Z) @EV{} @term{true}
 (alphanumericp #@bsl{}9) @EV{} @term{true}
 (alphanumericp #@bsl{}Newline) @EV{} @term{false}
 (alphanumericp #@bsl{}#) @EV{} @term{false}
@end lisp


@subsubheading Affected By:

None.
(In particular, the results of this predicate are independent 
of any special syntax which might have been enabled in the @term{current readtable}.)

@subsubheading Exceptional Situations:

@Shouldchecktype{character, a @term{character}}

@subsubheading See Also:

@ref{alpha-char-p}, @ref{graphic-char-p}, @ref{digit-char-p}

@subsubheading Notes:

Alphanumeric characters are graphic
as defined by @code{graphic-char-p}.
The alphanumeric characters are a subset of the graphic characters.
The standard characters @f{A} through @f{Z},
@f{a} through @f{z},
and @f{0} through @f{9} are alphanumeric characters.

@lisp
 (alphanumericp x)
   @EQ{} (or (alpha-char-p x) (not (null (digit-char-p x))))
@end lisp


@node digit-char
@heading digit-char (Function)
@syindex digit-char
@cindex digit-char



@subsubheading Syntax:

@DefunWithValues{digit-char, weight @opt{} radix, char}

@subsubheading Arguments and Values:

@param{weight}---a non-negative @term{integer}.

@param{radix}---a @term{radix}.
@Default{@f{10}}

@param{char}---a @term{character} or @term{false}.

@subsubheading Description:

If @param{weight} is less than @param{radix},
@code{digit-char} returns a @term{character} which has that @param{weight}
when considered as a digit in the specified radix.
If the resulting @term{character} is to be an @term{alphabetic}@sub1{} @term{character},
it will be an uppercase @term{character}.

If @param{weight} is greater than or equal to @param{radix},
@code{digit-char} returns @term{false}.

@subsubheading Examples:

@lisp
 (digit-char 0) @EV{} #@bsl{}0
 (digit-char 10 11) @EV{} #@bsl{}A
 (digit-char 10 10) @EV{} @term{false}
 (digit-char 7) @EV{} #@bsl{}7
 (digit-char 12) @EV{} @term{false}
 (digit-char 12 16) @EV{} #@bsl{}C  ;not #@bsl{}c
 (digit-char 6 2) @EV{} @term{false}
 (digit-char 1 2) @EV{} #@bsl{}1
@end lisp


@subsubheading See Also:

@ref{digit-char-p},
@ref{graphic-char-p},
@ref{Character Syntax, Section 2.1 (Character Syntax)}

@subsubheading Notes:



@node digit-char-p
@heading digit-char-p (Function)
@syindex digit-char-p
@cindex digit-char-p


@subsubheading Syntax:

@DefunWithValues{digit-char-p, char @opt{} radix, weight}

@subsubheading Arguments and Values:

@param{char}---a @term{character}.

@param{radix}---a @term{radix}.
@Default{@f{10}}

@param{weight}---either a non-negative @term{integer} less than @param{radix}, 
or @term{false}.

@subsubheading Description:

Tests whether @param{char} is a digit in the specified @param{radix}
(@ie{} with a weight less than @param{radix}).
If it is a digit in that @param{radix},
its weight is returned as an @term{integer}; 
otherwise @nil{}@spc{}is returned.

@subsubheading Examples:

@lisp
 (digit-char-p #@bsl{}5)    @EV{} 5
 (digit-char-p #@bsl{}5 2)  @EV{} @term{false}
 (digit-char-p #@bsl{}A)    @EV{} @term{false}
 (digit-char-p #@bsl{}a)    @EV{} @term{false}
 (digit-char-p #@bsl{}A 11) @EV{} 10
 (digit-char-p #@bsl{}a 11) @EV{} 10
 (mapcar #'(lambda (radix) 
             (map 'list #'(lambda (x) (digit-char-p x radix)) 
                  "059AaFGZ"))
         '(2 8 10 16 36))
 @EV{} ((0 NIL NIL NIL NIL NIL NIL NIL)
     (0 5 NIL NIL NIL NIL NIL NIL)
     (0 5 9 NIL NIL NIL NIL NIL)
     (0 5 9 10 10 15 NIL NIL)
     (0 5 9 10 10 15 16 35))
@end lisp


@subsubheading Affected By:

None.
(In particular, the results of this predicate are independent 
of any special syntax which might have been enabled in the @term{current readtable}.)

@subsubheading See Also:

@ref{alphanumericp}

@subsubheading Notes:

Digits are @term{graphic} @term{characters}.


@node graphic-char-p
@heading graphic-char-p (Function)
@syindex graphic-char-p
@cindex graphic-char-p


@subsubheading Syntax:

@DefunWithValues{graphic-char-p, char, generalized-boolean}

@subsubheading Arguments and Values:

@param{char}---a @term{character}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@Predicate{character, a @term{graphic} @term{character}}

@subsubheading Examples:

@lisp
 (graphic-char-p #@bsl{}G) @EV{} @term{true}
 (graphic-char-p #@bsl{}#) @EV{} @term{true}
 (graphic-char-p #@bsl{}Space) @EV{} @term{true}
 (graphic-char-p #@bsl{}Newline) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{character, a @term{character}}

@subsubheading See Also:

@ref{read},
@ref{Character Syntax, Section 2.1 (Character Syntax)},
@ref{Documentation of Implementation-Defined Scripts, Section 13.1.10 (Documentation of Implementation-Defined Scripts)}


@node standard-char-p
@heading standard-char-p (Function)
@syindex standard-char-p
@cindex standard-char-p


@subsubheading Syntax:

@DefunWithValues{standard-char-p, character, generalized-boolean}

@subsubheading Arguments and Values:

@param{character}---a @term{character}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{character, standard-char}

@subsubheading Examples:

@lisp
 (standard-char-p #@bsl{}Space) @EV{} @term{true}
 (standard-char-p #@bsl{}~) @EV{} @term{true}
 ;; This next example presupposes an implementation
 ;; in which #@bsl{}Bell is a defined character.
 (standard-char-p #@bsl{}Bell) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{character, a @term{character}}


@node char-upcase; char-downcase
@heading char-upcase, char-downcase (Function)
@syindex char-upcase
@cindex char-upcase
@syindex char-downcase
@cindex char-downcase
@anchor{char-upcase}
@anchor{char-downcase}


@subsubheading Syntax:

@DefunWithValues{char-upcase, character, corresponding-character}
@DefunWithValues{char-downcase, character, corresponding-character}


@subsubheading Arguments and Values:

@param{character}, @param{corresponding-character}---a @term{character}.

@subsubheading Description:

If @param{character} is a @term{lowercase} @term{character},
@code{char-upcase} returns the corresponding @term{uppercase} @term{character}.
Otherwise, @code{char-upcase} just returns the given @param{character}.

If @param{character} is an @term{uppercase} @term{character},
@code{char-downcase} returns the corresponding @term{lowercase} @term{character}.
Otherwise, @code{char-downcase} just returns the given @param{character}.

The result only ever differs from @param{character} 
in its @term{code} @term{attribute};
all @term{implementation-defined} @term{attributes} are preserved.

@subsubheading Examples:

@lisp
 (char-upcase #@bsl{}a) @EV{} #@bsl{}A
 (char-upcase #@bsl{}A) @EV{} #@bsl{}A
 (char-downcase #@bsl{}a) @EV{} #@bsl{}a
 (char-downcase #@bsl{}A) @EV{} #@bsl{}a
 (char-upcase #@bsl{}9) @EV{} #@bsl{}9
 (char-downcase #@bsl{}9) @EV{} #@bsl{}9
 (char-upcase #@bsl{}@@) @EV{} #@bsl{}@@
 (char-downcase #@bsl{}@@) @EV{} #@bsl{}@@
 ;; Note that this next example might run for a very long time in 
 ;; some implementations if CHAR-CODE-LIMIT happens to be very large
 ;; for that implementation.
 (dotimes (code char-code-limit)
   (let ((char (code-char code)))
     (when char
       (unless (cond ((upper-case-p char) (char= (char-upcase (char-downcase char)) char))
                     ((lower-case-p char) (char= (char-downcase (char-upcase char)) char))
                     (t (and (char= (char-upcase (char-downcase char)) char)
                             (char= (char-downcase (char-upcase char)) char))))
         (return char)))))
@EV{} NIL
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{character, a @term{character}}

@subsubheading See Also:

@ref{upper-case-p},
@ref{alpha-char-p},
@ref{CharactersWithCase, Section 13.1.4.3 (Characters With Case)},
@ref{Documentation of Implementation-Defined Scripts, Section 13.1.10 (Documentation of Implementation-Defined Scripts)}

@subsubheading Notes:

If the @param{corresponding-char} is @term{different} than @param{character},
then both the @param{character} and the @param{corresponding-char} have @term{case}.

Since @code{char-equal} ignores the @term{case} of the @term{characters} it compares,
the @param{corresponding-character} is always the @term{same} as @param{character}
under @code{char-equal}.


@node upper-case-p; lower-case-p; both-case-p
@heading upper-case-p, lower-case-p, both-case-p (Function)
@syindex upper-case-p
@cindex upper-case-p
@syindex lower-case-p
@cindex lower-case-p
@syindex both-case-p
@cindex both-case-p
@anchor{upper-case-p}


@subsubheading Syntax:

@DefunWithValues{upper-case-p, character, generalized-boolean}
@DefunWithValues{lower-case-p, character, generalized-boolean}
@DefunWithValues{both-case-p, character, generalized-boolean}


@subsubheading Arguments and Values:

@param{character}---a @term{character}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

These functions test the case of a given @param{character}.

@NamedPredicate{upper-case-p, character, an @term{uppercase} @term{character}}

@NamedPredicate{lower-case-p, character, a @term{lowercase} @term{character}}

@NamedPredicate{both-case-p, character, a @term{character} with @term{case}}

@subsubheading Examples:

@lisp
 (upper-case-p #@bsl{}A) @EV{} @term{true}
 (upper-case-p #@bsl{}a) @EV{} @term{false}
 (both-case-p #@bsl{}a) @EV{} @term{true}
 (both-case-p #@bsl{}5) @EV{} @term{false}
 (lower-case-p #@bsl{}5) @EV{} @term{false}
 (upper-case-p #@bsl{}5) @EV{} @term{false}
 ;; This next example presupposes an implementation 
 ;; in which #@bsl{}Bell is an implementation-defined character.
 (lower-case-p #@bsl{}Bell) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{character, a @term{character}}

@subsubheading See Also:

@ref{char-upcase},
@ref{char-downcase},
@ref{CharactersWithCase, Section 13.1.4.3 (Characters With Case)},
@ref{Documentation of Implementation-Defined Scripts, Section 13.1.10 (Documentation of Implementation-Defined Scripts)}


@node char-code
@heading char-code (Function)
@syindex char-code
@cindex char-code


@subsubheading Syntax:

@DefunWithValues{char-code, character, code}

@subsubheading Arguments and Values:

@param{character}---a @term{character}.

@param{code}---a @term{character code}.

@subsubheading Description:

@code{char-code} returns the @term{code} @term{attribute} of @param{character}.

@subsubheading Examples:

@lisp
;; An implementation using ASCII character encoding 
;; might return these values:
(char-code #@bsl{}$) @EV{} 36
(char-code #@bsl{}a) @EV{} 97
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{character, a @term{character}}

@subsubheading See Also:

@ref{char-code-limit}


@node char-int
@heading char-int (Function)
@syindex char-int
@cindex char-int


@subsubheading Syntax:

@DefunWithValues{char-int, character, integer}

@subsubheading Arguments and Values:

@param{character}---a @term{character}.

@param{integer}---a non-negative @term{integer}.

@subsubheading Description:

Returns a non-negative @term{integer} encoding the @param{character} object.
The manner in which the @term{integer} is computed is @term{implementation-dependent}.
In contrast to @code{sxhash}, the result is not guaranteed to be independent 
of the particular @term{Lisp image}.

If @param{character} has no @term{implementation-defined} @term{attributes},
the results of @code{char-int} and @code{char-code} are the same. 

@lisp
 (char= @i{c1} @i{c2}) @EQ{} (= (char-int @i{c1}) (char-int @i{c2}))
@end lisp

for characters @i{c1} and @i{c2}.

@subsubheading Examples:

@lisp
 (char-int #@bsl{}A) @EV{} 65       ; implementation A
 (char-int #@bsl{}A) @EV{} 577      ; implementation B
 (char-int #@bsl{}A) @EV{} 262145   ; implementation C
@end lisp


@subsubheading See Also:

@ref{char-code}


@node code-char
@heading code-char (Function)
@syindex code-char
@cindex code-char



@subsubheading Syntax:

@DefunWithValues{code-char, code, char-p}

@subsubheading Arguments and Values:

@param{code}---a @term{character code}.

@param{char-p}---a @term{character} or @nil{}.

@subsubheading Description:

Returns a @term{character} with the @term{code} @term{attribute} given by @param{code}.
If no such @term{character} exists and one cannot be created, @nil{}@spc{}is returned.

@subsubheading Examples:

@lisp
(code-char 65.) @EV{} #@bsl{}A  ;in an implementation using ASCII codes
(code-char (char-code #@bsl{}Space)) @EV{} #@bsl{}Space  ;in any implementation
@end lisp


@subsubheading Affected By:

The @term{implementation}'s character encoding.

@subsubheading See Also:

@ref{char-code}

@subsubheading Notes:



@node char-code-limit
@heading char-code-limit (Constant Variable)
@syindex char-code-limit
@cindex char-code-limit


@subsubheading Constant Value:

A non-negative @term{integer}, the exact magnitude of which
is @term{implementation-dependent}, but which is not less
than @f{96} (the number of @term{standard characters}).

@subsubheading Description:

The upper exclusive bound on the @term{value} returned by 
the @term{function} @code{char-code}.

@subsubheading See Also:

@ref{char-code}

@subsubheading Notes:

@Thevalueof{char-code-limit} might be larger than the actual
number of @term{characters} supported by the @term{implementation}.


@node char-name
@heading char-name (Function)
@syindex char-name
@cindex char-name


@subsubheading Syntax:

@DefunWithValues{char-name, character, name}

@subsubheading Arguments and Values:

@param{character}---a @term{character}.

@param{name}---a @term{string} or @nil{}.

@subsubheading Description:

Returns a @term{string} that is the @term{name} of the @param{character},
or @nil{}@spc{}if the @param{character} has no @term{name}.

All @term{non-graphic} characters are required to have @term{names}
unless they have some @term{implementation-defined} @term{attribute}
which is not @term{null}.  Whether or not other @term{characters}
have @term{names} is @term{implementation-dependent}.

The @term{standard characters}
@NewlineChar{}@spc{}and @SpaceChar{}@spc{}have the respective names @f{"Newline"} and @f{"Space"}.
The @term{semi-standard} @term{characters}
@TabChar{}, @PageChar{}, @RuboutChar{}, @LinefeedChar{}, @ReturnChar{}, and @BackspaceChar{}@spc{}
(if they are supported by the @term{implementation})
have the respective names
@f{"Tab"},  @f{"Page"},  @f{"Rubout"},  @f{"Linefeed"},  @f{"Return"}, and @f{"Backspace"}
(in the indicated case, even though name lookup by ``@f{#@bsl{}}'' 
and by @thefunction{name-char} is not case sensitive).

@subsubheading Examples:

@lisp
 (char-name #\@spc{}) @EV{} "Space"
 (char-name #@bsl{}Space) @EV{} "Space"
 (char-name #@bsl{}Page) @EV{} "Page"

 (char-name #@bsl{}a)
@EV{} NIL
@OV{} "LOWERCASE-a"
@OV{} "Small-A"
@OV{} "LA01"

 (char-name #@bsl{}A)
@EV{} NIL
@OV{} "UPPERCASE-A"
@OV{} "Capital-A"
@OV{} "LA02"

 ;; Even though its CHAR-NAME can vary, #@bsl{}A prints as #@bsl{}A
 (prin1-to-string (read-from-string (format nil "#@bsl{}@bsl{}~A" (or (char-name #@bsl{}A) "A"))))
@EV{} "#@bsl{}@bsl{}A"
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{character, a @term{character}}

@subsubheading See Also:

@ref{name-char},
@ref{PrintingCharacters, Section 22.1.3.2 (Printing Characters)}

@subsubheading Notes:

@term{Non-graphic} 
@term{characters} having @term{names} are written by the @term{Lisp printer}
as ``@f{#@bsl{}}'' followed by the their @term{name}; see @ref{PrintingCharacters, Section 22.1.3.2 (Printing Characters)}.


@node name-char
@heading name-char (Function)
@syindex name-char
@cindex name-char


@subsubheading Syntax:

@DefunWithValues{name-char, name, char-p}

@subsubheading Arguments and Values:

@param{name}---a @term{string designator}.

@param{char-p}---a @term{character} or @nil{}.

@subsubheading Description:

Returns the @term{character} @term{object} whose @term{name} is
@param{name} (as determined by @code{string-equal}---@ie{} lookup is not case sensitive).
If such a @term{character} does not exist, @nil{}@spc{}is returned.

@subsubheading Examples:

@lisp
(name-char 'space) @EV{} #@bsl{}Space
(name-char "space") @EV{} #@bsl{}Space
(name-char "Space") @EV{} #@bsl{}Space
(let ((x (char-name #@bsl{}a)))
  (or (not x) (eql (name-char x) #@bsl{}a))) @EV{} @term{true}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{name, a @term{string designator}}

@subsubheading See Also:

@ref{char-name}




@node Conses
@chapter Conses
@menu
* Cons Concepts::

Dictionary

* list (System Class)::
* null (System Class)::
* cons (System Class)::
* atom (Type)::
* cons (Function)::
* consp::
* atom (Function)::
* rplaca; rplacd::
* car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+::
* copy-tree::
* sublis; nsublis::
* subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not::
* tree-equal::
* copy-list::
* list; list*::
* list-length::
* listp::
* make-list::
* push::
* pop::
* first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+::
* nth::
* endp::
* null (Function)::
* nconc::
* append::
* revappend; nreconc::
* butlast; nbutlast::
* last::
* ldiff; tailp::
* nthcdr::
* rest::
* member; member-if; member-if-not::
* mapc; mapcar; mapcan; mapl; maplist; mapcon::
* acons::
* assoc; assoc-if; assoc-if-not::
* copy-alist::
* pairlis::
* rassoc; rassoc-if; rassoc-if-not::
* get-properties::
* getf::
* remf::
* intersection; nintersection::
* adjoin::
* pushnew::
* set-difference; nset-difference::
* set-exclusive-or; nset-exclusive-or::
* subsetp::
* union; nunion::
@end menu

@node Cons Concepts
@section Cons Concepts

A @newterm{cons} is a compound data @term{object} 
having two components called the @term{car} and the @term{cdr}.


@float Figure,fig14.1
@cartouche
@multitable{car}{rplaca}{rplacd}

@item car @tab cons @tab rplacd
@item cdr @tab rplaca @tab 
@end multitable
@end cartouche
@caption{Some defined names relating to conses.}
@end float


Depending on context, a group of connected @term{conses} can be viewed
in a variety of different ways.  A variety of operations is provided to
support each of these various views.

@menu
* Conses as Trees::
* Conses as Lists::
@end menu
@node Conses as Trees
@subsection Conses as Trees

A @newterm{tree} is a binary recursive data structure made up of
@term{conses} and @term{atoms}:
the @term{conses} are themselves also @term{trees}
(sometimes called ``subtrees'' or ``branches''), and the @term{atoms}
are terminal nodes (sometimes called @newterm{leaves}). 
Typically, the @term{leaves} represent data while the branches 
establish some relationship among that data.


@float Figure,fig14.2
@cartouche
@multitable{caaaar}{caddar}{copy-tree}{nsubst-if-not}

@item caaaar @tab caddar @tab cdar @tab nsubst
@item caaadr @tab cadddr @tab cddaar @tab nsubst-if
@item caaar @tab caddr @tab cddadr @tab nsubst-if-not
@item caadar @tab cadr @tab cddar @tab nthcdr
@item caaddr @tab cdaaar @tab cdddar @tab sublis
@item caadr @tab cdaadr @tab cddddr @tab subst
@item caar @tab cdaar @tab cdddr @tab subst-if
@item cadaar @tab cdadar @tab cddr @tab subst-if-not
@item cadadr @tab cdaddr @tab copy-tree @tab tree-equal
@item cadar @tab cdadr @tab nsublis @tab 
@end multitable
@end cartouche
@caption{Some defined names relating to trees.}
@end float


@subsubsection General Restrictions on Parameters that must be Trees

Except as explicitly stated otherwise,
for any @term{standardized} @term{function} that takes a @term{parameter}
that is required to be a @term{tree},
the consequences are undefined
if that @term{tree} is circular.



@node Conses as Lists
@subsection Conses as Lists

A @newterm{list} is a chain of @term{conses} in which the @term{car} of each
@term{cons} is an @term{element} of the @term{list}, 
and the @term{cdr} of each @term{cons} is either the next
link in the chain or a terminating @term{atom}.  

A @newterm{proper list} is a @term{list} terminated by the @term{empty list}.
The @term{empty list} is a @term{proper list}, but is not a @term{cons}.

An @newterm{improper list} is a @term{list} that is not a @term{proper list};
that is, it is a @term{circular list} or a @term{dotted list}.

A @newterm{dotted list} is a @term{list} that has a terminating @term{atom}
that is not the @term{empty list}.  A @term{non-nil} @term{atom} by itself
is not considered to be a @term{list} of any kind---not even a @term{dotted list}.

A @newterm{circular list} is a chain of @term{conses} that has no termination 
because some @term{cons} in the chain is the @term{cdr} of a later @term{cons}.


@float Figure,fig14.3
@cartouche
@multitable{copy-alist}{member-if-not}{nbutlast}{revappend}

@item append @tab last @tab nbutlast @tab rest
@item butlast @tab ldiff @tab nconc @tab revappend
@item copy-alist @tab list @tab ninth @tab second
@item copy-list @tab list* @tab nreconc @tab seventh
@item eighth @tab list-length @tab nth @tab sixth
@item endp @tab make-list @tab nthcdr @tab tailp
@item fifth @tab member @tab pop @tab tenth
@item first @tab member-if @tab push @tab third
@item fourth @tab member-if-not @tab pushnew @tab 
@end multitable
@end cartouche
@caption{Some defined names relating to lists.}
@end float


@subsubsection Lists as Association Lists

An @newterm{association list} is a @term{list} of @term{conses} 
representing an association of @term{keys} with @term{values}, 
where the @term{car} of each @term{cons} is the @term{key} 
and the @term{cdr} is the @term{value} associated with that @term{key}.


@float Figure,fig14.4
@cartouche
@multitable{acons}{assoc-if-not}{pairlis}{rassoc-if-not}

@item acons @tab assoc-if @tab pairlis @tab rassoc-if
@item assoc @tab assoc-if-not @tab rassoc @tab rassoc-if-not
@end multitable
@end cartouche
@caption{Some defined names related to assocation lists.}
@end float



@subsubsection Lists as Sets

@term{Lists} are sometimes viewed as sets by considering their elements
unordered and by assuming there is no duplication of elements.


@float Figure,fig14.5
@cartouche
@multitable{nintersection}{nset-exclusive-or}{set-exclusive-or}{union}

@item adjoin @tab nset-difference @tab set-difference @tab union
@item intersection @tab nset-exclusive-or @tab set-exclusive-or @tab 
@item nintersection @tab nunion @tab subsetp @tab 
@end multitable
@end cartouche
@caption{Some defined names related to sets.}
@end float



@subsubsection General Restrictions on Parameters that must be Lists

Except as explicitly specified otherwise,
any @term{standardized} @term{function} that takes a @term{parameter}
that is required to be a @term{list} should be prepared to signal 
an error @oftype{type-error} if the @term{value} received is a @term{dotted list}.

Except as explicitly specified otherwise,
for any @term{standardized} @term{function} that takes a @term{parameter}
that is required to be a @term{list}, 
the consequences are undefined 
if that @term{list} is @term{circular}.



@node list (System Class)
@heading list (System Class)
@syindex list
@cindex list


@subsubheading Class Precedence List:

@code{list},
@code{sequence},
@code{t}

@subsubheading Description:

A @newterm{list} is a chain of @term{conses} in which the @term{car} of each
@term{cons} is an @term{element} of the @term{list}, and the @term{cdr} of
each @term{cons} is either the next link in the chain or a terminating
@term{atom}.

A @newterm{proper list} is a chain of @term{conses} terminated by 
the @newterm{empty list}, @empty{}, which is  itself a @term{proper list}.
A @newterm{dotted list} is a @term{list} which has a terminating @term{atom} 
that is not the @term{empty list}.
A @newterm{circular list} is a chain of @term{conses} that has no termination
because some @term{cons} in the chain is the @term{cdr} of a later @term{cons}.

@term{Dotted lists} and @term{circular lists} are also @term{lists}, but usually
the unqualified term ``list'' within this specification means @term{proper list}.
Nevertheless, @thetype{list} unambiguously includes @term{dotted lists} 
and @term{circular lists}.

For each @term{element} of a @term{list} there is a @term{cons}.
The @term{empty list} has no @term{elements} and is not a @term{cons}.

@Thetypes{cons} and @code{null} form an @term{exhaustive partition} 
of the @term{type} @code{list}.

@subsubheading See Also:

@ref{Left-Parenthesis, Section 2.4.1 (Left-Parenthesis)},
@ref{PrintingListsAndConses, Section 22.1.3.5 (Printing Lists and Conses)}


@node null (System Class)
@heading null (System Class)
@syindex null
@cindex null


@subsubheading Class Precedence List:
@code{null},
@code{symbol},
@code{list},
@code{sequence},
@code{t}

@subsubheading Description:

The only @term{object} @oftype{null} is @nil{}, 
which represents the @term{empty list} and can also be notated @empty{}.

@subsubheading See Also:

@ref{Symbols as Tokens, Section 2.3.4 (Symbols as Tokens)},
@ref{Left-Parenthesis, Section 2.4.1 (Left-Parenthesis)},
@ref{PrintingSymbols, Section 22.1.3.3 (Printing Symbols)}

@node cons (System Class)
@heading cons (System Class)
@syindex cons
@cindex cons


@subsubheading Class Precedence List:
@code{cons},
@code{list},
@code{sequence},
@code{t}

@subsubheading Description:

A @term{cons} is a compound @term{object} having two components,
called the @term{car} and @term{cdr}. These form a @term{dotted pair}.
Each component can be any @term{object}.


@subsubheading Compound Type Specifier Kind:

Specializing.

@subsubheading Compound Type Specifier Syntax:

@Deftype{cons, @ttbrac{car-typespec @brac{cdr-typespec}}}

@subsubheading Compound Type Specifier Arguments:

@param{car-typespec}---a @term{type specifier},
or the @term{symbol} @t{*}.
@Default{the @term{symbol} @t{*}}

@param{cdr-typespec}---a @term{type specifier},
or the @term{symbol} @t{*}.
@Default{the @term{symbol} @t{*}}

@subsubheading Compound Type Specifier Description:

This denotes the set of @term{conses} 
whose @term{car} is constrained to be of @term{type} @param{car-typespec} and
whose @term{cdr} is constrained to be of @term{type} @param{cdr-typespec}.
(If either @param{car-typespec} or @param{cdr-typespec} is @t{*},
it is as if @thetype{t} had been denoted.)


@subsubheading See Also:

@ref{Left-Parenthesis, Section 2.4.1 (Left-Parenthesis)},
@ref{PrintingListsAndConses, Section 22.1.3.5 (Printing Lists and Conses)}

@node atom (Type)
@heading atom (Type)
@syindex atom
@cindex atom


@subsubheading Supertypes:

@code{atom},
@code{t}

@subsubheading Description:

It is equivalent to @tt{(not cons)}.  


@node cons (Function)
@heading cons (Function)
@syindex cons
@cindex cons


@subsubheading Syntax:

@DefunWithValues{cons, object-1 object-2, cons}

@subsubheading Arguments and Values:

@param{object-1}---an @term{object}.

@param{object-2}---an @term{object}.

@param{cons}---a @term{cons}.

@subsubheading Description:

Creates a @term{fresh} @term{cons}, the @term{car} of which is @param{object-1}
and the @term{cdr} of which is @param{object-2}.

@subsubheading Examples:

@lisp
 (cons 1 2) @EV{} (1 . 2)
 (cons 1 nil) @EV{} (1)
 (cons nil 2) @EV{} (NIL . 2)
 (cons nil nil) @EV{} (NIL)
 (cons 1 (cons 2 (cons 3 (cons 4 nil)))) @EV{} (1 2 3 4)
 (cons 'a 'b) @EV{} (A . B)
 (cons 'a (cons 'b (cons 'c '@empty{}))) @EV{} (A B C)
 (cons 'a '(b c d)) @EV{} (A B C D)
@end lisp


@subsubheading See Also:

@ref{list}

@subsubheading Notes:
If @param{object-2} is a @term{list}, @code{cons} can be thought of as
producing a new @term{list} which is like it but has @param{object-1} prepended.

@node consp
@heading consp (Function)
@syindex consp
@cindex consp


@subsubheading Syntax:

@DefunWithValues{consp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, cons}

@subsubheading Examples:
@lisp
 (consp nil) @EV{} @term{false}
 (consp (cons 1 2)) @EV{} @term{true}
@end lisp


The @term{empty list} is not a @term{cons}, so

@lisp
 (consp '()) @EQ{} (consp 'nil) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{listp}

@subsubheading Notes:

@lisp
 (consp @param{object}) @EQ{} (typep @param{object} 'cons) @EQ{} (not (typep @param{object} 'atom)) @EQ{} (typep @param{object} '(not atom))
@end lisp



@node atom (Function)
@heading atom (Function)
@syindex atom
@cindex atom


@subsubheading Syntax:

@DefunWithValues{atom, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, atom}

@subsubheading Examples:
@lisp
 (atom 'sss) @EV{} @term{true}
 (atom (cons 1 2)) @EV{} @term{false}
 (atom nil) @EV{} @term{true}
 (atom '()) @EV{} @term{true}
 (atom 3) @EV{} @term{true}
@end lisp


@subsubheading Notes:

@lisp
 (atom @param{object}) @EQ{} (typep @param{object} 'atom) @EQ{} (not (consp @param{object}))
 @EQ{} (not (typep @param{object} 'cons)) @EQ{} (typep @param{object} '(not cons))
@end lisp



@node rplaca; rplacd
@heading rplaca, rplacd (Function)
@syindex rplaca
@cindex rplaca
@syindex rplacd
@cindex rplacd
@anchor{rplaca}


@subsubheading Syntax:

@DefunWithValues{rplaca, cons object, cons}
@DefunWithValues{rplacd, cons object, cons}


@subsubheading Pronunciation:

@code{rplaca}: @pronounced{@stress{r@harde{}}@Stress{plak}@schwa{}}
or @pronounced{@stress{r@schwa{}}@Stress{plak}@schwa{}}

@code{rplacd}: @pronounced{@stress{r@harde{}}@Stress{plak}d@schwa{}}
or @pronounced{@stress{r@schwa{}}@Stress{plak}d@schwa{}}
or @pronounced{@stress{r@harde{}}@Stress{plak}d@harde{}}
or @pronounced{@stress{r@schwa{}}@Stress{plak}d@harde{}}

@subsubheading Arguments and Values:

@param{cons}---a @term{cons}.

@param{object}---an @term{object}.

@subsubheading Description:

@code{rplaca} replaces the @term{car} of the @param{cons} with @param{object}.

@code{rplacd} replaces the @term{cdr} of the @param{cons} with @param{object}.

@subsubheading Examples:
@lisp
 (defparameter *some-list* (list* 'one 'two 'three 'four)) @EV{} *some-list*
 *some-list* @EV{} (ONE TWO THREE . FOUR)
 (rplaca *some-list* 'uno) @EV{} (UNO TWO THREE . FOUR)
 *some-list* @EV{} (UNO TWO THREE . FOUR)
 (rplacd (last *some-list*) (list 'IV)) @EV{} (THREE IV)
 *some-list* @EV{} (UNO TWO THREE IV)
@end lisp


@subsubheading Side Effects:

The @param{cons} is modified. 

@Shouldchecktype{cons, a @term{cons}}


@node car; cdr; caar; cadr; cdar; cddr; caaar; caadr; cadar; caddr; cdaar; cd+
@heading car, cdr, caar, cadr, cdar, cddr, caaar, caadr, cadar, caddr, cdaar, cdadr, cddar, cdddr, caaaar, caaadr, caadar, caaddr, cadaar, cadadr, caddar, cadddr, cdaaar, cdaadr, cdadar, cdaddr, cddaar, cddadr, cdddar, cddddr (Accessor)
@syindex car
@cindex car
@syindex cdr
@cindex cdr
@syindex caar
@cindex caar
@syindex cadr
@cindex cadr
@syindex cdar
@cindex cdar
@syindex cddr
@cindex cddr
@syindex caaar
@cindex caaar
@syindex caadr
@cindex caadr
@syindex cadar
@cindex cadar
@syindex caddr
@cindex caddr
@syindex cdaar
@cindex cdaar
@syindex cdadr
@cindex cdadr
@syindex cddar
@cindex cddar
@syindex cdddr
@cindex cdddr
@syindex caaaar
@cindex caaaar
@syindex caaadr
@cindex caaadr
@syindex caadar
@cindex caadar
@syindex caaddr
@cindex caaddr
@syindex cadaar
@cindex cadaar
@syindex cadadr
@cindex cadadr
@syindex caddar
@cindex caddar
@syindex cadddr
@cindex cadddr
@syindex cdaaar
@cindex cdaaar
@syindex cdaadr
@cindex cdaadr
@syindex cdadar
@cindex cdadar
@syindex cdaddr
@cindex cdaddr
@syindex cddaar
@cindex cddaar
@syindex cddadr
@cindex cddadr
@syindex cdddar
@cindex cdddar
@syindex cddddr
@cindex cddddr
@anchor{car}
@anchor{cdr}


@subsubheading Syntax:

car x @EV{} object  |  (setf (x object) new-object)@*
cdr x @EV{} object  |  (setf (x object) new-object)@*
caar x @EV{} object  |  (setf (x object) new-object)@*
cadr x @EV{} object  |  (setf (x object) new-object)@*
cdar x @EV{} object  |  (setf (x object) new-object)@*
cddr x @EV{} object  |  (setf (x object) new-object)@*
caaar x @EV{} object  |  (setf (x object) new-object)@*
caadr x @EV{} object  |  (setf (x object) new-object)@*
cadar x @EV{} object  |  (setf (x object) new-object)@*
caddr x @EV{} object  |  (setf (x object) new-object)@*
cdaar x @EV{} object  |  (setf (x object) new-object)@*
cdadr x @EV{} object  |  (setf (x object) new-object)@*
cddar x @EV{} object  |  (setf (x object) new-object)@*
cdddr x @EV{} object  |  (setf (x object) new-object)@*
caaaar x @EV{} object  |  (setf (x object) new-object)@*
caaadr x @EV{} object  |  (setf (x object) new-object)@*
caadar x @EV{} object  |  (setf (x object) new-object)@*
caaddr x @EV{} object  |  (setf (x object) new-object)@*
cadaar x @EV{} object  |  (setf (x object) new-object)@*
cadadr x @EV{} object  |  (setf (x object) new-object)@*
caddar x @EV{} object  |  (setf (x object) new-object)@*
cadddr x @EV{} object  |  (setf (x object) new-object)@*
cdaaar x @EV{} object  |  (setf (x object) new-object)@*
cdaadr x @EV{} object  |  (setf (x object) new-object)@*
cdadar x @EV{} object  |  (setf (x object) new-object)@*
cdaddr x @EV{} object  |  (setf (x object) new-object)@*
cddaar x @EV{} object  |  (setf (x object) new-object)@*
cddadr x @EV{} object  |  (setf (x object) new-object)@*
cdddar x @EV{} object  |  (setf (x object) new-object)@*
cddddr x @EV{} object  |  (setf (x object) new-object)@*
@*


@subsubheading Pronunciation:

@code{cadr}: @pronounced{@Stress{ka}@stress{d@schwa{} r}}

@code{caddr}: @pronounced{@Stress{kad}@schwa{} @stress{d@schwa{} r}}
or @pronounced{@Stress{ka}@stress{d\.ud@schwa{} r}}

@code{cdr}: @pronounced{@Stress{k\.u}@stress{d@schwa{} r}}

@code{cddr}: @pronounced{@Stress{k\.ud}@schwa{} @stress{d@schwa{} r}}
or @pronounced{@Stress{k@schwa{}}@stress{d\.ud@schwa{} r}}

@subsubheading Arguments and Values:

@param{x}---a @term{list}.

@param{object}---an @term{object}.

@param{new-object}---an @term{object}.

@subsubheading Description:

If @param{x} is a @term{cons}, @code{car} returns the @term{car} 
of that @term{cons}.  If @param{x} is @nil{}, @code{car} returns @nil{}.

If @param{x} is a @term{cons}, @code{cdr} returns the @term{cdr} 
of that @term{cons}.  If @param{x} is @nil{}, @code{cdr} returns @nil{}.

@term{Functions} are provided which perform compositions of up to four
@code{car} and @code{cdr} operations.  Their @term{names} consist of 
a @f{C}, followed by two, three, or four occurrences of @f{A} or @f{D}, 
and finally an @f{R}.  The series of @f{A}'s and @f{D}'s in each
@term{function}'s @term{name} is chosen to identify the series of 
@code{car} and @code{cdr} operations that is performed by the function.
The order in which the @f{A}'s and @f{D}'s appear is the inverse of the
order in which the corresponding operations are performed.  @Thenextfigure{}@spc{}
defines the relationships precisely.


@float Figure,fig14.6
@cartouche
@multitable{This @term{place} @mat{@ldots{}}}{Is equivalent to this @term{place} @mat{@ldots{}}}
@headitem This @term{place} @mat{@ldots{}} @tab Is equivalent to this @term{place} @mat{@ldots{}}
@item @f{(caar @param{x})} @tab @f{(car (car @param{x}))}
@item @f{(cadr @param{x})} @tab @f{(car (cdr @param{x}))}
@item @f{(cdar @param{x})} @tab @f{(cdr (car @param{x}))}
@item @f{(cddr @param{x})} @tab @f{(cdr (cdr @param{x}))}
@item @f{(caaar @param{x})} @tab @f{(car (car (car @param{x})))}
@item @f{(caadr @param{x})} @tab @f{(car (car (cdr @param{x})))}
@item @f{(cadar @param{x})} @tab @f{(car (cdr (car @param{x})))}
@item @f{(caddr @param{x})} @tab @f{(car (cdr (cdr @param{x})))}
@item @f{(cdaar @param{x})} @tab @f{(cdr (car (car @param{x})))}
@item @f{(cdadr @param{x})} @tab @f{(cdr (car (cdr @param{x})))}
@item @f{(cddar @param{x})} @tab @f{(cdr (cdr (car @param{x})))}
@item @f{(cdddr @param{x})} @tab @f{(cdr (cdr (cdr @param{x})))}
@item @f{(caaaar @param{x})} @tab @f{(car (car (car (car @param{x}))))}
@item @f{(caaadr @param{x})} @tab @f{(car (car (car (cdr @param{x}))))}
@item @f{(caadar @param{x})} @tab @f{(car (car (cdr (car @param{x}))))}
@item @f{(caaddr @param{x})} @tab @f{(car (car (cdr (cdr @param{x}))))}
@item @f{(cadaar @param{x})} @tab @f{(car (cdr (car (car @param{x}))))}
@item @f{(cadadr @param{x})} @tab @f{(car (cdr (car (cdr @param{x}))))}
@item @f{(caddar @param{x})} @tab @f{(car (cdr (cdr (car @param{x}))))}
@item @f{(cadddr @param{x})} @tab @f{(car (cdr (cdr (cdr @param{x}))))}
@item @f{(cdaaar @param{x})} @tab @f{(cdr (car (car (car @param{x}))))}
@item @f{(cdaadr @param{x})} @tab @f{(cdr (car (car (cdr @param{x}))))}
@item @f{(cdadar @param{x})} @tab @f{(cdr (car (cdr (car @param{x}))))}
@item @f{(cdaddr @param{x})} @tab @f{(cdr (car (cdr (cdr @param{x}))))}
@item @f{(cddaar @param{x})} @tab @f{(cdr (cdr (car (car @param{x}))))}
@item @f{(cddadr @param{x})} @tab @f{(cdr (cdr (car (cdr @param{x}))))}
@item @f{(cdddar @param{x})} @tab @f{(cdr (cdr (cdr (car @param{x}))))}
@item @f{(cddddr @param{x})} @tab @f{(cdr (cdr (cdr (cdr @param{x}))))}
@end multitable
@end cartouche
@caption{CAR and CDR variants}
@end float


@code{setf} can also be used with any of these functions to change an
existing component of @param{x}, but @code{setf} will not make new
components.  So, for example, the @term{car} of a @term{cons} 
can be assigned with @code{setf} of @code{car},
but the @term{car} of @nil{}@spc{}cannot be assigned with @code{setf} of @code{car}.
Similarly, the @term{car} of the @term{car} of a @term{cons} whose @term{car}
is a @term{cons} can be assigned with @code{setf} of @code{caar},
but neither @nil{} nor a @term{cons} whose car is @nil{}@spc{}can be assigned
with @code{setf} of @code{caar}.

The argument @param{x} is permitted to be a @term{dotted list} 
or a @term{circular list}.

@subsubheading Examples:

@lisp
 (car nil) @EV{} NIL  
 (cdr '(1 . 2)) @EV{} 2
 (cdr '(1 2)) @EV{} (2)
 (cadr '(1 2)) @EV{} 2 
 (car '(a b c)) @EV{} A
 (cdr '(a b c)) @EV{} (B C)
@end lisp


@subsubheading Exceptional Situations:

The functions @code{car} and @code{cdr} 
should signal @code{type-error} if they receive an argument which is not a
@term{list}.  The other functions (@code{caar}, @code{cadr},
@mat{@ldots{}} @code{cddddr}) should behave for the purpose of
error checking as if defined by appropriate calls to @code{car} and
@code{cdr}.

@subsubheading See Also:

@ref{rplaca}, @ref{first}, @ref{rest}

@subsubheading Notes:

The @term{car} of a @term{cons} can also be altered by using @code{rplaca},
and the @term{cdr} of a @term{cons} can be altered by using @code{rplacd}.

@lisp
(car @i{x})    @EQ{} (first @i{x})
(cadr @i{x})   @EQ{} (second @i{x}) @EQ{} (car (cdr @i{x}))
(caddr @i{x})  @EQ{} (third @i{x})  @EQ{} (car (cdr (cdr @i{x})))
(cadddr @i{x}) @EQ{} (fourth @i{x}) @EQ{} (car (cdr (cdr (cdr @i{x}))))
@end lisp



@node copy-tree
@heading copy-tree (Function)
@syindex copy-tree
@cindex copy-tree



@subsubheading Syntax:

@DefunWithValues{copy-tree, tree, new-tree}

@subsubheading Arguments and Values:

@param{tree}---a @term{tree}.

@param{new-tree}---a @term{tree}.

@subsubheading Description:

Creates a @term{copy} of a @term{tree} of @term{conses}.

If @param{tree} is not a @term{cons}, it is returned; 
otherwise, the result is a new @term{cons} of the results of calling @code{copy-tree} 
on the @term{car} and @term{cdr} of @param{tree}.
In other words, all @term{conses} in the @term{tree} represented by @param{tree}
are copied recursively, stopping only when non-@term{conses} are encountered.

@code{copy-tree} does not preserve circularities and the sharing of substructure.

@subsubheading Examples:

@lisp
 (setq object (list (cons 1 "one")
                    (cons 2 (list 'a 'b 'c))))
@EV{} ((1 . "one") (2 A B C))
 (setq object-too object) @EV{} ((1 . "one") (2 A B C))
 (setq copy-as-list (copy-list object))
 (setq copy-as-alist (copy-alist object))
 (setq copy-as-tree (copy-tree object))
 (eq object object-too) @EV{} @term{true}
 (eq copy-as-tree object) @EV{} @term{false}
 (eql copy-as-tree object) @EV{} @term{false}
 (equal copy-as-tree object) @EV{} @term{true}
 (setf (first (cdr (second object))) "a"
       (car (second object)) "two"
       (car object) '(one . 1)) @EV{} (ONE . 1)
 object @EV{} ((ONE . 1) ("two" "a" B C))
 object-too @EV{} ((ONE . 1) ("two" "a" B C))
 copy-as-list @EV{} ((1 . "one") ("two" "a" B C))
 copy-as-alist @EV{} ((1 . "one") (2 "a" B C))
 copy-as-tree @EV{} ((1 . "one") (2 A B C)) 
@end lisp


@subsubheading See Also:

@ref{tree-equal}



@node sublis; nsublis
@heading sublis, nsublis (Function)
@syindex sublis
@cindex sublis
@syindex nsublis
@cindex nsublis


@subsubheading Syntax:

@DefunWithValues{sublis, alist tree @key{} key test test-not, new-tree}
@DefunWithValues{nsublis, alist tree @key{} key test test-not, new-tree}

@subsubheading Arguments and Values:

@param{alist}---an @term{association list}.

@param{tree}---a @term{tree}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{new-tree}---a @term{tree}.

@subsubheading Description:

@code{sublis} makes substitutions for @term{objects} in @param{tree}
(a structure of @term{conses}).
@code{nsublis} is like @code{sublis} 
but destructively modifies the relevant
parts of the @param{tree}.

@code{sublis} looks at all subtrees and leaves of @param{tree};
if a subtree or leaf appears as a key in @param{alist}
(that is, the key and the subtree or leaf @term{satisfy the test}),
it is replaced by the @term{object} with which that key is associated.
This operation is non-destructive.  In effect, @code{sublis} can
perform several @code{subst} operations simultaneously.

If @code{sublis} succeeds, a new copy of @param{tree} is returned in
which each occurrence of such a subtree or leaf is replaced by the
@term{object} with which it is associated.   If no changes are made, the
original tree is returned.  The original @param{tree} is left unchanged,
but the result tree may share cells with it.

@code{nsublis} is permitted to modify @param{tree} 
but otherwise returns the same values as @code{sublis}.

@subsubheading Examples:

@lisp
 (sublis '((x . 100) (z . zprime))
         '(plus x (minus g z x p) 4 . x))
@EV{} (PLUS 100 (MINUS G ZPRIME 100 P) 4 . 100)
 (sublis '(((+ x y) . (- x y)) ((- x y) . (+ x y)))
         '(* (/ (+ x y) (+ x p)) (- x y))
         :test #'equal)
@EV{} (* (/ (- X Y) (+ X P)) (+ X Y))
 (setq tree1 '(1 (1 2) ((1 2 3)) (((1 2 3 4)))))
@EV{} (1 (1 2) ((1 2 3)) (((1 2 3 4))))
 (sublis '((3 . "three")) tree1) 
@EV{} (1 (1 2) ((1 2 "three")) (((1 2 "three" 4))))
 (sublis '((t . "string"))
          (sublis '((1 . "") (4 . 44)) tree1)
          :key #'stringp)
@EV{} ("string" ("string" 2) (("string" 2 3)) ((("string" 2 3 44))))
 tree1 @EV{} (1 (1 2) ((1 2 3)) (((1 2 3 4))))
 (setq tree2 '("one" ("one" "two") (("one" "Two" "three"))))
@EV{} ("one" ("one" "two") (("one" "Two" "three"))) 
 (sublis '(("two" . 2)) tree2) 
@EV{} ("one" ("one" "two") (("one" "Two" "three"))) 
 tree2 @EV{} ("one" ("one" "two") (("one" "Two" "three"))) 
 (sublis '(("two" . 2)) tree2 :test 'equal) 
@EV{} ("one" ("one" 2) (("one" "Two" "three"))) 

 (nsublis '((t . 'temp))
           tree1
           :key #'(lambda (x) (or (atom x) (< (list-length x) 3))))
@EV{} ((QUOTE TEMP) (QUOTE TEMP) QUOTE TEMP) 
@end lisp


@subsubheading Side Effects:

@code{nsublis} modifies @param{tree}.

@subsubheading See Also:

@ref{subst},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.

Because the side-effecting variants (@eg{} @code{nsublis}) potentially
change the path that is being traversed, their effects in the presence
of shared or circular structure structure may vary in surprising ways
when compared to their non-side-effecting alternatives.  To see this,
consider the following side-effect behavior, which might be exhibited by
some implementations:

@lisp
 (defun test-it (fn)
   (let* ((shared-piece (list 'a 'b))
          (data (list shared-piece shared-piece)))
     (funcall fn '((a . b) (b . a)) data)))
 (test-it #'sublis) @EV{} ((B A) (B A))
 (test-it #'nsublis) @EV{} ((A B) (A B))
@end lisp



@node subst; subst-if; subst-if-not; nsubst; nsubst-if; nsubst-if-not
@heading subst, subst-if, subst-if-not, nsubst, nsubst-if, nsubst-if-not (Function)
@syindex subst
@cindex subst
@syindex subst-if
@cindex subst-if
@syindex subst-if-not
@cindex subst-if-not
@syindex nsubst
@cindex nsubst
@syindex nsubst-if
@cindex nsubst-if
@syindex nsubst-if-not
@cindex nsubst-if-not
@anchor{subst}
@anchor{nsubst}


@subsubheading Syntax:

@DefunWithValues{subst, new old  tree @key{} key test test-not, new-tree}
@DefunWithValues{subst-if, new predicate tree @key{} key, new-tree}
@DefunWithValues{subst-if-not, new predicate tree @key{} key, new-tree}

@DefunWithValues{nsubst, new old  tree @key{} key test test-not, new-tree}
@DefunWithValues{nsubst-if, new predicate tree @key{} key, new-tree}
@DefunWithValues{nsubst-if-not, new predicate tree @key{} key, new-tree}

@subsubheading Arguments and Values:

@param{new}---an @term{object}.

@param{old}---an @term{object}.

@param{predicate}---a @term{symbol} that names a @term{function},
or a @term{function} of one argument 
that returns a @term{generalized boolean} value.

@param{tree}---a @term{tree}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{new-tree}---a @term{tree}.

@subsubheading Description:

@code{subst}, @code{subst-if}, and @code{subst-if-not} perform
substitution operations on @param{tree}.  
Each function searches @param{tree} for occurrences of a 
particular @param{old} item of an element or subexpression that 
@term{satisfies the test}.

@code{nsubst}, @code{nsubst-if}, and @code{nsubst-if-not} are 
like @code{subst},
@code{subst-if}, and @code{subst-if-not} respectively, except that the 
original @param{tree} is  modified.

@code{subst} makes a copy of @param{tree},
substituting @param{new} for every subtree or leaf of @param{tree}
(whether the subtree or leaf is a @term{car} or a @term{cdr} of its parent)
such that @param{old} and the subtree or leaf @term{satisfy the test}.  

@code{nsubst} is a destructive version of @code{subst}.  
The list structure of
@param{tree} is altered by destructively replacing with @param{new}
each leaf of the @param{tree} such that @param{old} and the leaf
@term{satisfy the test}.

For @code{subst}, @code{subst-if}, 
and @code{subst-if-not},
if the functions succeed, a new
copy of the tree is returned in which each  occurrence of such an
element is replaced by the
@param{new} element or subexpression.  If no changes are made, the original 
@param{tree} may be returned.
The original @param{tree} is left unchanged, but the result tree 
may share storage with it.           

For @code{nsubst}, @code{nsubst-if}, 
and @code{nsubst-if-not}
the original @param{tree} is  modified and returned as the function result,
but the result may not be @code{eq} to @param{tree}.

@subsubheading Examples:

@lisp
 (setq tree1 '(1 (1 2) (1 2 3) (1 2 3 4))) @EV{} (1 (1 2) (1 2 3) (1 2 3 4))
 (subst "two" 2 tree1) @EV{} (1 (1 "two") (1 "two" 3) (1 "two" 3 4))
 (subst "five" 5 tree1) @EV{} (1 (1 2) (1 2 3) (1 2 3 4))
 (eq tree1 (subst "five" 5 tree1)) @EV{} @term{implementation-dependent}
 (subst 'tempest 'hurricane
        '(shakespeare wrote (the hurricane)))
@EV{} (SHAKESPEARE WROTE (THE TEMPEST))
 (subst 'foo 'nil '(shakespeare wrote (twelfth night)))
@EV{} (SHAKESPEARE WROTE (TWELFTH NIGHT . FOO) . FOO)
 (subst '(a . cons) '(old . pair)
        '((old . spice) ((old . shoes) old . pair) (old . pair))
        :test #'equal)
@EV{} ((OLD . SPICE) ((OLD . SHOES) A . CONS) (A . CONS))

 (subst-if 5 #'listp tree1) @EV{} 5
 (subst-if-not '(x) #'consp tree1) 
@EV{} (1 X)

 tree1 @EV{} (1 (1 2) (1 2 3) (1 2 3 4))
 (nsubst 'x 3 tree1 :key #'(lambda (y) (and (listp y) (third y)))) 
@EV{} (1 (1 2) X X)
 tree1 @EV{} (1 (1 2) X X)
@end lisp


@subsubheading Side Effects:

@code{nsubst}, @code{nsubst-if}, and @code{nsubst-if-not} 
might alter the @term{tree structure} of @param{tree}.

@subsubheading See Also:

@ref{substitute},
@ref{nsubstitute},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.

The functions @code{subst-if-not} and @code{nsubst-if-not} are deprecated.

One possible definition of @code{subst}:

@lisp
 (defun subst (old new tree &rest x &key test test-not key)
   (cond ((satisfies-the-test old tree :test test
                              :test-not test-not :key key)
          new)
         ((atom tree) tree)
         (t (let ((a (apply #'subst old new (car tree) x))
                  (d (apply #'subst old new (cdr tree) x)))
              (if (and (eql a (car tree))
                       (eql d (cdr tree)))
                  tree
                  (cons a d))))))
@end lisp


@node tree-equal
@heading tree-equal (Function)
@syindex tree-equal
@cindex tree-equal



@subsubheading Syntax:

@DefunWithValues{tree-equal, tree-1 tree-2 @key{} test test-not, generalized-boolean}

@subsubheading Arguments and Values:

@param{tree-1}---a @term{tree}.

@param{tree-2}---a @term{tree}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@code{tree-equal} tests whether two trees are of the same shape
and have the same leaves.  
@code{tree-equal} returns @term{true} if @param{tree-1} and @param{tree-2}  are 
both @term{atoms} and @term{satisfy the test},
or if they are both @term{conses} and
the @term{car} of @param{tree-1} is @code{tree-equal} to
the @term{car} of @param{tree-2} and
the @term{cdr} of @param{tree-1} is @code{tree-equal} to
the @term{cdr} of @param{tree-2}.  
Otherwise, @code{tree-equal} returns @term{false}.

@code{tree-equal} recursively compares @term{conses} but not any 
other @term{objects} that have components.  

The first argument to the @kwd{test} or @kwd{test-not} 
function is @param{tree-1} or a @term{car} or @term{cdr} of @param{tree-1};
the second argument is @param{tree-2} or a @term{car} 
or @term{cdr} of @param{tree-2}.

@subsubheading Examples:

@lisp
 (setq tree1 '(1 (1 2))
       tree2 '(1 (1 2))) @EV{} (1 (1 2))
 (tree-equal tree1 tree2) @EV{} @term{true}
 (eql tree1 tree2) @EV{} @term{false}
 (setq tree1 '('a ('b 'c))
       tree2 '('a ('b 'c))) @EV{} ('a ('b 'c)) 
@EV{} ((QUOTE A) ((QUOTE B) (QUOTE C)))
 (tree-equal tree1 tree2 :test 'eq) @EV{} @term{true}
@end lisp


@subsubheading Exceptional Situations:

The consequences are undefined 
if both @param{tree-1} and @param{tree-2} are circular.

@subsubheading See Also:

@ref{equal},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.



@node copy-list
@heading copy-list (Function)
@syindex copy-list
@cindex copy-list


@subsubheading Syntax:

@DefunWithValues{copy-list, list, copy}

@subsubheading Arguments and Values:

@param{list}---a @term{proper list} or a @term{dotted list}.

@param{copy}---a @term{list}.

@subsubheading Description:

Returns a @term{copy} of @param{list}.
If @param{list} is a @term{dotted list},
the resulting @term{list} will also be a @term{dotted list}.

Only the @term{list structure} of @param{list} is copied; 
the @term{elements} of the resulting list are 
the @term{same} as the corresponding @term{elements} of the given @param{list}.

@subsubheading Examples:

@lisp
 (setq lst (list 1 (list 2 3))) @EV{} (1 (2 3))
 (setq slst lst) @EV{} (1 (2 3))
 (setq clst (copy-list lst)) @EV{} (1 (2 3))
 (eq slst lst) @EV{} @term{true}
 (eq clst lst) @EV{} @term{false}
 (equal clst lst) @EV{} @term{true}
 (rplaca lst "one") @EV{} ("one" (2 3))
 slst @EV{} ("one" (2 3))
 clst @EV{} (1 (2 3))
 (setf (caadr lst) "two") @EV{} "two"
 lst @EV{} ("one" ("two" 3))
 slst @EV{} ("one" ("two" 3))
 clst @EV{} (1 ("two" 3))
@end lisp


@subsubheading Exceptional Situations:

The consequences are undefined if @param{list} is a @term{circular list}.

@subsubheading See Also:

@ref{copy-alist},
@ref{copy-seq},
@ref{copy-tree}

@subsubheading Notes:

The copy created is @code{equal} to @param{list}, but not @code{eq}.


@node list; list*
@heading list, list* (Function)
@syindex list
@cindex list
@syindex list*
@cindex list*
@anchor{list}


@subsubheading Syntax:

@DefunWithValues{list, @rest{} objects, list}
@DefunWithValues{list*, @rest{} @plus{objects}, result}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{list}---a @term{list}.

@param{result}---an @term{object}.

@subsubheading Description:

@code{list} returns a @term{list} containing the supplied @param{objects}.  

@code{list*} is like @code{list} except that 
the last @term{argument} to @code{list} becomes 
the @term{car} of the last @term{cons} constructed, while
the last @term{argument} to @code{list*} becomes 
the @term{cdr} of the last @term{cons} constructed.
Hence, any given call to @code{list*} always produces one fewer @term{conses}
than a call to @code{list} with the same number of arguments.

If the last @term{argument} to @code{list*} is a @term{list}, 
the effect is to construct a new @term{list} which is similar, but
which has additional elements added to the front corresponding to
the preceding @term{arguments} of @code{list*}.

If @code{list*} receives only one @param{object},
that @param{object} is returned, regardless of whether or not it is a @term{list}.

@subsubheading Examples:

@lisp
 (list 1) @EV{} (1)
 (list* 1) @EV{} 1
 (setq a 1) @EV{} 1
 (list a 2) @EV{} (1 2)
 '(a 2) @EV{} (A 2)
 (list 'a 2) @EV{} (A 2)
 (list* a 2) @EV{} (1 . 2)
 (list) @EV{} NIL ;@ie{} ()
 (setq a '(1 2)) @EV{} (1 2)
 (eq a (list* a)) @EV{} @term{true}
 (list 3 4 'a (car '(b . c)) (+ 6 -2)) @EV{} (3 4 A B 4)
 (list* 'a 'b 'c 'd) @EQ{} (cons 'a (cons 'b (cons 'c 'd))) @EV{} (A B C . D)
 (list* 'a 'b 'c '(d e f)) @EV{} (A B C D E F)
@end lisp


@subsubheading See Also:

@ref{cons (Function)}

@subsubheading Notes:

@lisp
 (list* @param{x}) @EQ{} @param{x}
@end lisp



@node list-length
@heading list-length (Function)
@syindex list-length
@cindex list-length


@subsubheading Syntax:

@DefunWithValues{list-length, list, length}

@subsubheading Arguments and Values:

@param{list}---a @term{proper list} or a @term{circular list}.

@param{length}---a non-negative @term{integer}, or @nil{}.

@subsubheading Description:

Returns the @term{length} of @param{list} if @param{list} is a @term{proper list}.
Returns @nil{}@spc{}if @param{list} is a @term{circular list}.

@subsubheading Examples:

@lisp
 (list-length '(a b c d)) @EV{} 4
 (list-length '(a (b c) d)) @EV{} 3
 (list-length '()) @EV{} 0
 (list-length nil) @EV{} 0
 (defun circular-list (&rest elements)
   (let ((cycle (copy-list elements))) 
     (nconc cycle cycle)))
 (list-length (circular-list 'a 'b)) @EV{} NIL
 (list-length (circular-list 'a)) @EV{} NIL
 (list-length (circular-list)) @EV{} 0
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{list, a @term{proper list} or a @term{circular list}}

@subsubheading See Also:

@ref{length}

@subsubheading Notes:

@code{list-length} could be implemented as follows:

@lisp
 (defun list-length (x)  
   (do ((n 0 (+ n 2))           ;Counter.
        (fast x (cddr fast))    ;Fast pointer: leaps by 2.
        (slow x (cdr slow)))    ;Slow pointer: leaps by 1.
       (nil)
     ;; If fast pointer hits the end, return the count.
     (when (endp fast) (return n))
     (when (endp (cdr fast)) (return (+ n 1)))
     ;; If fast pointer eventually equals slow pointer,
     ;;  then we must be stuck in a circular list.
     ;; (A deeper property is the converse: if we are
     ;;  stuck in a circular list, then eventually the
     ;;  fast pointer will equal the slow pointer.
     ;;  That fact justifies this implementation.)
     (when (and (eq fast slow) (> n 0)) (return nil))))
 
@end lisp



@node listp
@heading listp (Function)
@syindex listp
@cindex listp


@subsubheading Syntax:

@DefunWithValues{listp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, list}

@subsubheading Examples:
@lisp
 (listp nil) @EV{} @term{true}
 (listp (cons 1 2)) @EV{} @term{true}
 (listp (make-array 6)) @EV{} @term{false}
 (listp t) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{consp}

@subsubheading Notes:

If @param{object} is a @term{cons},
@code{listp} does not check whether @param{object} is a @term{proper list};
it returns @term{true} for any kind of @term{list}.

@lisp
 (listp @param{object}) @EQ{} (typep @param{object} 'list) @EQ{} (typep @param{object} '(or cons null))
@end lisp



@node make-list
@heading make-list (Function)
@syindex make-list
@cindex make-list


@subsubheading Syntax:

@DefunWithValues{make-list, size @key{} initial-element, list}

@subsubheading Arguments and Values:

@param{size}---a non-negative @term{integer}.

@param{initial-element}---an @term{object}.
@Default{@nil{}}

@param{list}---a @term{list}.

@subsubheading Description:

Returns a @term{list} of @param{length} given by @term{size},
each of the @term{elements} of which is @param{initial-element}.

@subsubheading Examples:
@lisp
 (make-list 5) @EV{} (NIL NIL NIL NIL NIL)
 (make-list 3 :initial-element 'rah) @EV{} (RAH RAH RAH)
 (make-list 2 :initial-element '(1 2 3)) @EV{} ((1 2 3) (1 2 3))
 (make-list 0) @EV{} NIL ;@ie{} ()
 (make-list 0 :initial-element 'new-element) @EV{} NIL 
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{size, a non-negative @term{integer}}

@subsubheading See Also:

@ref{cons (Function)},
@ref{list}


@node push
@heading push (Macro)
@syindex push
@cindex push


@subsubheading Syntax:

@DefmacWithValues{push, item place, new-place-value}

@subsubheading Arguments and Values:

@param{item}---an @term{object}. 

@param{place}---a @term{place}, the @term{value} of which may be any @term{object}.  

@param{new-place-value}---a @term{list} (the new @term{value} of @param{place}).

@subsubheading Description:

@code{push} prepends @param{item} to the @term{list} that is stored
in @param{place}, stores the resulting @term{list} in @param{place}, 
and returns the @term{list}.

For information about the @term{evaluation} of @term{subforms} of @param{place},
see @ref{GenRefSubFormEval, Section 5.1.1.1 (Evaluation of Subforms to Places)}.

@subsubheading Examples:
@lisp
 (setq llst '(nil)) @EV{} (NIL)
 (push 1 (car llst)) @EV{} (1)
 llst @EV{} ((1))
 (push 1 (car llst)) @EV{} (1 1)
 llst @EV{} ((1 1))
 (setq x '(a (b c) d)) @EV{} (A (B C) D)
 (push 5 (cadr x)) @EV{} (5 B C)  
 x @EV{} (A (5 B C) D)
@end lisp


@subsubheading Side Effects:

The contents of @param{place} are modified.

@subsubheading See Also:

@ref{pop},
@ref{pushnew},
@ref{Generalized Reference, Section 5.1 (Generalized Reference)}

@subsubheading Notes:
The effect of @f{(push @i{item} @i{place})}
is equivalent to

@lisp
 (setf place (cons @i{item} @i{place}))
@end lisp

except that the @term{subforms} of @param{place} 
are evaluated only once, and @param{item} is evaluated
before @param{place}.


@node pop
@heading pop (Macro)
@syindex pop
@cindex pop


@subsubheading Syntax:

@DefmacWithValues{pop, place, element}

@subsubheading Arguments and Values:

@param{place}---a @term{place}, the @term{value} of which is a @term{list}
(possibly, but necessarily, a @term{dotted list} or @term{circular list}).

@param{element}---an @term{object} (the @term{car} of the contents of @param{place}).

@subsubheading Description:

@code{pop} @term{reads} the @term{value} of @param{place},
remembers the @term{car} of the @term{list} which was retrieved,
@term{writes} the @term{cdr} of the @term{list} back into the @param{place},
and finally @term{yields} the @term{car} of the originally retrieved @term{list}.

For information about the @term{evaluation} of @term{subforms} of @param{place},
see @ref{GenRefSubFormEval, Section 5.1.1.1 (Evaluation of Subforms to Places)}.

@subsubheading Examples:

@lisp
 (setq stack '(a b c)) @EV{} (A B C)
 (pop stack) @EV{} A  
 stack @EV{} (B C)
 (setq llst '((1 2 3 4))) @EV{} ((1 2 3 4))
 (pop (car llst)) @EV{} 1
 llst @EV{} ((2 3 4))
@end lisp


@subsubheading Side Effects:

The contents of @param{place} are modified.

@subsubheading See Also:

@ref{push},
@ref{pushnew},
@ref{Generalized Reference, Section 5.1 (Generalized Reference)}

@subsubheading Notes:

The effect of @f{(pop @param{place})} is roughly equivalent to

@lisp
 (prog1 (car @param{place}) (setf @param{place} (cdr @param{place})))
@end lisp

except that the latter would evaluate any @term{subforms} of @param{place}
three times, while @code{pop} evaluates them only once.


@node first; second; third; fourth; fifth; sixth; seventh; eighth; ninth; ten+
@heading first, second, third, fourth, fifth, sixth, seventh, eighth, ninth, tenth (Accessor)
@syindex first
@cindex first
@syindex second
@cindex second
@syindex third
@cindex third
@syindex fourth
@cindex fourth
@syindex fifth
@cindex fifth
@syindex sixth
@cindex sixth
@syindex seventh
@cindex seventh
@syindex eighth
@cindex eighth
@syindex ninth
@cindex ninth
@syindex tenth
@cindex tenth
@anchor{first}


@subsubheading Syntax:

first list @EV{} object  |  (setf (list object) new-object)@*
second list @EV{} object  |  (setf (list object) new-object)@*
third list @EV{} object  |  (setf (list object) new-object)@*
fourth list @EV{} object  |  (setf (list object) new-object)@*
fifth list @EV{} object  |  (setf (list object) new-object)@*
sixth list @EV{} object  |  (setf (list object) new-object)@*
seventh list @EV{} object  |  (setf (list object) new-object)@*
eighth list @EV{} object  |  (setf (list object) new-object)@*
ninth list @EV{} object  |  (setf (list object) new-object)@*
tenth list @EV{} object  |  (setf (list object) new-object)@*
@*


@subsubheading Arguments and Values:

@param{list}---a @term{list}, 
which might be a @term{dotted list} or a @term{circular list}.

@param{object}, @param{new-object}---an @param{object}.

@subsubheading Description:

The functions
@code{first},
@code{second},
@code{third}, 
@code{fourth}, 
@code{fifth},
@code{sixth},
@code{seventh},
@code{eighth}, 
@code{ninth},
and
@code{tenth}
@param{access} the first, second, third, fourth, fifth, sixth, seventh, eighth,
ninth, and tenth @term{elements} of @param{list}, respectively.
Specifically,

@lisp
 (first @param{list})    @EQ{}  (car @param{list})
 (second @param{list})   @EQ{}  (car (cdr @param{list}))
 (third @param{list})    @EQ{}  (car (cddr @param{list}))
 (fourth @param{list})   @EQ{}  (car (cdddr @param{list}))
 (fifth @param{list})    @EQ{}  (car (cddddr @param{list}))
 (sixth @param{list})    @EQ{}  (car (cdr (cddddr @param{list})))
 (seventh @param{list})  @EQ{}  (car (cddr (cddddr @param{list})))
 (eighth @param{list})   @EQ{}  (car (cdddr (cddddr @param{list})))
 (ninth @param{list})    @EQ{}  (car (cddddr (cddddr @param{list})))
 (tenth @param{list})    @EQ{}  (car (cdr (cddddr (cddddr @param{list}))))
@end lisp


@code{setf} can also be used with any of these functions to change an
existing component.  The same equivalences apply.  For example:

@lisp
 (setf (fifth @param{list}) @param{new-object}) @EQ{} (setf (car (cddddr @param{list})) @param{new-object})
@end lisp


@subsubheading Examples:

@lisp
 (setq lst '(1 2 3 (4 5 6) ((V)) vi 7 8 9 10)) 
@EV{} (1 2 3 (4 5 6) ((V)) VI 7 8 9 10)
 (first lst) @EV{} 1
 (tenth lst) @EV{} 10
 (fifth lst) @EV{} ((V))
 (second (fourth lst)) @EV{} 5
 (sixth '(1 2 3)) @EV{} NIL
 (setf (fourth lst) "four") @EV{} "four"
 lst @EV{} (1 2 3 "four" ((V)) VI 7 8 9 10)
@end lisp


@subsubheading See Also:

@ref{car}, @ref{nth}

@subsubheading Notes:

@code{first}  is functionally equivalent to @code{car},
@code{second} is functionally equivalent to @code{cadr},
@code{third}  is functionally equivalent to @code{caddr}, and 
@code{fourth} is functionally equivalent to @code{cadddr}.

The ordinal numbering used here is one-origin,
as opposed to the zero-origin numbering used by @code{nth}:

@lisp
 (fifth x) @EQ{} (nth 4 x)
@end lisp



@node nth
@heading nth (Accessor)
@syindex nth
@cindex nth


@subsubheading Syntax:

@DefunWithValues{nth, n list, object}
@Defsetf{nth, n list, new-object}

@subsubheading Arguments and Values:

@param{n}---a non-negative @term{integer}.

@param{list}---a @term{list},
which might be a @term{dotted list} or a @term{circular list}.

@param{object}---an @term{object}.

@param{new-object}---an @term{object}.

@subsubheading Description:

@code{nth} locates the @param{n}th element of @param{list},
where the @term{car} of the @param{list} is the ``zeroth'' element.
Specifically,

@lisp
 (nth @param{n} @param{list}) @EQ{} (car (nthcdr @param{n} @param{list}))
@end lisp


@code{nth} may be used to specify a @param{place} to @code{setf}.
Specifically,

@lisp
 (setf (nth @param{n} @param{list}) @param{new-object}) @EQ{} (setf (car (nthcdr @param{n} @param{list})) @param{new-object})
@end lisp


@subsubheading Examples:

@lisp
 (nth 0 '(foo bar baz)) @EV{} FOO
 (nth 1 '(foo bar baz)) @EV{} BAR
 (nth 3 '(foo bar baz)) @EV{} NIL
 (setq 0-to-3 (list 0 1 2 3)) @EV{} (0 1 2 3)
 (setf (nth 2 0-to-3) "two") @EV{} "two"
 0-to-3 @EV{} (0 1 "two" 3)
@end lisp


@subsubheading See Also:

@ref{elt},
@ref{first},
@ref{nthcdr}


@node endp
@heading endp (Function)
@syindex endp
@cindex endp


@subsubheading Syntax:

@DefunWithValues{endp, list, generalized-boolean}

@subsubheading Arguments and Values:

@param{list}---a @term{list},
which might be a @term{dotted list} or a @term{circular list}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Returns @term{true}  if @param{list} is the @term{empty list}.
Returns @term{false} if @param{list} is a @term{cons}.

@subsubheading Examples:

@lisp
 (endp nil) @EV{} @term{true}
 (endp '(1 2)) @EV{} @term{false}
 (endp (cddr '(1 2))) @EV{} @term{true}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{list, a @term{list}}

@subsubheading Notes:

The purpose of @code{endp} is to test for the end of @param{proper list}.
Since @code{endp} does not descend into a @term{cons}, 
it is well-defined to pass it a @term{dotted list}.
However, if shorter ``lists'' are iteratively produced 
by calling @code{cdr} on such a @term{dotted list} 
and those ``lists'' are tested with @code{endp},
a situation that has undefined consequences will eventually result 
when the @term{non-nil} @term{atom} (which is not in fact a @term{list})
finally becomes the argument to @code{endp}.
Since this is the usual way in which @code{endp} is used,
it is conservative programming style 
and consistent with the intent of @code{endp}
to treat @code{endp} as simply a function on @term{proper lists} 
which happens not to enforce an argument type of @term{proper list} except
when the argument is @term{atomic}.


@node null (Function)
@heading null (Function)
@syindex null
@cindex null



@subsubheading Syntax:

@DefunWithValues{null, object, boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{boolean}---a @term{boolean}.

@subsubheading Description:

@StrictPredicate{object, the @term{empty list}}

@subsubheading Examples:

@lisp
 (null '()) @EV{} T
 (null nil) @EV{} T
 (null t) @EV{} NIL
 (null 1) @EV{} NIL
@end lisp



@subsubheading See Also:

@ref{not (Function)}

@subsubheading Notes:

@code{null} is intended to be used to test for the @term{empty list}
whereas @code{not} is intended to be used to invert a @term{boolean}
(or @term{generalized boolean}).
Operationally, @code{null} and @code{not} compute the same result;
which to use is a matter of style.

@lisp
 (null @param{object}) @EQ{} (typep @param{object} 'null) @EQ{} (eq @param{object} '@empty{})
@end lisp



@node nconc
@heading nconc (Function)
@syindex nconc
@cindex nconc


@subsubheading Syntax:

@DefunWithValues{nconc, @rest{} lists, concatenated-list}

@subsubheading Arguments and Values:

@param{list}---each but the last must be a @term{list} 
(which might be a @param{dotted list} but must not be a @term{circular list});
the last @param{list} may be any @term{object}.

@param{concatenated-list}---a @term{list}.

@subsubheading Description:

Returns a @term{list} that is the concatenation of @param{lists}.
If no @param{lists} are supplied, @f{(nconc)} returns @nil{}.
@code{nconc} is defined using the following recursive relationship:

@lisp
 (nconc) @EV{} ()
 (nconc nil . @param{lists}) @EQ{} (nconc . @param{lists})
 (nconc @param{list}) @EV{} @param{list}
 (nconc @param{list-1} @param{list-2}) @EQ{} (progn (rplacd (last @param{list-1}) @param{list-2}) @param{list-1})
 (nconc @param{list-1} @param{list-2} . @param{lists}) @EQ{} (nconc (nconc @param{list-1} @param{list-2}) . @param{lists})
@end lisp


@subsubheading Examples:

@lisp
 (nconc) @EV{} NIL
 (setq x '(a b c)) @EV{} (A B C)
 (setq y '(d e f)) @EV{} (D E F)
 (nconc x y) @EV{} (A B C D E F)
 x @EV{} (A B C D E F)
@end lisp

Note, in the example, that the value of @f{x} is now different,
since its last @term{cons} 
has been @code{rplacd}'d to the value of @f{y}.
If @f{(nconc x y)} were evaluated again,
it would yield a piece of a @term{circular list},
whose printed representation would be
@f{(A B C D E F D E F D E F ...)}, repeating forever;
if the @code{*print-circle*} switch were @term{non-nil},
it would be printed as @f{(A B C . #1=(D E F . #1#))}.

@lisp
 (setq foo (list 'a 'b 'c 'd 'e)
       bar (list 'f 'g 'h 'i 'j)
       baz (list 'k 'l 'm)) @EV{} (K L M)
 (setq foo (nconc foo bar baz)) @EV{} (A B C D E F G H I J K L M)
 foo @EV{} (A B C D E F G H I J K L M)
 bar @EV{} (F G H I J K L M)
 baz @EV{} (K L M)

 (setq foo (list 'a 'b 'c 'd 'e)
       bar (list 'f 'g 'h 'i 'j)
       baz (list 'k 'l 'm)) @EV{} (K L M)
 (setq foo (nconc nil foo bar nil baz)) @EV{} (A B C D E F G H I J K L M) 
 foo @EV{} (A B C D E F G H I J K L M)
 bar @EV{} (F G H I J K L M)
 baz @EV{} (K L M)
@end lisp



@subsubheading Side Effects:

The @param{lists} are modified rather than copied.

@subsubheading See Also:

@ref{append}, @ref{concatenate}


@node append
@heading append (Function)
@syindex append
@cindex append


@subsubheading Syntax:

@DefunWithValues{append, @rest{} lists, result}

@subsubheading Arguments and Values:

@param{list}---each must be a @term{proper list} except the last,
which may be any @term{object}.

@param{result}---an @term{object}.  This will be a @term{list}
unless the last @param{list} was not a @term{list}
and all preceding @param{lists} were @term{null}.

@subsubheading Description:

@code{append} returns a new @param{list} that is the concatenation of
the copies.  @param{lists} are left unchanged; the @term{list structure} 
of each of @param{lists} except the last is copied.
The last argument is not copied; it becomes the @term{cdr} of the 
final @term{dotted pair} of the concatenation of the preceding @param{lists},
or is returned directly if there are no preceding
@term{non-empty} 
@param{lists}.

@subsubheading Examples:

@lisp
 (append '(a b c) '(d e f) '() '(g)) @EV{} (A B C D E F G)
 (append '(a b c) 'd) @EV{} (A B C . D)
 (setq lst '(a b c)) @EV{} (A B C)
 (append lst '(d)) @EV{} (A B C D)
 lst @EV{} (A B C)
 (append) @EV{} NIL
 (append 'a) @EV{} A
@end lisp


@subsubheading See Also:

@ref{nconc}, @ref{concatenate}


@node revappend; nreconc
@heading revappend, nreconc (Function)
@syindex revappend
@cindex revappend
@syindex nreconc
@cindex nreconc



@subsubheading Syntax:

@DefunWithValues{revappend, list tail, result-list}
@DefunWithValues{nreconc, list tail, result-list}

@subsubheading Arguments and Values:

@param{list}---a @term{proper list}.

@param{tail}---an @term{object}. 

@param{result-list}---an @term{object}.

@subsubheading Description:

@code{revappend} constructs a @term{copy}@sub2{} of @param{list},
but with the @term{elements} in reverse order.  It then appends (as if
by @code{nconc}) the @param{tail} to that reversed list and returns the result.

@code{nreconc} reverses the order of @term{elements} in @param{list}
(as if by @code{nreverse}).  It then appends (as if by @code{nconc})
the @param{tail} to that reversed list and returns the result.

The resulting @term{list} shares @term{list structure} with @param{tail}.

@subsubheading Examples:

@lisp
 (let ((list-1 (list 1 2 3))
       (list-2 (list 'a 'b 'c)))
   (print (revappend list-1 list-2))
   (print (equal list-1 '(1 2 3)))
   (print (equal list-2 '(a b c))))
@OUT{} (3 2 1 A B C) 
@OUT{} T
@OUT{} T
@EV{} T

 (revappend '(1 2 3) '()) @EV{} (3 2 1)
 (revappend '(1 2 3) '(a . b)) @EV{} (3 2 1 A . B)
 (revappend '() '(a b c)) @EV{} (A B C)
 (revappend '(1 2 3) 'a) @EV{} (3 2 1 . A)
 (revappend '() 'a) @EV{} A   ;degenerate case

 (let ((list-1 '(1 2 3))
       (list-2 '(a b c)))
   (print (nreconc list-1 list-2))
   (print (equal list-1 '(1 2 3)))
   (print (equal list-2 '(a b c))))
@OUT{} (3 2 1 A B C) 
@OUT{} NIL
@OUT{} T
@EV{} T

@end lisp


@subsubheading Side Effects:

@code{revappend} does not modify either of its @term{arguments}.
@code{nreconc} is permitted to modify @param{list} but not @param{tail}.

Although it might be implemented differently,
@code{nreconc} is constrained to have side-effect behavior equivalent to:

@lisp
 (nconc (nreverse @param{list}) @param{tail})
@end lisp


@subsubheading See Also:

@ref{reverse},
@ref{nreverse},
@ref{nconc}

@subsubheading Notes:

The following functional equivalences are true, 
although good @term{implementations} will typically use a faster algorithm for
achieving the same effect:

@lisp
 (revappend @param{list} @param{tail}) @EQ{} (nconc (reverse @param{list}) @param{tail})
 (nreconc @param{list} @param{tail}) @EQ{} (nconc (nreverse @param{list}) @param{tail})
@end lisp




@node butlast; nbutlast
@heading butlast, nbutlast (Function)
@syindex butlast
@cindex butlast
@syindex nbutlast
@cindex nbutlast
@anchor{butlast}


@subsubheading Syntax:

@DefunWithValues{butlast, list @opt{} n, result-list}
@DefunWithValues{nbutlast, list @opt{} n, result-list}

@subsubheading Arguments and Values:

@param{list}---a @term{list}, 
which might be a @term{dotted list} but must not be a @term{circular list}.

@param{n}---a non-negative @term{integer}.

@param{result-list}---a @term{list}.

@subsubheading Description:

@code{butlast} returns a copy of @param{list} from which the last
@param{n}
conses
have been omitted.
If @param{n} is not supplied, its value is 1.  
If there are fewer than @param{n} 
conses
in @param{list},
@nil{}@spc{}is returned and, in the case of @code{nbutlast},
@param{list} is not modified.  

@code{nbutlast} is like @code{butlast}, but @code{nbutlast} 
may modify @param{list}.
It changes the @term{cdr} of
the @term{cons} @param{n}+1 from the end of the @param{list} to @nil{}.  

@subsubheading Examples:
@lisp
 (setq lst '(1 2 3 4 5 6 7 8 9)) @EV{} (1 2 3 4 5 6 7 8 9)
 (butlast lst) @EV{} (1 2 3 4 5 6 7 8)
 (butlast lst 5) @EV{} (1 2 3 4)
 (butlast lst (+ 5 5)) @EV{} NIL
 lst @EV{} (1 2 3 4 5 6 7 8 9)
 (nbutlast lst 3) @EV{} (1 2 3 4 5 6)
 lst @EV{} (1 2 3 4 5 6)
 (nbutlast lst 99) @EV{} NIL
 lst @EV{} (1 2 3 4 5 6)
 (butlast '(a b c d)) @EV{} (A B C)
 (butlast '((a b) (c d))) @EV{} ((A B))
 (butlast '(a)) @EV{} NIL
 (butlast nil) @EV{} NIL
 (setq foo (list 'a 'b 'c 'd)) @EV{} (A B C D)
 (nbutlast foo) @EV{} (A B C)
 foo @EV{} (A B C)
 (nbutlast (list 'a)) @EV{} NIL
 (nbutlast '()) @EV{} NIL
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{list, a @term{proper list} or a @term{dotted list}}
@Shouldchecktype{n, a non-negative @term{integer}}

@subsubheading Notes:

@lisp
 (butlast @param{list} @param{n}) @EQ{} (ldiff @param{list} (last @param{list} @param{n}))
@end lisp



@node last
@heading last (Function)
@syindex last
@cindex last
      

@subsubheading Syntax:

@DefunWithValues{last, list @opt{} n, tail}

@subsubheading Arguments and Values:

@param{list}---a @term{list},
which might be a @term{dotted list} but must not be a @term{circular list}.

@param{n}---a non-negative @term{integer}.
@Default{@f{1}}

@param{tail}---an @term{object}.

@subsubheading Description:

@code{last} returns the last @param{n} @term{conses} 
(not the last @param{n} elements) of @param{list}).
If @param{list} is @empty{}, @code{last} returns @empty{}.

If @param{n} is zero,
the atom that terminates @param{list} is returned.
If @param{n} is greater than or equal to the number of @term{cons} cells in @param{list},
the result is @param{list}.

@subsubheading Examples:

@lisp
 (last nil) @EV{} NIL
 (last '(1 2 3)) @EV{} (3)
 (last '(1 2 . 3)) @EV{} (2 . 3)
 (setq x (list 'a 'b 'c 'd)) @EV{} (A B C D)
 (last x) @EV{} (D)
 (rplacd (last x) (list 'e 'f)) x @EV{} (A B C D E F)
 (last x) @EV{} (F)

 (last '(a b c))   @EV{} (C)

 (last '(a b c) 0) @EV{} ()
 (last '(a b c) 1) @EV{} (C)
 (last '(a b c) 2) @EV{} (B C)
 (last '(a b c) 3) @EV{} (A B C)
 (last '(a b c) 4) @EV{} (A B C)

 (last '(a . b) 0) @EV{} B
 (last '(a . b) 1) @EV{} (A . B)
 (last '(a . b) 2) @EV{} (A . B)
@end lisp


@subsubheading Exceptional Situations:

The consequences are undefined if @param{list} is a @term{circular list}.
@Shouldchecktype{n, a non-negative @term{integer}}

@subsubheading See Also:

@ref{butlast},
@ref{nth}

@subsubheading Notes:

The following code could be used to define @code{last}.

@lisp
 (defun last (list &optional (n 1))
   (check-type n (integer 0))
   (do ((l list (cdr l))
        (r list)
        (i 0 (+ i 1)))
       ((atom l) r)
     (if (>= i n) (pop r))))
@end lisp


@node ldiff; tailp
@heading ldiff, tailp (Function)
@syindex ldiff
@cindex ldiff
@syindex tailp
@cindex tailp


@subsubheading Syntax:

@DefunWithValues{ldiff, list object, result-list}
@DefunWithValues{tailp, object list, generalized-boolean}

@subsubheading Arguments and Values:

@param{list}---a @term{list},
which might be a @term{dotted list}.

@param{object}---an @term{object}.

@param{result-list}---a @term{list}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

If @param{object} is the @term{same} as some @term{tail} of @param{list},
@code{tailp} returns @term{true};
otherwise, it returns @term{false}.

If @param{object} is the @term{same} as some @term{tail} of @param{list},
@code{ldiff} returns a @term{fresh} @term{list} 
of the @term{elements} of @term{list} 
that precede @code{object} in the @term{list structure} of @param{list};
otherwise, it returns a @term{copy}@sub2{} of @param{list}.

@subsubheading Examples:

@lisp
 (let ((lists '#((a b c) (a b c . d))))
   (dotimes (i (length lists)) ()
     (let ((list (aref lists i)))
       (format t "~2&list=~S ~21T(tailp object list)~
                  ~44T(ldiff list object)~%" list)
         (let ((objects (vector list (cddr list) (copy-list (cddr list))
                                '(f g h) '() 'd 'x)))
           (dotimes (j (length objects)) ()
             (let ((object (aref objects j)))
               (format t "~& object=~S ~21T~S ~44T~S"
                       object (tailp object list) (ldiff list object))))))))
@OUT{} 
@OUT{} list=(A B C)         (tailp object list)    (ldiff list object)
@OUT{}  object=(A B C)      T                      NIL
@OUT{}  object=(C)          T                      (A B)
@OUT{}  object=(C)          NIL                    (A B C)
@OUT{}  object=(F G H)      NIL                    (A B C)
@OUT{}  object=NIL          T                      (A B C)
@OUT{}  object=D            NIL                    (A B C)
@OUT{}  object=X            NIL                    (A B C)
@OUT{} 
@OUT{} list=(A B C . D)     (tailp object list)    (ldiff list object)
@OUT{}  object=(A B C . D)  T                      NIL
@OUT{}  object=(C . D)      T                      (A B)
@OUT{}  object=(C . D)      NIL                    (A B C . D)
@OUT{}  object=(F G H)      NIL                    (A B C . D)
@OUT{}  object=NIL          NIL                    (A B C . D)
@OUT{}  object=D            T                      (A B C)
@OUT{}  object=X            NIL                    (A B C . D)
@EV{} NIL
@end lisp


@subsubheading Side Effects:

Neither @code{ldiff} nor @code{tailp} modifies either of its @term{arguments}.

@subsubheading Exceptional Situations:

@Lazychecktype{list, a @term{proper list} or a @term{dotted list}}

@subsubheading See Also:

@ref{set-difference}

@subsubheading Notes:

If the @param{list} is a @term{circular list},
@code{tailp} will reliably @term{yield} a @term{value} 
only if the given @param{object} is in fact a @term{tail} of @param{list}.
Otherwise, the consequences are unspecified:
a given @term{implementation} which detects the circularity must return @term{false},
but since an @term{implementation} is not obliged to detect such a @term{situation},
@code{tailp} might just loop indefinitely without returning in that case.


@code{tailp} could be defined as follows:

@lisp
 (defun tailp (object list)
   (do ((list list (cdr list)))
       ((atom list) (eql list object))
      (if (eql object list)
          (return t))))
@end lisp


and @code{ldiff} could be defined by:

@lisp
(defun ldiff (list object)
  (do ((list list (cdr list))
       (r '() (cons (car list) r)))
      ((atom list)
       (if (eql list object) (nreverse r) (nreconc r list)))
    (when (eql object list)
      (return (nreverse r)))))
@end lisp





@node nthcdr
@heading nthcdr (Function)
@syindex nthcdr
@cindex nthcdr


@subsubheading Syntax:

@DefunWithValues{nthcdr, n list, tail}

@subsubheading Arguments and Values:

@param{n}---a non-negative @term{integer}.

@param{list}---a @term{list},
which might be a @term{dotted list} or a @term{circular list}.

@param{tail}---an @term{object}.

@subsubheading Description:

Returns the @term{tail} of @param{list} that would be obtained by calling @code{cdr}
@param{n} times in succession.

@subsubheading Examples:

@lisp
 (nthcdr 0 '()) @EV{} NIL
 (nthcdr 3 '()) @EV{} NIL
 (nthcdr 0 '(a b c)) @EV{} (A B C)
 (nthcdr 2 '(a b c)) @EV{} (C)
 (nthcdr 4 '(a b c)) @EV{} ()
 (nthcdr 1 '(0 . 1)) @EV{} 1

 (locally (declare (optimize (safety 3)))
   (nthcdr 3 '(0 . 1)))
 Error: Attempted to take CDR of 1.
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{n, a non-negative @term{integer}}

For @param{n} being an integer greater than @f{1},
the error checking done by @f{(nthcdr @param{n} @param{list})}
is the same as for @f{(nthcdr (- @param{n} 1) (cdr @param{list}))};
see the @term{function} @ref{cdr}.

@subsubheading See Also:

@ref{cdr},
@ref{nth},
@ref{rest}


@node rest
@heading rest (Accessor)
@syindex rest
@cindex rest


@subsubheading Syntax:

@DefunWithValues{rest, list, tail}
@Defsetf{rest, list, new-tail}

@subsubheading Arguments and Values:

@param{list}---a @term{list},
which might be a @term{dotted list} or a @term{circular list}.

@param{tail}---an @term{object}.

@subsubheading Description:

@code{rest} performs the same operation as @code{cdr},
but mnemonically complements @code{first}.
Specifically,

@lisp
 (rest @param{list}) @EQ{} (cdr @param{list})
 (setf (rest @param{list}) @param{new-tail}) @EQ{} (setf (cdr @param{list}) @param{new-tail})
@end lisp


@subsubheading Examples:

@lisp
 (rest '(1 2)) @EV{} (2)
 (rest '(1 . 2)) @EV{} 2
 (rest '(1)) @EV{} NIL
 (setq *cons* '(1 . 2)) @EV{} (1 . 2)
 (setf (rest *cons*) "two") @EV{} "two"
 *cons* @EV{} (1 . "two")
@end lisp


@subsubheading See Also:

@ref{cdr},
@ref{nthcdr}

@subsubheading Notes:

@code{rest} is often preferred stylistically over @code{cdr}
when the argument is to being subjectively viewed as a @term{list} 
rather than as a @term{cons}.


@node member; member-if; member-if-not
@heading member, member-if, member-if-not (Function)
@syindex member
@cindex member
@syindex member-if
@cindex member-if
@syindex member-if-not
@cindex member-if-not
@anchor{member}


@subsubheading Syntax:

@DefunWithValues{member, item      list @key{} key test test-not, tail}
@DefunWithValues{member-if, predicate list @key{} key, tail}
@DefunWithValues{member-if-not, predicate list @key{} key, tail}

@subsubheading Arguments and Values:

@param{item}---an @term{object}.

@param{list}---a @term{proper list}.

@param{predicate}---a @term{designator} for 
a @term{function} of one @term{argument}
that returns a @term{generalized boolean}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{tail}---a @term{list}.

@subsubheading Description:

@code{member}, @code{member-if}, and @code{member-if-not} each
search @param{list} for @param{item} or for a top-level element that 
@term{satisfies the test}.  The argument to the @param{predicate} function 
is an element of @param{list}.

If some element @term{satisfies the test},
the tail of @param{list} beginning
with this element is returned; otherwise @nil{}@spc{}is returned.

@param{list} is searched on the top level only. 

@subsubheading Examples:

@lisp
 (member 2 '(1 2 3)) @EV{} (2 3)                                 
 (member 2 '((1 . 2) (3 . 4)) :test-not #'= :key #'cdr) @EV{} ((3 . 4))
 (member 'e '(a b c d)) @EV{} NIL
@end lisp


@lisp
 (member-if #'listp '(a b nil c d)) @EV{} (NIL C D)
 (member-if #'numberp '(a #@bsl{}Space 5/3 foo)) @EV{} (5/3 FOO)
 (member-if-not #'zerop 
                 '(3 6 9 11 . 12)
                 :key #'(lambda (x) (mod x 3))) @EV{} (11 . 12)
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{list, a @term{proper list}}

@subsubheading See Also:

@ref{find},
@ref{position},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.

@Thefunction{member-if-not} is deprecated.

In the following

@lisp
 (member 'a '(g (a y) c a d e a f)) @EV{} (A D E A F)
@end lisp


the value returned by @code{member} is @term{identical} to the portion
of the @term{list} beginning with @f{a}.  Thus @code{rplaca} on the
result of @code{member} can be used to alter the part of the @term{list}
where @f{a} was found (assuming a check has been made that @code{member}
did not return @nil{}).


@node mapc; mapcar; mapcan; mapl; maplist; mapcon
@heading mapc, mapcar, mapcan, mapl, maplist, mapcon (Function)
@syindex mapc
@cindex mapc
@syindex mapcar
@cindex mapcar
@syindex mapcan
@cindex mapcan
@syindex mapl
@cindex mapl
@syindex maplist
@cindex maplist
@syindex mapcon
@cindex mapcon


@subsubheading Syntax:

@DefunWithValues{mapc, function @rest{} @plus{lists}, list-1}
@DefunWithValues{mapcar, function @rest{} @plus{lists}, result-list}
@DefunWithValues{mapcan, function @rest{} @plus{lists}, concatenated-results}
@DefunWithValues{mapl, function @rest{} @plus{lists}, list-1}
@DefunWithValues{maplist, function @rest{} @plus{lists}, result-list}
@DefunWithValues{mapcon, function @rest{} @plus{lists}, concatenated-results}

@subsubheading Arguments and Values:

@param{function}---a @term{designator} for a @term{function} 
that must take as many @term{arguments} as there are @param{lists}.

@param{list}---a @term{proper list}.

@param{list-1}---the first @param{list} (which must be a @term{proper list}).

@param{result-list}---a @term{list}.

@param{concatenated-results}---a @term{list}.

@subsubheading Description:

The mapping operation involves applying @param{function} to
successive sets of arguments in which
one argument is obtained from each @term{sequence}.
Except for @code{mapc} and @code{mapl},
the result contains the results returned by @param{function}.
In the cases of @code{mapc} and @code{mapl},
the resulting @term{sequence} is @param{list}.

@param{function} is called
first on all the elements with index @f{0}, then on all those
with index @f{1}, and so on.
@param{result-type} specifies the @term{type} of
the 
resulting @term{sequence}.
If @param{function} is a @term{symbol}, it is @code{coerce}d
to a @term{function} as if by @code{symbol-function}.

@code{mapcar} operates on successive @term{elements} of the @param{lists}.
@param{function} is applied to the first @term{element} of each @param{list},
then to the second @term{element} of each @param{list}, and so on.
The iteration terminates when the shortest @param{list} runs out,
and excess elements in other lists are ignored.
The value returned by @code{mapcar} is a @term{list}
of the results of successive calls to @param{function}.

@code{mapc} is like @code{mapcar} except that the results of 
applying @param{function} are not accumulated.
The @param{list} argument is returned.

@code{maplist} is like @code{mapcar} except that
@param{function} is applied to successive sublists of the @param{lists}.
@param{function} 
is first applied to the @param{lists} themselves, 
and then to the @term{cdr} of each
@param{list}, and then to the @term{cdr} of the @term{cdr}
of each @param{list}, and so on.  

@code{mapl} is like @code{maplist} except that the results of 
applying @param{function} are not accumulated;
@param{list-1} is returned.

@code{mapcan} and @code{mapcon} are like @code{mapcar} and
@code{maplist} respectively, except that the results of
applying @param{function} are combined 
into a @term{list} by the use of @code{nconc}
rather than @code{list}.
That is,

@lisp
 (mapcon f x1 ... xn)
   @EQ{} (apply #'nconc (maplist f x1 ... xn))
@end lisp

and similarly for the relationship between @code{mapcan} 
and @code{mapcar}.

@subsubheading Examples:

@lisp
 (mapcar #'car '((1 a) (2 b) (3 c))) @EV{} (1 2 3) 
 (mapcar #'abs '(3 -4 2 -5 -6)) @EV{} (3 4 2 5 6)
 (mapcar #'cons '(a b c) '(1 2 3)) @EV{} ((A . 1) (B . 2) (C . 3))

 (maplist #'append '(1 2 3 4) '(1 2) '(1 2 3)) 
@EV{} ((1 2 3 4 1 2 1 2 3) (2 3 4 2 2 3)) 
 (maplist #'(lambda (x) (cons 'foo x)) '(a b c d))
@EV{} ((FOO A B C D) (FOO B C D) (FOO C D) (FOO D))
 (maplist #'(lambda (x) (if (member (car x) (cdr x)) 0 1)) '(a b a c d b c))
@EV{} (0 0 1 0 1 1 1)
;An entry is 1 if the corresponding element of the input
;  list was the last instance of that element in the input list.

 (setq dummy nil) @EV{} NIL 
 (mapc #'(lambda (&rest x) (setq dummy (append dummy x)))
        '(1 2 3 4)
        '(a b c d e)
        '(x y z)) @EV{} (1 2 3 4) 
 dummy @EV{} (1 A X 2 B Y 3 C Z)                   

 (setq dummy nil) @EV{} NIL 
 (mapl #'(lambda (x) (push x dummy)) '(1 2 3 4)) @EV{} (1 2 3 4) 
 dummy @EV{} ((4) (3 4) (2 3 4) (1 2 3 4)) 

 (mapcan #'(lambda (x y) (if (null x) nil (list x y)))
          '(nil nil nil d e)
          '(1 2 3 4 5 6)) @EV{} (D 4 E 5) 
 (mapcan #'(lambda (x) (and (numberp x) (list x)))
          '(a 1 b c 3 4 d 5))
@EV{} (1 3 4 5)
@end lisp

In this case the function serves as a filter; 
this is a standard @Lisp{}@spc{}idiom using @code{mapcan}.

@lisp
 (mapcon #'list '(1 2 3 4)) @EV{} ((1 2 3 4) (2 3 4) (3 4) (4)) 
@end lisp


@subsubheading Exceptional Situations:

@Lazycheckanytype{list, a @term{proper list}}

@subsubheading See Also:

@ref{dolist},
@ref{map},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}


@node acons
@heading acons (Function)
@syindex acons
@cindex acons


@subsubheading Syntax:

@DefunWithValues{acons, key datum alist, new-alist}

@subsubheading Arguments and Values:

@param{key}---an @term{object}.

@param{datum}---an @term{object}.

@param{alist}---an @term{association list}.

@param{new-alist}---an @term{association list}.

@subsubheading Description:

Creates a @term{fresh} @term{cons},
the @term{cdr} of which is @param{alist} and
the @term{car} of which is another @term{fresh} @term{cons},
the @term{car} of which is @param{key} and
the @term{cdr} of which is @param{datum}.

@subsubheading Examples:

@lisp
 (setq alist '()) @EV{} NIL
 (acons 1 "one" alist) @EV{} ((1 . "one"))
 alist @EV{} NIL
 (setq alist (acons 1 "one" (acons 2 "two" alist))) @EV{} ((1 . "one") (2 . "two"))
 (assoc 1 alist) @EV{} (1 . "one")
 (setq alist (acons 1 "uno" alist)) @EV{} ((1 . "uno") (1 . "one") (2 . "two"))
 (assoc 1 alist) @EV{} (1 . "uno")
@end lisp


@subsubheading See Also:

@ref{assoc}, @ref{pairlis}

@subsubheading Notes:

@lisp
(acons @param{key} @param{datum} @param{alist}) @EQ{} (cons (cons @param{key} @param{datum}) @param{alist})
@end lisp



@node assoc; assoc-if; assoc-if-not
@heading assoc, assoc-if, assoc-if-not (Function)
@syindex assoc
@cindex assoc
@syindex assoc-if
@cindex assoc-if
@syindex assoc-if-not
@cindex assoc-if-not
@anchor{assoc}


@subsubheading Syntax:

@DefunWithValues{assoc, item      alist @key{} key test test-not, entry}


@DefunWithValues{assoc-if, predicate alist @key{} key, entry}
@DefunWithValues{assoc-if-not, predicate alist @key{} key, entry}


@subsubheading Arguments and Values:

@param{item}---an @term{object}.

@param{alist}---an @term{association list}.

@param{predicate}---a @term{designator} for 
a @term{function} of one @term{argument}
that returns a @term{generalized boolean}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{entry}---a @term{cons} that is an @term{element} of @param{alist},
or @nil{}.

@subsubheading Description:

@code{assoc}, @code{assoc-if}, and @code{assoc-if-not}
return the first @term{cons} in @param{alist} whose @term{car} @term{satisfies the test},
or @nil{}@spc{}if no such @term{cons} is found.

For @code{assoc}, @code{assoc-if}, and @code{assoc-if-not}, if @nil{}@spc{}appears
in @param{alist} in place of a pair, it is ignored.

@subsubheading Examples:

@lisp
 (setq values '((x . 100) (y . 200) (z . 50))) @EV{} ((X . 100) (Y . 200) (Z . 50))
 (assoc 'y values) @EV{} (Y . 200)
 (rplacd (assoc 'y values) 201) @EV{} (Y . 201)
 (assoc 'y values) @EV{} (Y . 201)
 (setq alist '((1 . "one")(2 . "two")(3 . "three"))) 
@EV{} ((1 . "one") (2 . "two") (3 . "three"))
 (assoc 2 alist) @EV{} (2 . "two")
 (assoc-if #'evenp alist) @EV{} (2 . "two")
 (assoc-if-not #'(lambda(x) (< x 3)) alist) @EV{} (3 . "three")
 (setq alist '(("one" . 1)("two" . 2))) @EV{} (("one" . 1) ("two" . 2))
 (assoc "one" alist) @EV{} NIL
 (assoc "one" alist :test #'equalp) @EV{} ("one" . 1)
 (assoc "two" alist :key #'(lambda(x) (char x 2))) @EV{} NIL 
 (assoc #@bsl{}o alist :key #'(lambda(x) (char x 2))) @EV{} ("two" . 2)
 (assoc 'r '((a . b) (c . d) (r . x) (s . y) (r . z))) @EV{}  (R . X)
 (assoc 'goo '((foo . bar) (zoo . goo))) @EV{} NIL
 (assoc '2 '((1 a b c) (2 b c d) (-7 x y z))) @EV{} (2 B C D)
 (setq alist '(("one" . 1) ("2" . 2) ("three" . 3)))
@EV{} (("one" . 1) ("2" . 2) ("three" . 3))
 (assoc-if-not #'alpha-char-p alist
               :key #'(lambda (x) (char x 0))) @EV{} ("2" . 2)
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{alist, an @term{association list}}

@subsubheading See Also:

@ref{rassoc},
@ref{find},
@ref{member},
@ref{position},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.

@Thefunction{assoc-if-not} is deprecated.

It is possible to @code{rplacd} the result of @code{assoc}, provided
that it is not @nil{},
in order to ``update'' @param{alist}. 

The two expressions

@lisp
 (assoc item list :test fn)
@end lisp

and

@lisp
 (find item list :test fn :key #'car)
@end lisp

are equivalent in meaning with one exception:
if @nil{}@spc{}appears in @param{alist} in place of a pair,
and @param{item} is @nil{},
@code{find} will compute the @term{car} of the @nil{}@spc{}in @param{alist},
find that it is equal to @param{item}, and return @nil{},
whereas @code{assoc} will ignore the @nil{}@spc{}in @param{alist} and continue
to search for an actual @term{cons} whose @term{car} is @nil{}.


@node copy-alist
@heading copy-alist (Function)
@syindex copy-alist
@cindex copy-alist


@subsubheading Syntax:

@DefunWithValues{copy-alist, alist, new-alist}

@subsubheading Arguments and Values:

@param{alist}---an @term{association list}.

@param{new-alist}---an @term{association list}.

@subsubheading Description:

@code{copy-alist} returns a @term{copy} of @param{alist}.

The @term{list structure} of @param{alist} is copied,
and the @term{elements} of @param{alist} which are @term{conses} are
also copied (as @term{conses} only). 
Any other @term{objects} which are referred to, 
whether directly or indirectly,
by the @param{alist} continue to be shared.

@subsubheading Examples:

@lisp
(defparameter *alist* (acons 1 "one" (acons 2 "two" '())))
*alist* @EV{} ((1 . "one") (2 . "two"))
(defparameter *list-copy* (copy-list *alist*))
*list-copy* @EV{} ((1 . "one") (2 . "two"))
(defparameter *alist-copy* (copy-alist *alist*))
*alist-copy* @EV{} ((1 . "one") (2 . "two"))
(setf (cdr (assoc 2 *alist-copy*)) "deux") @EV{} "deux"
*alist-copy* @EV{} ((1 . "one") (2 . "deux"))
*alist* @EV{} ((1 . "one") (2 . "two"))
(setf (cdr (assoc 1 *list-copy*)) "uno") @EV{} "uno"
*list-copy* @EV{} ((1 . "uno") (2 . "two"))
*alist* @EV{} ((1 . "uno") (2 . "two"))
@end lisp


@subsubheading See Also:

@ref{copy-list}


@node pairlis
@heading pairlis (Function)
@syindex pairlis
@cindex pairlis


@subsubheading Syntax:

@DefunWithValues{pairlis, keys data @opt{} alist, new-alist}

@subsubheading Arguments and Values:

@param{keys}---a @term{proper list}.

@param{data}---a @term{proper list}.

@param{alist}---an @term{association list}.
@Default{the @term{empty list}}

@param{new-alist}---an @term{association list}.

@subsubheading Description:

Returns an @term{association list} that associates
elements of @param{keys} to corresponding elements of @param{data}.
The consequences are undefined if @param{keys} and @param{data} are 
not of the same @term{length}.  

If @param{alist} is supplied, @code{pairlis} returns
a modified @param{alist} with the
new pairs prepended to it.
The new pairs may appear in the resulting @term{association list} in 
either forward or backward order.
The result of 

@lisp
 (pairlis '(one two) '(1 2) '((three . 3) (four . 19)))
@end lisp

might be

@lisp
 ((one . 1) (two . 2) (three . 3) (four . 19))
@end lisp

or

@lisp
 ((two . 2) (one . 1) (three . 3) (four . 19))
@end lisp


@subsubheading Examples:
@lisp
 (setq keys '(1 2 3)
        data '("one" "two" "three")
        alist '((4 . "four"))) @EV{} ((4 . "four"))
 (pairlis keys data) @EV{} ((3 . "three") (2 . "two") (1 . "one"))
 (pairlis keys data alist)
@EV{} ((3 . "three") (2 . "two") (1 . "one") (4 . "four"))
 alist @EV{} ((4 . "four"))
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktypes{@param{keys} and @param{data}, @term{proper lists}}

@subsubheading See Also:

@ref{acons}


@node rassoc; rassoc-if; rassoc-if-not
@heading rassoc, rassoc-if, rassoc-if-not (Function)
@syindex rassoc
@cindex rassoc
@syindex rassoc-if
@cindex rassoc-if
@syindex rassoc-if-not
@cindex rassoc-if-not
@anchor{rassoc}


@subsubheading Syntax:

@DefunWithValues{rassoc, item      alist  @key{} key test test-not, entry}


@DefunWithValues{rassoc-if, predicate alist @key{} key, entry}
@DefunWithValues{rassoc-if-not, predicate alist @key{} key, entry}


@subsubheading Arguments and Values:

@param{item}---an @term{object}.

@param{alist}---an @term{association list}.

@param{predicate}---a @term{designator} for
a @term{function} of one @term{argument}
that returns a @term{generalized boolean}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{entry}---a @term{cons} that is an @term{element} of the @param{alist},
or @nil{}.

@subsubheading Description:

@code{rassoc}, @code{rassoc-if}, and @code{rassoc-if-not}
return the first @term{cons} whose @term{cdr} 
@term{satisfies the test}.
If no such @term{cons} is found, @nil{}
is returned.


If @nil{}@spc{}appears in @param{alist} in place of a pair, it is  ignored.

@subsubheading Examples:

@lisp
 (setq alist '((1 . "one") (2 . "two") (3 . 3))) 
@EV{} ((1 . "one") (2 . "two") (3 . 3))
 (rassoc 3 alist) @EV{} (3 . 3)
 (rassoc "two" alist) @EV{} NIL
 (rassoc "two" alist :test 'equal) @EV{} (2 . "two")
 (rassoc 1 alist :key #'(lambda (x) (if (numberp x) (/ x 3)))) @EV{} (3 . 3)
 (rassoc 'a '((a . b) (b . c) (c . a) (z . a))) @EV{} (C . A)
 (rassoc-if #'stringp alist) @EV{} (1 . "one")
 (rassoc-if-not #'vectorp alist) @EV{} (3 . 3)
@end lisp


@subsubheading See Also:

@ref{assoc},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.

@Thefunction{rassoc-if-not} is deprecated.

It is possible to @code{rplaca} the result of @code{rassoc}, 
provided that it is not @nil{}, in order to ``update'' @param{alist}. 

The expressions

@lisp
 (rassoc item list :test fn)
@end lisp

and

@lisp
 (find item list :test fn :key #'cdr)
@end lisp

are equivalent in meaning, except when the @f{item} is @nil{}
and @nil{}@spc{}appears in place of a pair in the @param{alist}.
See the @term{function} @ref{assoc}. 


@node get-properties
@heading get-properties (Function)
@syindex get-properties
@cindex get-properties


@subsubheading Syntax:

@DefunWithValues{get-properties, plist indicator-list, indicator\, value\, tail}

@subsubheading Arguments and Values:

@param{plist}---a @term{property list}.

@param{indicator-list}---a @term{proper list} (of @term{indicators}).

@param{indicator}---an @term{object} that is an @term{element} of @param{indicator-list}.

@param{value}---an @term{object}.

@param{tail}---a @term{list}.

@subsubheading Description:

@code{get-properties} is used to look up any of several
@term{property list} entries all at once.

It searches the @param{plist} for the first entry whose @term{indicator} 
is @term{identical} to one of the @term{objects} in @param{indicator-list}.
If such an entry is found, the @param{indicator} and @param{value} returned
are the @term{property indicator} and its associated @term{property value},
and the @param{tail} returned is the @term{tail} of the @param{plist}
that begins with the found entry (@ie{} whose @term{car} is the @param{indicator}).
If no such entry is found, the @param{indicator}, @param{value}, and @param{tail} 
are all @nil{}.

@subsubheading Examples:

@lisp
 (setq x '()) @EV{} NIL
 (setq *indicator-list* '(prop1 prop2)) @EV{} (PROP1 PROP2)
 (getf x 'prop1) @EV{} NIL
 (setf (getf x 'prop1) 'val1) @EV{} VAL1
 (eq (getf x 'prop1) 'val1) @EV{} @term{true}
 (get-properties x *indicator-list*) @EV{} PROP1, VAL1, (PROP1 VAL1)
 x @EV{} (PROP1 VAL1)
@end lisp


@subsubheading See Also:

@ref{get}, @ref{getf}


@node getf
@heading getf (Accessor)
@syindex getf
@cindex getf


@subsubheading Syntax:

@DefunWithValues{getf, plist indicator @opt{} default, value}
@Defsetf{getf, place indicator @opt{} default, new-value}

@subsubheading Arguments and Values:

@param{plist}---a @term{property list}.

@param{place}---a @term{place}, the @term{value} of which is a @term{property list}.

@param{indicator}---an @term{object}.

@param{default}---an @term{object}.
@Default{@nil{}}

@param{value}---an @term{object}.

@param{new-value}---an @term{object}.

@subsubheading Description:

@code{getf} finds a @term{property} on the @param{plist}
whose @term{property indicator} is @term{identical} to @param{indicator},
and returns its corresponding @term{property value}.
If there are multiple @term{properties}@sub1{} with that @term{property indicator},
@code{getf} uses the first such @term{property}.
If there is no @term{property} with that @term{property indicator},
@param{default} is returned.

@code{setf} of @code{getf} may be used to associate a new @term{object}
with an existing indicator in the @term{property list} held by @param{place},
or to create a new assocation if none exists.
If there are multiple @term{properties}@sub1{} with that @term{property indicator},
@code{setf} of @code{getf} associates the @param{new-value} 
with the first such @term{property}.
When a @code{getf} @term{form} is used as a @code{setf} @param{place},
any @param{default} which is supplied is evaluated according to normal
left-to-right evaluation rules, but its @term{value} is ignored.

@code{setf} of @code{getf} is permitted to either
@term{write} the @term{value} of @param{place} itself,
or modify of any part, @term{car} or @term{cdr}, 
of the @term{list structure} held by @param{place}.

@subsubheading Examples:

@lisp
 (setq x '()) @EV{} NIL
 (getf x 'prop1) @EV{} NIL
 (getf x 'prop1 7) @EV{} 7
 (getf x 'prop1) @EV{} NIL
 (setf (getf x 'prop1) 'val1) @EV{} VAL1
 (eq (getf x 'prop1) 'val1) @EV{} @term{true}
 (getf x 'prop1) @EV{} VAL1
 (getf x 'prop1 7) @EV{} VAL1
 x @EV{} (PROP1 VAL1)

;; Examples of implementation variation permitted.
 (setq foo (list 'a 'b 'c 'd 'e 'f)) @EV{} (A B C D E F)
 (setq bar (cddr foo)) @EV{} (C D E F)
 (remf foo 'c) @EV{} @term{true}
 foo @EV{} (A B E F)
 bar
@EV{} (C D E F)
@OV{} (C)
@OV{} (NIL)
@OV{} (C NIL)
@OV{} (C D)
@end lisp


@subsubheading See Also:

@ref{get},
@ref{get-properties},
@ref{setf},
@ref{FnFormsAsGenRefs, Section 5.1.2.2 (Function Call Forms as Places)}

@subsubheading Notes:

There is no way (using @code{getf}) to distinguish an absent property
from one whose value is @param{default}; but see @code{get-properties}.

Note that while supplying a @term{default} argument to @code{getf}
in a @code{setf} situation is sometimes not very interesting,
it is still important because some macros, such as @code{push} and
@code{incf}, require a @param{place} argument which data is both @term{read}
from and @term{written} to.  In such a context, if a @term{default} 
argument is to be supplied for the @term{read} situation, it must be
syntactically valid for the @term{write} situation as well. For example,

@lisp
 (let ((plist '()))
   (incf (getf plist 'count 0))
   plist) @EV{} (COUNT 1)
@end lisp



@node remf
@heading remf (Macro)
@syindex remf
@cindex remf


@subsubheading Syntax:

@DefmacWithValues{remf, place indicator, generalized-boolean}

@subsubheading Arguments and Values:

@param{place}---a @term{place}.

@param{indicator}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@code{remf} removes from the @term{property list} stored in @param{place}
a @term{property}@sub1{} with a @term{property indicator}
@term{identical} to @param{indicator}.
If there are multiple @term{properties}@sub1{} with the @term{identical} key,
@code{remf} only removes the first such @term{property}.
@code{remf} returns @term{false} if no such @term{property} was found,
or @term{true} if a property was found.

The @term{property indicator} 
and the corresponding @term{property value} 
are removed in an undefined order
by destructively splicing the property list.  
@code{remf} is permitted to either @code{setf} @param{place} or to 
@code{setf} any part, @code{car} or @code{cdr}, 
of the @term{list structure} held by that @param{place}.

For information about the @term{evaluation} of @term{subforms} of @param{place},
see @ref{GenRefSubFormEval, Section 5.1.1.1 (Evaluation of Subforms to Places)}.

@subsubheading Examples:

@lisp
 (setq x (cons () ())) @EV{} (NIL)
 (setf (getf (car x) 'prop1) 'val1) @EV{} VAL1
 (remf (car x) 'prop1) @EV{} @term{true}
 (remf (car x) 'prop1) @EV{} @term{false}
@end lisp


@subsubheading Side Effects:

The property list stored in @param{place} is modified.

@subsubheading See Also:

@ref{remprop}, @ref{getf}


@node intersection; nintersection
@heading intersection, nintersection (Function)
@syindex intersection
@cindex intersection
@syindex nintersection
@cindex nintersection
@anchor{intersection}


@subsubheading Syntax:

@DefunWithValues{intersection, list-1 list-2 @key{} key test test-not, result-list}
@DefunWithValues{nintersection, list-1 list-2 @key{} key test test-not, result-list}

@subsubheading Arguments and Values:

@param{list-1}---a @term{proper list}.

@param{list-2}---a @term{proper list}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{result-list}---a @term{list}.

@subsubheading Description:

@code{intersection} and @code{nintersection} return a @term{list}
that contains every element that occurs in both @param{list-1} and @param{list-2}.

@code{nintersection} is the destructive version of @code{intersection}.
It performs the same operation,
but may destroy @param{list-1} using its cells to construct the result.
@param{list-2} is not destroyed.

The intersection operation is described as follows.
For all possible ordered pairs consisting of 
one @term{element} from @param{list-1} 
and one @term{element} from @param{list-2},
@kwd{test} or @kwd{test-not} are used 
to determine whether they @term{satisfy the test}.  
The first argument to the @kwd{test} or @kwd{test-not}
function is an element of @param{list-1}; the second argument is an
element of @param{list-2}.
If @kwd{test} or @kwd{test-not} is not supplied, @code{eql}
is used.
It is an error if @kwd{test} and @kwd{test-not} are supplied in
the same function call.

If @kwd{key} is supplied (and not @nil{}), it is used to
extract the part to be tested from the @param{list} element. 
The argument to the @kwd{key} function
is an element of either @param{list-1} or @param{list-2};
the @kwd{key} function typically returns part of the supplied element.
If @kwd{key} is not supplied or @nil{}, the @param{list-1} and
@param{list-2} elements are used.

For every pair that @term{satifies the test},
exactly one of the two elements of the pair will be put in the result.
No element from either @term{list} appears in the result that does not 
@term{satisfy the test} for
an element from the other @term{list}.
If one of the @term{lists} contains duplicate
elements, there may be duplication in the result.

There is no guarantee that the order of elements in the result will
reflect the ordering of the arguments in any particular way.
The result @term{list} may share cells with, 
or be @code{eq} to, either @param{list-1} or @param{list-2}
if appropriate.

@subsubheading Examples:

@lisp
 (setq list1 (list 1 1 2 3 4 a b c "A" "B" "C" "d")
       list2 (list 1 4 5 b c d "a" "B" "c" "D")) 
  @EV{} (1 4 5 B C D "a" "B" "c" "D")
 (intersection list1 list2) @EV{} (C B 4 1 1)
 (intersection list1 list2 :test 'equal) @EV{} ("B" C B 4 1 1)
 (intersection list1 list2 :test #'equalp) @EV{} ("d" "C" "B" "A" C B 4 1 1) 
 (nintersection list1 list2) @EV{} (1 1 4 B C)
 list1 @EV{} @term{implementation-dependent} ;@eg{} (1 1 4 B C)
 list2 @EV{} @term{implementation-dependent} ;@eg{} (1 4 5 B C D "a" "B" "c" "D")
 (setq list1 (copy-list '((1 . 2) (2 . 3) (3 . 4) (4 . 5))))
@EV{} ((1 . 2) (2 . 3) (3 . 4) (4 . 5)) 
 (setq list2 (copy-list '((1 . 3) (2 . 4) (3 . 6) (4 . 8))))
@EV{} ((1 . 3) (2 . 4) (3 . 6) (4 . 8)) 
 (nintersection list1 list2 :key #'cdr) @EV{} ((2 . 3) (3 . 4)) 
 list1 @EV{} @term{implementation-dependent} ;@eg{} ((1 . 2) (2 . 3) (3 . 4)) 
 list2 @EV{} @term{implementation-dependent} ;@eg{} ((1 . 3) (2 . 4) (3 . 6) (4 . 8)) 
@end lisp


@subsubheading Side Effects:

@code{nintersection} can modify @param{list-1}, 
but not @param{list-2}.

@subsubheading Exceptional Situations:

@Lazychecktypes{@param{list-1} and @param{list-2}, @term{proper lists}}

@subsubheading See Also:

@ref{union},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.

Since the @code{nintersection} side effect is not required,
it should not be used in for-effect-only
positions in portable code.

@node adjoin
@heading adjoin (Function)
@syindex adjoin
@cindex adjoin


@subsubheading Syntax:

@DefunWithValues{adjoin, item list @key{} key test test-not, new-list}

@subsubheading Arguments and Values:

@param{item}---an @term{object}.

@param{list}---a @term{proper list}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{new-list}---a @term{list}.

@subsubheading Description:

Tests whether @param{item} is the same as an existing element of @param{list}.
If the @param{item} is not an existing element,
@code{adjoin} adds it to @param{list} (as if by @code{cons})
and returns the resulting @term{list}; 
otherwise, nothing is added and the original @param{list} is returned.

@SatisfyTest{item, an @term{element} of @param{list}}

@subsubheading Examples:

@lisp
 (setq slist '()) @EV{} NIL 
 (adjoin 'a slist) @EV{} (A) 
 slist @EV{} NIL 
 (setq slist (adjoin '(test-item 1) slist)) @EV{} ((TEST-ITEM 1)) 
 (adjoin '(test-item 1) slist) @EV{} ((TEST-ITEM 1) (TEST-ITEM 1)) 
 (adjoin '(test-item 1) slist :test 'equal) @EV{} ((TEST-ITEM 1)) 
 (adjoin '(new-test-item 1) slist :key #'cadr) @EV{} ((TEST-ITEM 1)) 
 (adjoin '(new-test-item 1) slist) @EV{} ((NEW-TEST-ITEM 1) (TEST-ITEM 1)) 
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{list, a @term{proper list}}

@subsubheading See Also:

@ref{pushnew},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.

@lisp
 (adjoin item list :key fn)
   @EQ{} (if (member (fn item) list :key fn) list (cons item list))
@end lisp



@node pushnew
@heading pushnew (Macro)
@syindex pushnew
@cindex pushnew


@subsubheading Syntax:

@DefmacWithValuesNewline{pushnew, item place @key{} key test test-not, new-place-value}

@subsubheading Arguments and Values:

@param{item}---an @term{object}.  

@param{place}---a @term{place}, the @term{value} of which is a @term{proper list}. 

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{new-place-value}---a @term{list} (the new @term{value} of @param{place}).

@subsubheading Description:

@code{pushnew} tests whether  @param{item} is the same as any existing
element of the @term{list} stored in @param{place}.  If @param{item} is not,
it is prepended to the @term{list}, and the new @term{list} is stored in
@param{place}.

@code{pushnew} returns the new @term{list} that is stored in @param{place}.

Whether or not @param{item} is already a member of the @term{list} that is
in @param{place} is determined by comparisons using @kwd{test} or @kwd{test-not}.
The first argument to the @kwd{test} or @kwd{test-not}
function is @param{item}; the second argument is
an element of the @term{list} in @param{place} as returned by
the @kwd{key} function (if supplied).

If @kwd{key} is supplied, it is used to extract the part to be tested from
both @param{item} and the @term{list} element,
as for @code{adjoin}.

The argument to the @kwd{key} function 
is an element of the @term{list} stored in 
@param{place}. The @kwd{key} function typically returns part
part of the element of the @term{list}.
If @kwd{key} is not supplied or @nil{}, the @term{list} 
element is used.

For information about the @term{evaluation} of @term{subforms} of @param{place},
see @ref{GenRefSubFormEval, Section 5.1.1.1 (Evaluation of Subforms to Places)}.

It is @term{implementation-dependent} whether or not @code{pushnew} 
actually executes the storing form for its @param{place} in the
situation where the @param{item} is already a member of the @term{list}
held by @param{place}.

@subsubheading Examples:
@lisp
 (setq x '(a (b c) d)) @EV{} (A (B C) D)
 (pushnew 5 (cadr x)) @EV{} (5 B C)   
 x @EV{} (A (5 B C) D)
 (pushnew 'b (cadr x)) @EV{} (5 B C)  
 x @EV{} (A (5 B C) D)
 (setq lst '((1) (1 2) (1 2 3))) @EV{} ((1) (1 2) (1 2 3))
 (pushnew '(2) lst) @EV{} ((2) (1) (1 2) (1 2 3))
 (pushnew '(1) lst) @EV{} ((1) (2) (1) (1 2) (1 2 3))
 (pushnew '(1) lst :test 'equal) @EV{} ((1) (2) (1) (1 2) (1 2 3))
 (pushnew '(1) lst :key #'car) @EV{} ((1) (2) (1) (1 2) (1 2 3)) 
@end lisp


@subsubheading Side Effects:

The contents of @param{place} may be modified.

@subsubheading See Also:

@ref{push},
@ref{adjoin},
@ref{Generalized Reference, Section 5.1 (Generalized Reference)}

@subsubheading Notes:

The effect of
@lisp
 (pushnew item place :test p)
@end lisp

is roughly equivalent to
@lisp
 (setf place (adjoin item place :test p))
@end lisp

except that the @term{subforms} of @f{place} are evaluated only once, 
and @f{item} is evaluated before @f{place}.


@node set-difference; nset-difference
@heading set-difference, nset-difference (Function)
@syindex set-difference
@cindex set-difference
@syindex nset-difference
@cindex nset-difference
@anchor{set-difference}


@subsubheading Syntax:

@DefunWithValues{set-difference, list-1 list-2 @key{} key test test-not, result-list}
@DefunWithValues{nset-difference, list-1 list-2 @key{} key test test-not, result-list}

@subsubheading Arguments and Values:

@param{list-1}---a @term{proper list}.

@param{list-2}---a @term{proper list}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{result-list}---a @term{list}.

@subsubheading Description:
@code{set-difference} returns a @term{list} 
of elements of @param{list-1}
that do not appear in @param{list-2}.  

@code{nset-difference} is the destructive 
version of @code{set-difference}.
It may destroy @param{list-1}.

For all possible ordered pairs consisting of
one element from @param{list-1} and one element from @param{list-2}, the 
@kwd{test} or @kwd{test-not} function is
used to determine whether they @term{satisfy the test}.  
The first argument to the @kwd{test} or @kwd{test-not} function 
is the part of an element of @param{list-1} that is returned by 
the @kwd{key} function (if supplied); the second argument is the part of 
an element of @param{list-2} that is 
returned by the @kwd{key} function (if supplied).

If @kwd{key} is supplied, its argument is a @param{list-1} or
@param{list-2} element. The @kwd{key} function 
typically returns part of 
the supplied element.
If @kwd{key} is not supplied, the @param{list-1} or @param{list-2}
element is used.

An element of @param{list-1}
appears in the result if and only if it does not match any element
of @param{list-2}.  

There is no guarantee that the order of elements in the result will
reflect the ordering of the arguments in any particular way.
The result @term{list} 
may share cells with, or be @code{eq} to, either of @param{list-1}
or @param{list-2},
if appropriate.

@subsubheading Examples:

@lisp
 (setq lst1 (list "A" "b" "C" "d")
       lst2 (list "a" "B" "C" "d")) @EV{} ("a" "B" "C" "d")
 (set-difference lst1 lst2) @EV{} ("d" "C" "b" "A")
 (set-difference lst1 lst2 :test 'equal) @EV{} ("b" "A")
 (set-difference lst1 lst2 :test #'equalp) @EV{} NIL 
 (nset-difference lst1 lst2 :test #'string=) @EV{} ("A" "b")
 (setq lst1 '(("a" . "b") ("c" . "d") ("e" . "f")))
@EV{} (("a" . "b") ("c" . "d") ("e" . "f")) 
 (setq lst2 '(("c" . "a") ("e" . "b") ("d" . "a")))
@EV{} (("c" . "a") ("e" . "b") ("d" . "a")) 
 (nset-difference lst1 lst2 :test #'string= :key #'cdr)
@EV{} (("c" . "d") ("e" . "f")) 
 lst1 @EV{} (("a" . "b") ("c" . "d") ("e" . "f")) 
 lst2 @EV{} (("c" . "a") ("e" . "b") ("d" . "a")) 
@end lisp

@lisp
;; Remove all flavor names that contain "c" or "w".
 (set-difference '("strawberry" "chocolate" "banana"
                  "lemon" "pistachio" "rhubarb")
          '(#@bsl{}c #@bsl{}w)
          :test #'(lambda (s c) (find c s)))
@EV{} ("banana" "rhubarb" "lemon")    ;One possible ordering.
@end lisp


@subsubheading Side Effects:

@code{nset-difference} may destroy @param{list-1}.

@subsubheading Exceptional Situations:

@Lazychecktypes{@param{list-1} and @param{list-2}, @term{proper lists}}

@subsubheading See Also:

@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.


@node set-exclusive-or; nset-exclusive-or
@heading set-exclusive-or, nset-exclusive-or (Function)
@syindex set-exclusive-or
@cindex set-exclusive-or
@syindex nset-exclusive-or
@cindex nset-exclusive-or


@subsubheading Syntax:

@DefunWithValues{set-exclusive-or, list-1 list-2 @key{} key test test-not, result-list}
@DefunWithValues{nset-exclusive-or, list-1 list-2 @key{} key test test-not, result-list}

@subsubheading Arguments and Values:

@param{list-1}---a @term{proper list}.

@param{list-2}---a @term{proper list}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{result-list}---a @term{list}.

@subsubheading Description:
@code{set-exclusive-or} returns a @term{list} of elements that appear
in exactly one of @param{list-1} and @param{list-2}.

@code{nset-exclusive-or} 
is the @term{destructive} version of @code{set-exclusive-or}.

For all possible ordered pairs consisting of
one element from @param{list-1} and one element from @param{list-2}, the 
@kwd{test} or @kwd{test-not} function is
used to determine whether they @term{satisfy the test}.  

If @kwd{key} is supplied, it is used to
extract the part to be tested from the @param{list-1} or @param{list-2} element. 
The first argument to the @kwd{test} or @kwd{test-not} function 
is the part of an element of @param{list-1} extracted by the @kwd{key}
function (if supplied); the second argument  is the part of an 
element of @param{list-2} extracted by the @kwd{key} function (if supplied).
If @kwd{key} is not supplied or @nil{}, the @param{list-1} or
@param{list-2} element is used.

The result contains precisely
those elements of @param{list-1} and @param{list-2} 
that appear in no matching pair.

The result @term{list} of @code{set-exclusive-or} 
might share storage with one of @param{list-1} or @param{list-2}.

@subsubheading Examples:

@lisp
 (setq lst1 (list 1 "a" "b")
       lst2 (list 1 "A" "b")) @EV{} (1 "A" "b")
 (set-exclusive-or lst1 lst2) @EV{} ("b" "A" "b" "a")
 (set-exclusive-or lst1 lst2 :test #'equal) @EV{} ("A" "a")
 (set-exclusive-or lst1 lst2 :test 'equalp) @EV{} NIL 
 (nset-exclusive-or lst1 lst2) @EV{} ("a" "b" "A" "b") 
 (setq lst1 (list (("a" . "b") ("c" . "d") ("e" . "f"))))
@EV{} (("a" . "b") ("c" . "d") ("e" . "f"))
 (setq lst2 (list (("c" . "a") ("e" . "b") ("d" . "a"))))
@EV{} (("c" . "a") ("e" . "b") ("d" . "a")) 
 (nset-exclusive-or lst1 lst2 :test #'string= :key #'cdr)
@EV{} (("c" . "d") ("e" . "f") ("c" . "a") ("d" . "a")) 
 lst1 @EV{} (("a" . "b") ("c" . "d") ("e" . "f"))
 lst2 @EV{} (("c" . "a") ("d" . "a")) 
@end lisp


@subsubheading Side Effects:

@code{nset-exclusive-or} is permitted to modify any part,
@term{car} or @term{cdr}, of the @term{list structure} of @param{list-1} or @param{list-2}.

@subsubheading Exceptional Situations:

@Lazychecktypes{@param{list-1} and @param{list-2}, @term{proper lists}}

@subsubheading See Also:

@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.

Since the @code{nset-exclusive-or} side effect is not required,
it should not be used in for-effect-only
positions in portable code.



@node subsetp
@heading subsetp (Function)
@syindex subsetp
@cindex subsetp


@subsubheading Syntax:

@DefunWithValues{subsetp, list-1 list-2 @key{} key test test-not, generalized-boolean}

@subsubheading Arguments and Values:

@param{list-1}---a @term{proper list}.

@param{list-2}---a @term{proper list}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@code{subsetp} returns @term{true} if every element of @param{list-1}
@bogusterm{matches} some element of @param{list-2},
and @term{false} otherwise.

Whether a list element is the same as another list element is
determined by the functions specified by the keyword arguments.  
The first argument to the @kwd{test} or @kwd{test-not} 
function is 
typically
part of an element of @param{list-1} extracted by
the @kwd{key} function; the second argument is  typically part of 
an element of @param{list-2} extracted by
the @kwd{key} function.

The argument to the @kwd{key} function is an element of either
@param{list-1} or @param{list-2}; the return value is part of the element
of the supplied list element.
If @kwd{key} is not supplied or @nil{}, 
the @param{list-1} or @param{list-2}
element itself is supplied to the @kwd{test} or @kwd{test-not} 
function.

@subsubheading Examples:

@lisp
 (setq cosmos '(1 "a" (1 2))) @EV{} (1 "a" (1 2))
 (subsetp '(1) cosmos) @EV{} @term{true}
 (subsetp '((1 2)) cosmos) @EV{} @term{false}
 (subsetp '((1 2)) cosmos :test 'equal) @EV{} @term{true}
 (subsetp '(1 "A") cosmos :test #'equalp) @EV{} @term{true}
 (subsetp '((1) (2)) '((1) (2))) @EV{} @term{false}
 (subsetp '((1) (2)) '((1) (2)) :key #'car) @EV{} @term{true}
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktypes{@param{list-1} and @param{list-2}, @term{proper lists}}

@subsubheading See Also:

@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.


@node union; nunion
@heading union, nunion (Function)
@syindex union
@cindex union
@syindex nunion
@cindex nunion
@anchor{union}


@subsubheading Syntax:

@DefunWithValues{union, list-1 list-2 @key{} key test test-not, result-list}
@DefunWithValues{nunion, list-1 list-2 @key{} key test test-not, result-list}

@subsubheading Arguments and Values:

@param{list-1}---a @term{proper list}.

@param{list-2}---a @term{proper list}.

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{result-list}---a @term{list}.

@subsubheading Description:

@code{union} and @code{nunion} return a @term{list}
that contains every element that occurs in either @param{list-1} 
or @param{list-2}.                                 

For all possible ordered pairs consisting of one
element from @param{list-1} 
and one element from @param{list-2}, @kwd{test} or  @kwd{test-not} is used
to determine whether they @term{satisfy the test}. 
The first argument to the @kwd{test} or @kwd{test-not} 
function is the part of the element of @param{list-1} extracted by the
@kwd{key} function (if supplied); the second argument  
is the part of the element of @param{list-2} extracted by the
@kwd{key} function (if supplied).

The argument to the @kwd{key} function is an element of
@param{list-1} or @param{list-2}; the return value is part of the supplied
element.  
If @kwd{key} is not supplied or @nil{}, 
the element of @param{list-1} or @param{list-2}
itself is supplied to the @kwd{test} or @kwd{test-not} function. 

For every matching pair, 
one of the two elements of the pair will be in the result.  Any
element from either @param{list-1} or @param{list-2}
that matches no element of the other will appear
in the result.  

If there is a duplication between @param{list-1} 
and @param{list-2},
only one of the duplicate instances will be in the result.
If either @param{list-1} 
or @param{list-2} has duplicate entries within it,
the redundant entries
might or might not appear in the result.

The order of elements in the result do not have to
reflect the ordering of @param{list-1} or @param{list-2} in any way.
The result @term{list} may be @code{eq} to either
@param{list-1} or @param{list-2} if appropriate.

@subsubheading Examples:

@lisp
 (union '(a b c) '(f a d))
@EV{} (A B C F D)
@OV{} (B C F A D)
@OV{} (D F A B C)
 (union '((x 5) (y 6)) '((z 2) (x 4)) :key #'car)
@EV{} ((X 5) (Y 6) (Z 2))
@OV{} ((X 4) (Y 6) (Z 2))

 (setq lst1 (list 1 2 '(1 2) "a" "b")
       lst2 (list 2 3 '(2 3) "B" "C"))
@EV{} (2 3 (2 3) "B" "C")
 (nunion lst1 lst2)
@EV{} (1 (1 2) "a" "b" 2 3 (2 3) "B" "C") 
@OV{} (1 2 (1 2) "a" "b" "C" "B" (2 3) 3)
@end lisp


@subsubheading Side Effects:

@code{nunion} is permitted to modify any part, @term{car} or @term{cdr}, 
of the @term{list structure} of @param{list-1} or @param{list-2}.

@subsubheading Exceptional Situations:

@Lazychecktypes{@param{list-1} and @param{list-2}, @term{proper lists}}

@subsubheading See Also:

@ref{intersection},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} parameter is deprecated.

Since the @code{nunion} side effect is not required,
it should not be used in for-effect-only positions in portable code.




@node Arrays
@chapter Arrays
@menu
* Array Concepts::

Dictionary

* array::
* simple-array::
* vector (System Class)::
* simple-vector::
* bit-vector::
* simple-bit-vector::
* make-array::
* adjust-array::
* adjustable-array-p::
* aref::
* array-dimension::
* array-dimensions::
* array-element-type::
* array-has-fill-pointer-p::
* array-displacement::
* array-in-bounds-p::
* array-rank::
* array-row-major-index::
* array-total-size::
* arrayp::
* fill-pointer::
* row-major-aref::
* upgraded-array-element-type::
* array-dimension-limit::
* array-rank-limit::
* array-total-size-limit::
* simple-vector-p::
* svref::
* vector (Function)::
* vector-pop::
* vector-push; vector-push-extend::
* vectorp::
* bit; sbit::
* bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+::
* bit-vector-p::
* simple-bit-vector-p::
@end menu

@node Array Concepts
@section Array Concepts

@menu
* Array Elements::
* Specialized Arrays::
@end menu
@node Array Elements
@subsection Array Elements

An @term{array} contains a set of @term{objects} called @term{elements}
that can be referenced individually according to a rectilinear coordinate system.

@subsubsection Array Indices

An @term{array} @term{element} is referred to by a (possibly empty) series of indices.
The length of the series must equal the @term{rank} of the @term{array}.
Each index must be a non-negative @term{fixnum} 
less than the corresponding @term{array} @term{dimension}.
@term{Array} indexing is zero-origin.


@subsubsection Array Dimensions

An axis of an @term{array} is called a @newterm{dimension}.

Each @term{dimension} is a non-negative 
@term{fixnum};
if any dimension of an @term{array} is zero, the @term{array} has no elements.
It is permissible for a @term{dimension} to be zero, 
in which case the @term{array} has no elements, 
and any attempt to @term{access} an @term{element}
is an error.  However, other properties of the @term{array},  
such as the @term{dimensions} themselves, may be used.

@unnumberedsubsubsec 15.1.1.2.1 Implementation Limits on Individual Array Dimensions


An @term{implementation} may impose a limit on @term{dimensions} of an @term{array},
but there is a minimum requirement on that limit.  See the @term{variable} @ref{array-dimension-limit}.



@subsubsection Array Rank

An @term{array} can have any number of @term{dimensions} (including zero).
The number of @term{dimensions} is called the @newterm{rank}.

If the rank of an @term{array} is zero then the @term{array} is said to have
no @term{dimensions}, and the product of the dimensions (see @code{array-total-size})
is then 1; a zero-rank @term{array} therefore has a single element.

@unnumberedsubsubsec 15.1.1.3.1 Vectors


An @term{array} of @term{rank} one (@ie{} a one-dimensional @term{array})
is called a @newterm{vector}.

@unnumberedsubsubsec 15.1.1.3.1.1 Fill Pointers


A @newterm{fill pointer} is a non-negative @term{integer} no
larger than the total number of @term{elements} in a @term{vector}.
Not all @term{vectors} have @term{fill pointers}.
See the @term{functions} @ref{make-array} and @code{adjust-array}.

An @term{element} of a @term{vector} is said to be @newterm{active} if it has
an index that is greater than or equal to zero, 
but less than the @term{fill pointer} (if any).
For an @term{array} that has no @term{fill pointer},
all @term{elements} are considered @term{active}.

Only @term{vectors} may have @term{fill pointers}; 
multidimensional @term{arrays} may not.
A multidimensional @term{array} that is displaced to a @term{vector} 
that has a @term{fill pointer} can be created.



@unnumberedsubsubsec 15.1.1.3.2 Multidimensional Arrays


@unnumberedsubsubsec 15.1.1.3.2.1 Storage Layout for Multidimensional Arrays


Multidimensional @term{arrays} store their components in row-major order;
that is, internally a multidimensional @term{array} is stored as a
one-dimensional @term{array}, with the multidimensional index sets
ordered lexicographically, last index varying fastest.  


@unnumberedsubsubsec 15.1.1.3.2.2 Implementation Limits on Array Rank


An @term{implementation} may impose a limit on the @term{rank} of an @term{array},
but there is a minimum requirement on that limit.  See the @term{variable} @ref{array-rank-limit}.





@node Specialized Arrays
@subsection Specialized Arrays

An @term{array} can be a @term{general} @term{array}, 
meaning each @term{element} may be any @term{object},
or it may be a @term{specialized} @term{array},
meaning that each @term{element} must be of a restricted @term{type}.

The phrasing ``an @term{array} @term{specialized} to @term{type} @metavar{type}''
is sometimes used to emphasize the @term{element type} of an @term{array}.
This phrasing is tolerated even when the @metavar{type} is @code{t},
even though an @term{array} @term{specialized} to @term{type} @term{t}
is a @term{general} @term{array}, not a @term{specialized} @term{array}.

@Thenextfigure{}@spc{}lists some @term{defined names} that are applicable to @term{array} 
creation, @term{access}, and information operations.


@float Figure,fig15.1
@cartouche
@multitable{array-dimension-limit}{array-has-fill-pointer-p}{upgraded-array-element-type}

@item adjust-array @tab array-has-fill-pointer-p @tab make-array
@item adjustable-array-p @tab array-in-bounds-p @tab svref
@item aref @tab array-rank @tab upgraded-array-element-type
@item array-dimension @tab array-rank-limit @tab upgraded-complex-part-type
@item array-dimension-limit @tab array-row-major-index @tab vector
@item array-dimensions @tab array-total-size @tab vector-pop
@item array-displacement @tab array-total-size-limit @tab vector-push
@item array-element-type @tab fill-pointer @tab vector-push-extend
@end multitable
@end cartouche
@caption{General Purpose Array-Related Defined Names}
@end float


@subsubsection Array Upgrading
@anchor{ArrayUpgrading}


The @newterm{upgraded array element type} of a @term{type} @mat{T@sub1{}}
is a @term{type} @mat{T@sub2{}} that is a @term{supertype} of @mat{T@sub1{}}
and that is used instead of @mat{T@sub1{}} whenever @mat{T@sub1{}}
is used as an @term{array element type} 
for object creation or type discrimination.

During creation of an @term{array},
the @term{element type} that was requested 
is called the @newterm{expressed array element type}.
The @term{upgraded array element type} of the @term{expressed array element type}
becomes the @newterm{actual array element type} of the @term{array} that is created.

@term{Type} @term{upgrading} implies a movement upwards in the type hierarchy lattice.
A @term{type} is always a @term{subtype} of its @term{upgraded array element type}.
Also, if a @term{type} @mat{T@subs1{x}} is a @term{subtype} of another @term{type} @mat{T@subs1{y}},
then
the @term{upgraded array element type} of @mat{T@subs1{x}} 
must be a @term{subtype} of
the @term{upgraded array element type} of @mat{T@subs1{y}}.
Two @term{disjoint} @term{types} can be @term{upgraded} to the same @term{type}.

The @term{upgraded array element type} @mat{T@sub2{}} of a @term{type} @mat{T@sub1{}}
is a function only of @mat{T@sub1{}} itself;
that is, it is independent of any other property of the @term{array} 
for which @mat{T@sub2{}} will be used,
such as @term{rank}, @term{adjustability}, @term{fill pointers}, or displacement.
@Thefunction{upgraded-array-element-type} 
can be used by @term{conforming programs} to predict how the @term{implementation}
will @term{upgrade} a given @term{type}.



@subsubsection Required Kinds of Specialized Arrays
@anchor{RequiredSpecializedArrays}

@term{Vectors} whose @term{elements} are restricted to @term{type}
@code{character} or a @term{subtype} of @code{character}
are called 
@cindex string
@dfn{strings}. 
@term{Strings} are @oftype{string}.
@Thenextfigure{}@spc{}lists some @term{defined names} related to @term{strings}.

@term{Strings} are @term{specialized} @term{arrays} 
and might logically have been included in this chapter.
However, for purposes of readability
most information about @term{strings} does not appear in this chapter;
see instead @ref{Strings, Chapter 16 (Strings)}.


@float Figure,fig15.2
@cartouche
@multitable{nstring-capitalize}{string-not-greaterp}{string@tt{/=}}

@item char @tab string-equal @tab string-upcase
@item make-string @tab string-greaterp @tab string@tt{/=}
@item nstring-capitalize @tab string-left-trim @tab string@tt{<}
@item nstring-downcase @tab string-lessp @tab string@tt{<=}
@item nstring-upcase @tab string-not-equal @tab string@tt{=}
@item schar @tab string-not-greaterp @tab string@tt{>}
@item string @tab string-not-lessp @tab string@tt{>=}
@item string-capitalize @tab string-right-trim @tab 
@item string-downcase @tab string-trim @tab 
@end multitable
@end cartouche
@caption{Operators that Manipulate Strings}
@end float


@term{Vectors} whose @term{elements} are restricted to @term{type}
@code{bit} are called 
@cindex bit vector
@dfn{bit vectors}.
@term{Bit vectors} are @oftype{bit-vector}.
@Thenextfigure{}@spc{}lists some @term{defined names} for operations on @term{bit arrays}.


@float Figure,fig15.3
@cartouche
@multitable{bit-andc1}{bit-nand}{bit-orc2}

@item bit @tab bit-ior @tab bit-orc2
@item bit-and @tab bit-nand @tab bit-xor
@item bit-andc1 @tab bit-nor @tab sbit
@item bit-andc2 @tab bit-not @tab 
@item bit-eqv @tab bit-orc1 @tab 
@end multitable
@end cartouche
@caption{Operators that Manipulate Bit Arrays}
@end float




@node array
@heading array (System Class)
@syindex array
@cindex array


@subsubheading Class Precedence List:
@code{array},
@code{t}

@subsubheading Description:

An @term{array} contains @term{objects} arranged according to a
Cartesian coordinate system.
An @term{array} provides mappings from a set of
@term{fixnums}
@mat{@left{}@lcurly{}i@sub0{},i@sub1{},@dots{},i@subs{r-1}@right{}@rcurly{}} to corresponding @term{elements}
of the @term{array}, 
where @mat{0 @le{} i@subs1{j} < d@subs1{j}},
@mat{r} is the rank of the array, and @mat{d@subs1{j}} is the size of @term{dimension} @mat{j} of
the array.

When an @term{array} is created, the program requesting its creation may
declare that all @term{elements} are of a particular @term{type}, 
called the @term{expressed array element type}.
The implementation is permitted to @term{upgrade} this type in order to 
produce the @term{actual array element type},
which is the @term{element type} for the @term{array} is actually @term{specialized}.
See the @term{function} @ref{upgraded-array-element-type}.

@subsubheading Compound Type Specifier Kind:

Specializing.

@subsubheading Compound Type Specifier Syntax:

@Deftype{array, @ttbrac{@curly{element-type | @t{*}} @brac{dimension-spec}}}

@auxbnf{dimension-spec, rank | @t{*} | @paren{@star{@curly{dimension | @t{*}}}}}

@subsubheading Compound Type Specifier Arguments:

@param{dimension}---a @term{valid array dimension}.

@param{element-type}---a @term{type specifier}.

@param{rank}---a non-negative @term{fixnum}.

@subsubheading Compound Type Specifier Description:

This denotes the set of @term{arrays} whose
@term{element type},  @term{rank},  and @term{dimensions}
match any given
@param{element-type}, @param{rank}, and @param{dimensions}.
Specifically:

If @param{element-type} is the @term{symbol} @t{*},
@term{arrays} are not excluded on the basis of their @term{element type}.
Otherwise, only those @param{arrays} are included whose @term{actual array element type}
is the result of @term{upgrading} @param{element-type};
see @ref{ArrayUpgrading, Section 15.1.2.1 (Array Upgrading)}.

If the @param{dimension-spec} is a @param{rank},
the set includes only those @param{arrays} having that @term{rank}.
If the @param{dimension-spec} is a @term{list} of @param{dimensions},
the set includes only those @param{arrays} having a @term{rank}
given by the @term{length} of the @param{dimensions},
and having the indicated @param{dimensions}; 
in this case, @t{*} matches any value for the corresponding @term{dimension}.
If the @param{dimension-spec} is the @term{symbol} @t{*},
the set is not restricted on the basis of @term{rank} or @term{dimension}.


@subsubheading See Also:

@ref{*print-array*},
@ref{aref},
@ref{make-array},
@ref{vector (System Class)},
@ref{SharpsignA, Section 2.4.8.12 (Sharpsign A)},
@ref{PrintingOtherArrays, Section 22.1.3.8 (Printing Other Arrays)}

@subsubheading Notes:

Note that the type @tt{(array t)}     
is a proper @term{subtype} of the type @tt{(array *)}.
The reason is that the type @tt{(array t)} is the set of @term{arrays} 
that can
hold any @term{object} (the @term{elements} are @oftype{t},  which includes
all @term{objects}).
On the other hand, the type @tt{(array *)}
is the set of all @term{arrays} whatsoever, including for example
@term{arrays} that can hold only @term{characters}. 
The type @tt{(array character)} 
is not a @term{subtype} of the type @tt{(array t)}; 
the two sets                                              
are @term{disjoint} because the type @tt{(array character)} is not the
set of all @term{arrays} that can hold 
@term{characters}, but rather the set of
@term{arrays} 
that are specialized to hold precisely @term{characters} and no
other @term{objects}. 

@node simple-array
@heading simple-array (Type)
@syindex simple-array
@cindex simple-array


@subsubheading Supertypes:

@code{simple-array},
@code{array},
@code{t}

@subsubheading Description:

The @term{type} of an @term{array} that is not displaced 
to another @term{array}, has no @term{fill pointer}, and is
not
@term{expressly adjustable} is a @subtypeof{simple-array}.
The concept of a @term{simple array}
exists to allow the implementation to use a specialized representation
and to allow the user to declare that certain values will always be
@term{simple arrays}. 

The @term{types} @code{simple-vector},
@code{simple-string},
and @code{simple-bit-vector}
are @term{disjoint} @subtypesof{simple-array}, 
for they respectively mean @f{(simple-array t (*))},
the union of all @f{(simple-array @i{c} (*))} 
for any @i{c} being a @subtypeof{character},
and @f{(simple-array bit (*))}.

@subsubheading Compound Type Specifier Kind:

Specializing.

@subsubheading Compound Type Specifier Syntax:

@Deftype{simple-array, @ttbrac{@curly{element-type | @t{*}} @brac{dimension-spec}}}

@auxbnf{dimension-spec, rank | @t{*} | @paren{@star{@curly{dimension | @t{*}}}}}

@subsubheading Compound Type Specifier Arguments:

@param{dimension}---a @term{valid array dimension}.

@param{element-type}---a @term{type specifier}.

@param{rank}---a non-negative @term{fixnum}.

@subsubheading Compound Type Specifier Description:

This @term{compound type specifier} is treated exactly as the corresponding
@term{compound type specifier} for @term{type} @code{array} would be treated,
except that the set is further constrained to include only @term{simple arrays}.

@subsubheading Notes:

It is @term{implementation-dependent} 
whether @term{displaced arrays},
@term{vectors} with @term{fill pointers},
or arrays that are @term{actually adjustable}
are @term{simple arrays}.

@tt{(simple-array *)} refers to all @term{simple arrays} 
regardless of element type, @tt{(simple-array @param{type-specifier})}
refers only to those @term{simple arrays}
that can result from giving @param{type-specifier} as the
@kwd{element-type} argument to @code{make-array}.  

@node vector (System Class)
@heading vector (System Class)
@syindex vector
@cindex vector


@subsubheading Class Precedence List:
@code{vector},
@code{array},
@code{sequence},
@code{t}

@subsubheading Description:

Any one-dimensional @term{array} is a @term{vector}.

@Thetype{vector} is a @subtypeof{array}; 
for all @term{types} @f{x}, @tt{(vector x)} is the same as @tt{(array x (*))}.

The @term{type} @tt{(vector t)}, @thetype{string}, and @thetype{bit-vector}
are @term{disjoint} @subtypesof{vector}.

@subsubheading Compound Type Specifier Kind:

Specializing.

@subsubheading Compound Type Specifier Syntax:

@Deftype{vector, @ttbrac{@curly{element-type | @t{*}} @brac{@curly{size | @t{*}}}}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum}.

@param{element-type}---a @term{type specifier}.

@subsubheading Compound Type Specifier Description:

This denotes the set of specialized @term{vectors}
whose @term{element type} and @param{dimension} match the specified values.
Specifically:

If @param{element-type} is the @term{symbol} @t{*},
@term{vectors} are not excluded on the basis of their @term{element type}.
Otherwise, only those @param{vectors} are included whose @term{actual array element type}
is the result of @term{upgrading} @param{element-type};
see @ref{ArrayUpgrading, Section 15.1.2.1 (Array Upgrading)}.

If a @param{size} is specified,
the set includes only those @param{vectors} whose only @term{dimension}
is @param{size}.
If the @term{symbol} @t{*} is specified instead of a @param{size},
the set is not restricted on the basis of @term{dimension}.

@subsubheading See Also:

@ref{RequiredSpecializedArrays, Section 15.1.2.2 (Required Kinds of Specialized Arrays)},
@ref{SharpsignLeftParen, Section 2.4.8.3 (Sharpsign Left-Parenthesis)},
@ref{PrintingOtherVectors, Section 22.1.3.7 (Printing Other Vectors)},
@ref{SharpsignA, Section 2.4.8.12 (Sharpsign A)}

@subsubheading Notes:

The @term{type} @f{(vector @param{e} @param{s})} 
is equivalent to the @term{type} @f{(array @param{e} (@param{s}))}.

The type @f{(vector bit)} has the name @code{bit-vector}.

The union of all @term{types} @f{(vector @mat{C})}, 
where @mat{C} is any @term{subtype} of @code{character},
has the name @code{string}.

@tt{(vector *)} refers to all @term{vectors} 
regardless of element type, @tt{(vector @param{type-specifier})}
refers only to those @term{vectors} 
that can result from giving @param{type-specifier} as the
@kwd{element-type} argument to @code{make-array}.  

@node simple-vector
@heading simple-vector (Type)
@syindex simple-vector
@cindex simple-vector


@subsubheading Supertypes:

@code{simple-vector},
@code{vector},
@code{simple-array},
@code{array},
@code{sequence},
@code{t}

@subsubheading Description:

The @term{type} of a @term{vector} that is not displaced to another
@term{array}, has no @term{fill pointer}, is not 
@term{expressly adjustable}
and is able to hold 
elements of any @term{type} is a @subtypeof{simple-vector}.

@Thetype{simple-vector} is a @subtypeof{vector},
and is a @term{subtype} of @term{type} @f{(vector t)}.

@subsubheading Compound Type Specifier Kind:

Specializing.

@subsubheading Compound Type Specifier Syntax:

@Deftype{simple-vector, @ttbrac{size}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum},
or the @term{symbol} @t{*}.
@Default{the @term{symbol} @t{*}}

@subsubheading Compound Type Specifier Description:

This is the same as @tt{(simple-array t (@param{size}))}.

@node bit-vector
@heading bit-vector (System Class)
@syindex bit-vector
@cindex bit-vector


@subsubheading Class Precedence List:
@code{bit-vector},
@code{vector},
@code{array},
@code{sequence},
@code{t}

@subsubheading Description:

A @term{bit vector} is a @term{vector} the @term{element type} of which is @term{bit}.

@Thetype{bit-vector} is a @subtypeof{vector}, 
for @code{bit-vector} means @f{(vector bit)}.

@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{bit-vector, @ttbrac{size}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum},
or the @term{symbol} @t{*}.

@subsubheading Compound Type Specifier Description:

This denotes the same @term{type} as the @term{type} @tt{(array bit (@param{size}))};
that is, the set of @term{bit vectors} of size @param{size}.

@subsubheading See Also:

@ref{SharpsignStar, Section 2.4.8.4 (Sharpsign Asterisk)},
@ref{PrintingBitVectors, Section 22.1.3.6 (Printing Bit Vectors)},
@ref{RequiredSpecializedArrays, Section 15.1.2.2 (Required Kinds of Specialized Arrays)}

@node simple-bit-vector
@heading simple-bit-vector (Type)
@syindex simple-bit-vector
@cindex simple-bit-vector


@subsubheading Supertypes:

@code{simple-bit-vector},
@code{bit-vector},
@code{vector},
@code{simple-array},
@code{array},
@code{sequence},
@code{t}

@subsubheading Description:

The @term{type} of a @term{bit vector} that is not displaced
to another @term{array}, has no @term{fill pointer}, and is 
not
@term{expressly adjustable}
is a
@subtypeof{simple-bit-vector}.

@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{simple-bit-vector, @ttbrac{size}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum},
or the @term{symbol} @t{*}.
@Default{the @term{symbol} @t{*}}

@subsubheading Compound Type Specifier Description:

This denotes the same type as the @term{type}
@f{(simple-array bit (@param{size}))}; 
that is, the set of @term{simple bit vectors} of size @param{size}.


@node make-array
@heading make-array (Function)
@syindex make-array
@cindex make-array


@subsubheading Syntax:

@DefunWithValuesNewline{make-array, dimensions @key{} @vtop{@hbox{element-type} @hbox{initial-element} @hbox{initial-contents} @hbox{adjustable} @hbox{fill-pointer} @hbox{displaced-to} @hbox{displaced-index-offset}}, new-array}

@subsubheading Arguments and Values:

@param{dimensions}---a @term{designator} for a @term{list} of @term{valid array dimensions}.

@param{element-type}---a @term{type specifier}. 
@Default{@code{t}}

@param{initial-element}---an @term{object}.

@param{initial-contents}---an @term{object}.

@param{adjustable}---a @term{generalized boolean}.
@Default{@nil{}}

@param{fill-pointer}---a @term{valid fill pointer} for the @term{array} to be created,
or @code{t}@spc{}or @nil{}.
@Default{@nil{}}

@param{displaced-to}---an @term{array} or @nil{}.
@Default{@nil{}}
This option must not be supplied if either @param{initial-element}
or @param{initial-contents} is supplied.

@param{displaced-index-offset}---a @term{valid array row-major index} 
for @param{displaced-to}. @Default{@f{0}}
This option must not be supplied unless a @term{non-nil} @param{displaced-to} is supplied.

@param{new-array}---an @term{array}.

@subsubheading Description:

Creates and returns an @term{array} constructed of the most @term{specialized}
@term{type} that can accommodate elements of @term{type} given by @param{element-type}.
If @param{dimensions} is @nil{}@spc{}then a zero-dimensional @term{array} is created.

@param{Dimensions} represents the dimensionality of the new @term{array}.

@param{element-type} indicates the @term{type} of the elements intended to be stored
in the @param{new-array}.  The @param{new-array} can actually store any @term{objects}
of the @term{type} which results from @term{upgrading} @param{element-type};
see @ref{ArrayUpgrading, Section 15.1.2.1 (Array Upgrading)}.

If @param{initial-element} is supplied, 
it is used to initialize each @term{element} of @param{new-array}. 
If @param{initial-element} is supplied,
it must be of the @term{type} given by @param{element-type}.
@param{initial-element} cannot be supplied if either the @kwd{initial-contents} option
is supplied or @param{displaced-to} is @term{non-nil}.
If @param{initial-element} is not supplied,
the consequences of later reading an uninitialized @term{element} of @param{new-array}
are undefined
unless either @param{initial-contents} is supplied 
or @param{displaced-to} is @term{non-nil}.

@param{initial-contents} is used to initialize the contents of @term{array}.
For example:

@lisp
 (make-array '(4 2 3) :initial-contents
             '(((a b c) (1 2 3))
              ((d e f) (3 1 2))
              ((g h i) (2 3 1))
              ((j k l) (0 0 0))))
@end lisp


@param{initial-contents} is composed of a nested structure of @term{sequences}. 
The numbers of levels in the structure must equal the rank of @term{array}.
Each leaf of the nested structure must be of the @term{type} given by @param{element-type}. 
If @term{array} is zero-dimensional, then @param{initial-contents} specifies the single
@term{element}.  Otherwise, @param{initial-contents} must be a @term{sequence}
whose length is equal to the first dimension; each element must be a nested 
structure for an @term{array} whose dimensions are the remaining dimensions, 
and so on.
@param{Initial-contents} cannot be supplied if either 
@param{initial-element} is supplied
or @param{displaced-to} is @term{non-nil}.
If @param{initial-contents} is not supplied,
the consequences of later reading an uninitialized @term{element} of @param{new-array}
are undefined
unless either @param{initial-element} is supplied
or @param{displaced-to} is @term{non-nil}.

If @param{adjustable} is @term{non-nil},
the array is @term{expressly adjustable} 
(and so @term{actually adjustable});
otherwise, the array is not @term{expressly adjustable} 
(and it is @term{implementation-dependent} whether 
the array is @term{actually adjustable}).

If @param{fill-pointer} is @term{non-nil},
the @term{array} must be one-dimensional;
that is, the @term{array} must be a @term{vector}.
If @param{fill-pointer} is @code{t},
the length of the @term{vector} is used to initialize the @term{fill pointer}.
If @param{fill-pointer} is an @term{integer},
it becomes the initial @term{fill pointer} for the @term{vector}.

If @param{displaced-to} is @term{non-nil},
@code{make-array} will create a @term{displaced array} 
and @param{displaced-to} is the @term{target} of that @term{displaced array}. 
In that case, the consequences are undefined if the @term{actual array element type} of 
@param{displaced-to} is not @term{type equivalent} to the @term{actual array element type}
of the @term{array} being created.
If @param{displaced-to} is @nil{}, the @term{array} is not a @term{displaced array}.

The @param{displaced-index-offset} is made to be the index offset of the @term{array}.
When an array A is given as
@thekeyarg{displaced-to} to @code{make-array} 
when creating array B,
then array B is said to be displaced to array A.  The
total number of elements in an @term{array}, 
called the total size of the @term{array},
is calculated as the product of all the dimensions.
It is required that the total size of A be no smaller than the sum
of the total size of B plus the offset @f{n} supplied by
the @param{displaced-index-offset}.
The effect of displacing is that array B does not have any
elements of its own, but instead maps @term{accesses} to itself into
@term{accesses} to array A.  The mapping treats both @term{arrays} as if they
were one-dimensional by taking the elements in row-major order,
and then maps an @term{access} to element @f{k} of array B to an @term{access} to element
@f{k}+@f{n} of array A.

If @code{make-array} is called with @param{adjustable}, @param{fill-pointer},
and @param{displaced-to} each @nil{}, 
then the result is a @term{simple array}.
If @code{make-array} is called with one or more of @param{adjustable},
@param{fill-pointer}, or @param{displaced-to} being @term{true}, whether the
resulting @term{array} is a @term{simple array} is @term{implementation-dependent}.

When an array A is given as @thekeyarg{displaced-to} to
@code{make-array} when creating array B, then array B is said to
be displaced to array A.  The total number of elements in an @term{array}, 
called the total size of the @term{array}, is calculated as the product
of all the dimensions.
The consequences are unspecified if
the total size of A is smaller than the sum
of the total size of B plus the offset @f{n} supplied by
the @param{displaced-index-offset}.
The effect of displacing is that array B does not have any
elements of its own, but instead maps @term{accesses} to itself into
@term{accesses} to array A.  The mapping treats both @term{arrays} as if they
were one-dimensional by taking the elements in row-major order,
and then maps an @term{access} to element @f{k} of array B to an @term{access} 
to @term{element} @f{k}+@f{n} of array A.

@subsubheading Examples:
@lisp

 (make-array 5) ;; Creates a one-dimensional array of five elements.
 (make-array '(3 4) :element-type '(mod 16)) ;; Creates a 
                ;;two-dimensional array, 3 by 4, with four-bit elements.
 (make-array 5 :element-type 'single-float) ;; Creates an array of single-floats.
@end lisp


@lisp
 (make-array nil :initial-element nil) @EV{} #0ANIL
 (make-array 4 :initial-element nil) @EV{} #(NIL NIL NIL NIL)
 (make-array '(2 4) 
              :element-type '(unsigned-byte 2) 
              :initial-contents '((0 1 2 3) (3 2 1 0)))
@EV{} #2A((0 1 2 3) (3 2 1 0))
 (make-array 6
              :element-type 'character 
              :initial-element #@bsl{}a 
              :fill-pointer 3) @EV{} "aaa"
@end lisp


The following is an example of making a @term{displaced array}.

@lisp
 (setq a (make-array '(4 3))) 
@EV{} #<ARRAY 4x3 simple 32546632>
 (dotimes (i 4)
   (dotimes (j 3)
     (setf (aref a i j) (list i 'x j '= (* i j)))))
@EV{} NIL
 (setq b (make-array 8 :displaced-to a
                       :displaced-index-offset 2))
@EV{} #<ARRAY 8 indirect 32550757>
 (dotimes (i 8)
   (print (list i (aref b i))))
@OUT{} (0 (0 X 2 = 0)) 
@OUT{} (1 (1 X 0 = 0)) 
@OUT{} (2 (1 X 1 = 1)) 
@OUT{} (3 (1 X 2 = 2)) 
@OUT{} (4 (2 X 0 = 0)) 
@OUT{} (5 (2 X 1 = 2)) 
@OUT{} (6 (2 X 2 = 4)) 
@OUT{} (7 (3 X 0 = 0)) 
@EV{} NIL
@end lisp

The last example depends on the fact that @term{arrays} are, in effect,
stored in row-major order. 

@lisp
 (setq a1 (make-array 50))
@EV{} #<ARRAY 50 simple 32562043>
 (setq b1 (make-array 20 :displaced-to a1 :displaced-index-offset 10))
@EV{} #<ARRAY 20 indirect 32563346>
 (length b1) @EV{} 20

 (setq a2 (make-array 50 :fill-pointer 10))
@EV{} #<ARRAY 50 fill-pointer 10 46100216>
 (setq b2 (make-array 20 :displaced-to a2 :displaced-index-offset 10))
@EV{} #<ARRAY 20 indirect 46104010>
 (length a2) @EV{} 10
 (length b2) @EV{} 20

 (setq a3 (make-array 50 :fill-pointer 10))
@EV{} #<ARRAY 50 fill-pointer 10 46105663>
 (setq b3 (make-array 20 :displaced-to a3 :displaced-index-offset 10
                         :fill-pointer 5))
@EV{} #<ARRAY 20 indirect, fill-pointer 5 46107432>
 (length a3) @EV{} 10
 (length b3) @EV{} 5
@end lisp



@subsubheading See Also:

@ref{adjustable-array-p},
@ref{aref},
@ref{arrayp},
@ref{array-element-type},
@ref{array-rank-limit},
@ref{array-dimension-limit},
@ref{fill-pointer},
@ref{upgraded-array-element-type}

@subsubheading Notes:

There is no specified way to create an @term{array} 
for which @code{adjustable-array-p} definitely
returns @term{false}.
There is no specified way to create an @term{array} 
that is not a @term{simple array}.


@node adjust-array
@heading adjust-array (Function)
@syindex adjust-array
@cindex adjust-array


@subsubheading Syntax:

@DefunWithValuesNewline{adjust-array, array new-dimensions @key{} @vtop{@hbox{element-type} @hbox{initial-element} @hbox{initial-contents} @hbox{fill-pointer} @hbox{displaced-to} @hbox{displaced-index-offset}}, adjusted-array}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{new-dimensions}---a @term{valid array dimension} 
or a @term{list} of @term{valid array dimensions}.

@param{element-type}---a @term{type specifier}.

@param{initial-element}---an @term{object}.
@param{Initial-element} must not be supplied if either 
@param{initial-contents} or @param{displaced-to} is supplied.

@param{initial-contents}---an @term{object}.
If @term{array} has rank greater than zero, then @param{initial-contents}
is composed of nested @term{sequences}, the depth of which must equal
the rank of @param{array}.  Otherwise, @term{array} is zero-dimensional and
@param{initial-contents} supplies the single element.
@param{initial-contents} must not be supplied if either 
@param{initial-element} or @param{displaced-to} is given.

@param{fill-pointer}---a @term{valid fill pointer} for the
@term{array} to be created, or @code{t}, or @nil{}.
@Default{@nil{}}

@param{displaced-to}---an @term{array} or @nil{}.
@param{initial-elements} and @param{initial-contents} must not be supplied
if @param{displaced-to} is supplied.

@param{displaced-index-offset}---an @objectoftype{(fixnum 0 @i{n})} 
where @i{n} is @tt{(array-total-size @param{displaced-to})}.
@param{displaced-index-offset} may be supplied only if @param{displaced-to} is supplied.

@param{adjusted-array}---an @term{array}.

@subsubheading Description:

@code{adjust-array} changes the dimensions or elements of @param{array}.
The result is an @term{array} of the same @term{type} and rank as @param{array},
that is either the modified @param{array},
or a newly created @term{array} to which
@param{array} can be displaced, and that has 
the given @param{new-dimensions}.

@param{New-dimensions} specify the size of each @term{dimension} of @param{array}. 

@param{Element-type} specifies the @term{type} of the @term{elements}
of the resulting @term{array}.  If @param{element-type} is supplied,
the consequences are unspecified if
the @term{upgraded array element type} of @param{element-type}
is not the same as the @term{actual array element type} of @param{array}.

If @param{initial-contents} is supplied, it is treated as for
@code{make-array}.  In this case none of the original contents of
@param{array} appears in the resulting @term{array}.

If @param{fill-pointer} is an @term{integer},
it becomes the @term{fill pointer} for the resulting @term{array}.
If @param{fill-pointer} is the symbol @code{t},
it indicates that the size of the resulting @term{array} 
should be used as the @term{fill pointer}.
If @param{fill-pointer} is @nil{},
it indicates that the @term{fill pointer} should be left as it is.

If @param{displaced-to}
@term{non-nil}, a @term{displaced array}
is created. The resulting @term{array} shares its contents with the @term{array} given by
@param{displaced-to}.
The resulting @term{array} cannot contain more elements than the @term{array}
it is displaced to.  
If @param{displaced-to} is not supplied or @nil{},
the resulting @term{array} is not a @term{displaced array}.
If array @mat{A} is created displaced to array @mat{B} and subsequently
array @mat{B} is given to @code{adjust-array}, array @mat{A} will still be
displaced to array @mat{B}.
Although @param{array} might be a @term{displaced array}, 
the resulting @term{array} is not a @term{displaced array} unless
@param{displaced-to} is supplied and not @nil{}.
The interaction between @code{adjust-array} and 
displaced @term{arrays} 
is as follows given three @term{arrays}, @tt{A}, @tt{B}, and@tie{}@tt{C}:


@table @asis
@item @id{@tt{A} is not displaced before or after the call}


@lisp
 (adjust-array A ...)
@end lisp


The dimensions of @tt{A} are altered, and the
contents rearranged as appropriate.  
Additional elements of @tt{A} are taken from
@param{initial-element}.  
The use of @param{initial-contents} causes all old contents to be
discarded.

@item @id{@tt{A} is not displaced before, but is displaced to  @tt{C} after the call}
  

@lisp
 (adjust-array A ... :displaced-to C)
@end lisp


None of the original contents of @tt{A} appears in 
@tt{A} afterwards; @tt{A} now contains
the contents of @tt{C}, without any rearrangement of @tt{C}.

@item @id{@tt{A} is displaced to @tt{B}  before the call, and is displaced to @tt{C} after  the call}


@lisp
 (adjust-array A ... :displaced-to B)
 (adjust-array A ... :displaced-to C)
@end lisp


@tt{B} and @tt{C} might be the same. The contents of @tt{B} do not appear in 
@tt{A} afterward unless such contents also happen to be in @tt{C}  If
@param{displaced-index-offset} 
is not supplied in the @code{adjust-array} call, it defaults
to zero; the old offset into @tt{B} is not retained.

@item @id{@tt{A} is displaced to @tt{B} before the call, but not displaced afterward.}
  

@lisp
 (adjust-array A ... :displaced-to B)
 (adjust-array A ... :displaced-to nil)
@end lisp

@tt{A} gets a
new ``data region,'' and contents of @tt{B} are copied into it as appropriate to
maintain the existing old contents; additional elements of @tt{A} 
are taken from
@param{initial-element} if supplied.  However, 
the use of @param{initial-contents} causes all old contents
to be discarded.
@end table


If @param{displaced-index-offset} is supplied,
it specifies the offset
of the resulting @term{array} from the beginning of 
the @term{array} that it is displaced to.           
If @param{displaced-index-offset} is not supplied, the offset is@tie{}0.  
The size of the resulting @term{array} plus the 
offset value cannot exceed the size of
the @term{array} that it is displaced to.

If only @param{new-dimensions}
and an @param{initial-element} argument are supplied,
those elements of @param{array} that
are still in bounds appear in the resulting @term{array}. The elements of
the resulting @term{array} that are not in the bounds of 
@term{array} are initialized
to @param{initial-element}; if @param{initial-element} is not provided,
the consequences of later reading any such new @term{element} of @param{new-array}
before it has been initialized
are undefined.

If @param{initial-contents} or @param{displaced-to} is supplied,
then none of the original contents of @param{array} appears in the new @term{array}.


The consequences are unspecified if @param{array} is adjusted 
to a size smaller than its @term{fill pointer} without supplying
the @param{fill-pointer} argument so that its @term{fill-pointer}
is properly adjusted in the process.

If @tt{A} is displaced to @tt{B}, the consequences are unspecified 
if @tt{B} is adjusted in such a way that it no longer has enough elements
to satisfy @tt{A}.  


If @code{adjust-array} is applied to an @term{array} that is @term{actually adjustable},
the @term{array} returned is @term{identical} to @param{array}.
If the @term{array} returned by @code{adjust-array} 
is @term{distinct} from @param{array}, then the argument @param{array} is unchanged.

Note that if an @term{array} @mat{A} is displaced to another @term{array} @mat{B},
and @mat{B} is displaced to another @term{array} @mat{C}, and @mat{B} is altered by
@code{adjust-array}, @mat{A} must now refer to the adjust contents of @mat{B}.
This means that an implementation cannot collapse the chain to make @mat{A}
refer to @mat{C} directly and forget that the chain of reference passes through
@mat{B}.  However, caching techniques are permitted as long as they preserve the 
semantics specified here.

@subsubheading Examples:

@lisp
 (adjustable-array-p
  (setq ada (adjust-array
              (make-array '(2 3)
                          :adjustable t
                          :initial-contents '((a b c) (1 2 3)))
              '(4 6)))) @EV{} T 
 (array-dimensions ada) @EV{} (4 6) 
 (aref ada 1 1) @EV{} 2 
 (setq beta (make-array '(2 3) :adjustable t))
@EV{} #2A((NIL NIL NIL) (NIL NIL NIL)) 
 (adjust-array beta '(4 6) :displaced-to ada)
@EV{} #2A((A B C NIL NIL NIL)
       (1 2 3 NIL NIL NIL)
       (NIL NIL NIL NIL NIL NIL) 
       (NIL NIL NIL NIL NIL NIL))
 (array-dimensions beta) @EV{} (4 6)
 (aref beta 1 1) @EV{} 2 
@end lisp


Suppose that the 4-by-4 array in @f{m} looks like this:

@lisp
#2A(( alpha     beta      gamma     delta )
    ( epsilon   zeta      eta       theta )
    ( iota      kappa     lambda    mu    )
    ( nu        xi        omicron   pi    ))
@end lisp

Then the result of

@lisp
 (adjust-array m '(3 5) :initial-element 'baz)
@end lisp

is a 3-by-5 array with contents       

@lisp
#2A(( alpha     beta      gamma     delta     baz )
    ( epsilon   zeta      eta       theta     baz )
    ( iota      kappa     lambda    mu        baz ))
@end lisp


@subsubheading Exceptional Situations:

An error @oftype{error} is signaled if @param{fill-pointer} is supplied
and @term{non-nil} but @param{array} has no @term{fill pointer}.

@subsubheading See Also:

@ref{adjustable-array-p},    @ref{make-array},
@ref{array-dimension-limit}, @ref{array-total-size-limit},
@ref{array}


@node adjustable-array-p
@heading adjustable-array-p (Function)
@syindex adjustable-array-p
@cindex adjustable-array-p


@subsubheading Syntax:

@DefunWithValues{adjustable-array-p, array, generalized-boolean}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:


Returns true if and only if @code{adjust-array} could return a @term{value}
which is @term{identical} to @param{array} when given that @term{array} as its
first @term{argument}.

@subsubheading Examples:

@lisp
 (adjustable-array-p 
   (make-array 5
               :element-type 'character 
               :adjustable t 
               :fill-pointer 3)) @EV{} @term{true}
 (adjustable-array-p (make-array 4)) @EV{} @term{implementation-dependent}
@end lisp


@subsubheading Exceptional Situations:

Should signal an error @oftype{type-error} if its argument is not an @term{array}.

@subsubheading See Also:

@ref{adjust-array}, @ref{make-array}


@node aref
@heading aref (Accessor)
@syindex aref
@cindex aref


@subsubheading Syntax:

@DefunWithValues{aref, array @rest{} subscripts, element}
@Defsetf{aref, array @rest{} subscripts, new-element}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{subscripts}---a @term{list} of @term{valid array indices} for the @param{array}.

@param{element}, @param{new-element}---an @term{object}.

@subsubheading Description:

@term{Accesses} the @param{array} @term{element} specified by the @param{subscripts}.
If no @param{subscripts} are supplied and @param{array} is zero rank,
@code{aref} @term{accesses} the sole element of @param{array}.

@code{aref} ignores @term{fill pointers}.
It is permissible to use @code{aref} 
to @term{access} any @param{array} @term{element},
whether @term{active} or not.

@subsubheading Examples:

If the variable @f{foo} names a 3-by-5 array,
then the first index could be 0, 1, or 2, and then second index
could be 0, 1, 2, 3, or 4.  The array elements can be referred to by using
@thefunction{aref}; for example, @f{(aref foo 2 1)}
refers to element (2, 1) of the array.  

@lisp
 (aref (setq alpha (make-array 4)) 3) @EV{} @term{implementation-dependent}
 (setf (aref alpha 3) 'sirens) @EV{} SIRENS
 (aref alpha 3) @EV{} SIRENS
 (aref (setq beta (make-array '(2 4) 
                    :element-type '(unsigned-byte 2)
                    :initial-contents '((0 1 2 3) (3 2 1 0))))
        1 2) @EV{} 1
 (setq gamma '(0 2))
 (apply #'aref beta gamma) @EV{} 2
 (setf (apply #'aref beta gamma) 3) @EV{} 3
 (apply #'aref beta gamma) @EV{} 3
 (aref beta 0 2) @EV{} 3
@end lisp


@subsubheading See Also:

@ref{bit},
@ref{char},
@ref{elt},
@ref{row-major-aref},
@ref{svref},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)}


@node array-dimension
@heading array-dimension (Function)
@syindex array-dimension
@cindex array-dimension


@subsubheading Syntax:

@DefunWithValues{array-dimension, array axis-number, dimension}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{axis-number}---an @term{integer} greater than or equal to zero
and less than the @term{rank} of the @param{array}.

@param{dimension}---a non-negative @term{integer}.

@subsubheading Description:

@code{array-dimension} returns the @param{axis-number} 
@term{dimension}@sub1{} of @param{array}.
(Any @term{fill pointer} is ignored.)

@subsubheading Examples:

@lisp
 (array-dimension (make-array 4) 0) @EV{} 4
 (array-dimension (make-array '(2 3)) 1) @EV{} 3
@end lisp


@subsubheading Affected By:
None.
@subsubheading See Also:

@ref{array-dimensions}, @ref{length}

@subsubheading Notes:
@lisp
 (array-dimension array n) @EQ{} (nth n (array-dimensions array))
@end lisp


@node array-dimensions
@heading array-dimensions (Function)
@syindex array-dimensions
@cindex array-dimensions


@subsubheading Syntax:

@DefunWithValues{array-dimensions, array, dimensions}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{dimensions}---a @term{list} of @term{integers}.

@subsubheading Description:

Returns a @term{list} of the @term{dimensions} of @param{array}.
(If @param{array} is a @term{vector} with a @term{fill pointer}, 
that @term{fill pointer} is ignored.)

@subsubheading Examples:

@lisp
 (array-dimensions (make-array 4)) @EV{} (4)
 (array-dimensions (make-array '(2 3))) @EV{} (2 3)
 (array-dimensions (make-array 4 :fill-pointer 2)) @EV{} (4)
@end lisp


@subsubheading Exceptional Situations:

Should signal an error @oftype{type-error} if its argument is not an @term{array}.

@subsubheading See Also:

@ref{array-dimension}


@node array-element-type
@heading array-element-type (Function)
@syindex array-element-type
@cindex array-element-type


@subsubheading Syntax:

@DefunWithValues{array-element-type, array, typespec}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{typespec}---a @term{type specifier}.

@subsubheading Description:

Returns a @term{type specifier} which represents the @term{actual array element type}
of the array, which is the set of @term{objects} that such an @param{array} can hold.
(Because of @term{array} @term{upgrading}, this @term{type specifier} can in
some cases denote a @term{supertype} of the @term{expressed array element type}
of the @param{array}.)

@subsubheading Examples:

@lisp
 (array-element-type (make-array 4)) @EV{} T
 (array-element-type (make-array 12 :element-type '(unsigned-byte 8))) 
@EV{} @term{implementation-dependent}
 (array-element-type (make-array 12 :element-type '(unsigned-byte 5)))
@EV{} @term{implementation-dependent}
@end lisp


@lisp
 (array-element-type (make-array 5 :element-type '(mod 5)))
@end lisp

could be @f{(mod 5)}, @f{(mod 8)}, @f{fixnum}, @f{t}, or any other
type of which @f{(mod 5)} is a @term{subtype}.

@subsubheading Affected By:

The @term{implementation}.

@subsubheading Exceptional Situations:

Should signal an error @oftype{type-error} if its argument is not an @term{array}.

@subsubheading See Also:

@ref{array},
@ref{make-array},
@ref{subtypep},
@ref{upgraded-array-element-type}


@node array-has-fill-pointer-p
@heading array-has-fill-pointer-p (Function)
@syindex array-has-fill-pointer-p
@cindex array-has-fill-pointer-p


@subsubheading Syntax:

@DefunWithValues{array-has-fill-pointer-p, array, generalized-boolean}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Returns @term{true} if @param{array} has a @term{fill pointer};
otherwise returns @term{false}.

@subsubheading Examples:

@lisp
 (array-has-fill-pointer-p (make-array 4)) @EV{} @term{implementation-dependent}
 (array-has-fill-pointer-p (make-array '(2 3))) @EV{} @term{false}
 (array-has-fill-pointer-p
   (make-array 8 
               :fill-pointer 2 
               :initial-element 'filler)) @EV{} @term{true}
@end lisp


@subsubheading Exceptional Situations:

Should signal an error @oftype{type-error} if its argument is not an @term{array}.

@subsubheading See Also:

@ref{make-array}, @ref{fill-pointer}

@subsubheading Notes:

Since @term{arrays} of @term{rank} other than one cannot have a @term{fill pointer},
@code{array-has-fill-pointer-p} always returns @nil{}@spc{}when its argument
is such an array.


@node array-displacement
@heading array-displacement (Function)
@syindex array-displacement
@cindex array-displacement



@subsubheading Syntax:

@DefunWithValues{array-displacement, array, displaced-to\, displaced-index-offset}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{displaced-to}---an @param{array} or @nil{}.

@param{displaced-index-offset}---a non-negative @term{fixnum}.

@subsubheading Description:

If the @param{array} is a @term{displaced array},
returns the @term{values} of the @kwd{displaced-to} and @kwd{displaced-index-offset}
options
for the @term{array} (see the @term{functions} @ref{make-array} and @code{adjust-array}).
If the @param{array} is not a @term{displaced array},
@nil{}@spc{}and @f{0} are returned.

If @code{array-displacement} is called on an @param{array}
for which a @term{non-nil} @term{object} was provided as the
@kwd{displaced-to} @term{argument} to @code{make-array} 
or @code{adjust-array}, it must return that @term{object}
as its first value. It is @term{implementation-dependent}
whether @code{array-displacement} returns a @term{non-nil}
@term{primary value} for any other @param{array}.

@subsubheading Examples:

@lisp
 (setq a1 (make-array 5)) @EV{} #<ARRAY 5 simple 46115576>
 (setq a2 (make-array 4 :displaced-to a1
                        :displaced-index-offset 1))
@EV{} #<ARRAY 4 indirect 46117134>
 (array-displacement a2)
@EV{} #<ARRAY 5 simple 46115576>, 1
 (setq a3 (make-array 2 :displaced-to a2
                        :displaced-index-offset 2))
@EV{} #<ARRAY 2 indirect 46122527>
 (array-displacement a3)
@EV{} #<ARRAY 4 indirect 46117134>, 2
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{array, an @term{array}}

@subsubheading See Also:

@ref{make-array}



@node array-in-bounds-p
@heading array-in-bounds-p (Function)
@syindex array-in-bounds-p
@cindex array-in-bounds-p


@subsubheading Syntax:

@DefunWithValues{array-in-bounds-p, array @rest{} subscripts, generalized-boolean}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{subscripts}---a list of @term{integers} 
of length equal to the @term{rank} of the @term{array}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Returns @term{true} if the @param{subscripts} are all in bounds for @param{array};
otherwise returns @term{false}.
(If @param{array} is a @term{vector} with a @term{fill pointer}, 
that @term{fill pointer} is ignored.)

@subsubheading Examples:
@lisp
 (setq a (make-array '(7 11) :element-type 'string-char))
 (array-in-bounds-p a 0  0) @EV{} @term{true}
 (array-in-bounds-p a 6 10) @EV{} @term{true}
 (array-in-bounds-p a 0 -1) @EV{} @term{false}
 (array-in-bounds-p a 0 11) @EV{} @term{false}
 (array-in-bounds-p a 7  0) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{array-dimensions}

@subsubheading Notes:
@lisp
 (array-in-bounds-p array subscripts)   
 @EQ{} (and (not (some #'minusp (list subscripts)))
         (every #'< (list subscripts) (array-dimensions array)))
@end lisp


@node array-rank
@heading array-rank (Function)
@syindex array-rank
@cindex array-rank


@subsubheading Syntax:

@DefunWithValues{array-rank, array, rank}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{rank}---a non-negative @term{integer}.

@subsubheading Description:

Returns the number of @term{dimensions} of @param{array}.

@subsubheading Examples:

@lisp
 (array-rank (make-array '())) @EV{} 0
 (array-rank (make-array 4)) @EV{} 1
 (array-rank (make-array '(4))) @EV{} 1
 (array-rank (make-array '(2 3))) @EV{} 2
@end lisp


@subsubheading Exceptional Situations:

Should signal an error @oftype{type-error} if its argument is not an @term{array}.

@subsubheading See Also:

@ref{array-rank-limit}, @ref{make-array}


@node array-row-major-index
@heading array-row-major-index (Function)
@syindex array-row-major-index
@cindex array-row-major-index


@subsubheading Syntax:

@DefunWithValues{array-row-major-index, array @rest{} subscripts, index}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{subscripts}---a @term{list} of @term{valid array indices} for the @param{array}.

@param{index}---a @term{valid array row-major index} for the @param{array}.

@subsubheading Description:

Computes the position according to the row-major ordering of @param{array}
for the element that is specified by @param{subscripts}, and returns the
offset of the element in the computed position from the beginning of @param{array}.

For a one-dimensional @param{array}, 
the result of @code{array-row-major-index}
equals @param{subscript}.

@code{array-row-major-index} ignores @term{fill pointers}.

@subsubheading Examples:

@lisp
 (setq a (make-array '(4 7) :element-type '(unsigned-byte 8)))
 (array-row-major-index a 1 2) @EV{} 9
 (array-row-major-index 
    (make-array '(2 3 4) 
                :element-type '(unsigned-byte 8)
                :displaced-to a
                :displaced-index-offset 4)
    0 2 1) @EV{} 9
@end lisp


@subsubheading Notes:

A possible definition of @code{array-row-major-index}, 
with no error-checking, is

@lisp
 (defun array-row-major-index (a &rest subscripts)
   (apply #'+ (maplist #'(lambda (x y)
                            (* (car x) (apply #'* (cdr y))))
                       subscripts
                       (array-dimensions a))))
@end lisp



@node array-total-size
@heading array-total-size (Function)
@syindex array-total-size
@cindex array-total-size


@subsubheading Syntax:

@DefunWithValues{array-total-size, array, size}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{size}---a non-negative @term{integer}.

@subsubheading Description:

Returns the @term{array total size} of the @param{array}.

@subsubheading Examples:

@lisp
 (array-total-size (make-array 4)) @EV{} 4
 (array-total-size (make-array 4 :fill-pointer 2)) @EV{} 4
 (array-total-size (make-array 0)) @EV{} 0
 (array-total-size (make-array '(4 2))) @EV{} 8
 (array-total-size (make-array '(4 0))) @EV{} 0
 (array-total-size (make-array '())) @EV{} 1
@end lisp


@subsubheading Exceptional Situations:

Should signal an error @oftype{type-error} if its argument is not an @term{array}.

@subsubheading See Also:

@ref{make-array}, @ref{array-dimensions}

@subsubheading Notes:

If the @param{array} is a @term{vector} with a @term{fill pointer},
the @term{fill pointer} is ignored when calculating the @term{array total size}.

Since the product of no arguments is one, the @term{array total size} of a
zero-dimensional @term{array} is one.

@lisp
 (array-total-size x)
    @EQ{} (apply #'* (array-dimensions x))
    @EQ{} (reduce #'* (array-dimensions x))
@end lisp



@node arrayp
@heading arrayp (Function)
@syindex arrayp
@cindex arrayp


@subsubheading Syntax:

@DefunWithValues{arrayp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, array}

@subsubheading Examples:

@lisp
 (arrayp (make-array '(2 3 4) :adjustable t)) @EV{} @term{true}
 (arrayp (make-array 6)) @EV{} @term{true}
 (arrayp #*1011) @EV{} @term{true}
 (arrayp "hi") @EV{} @term{true}
 (arrayp 'hi) @EV{} @term{false}
 (arrayp 12) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{typep}

@subsubheading Notes:

@lisp
 (arrayp @param{object}) @EQ{} (typep @param{object} 'array)
@end lisp



@node fill-pointer
@heading fill-pointer (Accessor)
@syindex fill-pointer
@cindex fill-pointer


@subsubheading Syntax:

@DefunWithValues{fill-pointer, vector, fill-pointer}
@Defsetf{fill-pointer, vector, new-fill-pointer}

@subsubheading Arguments and Values:

@param{vector}---a @term{vector} with a @term{fill pointer}.

@param{fill-pointer}, @param{new-fill-pointer}---a @term{valid fill pointer} 
for the @param{vector}.

@subsubheading Description:

@term{Accesses} the @term{fill pointer} of @param{vector}.

@subsubheading Examples:

@lisp
 (setq a (make-array 8 :fill-pointer 4)) @EV{} #(NIL NIL NIL NIL)
 (fill-pointer a) @EV{} 4
 (dotimes (i (length a)) (setf (aref a i) (* i i))) @EV{} NIL
 a @EV{} #(0 1 4 9)
 (setf (fill-pointer a) 3) @EV{} 3
 (fill-pointer a) @EV{} 3
 a @EV{} #(0 1 4)
 (setf (fill-pointer a) 8) @EV{} 8
 a @EV{} #(0 1 4 9 NIL NIL NIL NIL)
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{vector, a @term{vector} with a @term{fill pointer}}

@subsubheading See Also:

@ref{make-array}, @ref{length}

@subsubheading Notes:

There is no @term{operator} that will remove a @term{vector}'s @term{fill pointer}.


@node row-major-aref
@heading row-major-aref (Accessor)
@syindex row-major-aref
@cindex row-major-aref


@subsubheading Syntax:

@DefunWithValues{row-major-aref, array index, element}
@Defsetf{row-major-aref, array index, new-element}

@subsubheading Arguments and Values:

@param{array}---an @term{array}.

@param{index}---a @term{valid array row-major index} for the @param{array}.

@param{element}, @param{new-element}---an @term{object}.

@subsubheading Description:

Considers @term{array} as a @term{vector} by viewing its @term{elements}
in row-major order, and returns the @term{element} of that @term{vector} 
which is referred to by the given @param{index}.

@code{row-major-aref} is valid for use with @code{setf}.

@subsubheading See Also:

@ref{aref},
@ref{array-row-major-index}

@subsubheading Notes:

@lisp
 (row-major-aref array index) @EQ{}
   (aref (make-array (array-total-size array)
                     :displaced-to array
                     :element-type (array-element-type array))
         index)

 (aref array i1 i2 ...) @EQ{}
     (row-major-aref array (array-row-major-index array i1 i2))
@end lisp




@node upgraded-array-element-type
@heading upgraded-array-element-type (Function)
@syindex upgraded-array-element-type
@cindex upgraded-array-element-type


@subsubheading Syntax:

@DefunWithValues{upgraded-array-element-type, typespec @opt{} environment, upgraded-typespec}

@subsubheading Arguments and Values:

@param{typespec}---a @term{type specifier}.

@param{environment}---an @term{environment} @term{object}.
@Default{@nil{}, denoting the @term{null lexical environment}
and the current @term{global environment}}

@param{upgraded-typespec}---a @term{type specifier}.

@subsubheading Description:

Returns the @term{element type} of 
the most @term{specialized} @term{array} representation capable of 
holding items of the @term{type} denoted by @param{typespec}.

The @param{typespec} is a @term{subtype} of 
(and possibly @term{type equivalent} to)
the @param{upgraded-typespec}.

If @param{typespec} is @code{bit},
the result is @term{type equivalent} to @f{bit}.
If @param{typespec} is @code{base-char},
the result is @term{type equivalent} to @f{base-char}.
If @param{typespec} is @code{character},
the result is @term{type equivalent} to @f{character}.

The purpose of @code{upgraded-array-element-type} is to reveal how
an implementation does its @term{upgrading}.

The @param{environment} is used to expand any @term{derived type specifiers}
that are mentioned in the @param{typespec}.

@subsubheading See Also:

@ref{array-element-type},
@ref{make-array}

@subsubheading Notes:

Except for storage allocation consequences and dealing correctly with the
optional @param{environment} @term{argument},
@code{upgraded-array-element-type} could be defined as:

@lisp
 (defun upgraded-array-element-type (type &optional environment)
   (array-element-type (make-array 0 :element-type type)))
@end lisp




@node array-dimension-limit
@heading array-dimension-limit (Constant Variable)
@syindex array-dimension-limit
@cindex array-dimension-limit


@subsubheading Constant Value:

A positive
@term{fixnum},
the exact magnitude of which is @term{implementation-dependent},
but which is not less than @f{1024}.

@subsubheading Description:

The upper exclusive bound on each individual @term{dimension} of an @term{array}.

@subsubheading See Also:

@ref{make-array}


@node array-rank-limit
@heading array-rank-limit (Constant Variable)
@syindex array-rank-limit
@cindex array-rank-limit


@subsubheading Constant Value:

A positive
@term{fixnum},
the exact magnitude of which is @term{implementation-dependent},
but which is not less than @f{8}.

@subsubheading Description:

The upper exclusive bound on the @term{rank} of an @term{array}.

@subsubheading See Also:

@ref{make-array}


@node array-total-size-limit
@heading array-total-size-limit (Constant Variable)
@syindex array-total-size-limit
@cindex array-total-size-limit


@subsubheading Constant Value:

A positive
@term{fixnum},
the exact magnitude of which is @term{implementation-dependent},
but which is not less than @f{1024}.

@subsubheading Description:

The upper exclusive bound on the @term{array total size} of an @term{array}.

The actual limit on the @term{array total size} 
imposed by the @term{implementation}
might vary according the @term{element type} of the @term{array};
in this case, the value of @code{array-total-size-limit} 
will be the smallest of these possible limits.

@subsubheading See Also:

@ref{make-array}, @ref{array-element-type}


@node simple-vector-p
@heading simple-vector-p (Function)
@syindex simple-vector-p
@cindex simple-vector-p


@subsubheading Syntax:

@DefunWithValues{simple-vector-p, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, simple-vector}.

@subsubheading Examples:

@lisp
 (simple-vector-p (make-array 6)) @EV{} @term{true}
 (simple-vector-p "aaaaaa") @EV{} @term{false}
 (simple-vector-p (make-array 6 :fill-pointer t)) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{simple-vector}

@subsubheading Notes:

@lisp
 (simple-vector-p @param{object}) @EQ{} (typep @param{object} 'simple-vector)
@end lisp



@node svref
@heading svref (Accessor)
@syindex svref
@cindex svref


@subsubheading Syntax:

@DefunWithValues{svref, simple-vector index, element}
@Defsetf{svref, simple-vector index, new-element}

@subsubheading Arguments and Values:

@param{simple-vector}---a @term{simple vector}.

@param{index}---a @term{valid array index} for the @param{simple-vector}.

@param{element}, @param{new-element}---an @term{object}
(whose @term{type} is a @term{subtype} 
of the @term{array element type} of the @param{simple-vector}).

@subsubheading Description:

@term{Accesses} the @term{element} of @param{simple-vector} specified by @param{index}.

@subsubheading Examples:

@lisp
 (simple-vector-p (setq v (vector 1 2 'sirens))) @EV{} @term{true}
 (svref v 0) @EV{} 1
 (svref v 2) @EV{} SIRENS
 (setf (svref v 1) 'newcomer) @EV{} NEWCOMER               
 v @EV{} #(1 NEWCOMER SIRENS)
@end lisp


@subsubheading See Also:

@ref{aref},
@ref{sbit},
@ref{schar},
@ref{vector (Function)},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)}

@subsubheading Notes:

@code{svref} is identical to @code{aref} 
except that it requires its first argument to be a @term{simple vector}.  

@lisp
 (svref @param{v} @param{i}) @EQ{} (aref (the simple-vector @param{v}) @param{i})
@end lisp



@node vector (Function)
@heading vector (Function)
@syindex vector
@cindex vector


@subsubheading Syntax:

@DefunWithValues{vector, @rest{} objects, vector}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{vector}---a @term{vector} of @term{type} @f{(vector t @tt{*})}.

@subsubheading Description:

Creates a @term{fresh} @term{simple general vector} whose size
corresponds to the number of @param{objects}. 

The @term{vector} is initialized to contain the @param{objects}.

@subsubheading Examples:

@lisp
 (arrayp (setq v (vector 1 2 'sirens))) @EV{} @term{true}
 (vectorp v) @EV{} @term{true}
 (simple-vector-p v) @EV{} @term{true}         
 (length v) @EV{} 3
@end lisp


@subsubheading See Also:

@ref{make-array}

@subsubheading Notes:

@code{vector} is analogous to @code{list}.

@lisp
 (vector a@ssso{} a@ssst{} ... a@sssn{})
  @EQ{} (make-array (list @i{n}) :element-type t
                          :initial-contents 
                            (list a@ssso{} a@ssst{} ... a@sssn{}))
@end lisp


@node vector-pop
@heading vector-pop (Function)
@syindex vector-pop
@cindex vector-pop


@subsubheading Syntax:

@DefunWithValues{vector-pop, vector, element}

@subsubheading Arguments and Values:

@param{vector}---a @term{vector} with a @term{fill pointer}.

@param{element}---an @term{object}.

@subsubheading Description:

Decreases the @term{fill pointer} of @param{vector} by one, 
and retrieves the @term{element} of @param{vector} that is
designated by the new @term{fill pointer}.

@subsubheading Examples:

@lisp
 (vector-push (setq fable (list 'fable))
              (setq fa (make-array 8
                                   :fill-pointer 2
                                   :initial-element 'sisyphus))) @EV{} 2 
 (fill-pointer fa) @EV{} 3 
 (eq (vector-pop fa) fable) @EV{} @term{true}
 (vector-pop fa) @EV{} SISYPHUS 
 (fill-pointer fa) @EV{} 1 
@end lisp


@subsubheading Side Effects:

The @term{fill pointer} is decreased by one.

@subsubheading Affected By:

The value of the @term{fill pointer}.

@subsubheading Exceptional Situations:

An error @oftype{type-error} is signaled if @param{vector} does not have a @term{fill pointer}.

If the @term{fill pointer} is zero, @code{vector-pop} signals an error @oftype{error}.

@subsubheading See Also:

@ref{vector-push}, @ref{vector-push-extend}, @ref{fill-pointer}


@node vector-push; vector-push-extend
@heading vector-push, vector-push-extend (Function)
@syindex vector-push
@cindex vector-push
@syindex vector-push-extend
@cindex vector-push-extend
@anchor{vector-push}
@anchor{vector-push-extend}


@subsubheading Syntax:

@DefunWithValues{vector-push, new-element vector, new-index-p}

@DefunWithValues{vector-push-extend, new-element vector @opt{} extension, new-index}

@subsubheading Arguments and Values:

@param{new-element}---an @term{object}.

@param{vector}---a @term{vector} with a @term{fill pointer}.

@param{extension}---a positive @term{integer}.
@Default{@term{implementation-dependent}}

@param{new-index-p}---a @term{valid array index} for @param{vector}, or @nil{}.

@param{new-index}---a @term{valid array index} for @param{vector}.

@subsubheading Description:

@code{vector-push} and @code{vector-push-extend} store 
@param{new-element} in @param{vector}.
@code{vector-push} attempts to store
@param{new-element} 
in the element of @param{vector} designated by the @term{fill pointer},
and to increase the @term{fill pointer} by one.  If the 
@f{(>= (fill-pointer @param{vector}) (array-dimension @param{vector} 0))},
neither @param{vector} nor its @term{fill pointer} are affected.
Otherwise, the store and increment take
place and @code{vector-push} 
returns the former value of the @term{fill pointer}
which is one less than the one it leaves in @param{vector}.

@code{vector-push-extend} is just like @code{vector-push} except
that if the @term{fill pointer} gets too large, @param{vector} is extended using
@code{adjust-array} so that it can contain more elements.
@param{Extension}
is the minimum number of elements to be added to @param{vector} if it
must be extended.

@code{vector-push} and 
@code{vector-push-extend} return the index of @param{new-element} in @param{vector}.
If @f{(>= (fill-pointer @param{vector}) (array-dimension @param{vector} 0))},
@code{vector-push} returns @nil{}.

@subsubheading Examples:

@lisp
 (vector-push (setq fable (list 'fable))
              (setq fa (make-array 8 
                                   :fill-pointer 2
                                   :initial-element 'first-one))) @EV{} 2 
 (fill-pointer fa) @EV{} 3 
 (eq (aref fa 2) fable) @EV{} @term{true}
 (vector-push-extend #@bsl{}X
                    (setq aa 
                          (make-array 5
                                      :element-type 'character
                                      :adjustable t
                                      :fill-pointer 3))) @EV{} 3 
 (fill-pointer aa) @EV{} 4 
 (vector-push-extend #@bsl{}Y aa 4) @EV{} 4 
 (array-total-size aa) @EV{} at least 5 
 (vector-push-extend #@bsl{}Z aa 4) @EV{} 5 
 (array-total-size aa) @EV{} 9 ;(or more)
@end lisp


@subsubheading Affected By:
The value of the @term{fill pointer}.

How @param{vector} was created.

@subsubheading Exceptional Situations:

An error @oftype{error} is signaled by @code{vector-push-extend}
if it tries to extend @param{vector} and @param{vector} is not @term{actually adjustable}.

An error @oftype{error} is signaled if @param{vector} does not 
have a @term{fill pointer}.

@subsubheading See Also:

@ref{adjustable-array-p}, @ref{fill-pointer}, @ref{vector-pop}


@node vectorp
@heading vectorp (Function)
@syindex vectorp
@cindex vectorp


@subsubheading Syntax:

@DefunWithValues{vectorp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, vector}

@subsubheading Examples:

@lisp
 (vectorp "aaaaaa") @EV{} @term{true}
 (vectorp (make-array 6 :fill-pointer t)) @EV{} @term{true}
 (vectorp (make-array '(2 3 4))) @EV{} @term{false}
 (vectorp #*11) @EV{} @term{true}
 (vectorp #b11) @EV{} @term{false}
@end lisp


@subsubheading Notes:
@lisp
 (vectorp @param{object}) @EQ{} (typep @param{object} 'vector)
@end lisp



@node bit; sbit
@heading bit, sbit (Accessor)
@syindex bit
@cindex bit
@syindex sbit
@cindex sbit
@anchor{bit}
@anchor{sbit}


@subsubheading Syntax:

@DefunWithValues{bit, bit-array @rest{} subscripts, bit}
@DefunWithValues{sbit, bit-array @rest{} subscripts, bit}



@subsubheading Arguments and Values:

@param{bit-array}---for @code{bit},  a @term{bit array};
for @code{sbit}, a @term{simple bit array}.

@param{subscripts}---a @term{list} of @term{valid array indices} 
for the @param{bit-array}.

@param{bit}---a @term{bit}.

@subsubheading Description:

@code{bit} and @code{sbit} @term{access} the @param{bit-array} 
@term{element} specified by @param{subscripts}.

These @term{functions} ignore the @term{fill pointer} when @term{accessing} @term{elements}.

@subsubheading Examples:

@lisp
 (bit (setq ba (make-array 8 
                            :element-type 'bit 
                            :initial-element 1))
       3) @EV{} 1
 (setf (bit ba 3) 0) @EV{} 0
 (bit ba 3) @EV{} 0
 (sbit ba 5) @EV{} 1
 (setf (sbit ba 5) 1) @EV{} 1
 (sbit ba 5) @EV{} 1
@end lisp


@subsubheading See Also:

@ref{aref},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)}

@subsubheading Notes:

@code{bit} and @code{sbit} are like @code{aref}
except that they require @param{arrays} to be
a @term{bit array} and a @term{simple bit array}, respectively.

@code{bit} and @code{sbit}, unlike @code{char} and @code{schar},
allow the first argument to be an @term{array} of any @term{rank}.


@node bit-and; bit-andc1; bit-andc2; bit-eqv; bit-ior; bit-nand; bit-nor; bit+
@heading bit-and, bit-andc1, bit-andc2, bit-eqv, bit-ior, bit-nand, bit-nor, bit-not, bit-orc1, bit-orc2, bit-xor (Function)
@syindex bit-and
@cindex bit-and
@syindex bit-andc1
@cindex bit-andc1
@syindex bit-andc2
@cindex bit-andc2
@syindex bit-eqv
@cindex bit-eqv
@syindex bit-ior
@cindex bit-ior
@syindex bit-nand
@cindex bit-nand
@syindex bit-nor
@cindex bit-nor
@syindex bit-not
@cindex bit-not
@syindex bit-orc1
@cindex bit-orc1
@syindex bit-orc2
@cindex bit-orc2
@syindex bit-xor
@cindex bit-xor


@subsubheading Syntax:

@DefunWithValues{bit-and, bit-array1 bit-array2 @opt{} opt-arg, resulting-bit-array}
@DefunWithValues{bit-andc1, bit-array1 bit-array2 @opt{} opt-arg, resulting-bit-array}
@DefunWithValues{bit-andc2, bit-array1 bit-array2 @opt{} opt-arg, resulting-bit-array}
@DefunWithValues{bit-eqv, bit-array1 bit-array2 @opt{} opt-arg, resulting-bit-array}
@DefunWithValues{bit-ior, bit-array1 bit-array2 @opt{} opt-arg, resulting-bit-array}
@DefunWithValues{bit-nand, bit-array1 bit-array2 @opt{} opt-arg, resulting-bit-array}
@DefunWithValues{bit-nor, bit-array1 bit-array2 @opt{} opt-arg, resulting-bit-array}
@DefunWithValues{bit-orc1, bit-array1 bit-array2 @opt{} opt-arg, resulting-bit-array}
@DefunWithValues{bit-orc2, bit-array1 bit-array2 @opt{} opt-arg, resulting-bit-array}
@DefunWithValues{bit-xor, bit-array1 bit-array2 @opt{} opt-arg, resulting-bit-array}


@DefunWithValues{bit-not, bit-array @opt{} opt-arg, resulting-bit-array}

@subsubheading Arguments and Values:

@param{bit-array}, @param{bit-array1}, @param{bit-array2}---a @term{bit array}.

@param{Opt-arg}---a @term{bit array}, or @code{t}, or @nil{}.
@Default{@nil{}}

@param{Bit-array}, @param{bit-array1}, @param{bit-array2}, and @param{opt-arg}
(if an @term{array}) must all be of the same @term{rank} and @term{dimensions}.  

@param{resulting-bit-array}---a @term{bit array}.

@subsubheading Description:

These functions perform 
bit-wise logical operations on @param{bit-array1} and @param{bit-array2}
and return an @term{array} 
of matching @term{rank} and @term{dimensions},
such that any given bit of the result
is produced by operating on corresponding bits from each of the arguments.

In the case of @code{bit-not}, an @term{array}
of @term{rank} and @term{dimensions} matching @param{bit-array}
is returned that contains a copy of @param{bit-array} 
with all the bits inverted.

If @param{opt-arg} is of type @f{(array bit)} the contents of the 
result are destructively placed into @param{opt-arg}.
If @param{opt-arg} is the symbol @code{t},
@param{bit-array} or @param{bit-array1} is replaced with the result; 
if @param{opt-arg} is @nil{}@spc{}or omitted, a new @term{array} is created
to contain the result.  

@Thenextfigure{}@spc{}indicates the logical operation
performed by each of the @term{functions}.


@float Figure,fig15.4
@cartouche
@multitable{@code{bit-andc1}}{and complement of @param{bit-array1} with @param{bit-array2}}
@headitem Function @tab Operation
@item @code{bit-nor} @tab complement of @param{bit-array1} or @param{bit-array2}
@item @code{bit-andc1} @tab and complement of @param{bit-array1} with @param{bit-array2}
@item @code{bit-andc2} @tab and @param{bit-array1} with complement of @param{bit-array2}
@item @code{bit-orc1} @tab or complement of @param{bit-array1} with @param{bit-array2}
@item @code{bit-orc2} @tab or @param{bit-array1} with complement of @param{bit-array2}
@end multitable
@end cartouche
@caption{Bit-wise Logical Operations on Bit Arrays}
@end float

@subsubheading Examples:
@lisp
 (bit-and (setq ba #*11101010) #*01101011) @EV{} #*01101010
 (bit-and #*1100 #*1010) @EV{} #*1000      
 (bit-andc1 #*1100 #*1010) @EV{} #*0010
 (setq rba (bit-andc2 ba #*00110011 t)) @EV{} #*11001000
 (eq rba ba) @EV{} @term{true}
 (bit-not (setq ba #*11101010)) @EV{} #*00010101
 (setq rba (bit-not ba 
                     (setq tba (make-array 8 
                                           :element-type 'bit))))
@EV{} #*00010101
 (equal rba tba) @EV{} @term{true}
 (bit-xor #*1100 #*1010) @EV{} #*0110
@end lisp


@subsubheading See Also:

@ref{lognot}, @ref{logand}


@node bit-vector-p
@heading bit-vector-p (Function)
@syindex bit-vector-p
@cindex bit-vector-p


@subsubheading Syntax:

@DefunWithValues{bit-vector-p, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, bit-vector}

@subsubheading Examples:

@lisp
 (bit-vector-p (make-array 6 
                           :element-type 'bit 
                           :fill-pointer t)) @EV{} @term{true}
 (bit-vector-p #*) @EV{} @term{true}
 (bit-vector-p (make-array 6)) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{typep}

@subsubheading Notes:

@lisp
 (bit-vector-p @param{object}) @EQ{} (typep @param{object} 'bit-vector)
@end lisp



@node simple-bit-vector-p
@heading simple-bit-vector-p (Function)
@syindex simple-bit-vector-p
@cindex simple-bit-vector-p


@subsubheading Syntax:

@DefunWithValues{simple-bit-vector-p, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, simple-bit-vector}

@subsubheading Examples:
@lisp
 (simple-bit-vector-p (make-array 6)) @EV{} @term{false}
 (simple-bit-vector-p #*) @EV{} @term{true}
@end lisp


@subsubheading See Also:

@ref{simple-vector-p}

@subsubheading Notes:
@lisp
 (simple-bit-vector-p @param{object}) @EQ{} (typep @param{object} 'simple-bit-vector)
@end lisp





@node Strings
@chapter Strings
@menu
* String Concepts::

Dictionary

* string (System Class)::
* base-string::
* simple-string::
* simple-base-string::
* simple-string-p::
* char; schar::
* string (Function)::
* string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+::
* string-trim; string-left-trim; string-right-trim::
* string=; string/=; string<; string>; string<=; string>=; string-equal; +::
* stringp::
* make-string::
@end menu

@node String Concepts
@section String Concepts

@menu
* Implications of Strings Being Arrays::
* Subtypes of STRING::
@end menu
@node Implications of Strings Being Arrays
@subsection Implications of Strings Being Arrays

Since all @term{strings} are @term{arrays}, all rules which apply
generally to @term{arrays} also apply to @term{strings}.
See @ref{Array Concepts, Section 15.1 (Array Concepts)}.

For example,
@term{strings} can have @term{fill pointers},
and @term{strings} are also subject to the rules of @term{element type} @term{upgrading}
that apply to @term{arrays}.


@node Subtypes of STRING
@subsection Subtypes of STRING
All functions that operate on @term{strings} 
will operate on @term{subtypes} of @term{string} as well.

However,
the consequences are undefined if a @term{character} is inserted into a @term{string}
for which the @term{element type} of the @term{string} does not include that @term{character}.


@node string (System Class)
@heading string (System Class)
@syindex string
@cindex string


@subsubheading Class Precedence List:
@code{string},
@code{vector},
@code{array},
@code{sequence},
@code{t}

@subsubheading Description:

A @term{string} is a @term{specialized} @term{vector} 
whose @term{elements} are @oftypes{character}.  
When used as a @term{type specifier} for object creation,
@code{string} means @f{(vector character)}.


@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{string, @ttbrac{size}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum},
or the @term{symbol} @t{*}.

@subsubheading Compound Type Specifier Description:

This denotes the union of all @term{types}
@f{(array @i{c} (@param{size}))}
for all @term{subtypes} @i{c} of @code{character};
that is, the set of @term{strings} of size @param{size}.

@subsubheading See Also:

@ref{String Concepts, Section 16.1 (String Concepts)},
@ref{Double-Quote, Section 2.4.5 (Double-Quote)},
@ref{PrintingStrings, Section 22.1.3.4 (Printing Strings)}

@node base-string
@heading base-string (Type)
@syindex base-string
@cindex base-string



@subsubheading Supertypes:

@code{base-string},
@code{string},
@code{vector},
@code{array},
@code{sequence},
@code{t}

@subsubheading Description:

@Thetype{base-string} is equivalent to 
@f{(vector base-char)}.
The @term{base string} representation is the most efficient @term{string} representation
that can hold an arbitrary sequence of @term{standard characters}.


@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{base-string, @ttbrac{size}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum},
or the @term{symbol} @t{*}.

@subsubheading Compound Type Specifier Description:

This is equivalent to the type @f{(vector base-char @param{size})};
that is, the set of @term{base strings} of size @param{size}.

@node simple-string
@heading simple-string (Type)
@syindex simple-string
@cindex simple-string


@subsubheading Supertypes:

@code{simple-string},
@code{string},
@code{vector},
@code{simple-array},
@code{array},
@code{sequence},
@code{t}

@subsubheading Description:

A @term{simple string} is a specialized one-dimensional
@term{simple array} whose @term{elements} are @oftypes{character}.
When used as a @term{type specifier} for object creation,
@code{simple-string} means @f{(simple-array character (@i{size}))}.

@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{simple-string, @ttbrac{size}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum},
or the @term{symbol} @t{*}.

@subsubheading Compound Type Specifier Description:

This denotes the union of all @term{types}
@tt{(simple-array @i{c} (@param{size}))} for all @term{subtypes} @i{c} of
@code{character}; that is, the set of @term{simple strings} of size @param{size}.

@node simple-base-string
@heading simple-base-string (Type)
@syindex simple-base-string
@cindex simple-base-string


@subsubheading Supertypes:

@code{simple-base-string},
@code{base-string},
@code{simple-string},
@code{string},
@code{vector},
@code{simple-array},
@code{array},
@code{sequence},
@code{t}

@subsubheading Description:

@Thetype{simple-base-string} is equivalent to 
@f{(simple-array base-char (*))}.

@subsubheading Compound Type Specifier Kind:

Abbreviating.

@subsubheading Compound Type Specifier Syntax:

@Deftype{simple-base-string, @ttbrac{size}}

@subsubheading Compound Type Specifier Arguments:

@param{size}---a non-negative @term{fixnum},
or the @term{symbol} @t{*}.

@subsubheading Compound Type Specifier Description:

This is equivalent to the type @f{(simple-array base-char (@param{size}))};
that is, the set of @term{simple base strings} of size @param{size}.


@node simple-string-p
@heading simple-string-p (Function)
@syindex simple-string-p
@cindex simple-string-p


@subsubheading Syntax:

@DefunWithValues{simple-string-p, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, simple-string}

@subsubheading Examples:
@lisp
 (simple-string-p "aaaaaa") @EV{} @term{true}
 (simple-string-p (make-array 6 
                              :element-type 'character 
                              :fill-pointer t)) @EV{} @term{false}
@end lisp


@subsubheading Notes:
@lisp
 (simple-string-p @param{object}) @EQ{} (typep @param{object} 'simple-string)
@end lisp



@node char; schar
@heading char, schar (Accessor)
@syindex char
@cindex char
@syindex schar
@cindex schar
@anchor{char}
@anchor{schar}


@subsubheading Syntax:

@DefunWithValues{char, string index, character}
@DefunWithValues{schar, string index, character}




@subsubheading Arguments and Values:

@param{string}---for @code{char},  a @term{string};
for @code{schar}, a @term{simple string}.

@param{index}---a @term{valid array index} for the @param{string}.

@param{character}, @param{new-character}---a @term{character}.

@subsubheading Description:

@code{char} and @code{schar} @term{access} the @term{element} of @param{string}
specified by @param{index}.

@code{char} ignores @term{fill pointers} when @term{accessing} @term{elements}.

@subsubheading Examples:

@lisp
 (setq my-simple-string (make-string 6 :initial-element #@bsl{}A)) @EV{} "AAAAAA"
 (schar my-simple-string 4) @EV{} #@bsl{}A
 (setf (schar my-simple-string 4) #@bsl{}B) @EV{} #@bsl{}B
 my-simple-string @EV{} "AAAABA"
 (setq my-filled-string
       (make-array 6 :element-type 'character
                     :fill-pointer 5
                     :initial-contents my-simple-string))
@EV{} "AAAAB"
 (char my-filled-string 4) @EV{} #@bsl{}B
 (char my-filled-string 5) @EV{} #@bsl{}A
 (setf (char my-filled-string 3) #@bsl{}C) @EV{} #@bsl{}C
 (setf (char my-filled-string 5) #@bsl{}D) @EV{} #@bsl{}D
 (setf (fill-pointer my-filled-string) 6) @EV{} 6
 my-filled-string @EV{} "AAACBD"
@end lisp


@subsubheading See Also:

@ref{aref},
@ref{elt},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)}

@subsubheading Notes:

@lisp
 (char s j) @EQ{} (aref (the string s) j)
@end lisp



@node string (Function)
@heading string (Function)
@syindex string
@cindex string


@subsubheading Syntax:

@DefunWithValues{string, x, string}

@subsubheading Arguments and Values:

@param{x}---a @term{string}, a @term{symbol}, or a @term{character}.

@param{string}---a @term{string}.

@subsubheading Description:

Returns a @term{string} described by @param{x}; specifically:


@itemize @bullet{}
@item If @param{x} is a @term{string}, it is returned.
@item If @param{x} is a @term{symbol}, its @term{name} is returned.
@item 
If @param{x} is a @term{character},
then a @term{string} containing that one @term{character} is returned.
@item
@code{string} might perform additional, @term{implementation-defined} conversions.
@end itemize


@subsubheading Examples:

@lisp
 (string "already a string") @EV{} "already a string"
 (string 'elm) @EV{} "ELM"
 (string #@bsl{}c) @EV{} "c"
@end lisp


@subsubheading Exceptional Situations:

In the case where a conversion is defined neither by this specification nor
by the @term{implementation}, an error @oftype{type-error} is signaled.

@subsubheading See Also:

@ref{coerce},
@ref{string (System Class)} (@term{type}).

@subsubheading Notes:

@code{coerce} can be used to convert a @term{sequence} of @term{characters}
to a @term{string}.

@code{prin1-to-string}, @code{princ-to-string}, @code{write-to-string},
or @code{format} (with a first argument of @nil{}) can be used to get a
@term{string} representation of a @term{number} or any other @term{object}.


@node string-upcase; string-downcase; string-capitalize; nstring-upcase; nstr+
@heading string-upcase, string-downcase, string-capitalize, nstring-upcase, nstring-downcase, nstring-capitalize (Function)
@syindex string-upcase
@cindex string-upcase
@syindex string-downcase
@cindex string-downcase
@syindex string-capitalize
@cindex string-capitalize
@syindex nstring-upcase
@cindex nstring-upcase
@syindex nstring-downcase
@cindex nstring-downcase
@syindex nstring-capitalize
@cindex nstring-capitalize


@subsubheading Syntax:

@DefunWithValues{string-upcase, string @key{} start end, cased-string}
@DefunWithValues{string-downcase, string @key{} start end, cased-string}
@DefunWithValues{string-capitalize, string @key{} start end, cased-string}


@DefunWithValues{nstring-upcase, string @key{} start end, string}
@DefunWithValues{nstring-downcase, string @key{} start end, string}
@DefunWithValues{nstring-capitalize, string @key{} start end, string}


@subsubheading Arguments and Values:

@param{string}---a @term{string designator}.
For @code{nstring-upcase},
@code{nstring-downcase},
and @code{nstring-capitalize},
the @param{string} @term{designator} must be a @term{string}.

@param{start}, @param{end}---@term{bounding index designators} of @param{string}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{cased-string}---a @term{string}.

@subsubheading Description:

@code{string-upcase},  @code{string-downcase},  @code{string-capitalize},
@code{nstring-upcase}, @code{nstring-downcase}, @code{nstring-capitalize}
change the case of the subsequence of @param{string} 
@term{bounded} by @param{start} and @param{end} 
as follows:


@table @asis
@item @id{@bf{string-upcase}}
 

@code{string-upcase} returns a @term{string} just like @param{string} 
with all lowercase characters replaced by the corresponding uppercase 
characters.  More precisely, each character of the result @term{string} 
is produced by applying @thefunction{char-upcase} to the corresponding
character of @param{string}.

@item @id{@bf{string-downcase}}
 

@code{string-downcase} is like @code{string-upcase} 
except that all uppercase characters are replaced by the corresponding 
lowercase characters (using @code{char-downcase}).

@item @id{@bf{string-capitalize}}


@code{string-capitalize} produces a copy of @param{string} such that,
for every word in the copy, the first @term{character} of the ``word,''
if it has @term{case}, is @term{uppercase} and
any other @term{characters} with @term{case} in the word are @term{lowercase}.
For the purposes of @code{string-capitalize},
a ``word'' is defined to be a
consecutive subsequence consisting of @term{alphanumeric} @term{characters},
delimited at each end either by a non-@term{alphanumeric} @term{character}
or by an end of the @term{string}.

@item @id{@bf{nstring-upcase, nstring-downcase, nstring-capitalize }}
  

@code{nstring-upcase}, @code{nstring-downcase},
and @code{nstring-capitalize} are identical to @code{string-upcase}, 
@code{string-downcase}, and @code{string-capitalize}
respectively except that they  modify @param{string}.
@end table


For @code{string-upcase}, @code{string-downcase}, and @code{string-capitalize},
@param{string} is not modified.  However, if no characters in @param{string} 
require conversion, the result may be either @param{string} or a copy of it,
at the implementation's discretion.

@subsubheading Examples:
@lisp
 (string-upcase "abcde") @EV{} "ABCDE"
 (string-upcase "Dr. Livingston, I presume?")
@EV{} "DR. LIVINGSTON, I PRESUME?"
 (string-upcase "Dr. Livingston, I presume?" :start 6 :end 10)
@EV{} "Dr. LiVINGston, I presume?"
 (string-downcase "Dr. Livingston, I presume?")
@EV{} "dr. livingston, i presume?"

 (string-capitalize "elm 13c arthur;fig don't") @EV{} "Elm 13c Arthur;Fig Don'T"
 (string-capitalize " hello ") @EV{} " Hello "
 (string-capitalize "occlUDeD cASEmenTs FOreSTAll iNADVertent DEFenestraTION")
@EV{}  "Occluded Casements Forestall Inadvertent Defenestration"
 (string-capitalize 'kludgy-hash-search) @EV{} "Kludgy-Hash-Search"
 (string-capitalize "DON'T!") @EV{} "Don'T!"    ;not "Don't!"
 (string-capitalize "pipe 13a, foo16c") @EV{} "Pipe 13a, Foo16c"

 (setq str (copy-seq "0123ABCD890a")) @EV{} "0123ABCD890a"
 (nstring-downcase str :start 5 :end 7) @EV{} "0123AbcD890a"
 str @EV{} "0123AbcD890a"
@end lisp


@subsubheading Side Effects:

@code{nstring-upcase},
@code{nstring-downcase}, 
and @code{nstring-capitalize} modify @param{string} as appropriate
rather than constructing a new @term{string}.

@subsubheading See Also:

@ref{char-upcase}, @ref{char-downcase}

@subsubheading Notes:
The result is always of the same length
as @param{string}.


@node string-trim; string-left-trim; string-right-trim
@heading string-trim, string-left-trim, string-right-trim (Function)
@syindex string-trim
@cindex string-trim
@syindex string-left-trim
@cindex string-left-trim
@syindex string-right-trim
@cindex string-right-trim


@subsubheading Syntax:
@DefunWithValues{string-trim, character-bag string, trimmed-string}
@DefunWithValues{string-left-trim, character-bag string, trimmed-string}
@DefunWithValues{string-right-trim, character-bag string, trimmed-string}


@subsubheading Arguments and Values:

@param{character-bag}---a @term{sequence} containing @term{characters}.

@param{string}---a @term{string designator}.

@param{trimmed-string}---a @term{string}.

@subsubheading Description:

@code{string-trim} returns a substring of @param{string}, 
with all characters in @param{character-bag} stripped off the beginning and end.
@code{string-left-trim} is similar but strips characters off only the beginning; 
@code{string-right-trim} strips off only the end.

If no @term{characters} need to be trimmed from the @param{string},
then either @param{string} itself or a copy of it may be returned,
at the discretion of the implementation.

All of these @term{functions} observe the @term{fill pointer}.

@subsubheading Examples:
@lisp
 (string-trim "abc" "abcaakaaakabcaaa") @EV{} "kaaak"
 (string-trim '(#@bsl{}Space #@bsl{}Tab #@bsl{}Newline) " garbanzo beans
        ") @EV{} "garbanzo beans"
 (string-trim " (*)" " ( *three (silly) words* ) ")
@EV{} "three (silly) words"

 (string-left-trim "abc" "labcabcabc") @EV{} "labcabcabc"
 (string-left-trim " (*)" " ( *three (silly) words* ) ")
@EV{} "three (silly) words* ) "

 (string-right-trim " (*)" " ( *three (silly) words* ) ") 
@EV{} " ( *three (silly) words"
@end lisp

@subsubheading Affected By:

The @term{implementation}.


@node string=; string/=; string<; string>; string<=; string>=; string-equal; +
@heading string=, string/=, string<, string>, string<=, string>=, string-equal, string-not-equal, string-lessp, string-greaterp, string-not-greaterp, string-not-lessp (Function)
@syindex string=
@cindex string=
@syindex string/=
@cindex string/=
@syindex string<
@cindex string<
@syindex string>
@cindex string>
@syindex string<=
@cindex string<=
@syindex string>=
@cindex string>=
@syindex string-equal
@cindex string-equal
@syindex string-not-equal
@cindex string-not-equal
@syindex string-lessp
@cindex string-lessp
@syindex string-greaterp
@cindex string-greaterp
@syindex string-not-greaterp
@cindex string-not-greaterp
@syindex string-not-lessp
@cindex string-not-lessp
@anchor{string=}
@anchor{string-equal}


@subsubheading Syntax:

@DefunWithValues{string@mat{=}, string1 string2 @key{} start1 end1 start2 end2, generalized-boolean}

@DefunWithValues{string/@mat{=}, string1 string2 @key{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string@mat{<}, string1 string2 @key{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string@mat{>}, string1 string2 @key{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string@mat{<=}, string1 string2 @key{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string@mat{>=}, string1 string2 @key{} start1 end1 start2 end2, mismatch-index}


@DefunWithValues{string-equal, string1 string2 @key{} start1 end1 start2 end2, generalized-boolean}

@DefunWithValues{string-not-equal, string1 string2 @key{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string-lessp, string1 string2 @key{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string-greaterp, string1 string2 @key{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string-not-greaterp, string1 string2 @key{} start1 end1 start2 end2, mismatch-index}
@DefunWithValues{string-not-lessp, string1 string2 @key{} start1 end1 start2 end2, mismatch-index}


@subsubheading Arguments and Values:

@param{string1}---a @term{string designator}.

@param{string2}---a @term{string designator}.

@param{start1}, @param{end1}---@term{bounding index designators} of @param{string1}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{start2}, @param{end2}---@term{bounding index designators} of @param{string2}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{generalized-boolean}---a @term{generalized boolean}.

@param{mismatch-index}---a @term{bounding index} of @param{string1}, or @nil{}.

@subsubheading Description:

These functions perform lexicographic comparisons on @param{string1} and @param{string2}.
@code{string=} and @code{string-equal} are called equality functions;
the others are called inequality functions.
The comparison operations these @term{functions} perform are restricted
to the subsequence of @param{string1} @term{bounded} by @term{start1} and @param{end1}
and to the subsequence of @param{string2} @term{bounded} by @term{start2} and @param{end2}.

A string @i{a} is equal to a string @i{b} if it contains the same number
of characters, and the corresponding characters are the @term{same}
under @code{char=} or @code{char-equal}, as appropriate.

A string @i{a} is less than a string @i{b} if in the first position in
which they differ the character of @i{a} is less than the corresponding
character of @i{b} according to @code{char<} or @code{char-lessp} 
as appropriate, or if string @i{a} is a proper prefix of string @i{b}
(of shorter length and matching in all the characters of @i{a}).

The equality functions return a @param{generalized boolean} 
that is @term{true} if the strings are equal, 
or @term{false} otherwise.

The inequality functions return a @param{mismatch-index}
that is @term{true} if the strings are not equal,
or @term{false} otherwise.
When the @param{mismatch-index} is @term{true},
it is an @term{integer} representing the first character position at which the 
two substrings differ, as an offset from the beginning of @param{string1}.

The comparison has one of the following results:


@table @asis

@item @id{@code{string=}}


@code{string=} is @term{true} if the supplied substrings are of
the same length and contain the @term{same} characters in corresponding
positions; otherwise it is @term{false}.

@item @id{@code{string/=}}


@code{string/=} is @term{true} if the supplied substrings are 
different; otherwise it is @term{false}.

@item @id{@code{string-equal}}


@code{string-equal} is just like @code{string=} 
except that differences in case are ignored; 
two characters are considered to be the same if @code{char-equal} is @term{true} of them.

@item @id{@code{string<}}


@code{string<} is @term{true} if substring1 is less than substring2;
otherwise it is @term{false}.

@item @id{@code{string>}}


@code{string>} is @term{true} if substring1 is greater than substring2;
otherwise it is @term{false}.

@item @id{@code{string-lessp}, @code{string-greaterp}}


@code{string-lessp} and @code{string-greaterp} 
are exactly like @code{string<} and @code{string>}, respectively,
except that distinctions between uppercase and lowercase letters are ignored.
It is as if @code{char-lessp} were used instead of @code{char<}
for comparing characters.

@item @id{@code{string<=}}


@code{string<=} is @term{true} if substring1 is less than or equal to substring2;
otherwise it is @term{false}.

@item @id{@code{string>=}}


@code{string>=} is @term{true} if substring1 is greater than or equal to substring2;
otherwise it is @term{false}.

@item @id{@code{string-not-greaterp}, @code{string-not-lessp}}


@code{string-not-greaterp} and @code{string-not-lessp}
are exactly like @code{string<=} and @code{string>=}, respectively, 
except that distinctions between uppercase and lowercase letters are ignored.
It is as if @code{char-lessp} were used instead of @code{char<}
for comparing characters.
@end table



@subsubheading Examples:

@lisp
 (string= "foo" "foo") @EV{} @term{true}
 (string= "foo" "Foo") @EV{} @term{false}
 (string= "foo" "bar") @EV{} @term{false}
 (string= "together" "frog" :start1 1 :end1 3 :start2 2) @EV{} @term{true}
 (string-equal "foo" "Foo") @EV{} @term{true}
 (string= "abcd" "01234abcd9012" :start2 5 :end2 9) @EV{} @term{true}
 (string< "aaaa" "aaab") @EV{} 3
 (string>= "aaaaa" "aaaa") @EV{} 4
 (string-not-greaterp "Abcde" "abcdE") @EV{} 5
 (string-lessp "012AAAA789" "01aaab6" :start1 3 :end1 7
                                      :start2 2 :end2 6) @EV{} 6
 (string-not-equal "AAAA" "aaaA") @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{char=}

@subsubheading Notes:

@code{equal} calls @code{string=} if applied to two @term{strings}.


@node stringp
@heading stringp (Function)
@syindex stringp
@cindex stringp


@subsubheading Syntax:

@DefunWithValues{stringp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, string}

@subsubheading Examples:

@lisp
 (stringp "aaaaaa") @EV{} @term{true}
 (stringp #@bsl{}a) @EV{} @term{false}
@end lisp


@subsubheading See Also:

@ref{typep},
@ref{string (System Class)} (@term{type})

@subsubheading Notes:

@lisp
 (stringp @param{object}) @EQ{} (typep @param{object} 'string)
@end lisp



@node make-string
@heading make-string (Function)
@syindex make-string
@cindex make-string


@subsubheading Syntax:

@DefunWithValues{make-string, size @key{} initial-element element-type, string}

@subsubheading Arguments and Values:

@param{size}---a @term{valid array dimension}.

@param{initial-element}---a @term{character}.
@Default{@term{implementation-dependent}}

@param{element-type}---a @term{type specifier}.
@Default{@code{character}}

@param{string}---a @term{simple string}.

@subsubheading Description:

@code{make-string} returns a @term{simple string} of length @param{size}
whose elements have been initialized to @param{initial-element}.

The @param{element-type} names the @term{type} of the @term{elements} of the @term{string};
a @term{string} is constructed of the most @term{specialized}
@term{type} that can accommodate @term{elements} of the given @term{type}.  

@subsubheading Examples:

@lisp
 (make-string 10 :initial-element #@bsl{}5) @EV{} "5555555555"
 (length (make-string 10)) @EV{} 10
@end lisp


@subsubheading Affected By:

The @term{implementation}.




@node Sequences
@chapter Sequences
@menu
* Sequence Concepts::
* Rules about Test Functions::

Dictionary

* sequence::
* copy-seq::
* elt::
* fill::
* make-sequence::
* subseq::
* map::
* map-into::
* reduce::
* count; count-if; count-if-not::
* length::
* reverse; nreverse::
* sort; stable-sort::
* find; find-if; find-if-not::
* position; position-if; position-if-not::
* search::
* mismatch::
* replace::
* substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+::
* concatenate::
* merge::
* remove; remove-if; remove-if-not; delete; delete-if; delete-if-not::
* remove-duplicates; delete-duplicates::
@end menu

@node Sequence Concepts
@section Sequence Concepts

A @newterm{sequence} is an ordered collection of @term{elements},
implemented as either a @term{vector} or a @term{list}.

@term{Sequences} can be created by @thefunction{make-sequence},
as well as other @term{functions} that create @term{objects} 
of @term{types} that are @term{subtypes} of @code{sequence} 
(@eg{} @code{list}, @code{make-list}, @code{mapcar}, and @code{vector}).

A @newterm{sequence function} is a @term{function} 
defined by this specification
or added as an extension by the @term{implementation} 
that operates on one or more @term{sequences}.
Whenever a @term{sequence function} must construct and return
a new @term{vector}, it always returns a @term{simple vector}.
Similarly, any @term{strings} constructed will be @term{simple strings}.



@float Figure,SequenceFunctions
@cartouche
@multitable{delete-duplicates}{nsubstitute-if-not}{remove-duplicates}

@item concatenate @tab length @tab remove
@item copy-seq @tab map @tab remove-duplicates
@item count @tab map-into @tab remove-if
@item count-if @tab merge @tab remove-if-not
@item count-if-not @tab mismatch @tab replace
@item delete @tab notany @tab reverse
@item delete-duplicates @tab notevery @tab search
@item delete-if @tab nreverse @tab some
@item delete-if-not @tab nsubstitute @tab sort
@item elt @tab nsubstitute-if @tab stable-sort
@item every @tab nsubstitute-if-not @tab subseq
@item fill @tab position @tab substitute
@item find @tab position-if @tab substitute-if
@item find-if @tab position-if-not @tab substitute-if-not
@item find-if-not @tab reduce @tab 
@end multitable
@end cartouche
@caption{Standardized Sequence Functions}
@end float


@menu
* General Restrictions on Parameters that must be Sequences::
@end menu
@node General Restrictions on Parameters that must be Sequences
@subsection General Restrictions on Parameters that must be Sequences

In general, @term{lists} (including @term{association lists} and @term{property lists})
that are treated as @term{sequences} must be @term{proper lists}.



@node Rules about Test Functions
@section Rules about Test Functions

@menu
* Satisfying a Two-Argument Test::
* Satisfying a One-Argument Test::
@end menu
@node Satisfying a Two-Argument Test
@subsection Satisfying a Two-Argument Test
@anchor{SatisfyingTheTwoArgTest}

When an @term{object} @mat{O} is being considered iteratively 
against each @term{element} @mat{E@subs1{i}}
of a @term{sequence} @mat{S}
by an @term{operator} @mat{F} listed in @thenextfigure{},
it is sometimes useful to control the way in which the presence of @mat{O} 
is tested in @mat{S} is tested by @mat{F}.
This control is offered on the basis of a @term{function} designated with 
either a @kwd{test} or @kwd{test-not} @term{argument}.


@float Figure,fig17.2
@cartouche
@multitable{nset-difference}{nset-exclusive-or}{set-exclusive-or}

@item adjoin @tab nset-exclusive-or @tab search
@item assoc @tab nsublis @tab set-difference
@item count @tab nsubst @tab set-exclusive-or
@item delete @tab nsubstitute @tab sublis
@item find @tab nunion @tab subsetp
@item intersection @tab position @tab subst
@item member @tab pushnew @tab substitute
@item mismatch @tab rassoc @tab tree-equal
@item nintersection @tab remove @tab union
@item nset-difference @tab remove-duplicates @tab 
@end multitable
@end cartouche
@caption{Operators that have Two-Argument Tests to be Satisfied}
@end float


The object @mat{O} might not be compared directly to @mat{E@subs1{i}}.
If a @kwd{key} @term{argument} is provided,
it is a @term{designator} for a @term{function} of one @term{argument} 
to be called with each @mat{E@subs1{i}} as an @term{argument}, 
and @term{yielding} an @term{object} @mat{Z@subs1{i}} to be used for comparison.
(If there is no @kwd{key} @term{argument}, @mat{Z@subs1{i}} is @mat{E@subs1{i}}.)

The @term{function} designated by @thekeyarg{key} is never called on @mat{O} itself.
However, if the function operates on multiple sequences
(@eg{} as happens in @code{set-difference}), @mat{O}
will be the result of calling the @kwd{key} function on an
@term{element} of the other sequence.  

A @kwd{test} @term{argument}, if supplied to @mat{F},
is a @term{designator} for a  @term{function}
of two @term{arguments}, @mat{O} and @mat{Z@subs1{i}}.
An @mat{E@subs1{i}} is said (or, sometimes, an @mat{O} and an @mat{E@subs1{i}} are said)
to @newterm{satisfy the test} 
if this @kwd{test} @term{function} returns a @term{generalized boolean} representing 
@term{true}.

A @kwd{test-not} @term{argument}, if supplied to @mat{F}, 
is @term{designator} for a @term{function} 
of two @term{arguments}, @mat{O} and @mat{Z@subs1{i}}.
An @mat{E@subs1{i}} is said (or, sometimes, an @mat{O} and an @mat{E@subs1{i}} are said)
to @newterm{satisfy the test} 
if this @kwd{test-not} @term{function}
returns a @term{generalized boolean} representing @term{false}.

If neither a @kwd{test} nor a @kwd{test-not} @term{argument} is supplied, 
it is as if a @kwd{test} argument of @f{#'eql} was supplied.

The consequences are unspecified if both a @kwd{test} and a @kwd{test-not} @term{argument}
are supplied in the same @term{call} to @mat{F}.

@subsubsection Examples of Satisfying a Two-Argument Test

@lisp
 (remove "FOO" '(foo bar "FOO" "BAR" "foo" "bar") :test #'equal)
@EV{} (foo bar "BAR" "foo" "bar")
 (remove "FOO" '(foo bar "FOO" "BAR" "foo" "bar") :test #'equalp)
@EV{} (foo bar "BAR" "bar")
 (remove "FOO" '(foo bar "FOO" "BAR" "foo" "bar") :test #'string-equal)
@EV{} (bar "BAR" "bar")
 (remove "FOO" '(foo bar "FOO" "BAR" "foo" "bar") :test #'string=)
@EV{} (BAR "BAR" "foo" "bar")

 (remove 1 '(1 1.0 #C(1.0 0.0) 2 2.0 #C(2.0 0.0)) :test-not #'eql)
@EV{} (1)
 (remove 1 '(1 1.0 #C(1.0 0.0) 2 2.0 #C(2.0 0.0)) :test-not #'=)
@EV{} (1 1.0 #C(1.0 0.0))
 (remove 1 '(1 1.0 #C(1.0 0.0) 2 2.0 #C(2.0 0.0)) :test (complement #'=))
@EV{} (1 1.0 #C(1.0 0.0))

 (count 1 '((one 1) (uno 1) (two 2) (dos 2)) :key #'cadr) @EV{} 2

 (count 2.0 '(1 2 3) :test #'eql :key #'float) @EV{} 1

 (count "FOO" (list (make-pathname :name "FOO" :type "X")  
                    (make-pathname :name "FOO" :type "Y"))
        :key #'pathname-name
        :test #'equal)
@EV{} 2
@end lisp




@node Satisfying a One-Argument Test
@subsection Satisfying a One-Argument Test

When using one of the @term{functions} in @thenextfigure{},
the elements @mat{E} of a @term{sequence} @mat{S} are filtered
not on the basis of the presence or absence of an object @mat{O} 
under a two @term{argument} @term{predicate},
as with the @term{functions} described in @ref{Satisfying a Two-Argument Test, Section 17.2.1 (Satisfying a Two-Argument Test)},
but rather on the basis of a one @term{argument} @term{predicate}.


@float Figure,fig17.3
@cartouche
@multitable{delete-if-not}{nsubstitute-if-not}{substitute-if-not}

@item assoc-if @tab member-if @tab rassoc-if
@item assoc-if-not @tab member-if-not @tab rassoc-if-not
@item count-if @tab nsubst-if @tab remove-if
@item count-if-not @tab nsubst-if-not @tab remove-if-not
@item delete-if @tab nsubstitute-if @tab subst-if
@item delete-if-not @tab nsubstitute-if-not @tab subst-if-not
@item find-if @tab position-if @tab substitute-if
@item find-if-not @tab position-if-not @tab substitute-if-not
@end multitable
@end cartouche
@caption{Operators that have One-Argument Tests to be Satisfied}
@end float


The element @mat{E@subs1{i}} might not be considered directly.
If a @kwd{key} @term{argument} is provided,
it is a @term{designator} for a @term{function} of one @term{argument} 
to be called with each @mat{E@subs1{i}} as an @term{argument}, 
and @term{yielding} an @term{object} @mat{Z@subs1{i}} to be used for comparison.
(If there is no @kwd{key} @term{argument}, @mat{Z@subs1{i}} is @mat{E@subs1{i}}.)

@term{Functions} defined in this specification and having a name that
ends in ``@f{-if}'' accept a first @term{argument} that is a @term{designator} for a 
@term{function} of one @term{argument}, @mat{Z@subs1{i}}.
An @mat{E@subs1{i}} is said to @newterm{satisfy the test} if this @kwd{test} @term{function}
returns a @term{generalized boolean} representing @term{true}.

@term{Functions} defined in this specification and having a name that
ends in ``@f{-if-not}'' accept a first @term{argument} that is a @term{designator} for a 
@term{function} of one @term{argument}, @mat{Z@subs1{i}}.
An @mat{E@subs1{i}} is said to @newterm{satisfy the test} if this @kwd{test} @term{function}
returns a @term{generalized boolean} representing @term{false}.

@subsubsection Examples of Satisfying a One-Argument Test

@lisp
 (count-if #'zerop '(1 #C(0.0 0.0) 0 0.0d0 0.0s0 3)) @EV{} 4

 (remove-if-not #'symbolp '(0 1 2 3 4 5 6 7 8 9 A B C D E F))
@EV{} (A B C D E F)
 (remove-if (complement #'symbolp) '(0 1 2 3 4 5 6 7 8 9 A B C D E F))
@EV{} (A B C D E F)

 (count-if #'zerop '("foo" "" "bar" "" "" "baz" "quux") :key #'length)
@EV{} 3
@end lisp




@node sequence
@heading sequence (System Class)
@syindex sequence
@cindex sequence


@subsubheading Class Precedence List:
@code{sequence},
@code{t}

@subsubheading Description:

@term{Sequences} are ordered collections of @term{objects},
called the @term{elements} of the @term{sequence}.

@Thetypes{vector} and @thetype{list} are @term{disjoint} @subtypesof{sequence},
but are not necessarily an @term{exhaustive partition} of @term{sequence}.

When viewing a @term{vector} as a @term{sequence}, 
only the @term{active} @term{elements} of that @term{vector} 
are considered @term{elements} of the @term{sequence};
that is,
@term{sequence} operations respect the @term{fill pointer}
when given @term{sequences} represented as @term{vectors}.


@node copy-seq
@heading copy-seq (Function)
@syindex copy-seq
@cindex copy-seq


@subsubheading Syntax:

@DefunWithValues{copy-seq, sequence, copied-sequence}

@subsubheading Arguments and Values:

@param{sequence}---a @term{proper sequence}.

@param{copied-sequence}---a @term{proper sequence}.

@subsubheading Description:

Creates a copy of @param{sequence}.  The @term{elements} of the new
@term{sequence} are the @term{same} as the corresponding @term{elements} of
the given @param{sequence}.

If @param{sequence} is a @term{vector}, 
the result is a @term{fresh} @term{simple array}
of @term{rank} one 
that has the same @term{actual array element type} as @param{sequence}.
If @param{sequence} is a @term{list}, 
the result is a @term{fresh} @term{list}. 

@subsubheading Examples:
@lisp
 (setq str "a string") @EV{} "a string"
 (equalp str (copy-seq str)) @EV{} @term{true}
 (eql str (copy-seq str)) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}

@subsubheading See Also:

@ref{copy-list}

@subsubheading Notes:

From a functional standpoint,
@lisp
 (copy-seq x) @EQ{} (subseq x 0)
@end lisp

However, the programmer intent is typically very different in these two cases.


@node elt
@heading elt (Accessor)
@syindex elt
@cindex elt


@subsubheading Syntax:

@DefunWithValues{elt, sequence index, object}
@Defsetf{elt, sequence index, new-object}

@subsubheading Arguments and Values:

@param{sequence}---a @term{proper sequence}.

@param{index}---a @term{valid sequence index} for @param{sequence}.

@param{object}---an @term{object}.

@param{new-object}---an @term{object}.

@subsubheading Description:

@term{Accesses} the @term{element} of @param{sequence} specified by @param{index}.

@subsubheading Examples:

@lisp
 (setq str (copy-seq "0123456789")) @EV{} "0123456789"
 (elt str 6) @EV{} #@bsl{}6
 (setf (elt str 0) #@bsl{}#) @EV{} #@bsl{}#
 str @EV{} "#123456789"
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}
@Shouldchecktype{index, a @term{valid sequence index} for @param{sequence}}

@subsubheading See Also:

@ref{aref},
@ref{nth},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)}

@subsubheading Notes:

@code{aref} may be used to @term{access} @term{vector} 
elements that are beyond the @term{vector}'s @term{fill pointer}.


@node fill
@heading fill (Function)
@syindex fill
@cindex fill


@subsubheading Syntax:

@DefunWithValues{fill, sequence item @key{} start end, sequence}

@subsubheading Arguments and Values:

@param{sequence}---a @term{proper sequence}.

@param{item}---a @term{sequence}.

@param{start}, @param{end}---@term{bounding index designators} of @param{sequence}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@subsubheading Description:

Replaces the @term{elements} of @param{sequence} 
@term{bounded} by @param{start} and @param{end}
with @param{item}.

@subsubheading Examples:

@lisp
 (fill (list 0 1 2 3 4 5) '(444)) @EV{} ((444) (444) (444) (444) (444) (444))
 (fill (copy-seq "01234") #@bsl{}e :start 3) @EV{} "012ee"
 (setq x (vector 'a 'b 'c 'd 'e)) @EV{} #(A B C D E)
 (fill x 'z :start 1 :end 3) @EV{} #(A Z Z D E)
 x @EV{} #(A Z Z D E)
 (fill x 'p) @EV{} #(P P P P P)
 x @EV{} #(P P P P P)
@end lisp


@subsubheading Side Effects:

@param{Sequence} is destructively modified.

@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}} 
@Shouldchecktype{start, a non-negative @term{integer}}
@Shouldchecktype{end, a non-negative @term{integer} or @nil{}}

@subsubheading See Also:

@ref{replace}, @ref{nsubstitute}

@subsubheading Notes:

@tt{ (fill @param{sequence} @param{item}) @EQ{} 
(nsubstitute-if @param{item} (constantly t) @param{sequence})}


@node make-sequence
@heading make-sequence (Function)
@syindex make-sequence
@cindex make-sequence


@subsubheading Syntax:

@DefunWithValues{make-sequence, result-type size @key{} initial-element, sequence}

@subsubheading Arguments and Values:

@param{result-type}---a @code{sequence} @term{type specifier}.

@param{size}---a non-negative @term{integer}.

@param{initial-element}---an @term{object}.
@Default{@term{implementation-dependent}}

@param{sequence}---a @term{proper sequence}.

@subsubheading Description:

Returns a @term{sequence} of the type @param{result-type} and of length @param{size},
each of the @term{elements} of which has been initialized to @param{initial-element}.

If the @param{result-type} is a @term{subtype} of @code{list},
the result will be a @term{list}.

If the @param{result-type} is a @term{subtype} of @code{vector},
then if the implementation can determine the element type specified
for the @param{result-type}, the element type of the resulting array 
is the result of @term{upgrading} that element type; or, if the
implementation can determine that the element type is unspecified (or @f{*}),
the element type of the resulting array is @code{t};
otherwise, an error is signaled.

@subsubheading Examples:

@lisp
 (make-sequence 'list 0) @EV{} ()
 (make-sequence 'string 26 :initial-element #@bsl{}.) 
@EV{} ".........................."
 (make-sequence '(vector double-float) 2
                :initial-element 1d0)
@EV{} #(1.0d0 1.0d0)
@end lisp


@lisp
 (make-sequence '(vector * 2) 3) should signal an error
 (make-sequence '(vector * 4) 3) should signal an error
@end lisp


@subsubheading Affected By:

The @term{implementation}.

@subsubheading Exceptional Situations:

The consequences are unspecified if @param{initial-element} 
is not an @term{object} which can be stored in the resulting @term{sequence}.

An error @oftype{type-error} must be signaled if the @param{result-type} is neither
a @term{recognizable subtype} of @code{list},
nor a @term{recognizable subtype} of @code{vector}.

An error @oftype{type-error} should be signaled if @param{result-type} specifies 
the number of elements and @param{size} is different from that number.

@subsubheading See Also:

@ref{make-array}, @ref{make-list}

@subsubheading Notes:
@lisp
 (make-sequence 'string 5) @EQ{} (make-string 5)               
@end lisp


@node subseq
@heading subseq (Accessor)
@syindex subseq
@cindex subseq


@subsubheading Syntax:

@DefunWithValues{subseq, sequence start @opt{} end, subsequence}
@Defsetf{subseq, sequence start @opt{} end, new-subsequence}

@subsubheading Arguments and Values:

@param{sequence}---a @term{proper sequence}.

@param{start}, @param{end}---@term{bounding index designators} of @param{sequence}.
@DefaultFor{@param{end}, @nil{}}

@param{subsequence}---a @term{proper sequence}.

@param{new-subsequence}---a @term{proper sequence}.

@subsubheading Description:

@code{subseq} creates a @term{sequence} 
that is a copy of the subsequence of @param{sequence}
@param{bounded} by @param{start} and @param{end}.

@param{Start} specifies an offset into the original @param{sequence} and
marks the beginning position of the subsequence.
@param{end} marks the position following the last element of the subsequence.

@code{subseq} always allocates a new @term{sequence} for a result;
it never shares storage with an old @term{sequence}. 
The result subsequence is always of the same @term{type} as @param{sequence}.

If @param{sequence} is a @term{vector},
the result is a @term{fresh} @term{simple array}
of @term{rank} one
that has the same @term{actual array element type} as @param{sequence}.
If @param{sequence} is a @term{list}, 
the result is a @term{fresh} @term{list}. 

@code{setf} may be used with @code{subseq} to destructively replace
@term{elements} of a subsequence with @term{elements} 
taken from a @term{sequence} of new values.
If the subsequence and the new sequence are not of equal length,
the shorter length determines the number of elements that are
replaced.  The remaining @term{elements} at the end of the longer sequence 
are not modified in the operation.

@subsubheading Examples:

@lisp
 (setq str "012345") @EV{} "012345"
 (subseq str 2) @EV{} "2345"
 (subseq str 3 5) @EV{} "34"
 (setf (subseq str 4) "abc") @EV{} "abc"
 str @EV{} "0123ab"
 (setf (subseq str 0 2) "A") @EV{} "A"
 str @EV{} "A123ab"
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}
@Lazychecktype{new-subsequence, a @term{proper sequence}}

@subsubheading See Also:

@ref{replace}


@node map
@heading map (Function)
@syindex map
@cindex map


@subsubheading Syntax:

@DefunWithValues{map, result-type function @rest{} @plus{sequences}, result}

@subsubheading Arguments and Values:

@param{result-type}---a @code{sequence} @term{type specifier}, or @nil{}.

@param{function}---a @term{function designator}.
@param{function} must take as many arguments as 
there are @param{sequences}.

@param{sequence}---a @term{proper sequence}.

@param{result}---if @param{result-type} is a @term{type specifier} other than @nil{}, 
then a @term{sequence} of the @term{type} it denotes;
otherwise (if the @param{result-type} is @nil{}), @nil{}.

@subsubheading Description:

Applies @param{function} to successive sets of arguments in which
one argument is obtained from each @term{sequence}.
The @param{function} is called first on all the elements with index @f{0},
then on all those with index @f{1}, and so on.
The @param{result-type} specifies the @term{type} of the resulting @term{sequence}.

@code{map} returns @nil{}@spc{}if @param{result-type} is @nil{}.      
Otherwise, @code{map} returns
a @term{sequence} such that element @f{j} is the result
of applying @param{function} to element @f{j} of each of the 
@param{sequences}.  The result @term{sequence} 
is as long as the shortest of the
@param{sequences}.
The consequences are undefined if the result of applying @param{function} 
to the successive elements of the @param{sequences} cannot
be contained in a @term{sequence} of the @term{type} given by @param{result-type}.

If the @param{result-type} is a @term{subtype} of @code{list},
the result will be a @term{list}.

If the @param{result-type} is a @term{subtype} of @code{vector},
then if the implementation can determine the element type specified
for the @param{result-type}, the element type of the resulting array 
is the result of @term{upgrading} that element type; or, if the
implementation can determine that the element type is unspecified (or @f{*}),
the element type of the resulting array is @code{t};
otherwise, an error is signaled.

@subsubheading Examples:

@lisp
 (map 'string #'(lambda (x y)
                  (char "01234567890ABCDEF" (mod (+ x y) 16)))
       '(1 2 3 4)
       '(10 9 8 7)) @EV{} "AAAA"
 (setq seq '("lower" "UPPER" "" "123")) @EV{} ("lower" "UPPER" "" "123")
 (map nil #'nstring-upcase seq) @EV{} NIL
 seq @EV{} ("LOWER" "UPPER" "" "123")
 (map 'list #'- '(1 2 3 4)) @EV{} (-1 -2 -3 -4)
 (map 'string
      #'(lambda (x) (if (oddp x) #@bsl{}1 #@bsl{}0))
      '(1 2 3 4)) @EV{} "1010"
@end lisp


@lisp
 (map '(vector * 4) #'cons "abc" "de") should signal an error
@end lisp


@subsubheading Exceptional Situations:

An error @oftype{type-error} must be signaled if the @param{result-type} is 
not a @term{recognizable subtype} of @code{list},
not a @term{recognizable subtype} of @code{vector},
and not @nil{}.

@Lazycheckanytype{sequence, a @term{proper sequence}}

An error @oftype{type-error} should be signaled
if @param{result-type} specifies the
number of elements and the minimum length of the @param{sequences} 
is different from that number.

@subsubheading See Also:

@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}


@node map-into
@heading map-into (Function)
@syindex map-into
@cindex map-into



@subsubheading Syntax:

@DefunWithValues{map-into, result-sequence function @rest{} sequences, result-sequence}

@subsubheading Arguments and Values:

@param{result-sequence}---a @term{proper sequence}.

@param{function}---a @term{designator} for a @term{function}
of as many @term{arguments} as there are @param{sequences}.

@param{sequence}---a @term{proper sequence}.

@subsubheading Description:

Destructively modifies @param{result-sequence} to contain the results of
applying @param{function} to each element in the argument @param{sequences} 
in turn.

@param{result-sequence} and each element of @param{sequences} can each be
either a @term{list} or a @term{vector}. 
If @param{result-sequence} and each element of @param{sequences} are not all
the same length, the iteration terminates when the shortest @term{sequence}
(of any of the @param{sequences} or the @param{result-sequence})
is exhausted.
If @param{result-sequence} is a @term{vector} with a 
@term{fill pointer}, the @term{fill pointer} is ignored when deciding how
many iterations to perform, and afterwards the @term{fill pointer} is set to
the number of times @param{function} was applied.
If @param{result-sequence} is longer than the shortest element of @param{sequences},
extra elements at the end of @param{result-sequence} are left unchanged.
If @param{result-sequence} is @nil{}, @code{map-into} immediately returns
@nil{}, since @nil{}@spc{}is a @term{sequence} of length zero.

If @param{function} has side effects, it can count on being called
first on all of the elements with index 0, then on all of those 
numbered 1, and so on.

@subsubheading Examples:

@lisp
 (setq a (list 1 2 3 4) b (list 10 10 10 10)) @EV{} (10 10 10 10)
 (map-into a #'+ a b) @EV{} (11 12 13 14)
 a @EV{} (11 12 13 14)
 b @EV{} (10 10 10 10)
 (setq k '(one two three)) @EV{} (ONE TWO THREE)
 (map-into a #'cons k a) @EV{} ((ONE . 11) (TWO . 12) (THREE . 13) 14)
 (map-into a #'gensym) @EV{} (#:G9090 #:G9091 #:G9092 #:G9093)
 a @EV{} (#:G9090 #:G9091 #:G9092 #:G9093)
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{result-sequence, a @term{proper sequence}}
@Lazychecktype{sequence, a @term{proper sequence}}

@subsubheading Notes:

@code{map-into} differs from @code{map} in that it modifies an
existing @term{sequence} rather than creating a new one.
In addition, @code{map-into} can be called with only two 
arguments, while @code{map} requires at least three arguments.

@code{map-into} could be defined by:

@lisp
 (defun map-into (result-sequence function &rest sequences)
   (loop for index below (apply #'min 
                                (length result-sequence)
                                (mapcar #'length sequences))
         do (setf (elt result-sequence index)
                  (apply function
                         (mapcar #'(lambda (seq) (elt seq index))
                                 sequences))))
   result-sequence)
@end lisp



@node reduce
@heading reduce (Function)
@syindex reduce
@cindex reduce


@subsubheading Syntax:

@DefunWithValues{reduce, function sequence @key{} key from-end start end initial-value, result}

@subsubheading Arguments and Values:

@param{function}---a @term{designator} for a @term{function}
that might be called with either zero or two @term{arguments}.

@param{sequence}---a @term{proper sequence}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{from-end}---a @term{generalized boolean}.
@Default{@term{false}}

@param{start}, @param{end}---@term{bounding index designators} of @param{sequence}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{initial-value}---an @term{object}. 

@param{result}---an @term{object}.

@subsubheading Description:

@code{reduce} uses a binary operation, @param{function},
to combine the @term{elements} of @param{sequence} 
@term{bounded} by @param{start} and @param{end}.

The @param{function} must accept as @term{arguments} two @term{elements}
of @param{sequence} or the results from combining those @term{elements}.
The @param{function} must also be able to accept no arguments.

If @param{key} is supplied, it is used is used to extract the values to reduce.
The @param{key} function is applied exactly once to each element of @param{sequence}
in the order implied by the reduction order but not to the value of
@param{initial-value}, if supplied.
The @param{key} function typically returns part of the @term{element} of @param{sequence}.
If @param{key} is not supplied or is @nil{}, the @param{sequence} @term{element} itself is used.

The reduction is left-associative,
unless @param{from-end} is @term{true} in which case it is right-associative.  

If @param{initial-value} is supplied, 
it is logically placed before the subsequence
(or after it if @param{from-end} is @term{true})
and included in the reduction operation.

In the normal case, the result of @code{reduce} is the combined 
result of @param{function}'s being applied to successive pairs of @term{elements} 
of @param{sequence}.
If the subsequence contains exactly one @term{element} 
and no @param{initial-value} is given,
then that @term{element} is returned and @param{function} is not called.
If the subsequence is empty and an @param{initial-value} is given,
then the @param{initial-value} is returned and @param{function} is not called.
If the subsequence is empty and no @param{initial-value} is given,
then the @param{function} is called with zero arguments,
and @code{reduce} returns whatever @param{function} does.
This is the only case where the
@param{function} is called with other than two arguments.

@subsubheading Examples:
@lisp
 (reduce #'* '(1 2 3 4 5)) @EV{} 120
 (reduce #'append '((1) (2)) :initial-value '(i n i t)) @EV{} (I N I T 1 2)
 (reduce #'append '((1) (2)) :from-end t                  
                             :initial-value '(i n i t)) @EV{} (1 2 I N I T) 
 (reduce #'- '(1 2 3 4)) @EQ{} (- (- (- 1 2) 3) 4) @EV{} -8
 (reduce #'- '(1 2 3 4) :from-end t)    ;Alternating sum.
@EQ{} (- 1 (- 2 (- 3 4))) @EV{} -2
 (reduce #'+ '()) @EV{} 0
 (reduce #'+ '(3)) @EV{} 3
 (reduce #'+ '(foo)) @EV{} FOO
 (reduce #'list '(1 2 3 4)) @EV{} (((1 2) 3) 4)
 (reduce #'list '(1 2 3 4) :from-end t) @EV{} (1 (2 (3 4)))
 (reduce #'list '(1 2 3 4) :initial-value 'foo) @EV{} ((((foo 1) 2) 3) 4)
 (reduce #'list '(1 2 3 4)
        :from-end t :initial-value 'foo) @EV{} (1 (2 (3 (4 foo))))
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}

@subsubheading See Also:

@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}


@node count; count-if; count-if-not
@heading count, count-if, count-if-not (Function)
@syindex count
@cindex count
@syindex count-if
@cindex count-if
@syindex count-if-not
@cindex count-if-not


@subsubheading Syntax:

@DefunWithValues{count, item sequence @key{} from-end start end key test test-not, n}
@DefunWithValues{count-if, predicate sequence @key{} from-end start end key, n}
@DefunWithValues{count-if-not, predicate sequence @key{} from-end start end key, n}

@subsubheading Arguments and Values:

@param{item}---an @term{object}.

@param{sequence}---a @term{proper sequence}.

@param{predicate}---a @term{designator} for a @term{function} of one @term{argument}
that returns a @term{generalized boolean}.

@param{from-end}---a @term{generalized boolean}.
@Default{@term{false}}

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{start}, @param{end}---@term{bounding index designators} of @param{sequence}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{n}---a non-negative @term{integer} 
less than or equal to the @term{length} of @param{sequence}.

@subsubheading Description:

@code{count}, @code{count-if}, and @code{count-if-not} 
count and return the number of @term{elements} in 
the @param{sequence} @term{bounded} by @param{start} and @param{end}
that @term{satisfy the test}.

The @param{from-end} has no direct effect on the result.
However, if @param{from-end} is @term{true},
the @term{elements} of @param{sequence} will be supplied as @term{arguments} to
the @param{test},
@param{test-not},
and @param{key} in reverse order,
which may change the side-effects, if any, of those functions.

@subsubheading Examples:

@lisp
 (count #@bsl{}a "how many A's are there in here?") @EV{} 2
 (count-if-not #'oddp '((1) (2) (3) (4)) :key #'car) @EV{} 2
 (count-if #'upper-case-p "The Crying of Lot 49" :start 4) @EV{} 2 
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}

@subsubheading See Also:

@ref{Rules about Test Functions, Section 17.2 (Rules about Test Functions)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} @term{argument} is deprecated.

@Thefunction{count-if-not} is deprecated.


@node length
@heading length (Function)
@syindex length
@cindex length


@subsubheading Syntax:

@DefunWithValues{length, sequence, n}

@subsubheading Arguments and Values:

@param{sequence}---a @term{proper sequence}.

@param{n}---a non-negative @term{integer}.

@subsubheading Description:

Returns the number of @term{elements} in @param{sequence}.

If @param{sequence} is a @term{vector} with a @term{fill pointer},
the active length as specified by the @term{fill pointer} is returned.

@subsubheading Examples:

@lisp
 (length "abc") @EV{} 3
 (setq str (make-array '(3) :element-type 'character 
                            :initial-contents "abc"
                            :fill-pointer t)) @EV{} "abc"
 (length str) @EV{} 3
 (setf (fill-pointer str) 2) @EV{} 2
 (length str) @EV{} 2
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}

@subsubheading See Also:

@ref{list-length},
@ref{sequence}


@node reverse; nreverse
@heading reverse, nreverse (Function)
@syindex reverse
@cindex reverse
@syindex nreverse
@cindex nreverse
@anchor{reverse}
@anchor{nreverse}


@subsubheading Syntax:

@DefunWithValues{reverse, sequence, reversed-sequence}

@DefunWithValues{nreverse, sequence, reversed-sequence}

@subsubheading Arguments and Values:

@param{sequence}---a @term{proper sequence}.

@param{reversed-sequence}---a @term{sequence}.

@subsubheading Description:

@code{reverse} and @code{nreverse} return a new @term{sequence} 
of the same kind as @param{sequence}, containing the same @term{elements},
but in reverse order.

@code{reverse} and @code{nreverse} differ in that @code{reverse} 
always creates and returns a new @term{sequence}, whereas @code{nreverse}
might modify and return the given @param{sequence}.  @code{reverse} never
modifies the given @param{sequence}.

For @code{reverse}, if @param{sequence} is a @term{vector}, 
the result is a @term{fresh} @term{simple array} of @term{rank} one
that has the same @term{actual array element type} as @param{sequence}.
If @param{sequence} is a @term{list}, the result is a @term{fresh} @term{list}. 

For @code{nreverse}, if @param{sequence} is a @term{vector},
the result is a @term{vector}
that has the same @term{actual array element type} as @param{sequence}.
If @param{sequence} is a @term{list}, the result is a @term{list}.

For @code{nreverse},
@param{sequence} might be destroyed and re-used to produce the result.
The result might or might not be @term{identical} to @param{sequence}.
Specifically, when @param{sequence} is a @term{list}, 
@code{nreverse} is permitted to @code{setf} any part, @code{car} or @code{cdr},
of any @term{cons} that is part of the @term{list structure} of @param{sequence}.
When @param{sequence} is a @term{vector},
@code{nreverse} is permitted to re-order the elements of @param{sequence}
in order to produce the resulting @term{vector}.

@subsubheading Examples:
@lisp
 (setq str "abc") @EV{} "abc"
 (reverse str) @EV{} "cba"
 str @EV{} "abc"
 (setq str (copy-seq str)) @EV{} "abc"
 (nreverse str) @EV{} "cba"
 str @EV{} @term{implementation-dependent}
 (setq l (list 1 2 3)) @EV{} (1 2 3)
 (nreverse l) @EV{} (3 2 1)
 l @EV{} @term{implementation-dependent}
@end lisp


@subsubheading Side Effects:

@code{nreverse} might either create a new @term{sequence},
modify the argument @param{sequence}, or both.
(@code{reverse} does not modify @param{sequence}.)

@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}


@node sort; stable-sort
@heading sort, stable-sort (Function)
@syindex sort
@cindex sort
@syindex stable-sort
@cindex stable-sort
@anchor{sort}
@anchor{stable-sort}


@subsubheading Syntax:

@DefunWithValues{sort, sequence predicate @key{} key, sorted-sequence}
@DefunWithValues{stable-sort, sequence predicate @key{} key, sorted-sequence}

@subsubheading Arguments and Values:

@param{sequence}---a @term{proper sequence}.

@param{predicate}---a @term{designator} for
a @term{function} of two arguments that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{sorted-sequence}---a @term{sequence}.

@subsubheading Description:

@code{sort} and @code{stable-sort} destructively sort @param{sequences}  
according to the order determined by the @param{predicate} function.

If @param{sequence} is a @term{vector},
the result is a @term{vector} 
that has the same @term{actual array element type} as @param{sequence}.
If @param{sequence} is a @term{list},
the result is a @term{list}. 

@code{sort} determines the relationship between two elements
by giving keys extracted from the elements to the @param{predicate}.
The first argument to the @param{predicate} function is the part of one element
of @param{sequence} extracted by the @param{key} function
(if supplied); the second
argument is the part of another element
of @param{sequence} extracted by the @param{key} function
(if supplied).
@param{Predicate} should return @term{true} if and only if the first argument is
strictly less than the second (in some appropriate sense). 
If the first argument is greater than or equal to the second
(in the appropriate sense), then the @param{predicate} should return @term{false}.

The argument to the @param{key} function is the @param{sequence} element.
The return value of the @param{key} function 
becomes an argument to @param{predicate}.
If @param{key} is not supplied or @nil{}, the @param{sequence} element itself is used.
There is no guarantee on the number of times the @param{key} will be called.

If the @param{key} and @param{predicate} always return,
then the sorting operation will always terminate,
producing a @term{sequence} containing the same @term{elements} as @param{sequence} 
(that is, the result is a permutation of @param{sequence}).
This is guaranteed even if the @param{predicate}
does not really consistently represent a total order
(in which case the @term{elements} will be scrambled in some unpredictable way,
but no @term{element} will be lost).  
If the @param{key} consistently returns meaningful keys,
and the @param{predicate} does reflect some total ordering criterion on those keys,
then the @term{elements} of the @param{sorted-sequence}
will be properly sorted according to that ordering.

The sorting operation performed by @code{sort} is not guaranteed stable.
Elements considered equal by the @param{predicate} might or might not
stay in their original order.  The @param{predicate} is assumed to
consider two elements @f{x} and @f{y} to be equal if
@f{(funcall @i{predicate} @i{x} @i{y})} and
@f{(funcall @i{predicate} @i{y} @i{x})} are both @term{false}.
@code{stable-sort} guarantees stability.

The sorting operation can be destructive in all cases.  In the case of a
@term{vector} 
argument, this is accomplished by permuting the elements in place.
In the case of a @term{list}, the @term{list} is
destructively reordered in the same manner as for
@code{nreverse}.  

@subsubheading Examples:

@lisp
 (setq tester (copy-seq "lkjashd")) @EV{} "lkjashd"
 (sort tester #'char-lessp) @EV{} "adhjkls"
 (setq tester (list '(1 2 3) '(4 5 6) '(7 8 9))) @EV{} ((1 2 3) (4 5 6) (7 8 9))
 (sort tester #'> :key #'car)  @EV{} ((7 8 9) (4 5 6) (1 2 3)) 
 (setq tester (list 1 2 3 4 5 6 7 8 9 0)) @EV{} (1 2 3 4 5 6 7 8 9 0)
 (stable-sort tester #'(lambda (x y) (and (oddp x) (evenp y))))
@EV{} (1 3 5 7 9 2 4 6 8 0)
 (sort (setq committee-data
             (vector (list (list "JonL" "White") "Iteration")
                     (list (list "Dick" "Waters") "Iteration")
                     (list (list "Dick" "Gabriel") "Objects")
                     (list (list "Kent" "Pitman") "Conditions")
                     (list (list "Gregor" "Kiczales") "Objects")
                     (list (list "David" "Moon") "Objects")
                     (list (list "Kathy" "Chapman") "Editorial")
                     (list (list "Larry" "Masinter") "Cleanup")
                     (list (list "Sandra" "Loosemore") "Compiler")))
       #'string-lessp :key #'cadar)
@EV{} #((("Kathy" "Chapman") "Editorial")
     (("Dick" "Gabriel") "Objects")
     (("Gregor" "Kiczales") "Objects")
     (("Sandra" "Loosemore") "Compiler")
     (("Larry" "Masinter") "Cleanup")
     (("David" "Moon") "Objects")
     (("Kent" "Pitman") "Conditions")
     (("Dick" "Waters") "Iteration")
     (("JonL" "White") "Iteration"))
 ;; Note that individual alphabetical order within `committees'
 ;; is preserved.
 (setq committee-data 
       (stable-sort committee-data #'string-lessp :key #'cadr))
@EV{} #((("Larry" "Masinter") "Cleanup")
     (("Sandra" "Loosemore") "Compiler")
     (("Kent" "Pitman") "Conditions")
     (("Kathy" "Chapman") "Editorial")
     (("Dick" "Waters") "Iteration")
     (("JonL" "White") "Iteration")
     (("Dick" "Gabriel") "Objects")
     (("Gregor" "Kiczales") "Objects")
     (("David" "Moon") "Objects"))
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}

@subsubheading See Also:

@ref{merge},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)},
@ref{Destructive Operations, Section 3.7 (Destructive Operations)}

@subsubheading Notes:

If @param{sequence} is a @term{vector},
the result might or might not be simple, 
and might or might not be @term{identical} to @param{sequence}.


@node find; find-if; find-if-not
@heading find, find-if, find-if-not (Function)
@syindex find
@cindex find
@syindex find-if
@cindex find-if
@syindex find-if-not
@cindex find-if-not
@anchor{find}


@subsubheading Syntax:

@DefunWithValues{find, item sequence @key{} from-end test test-not start end key, element}
@DefunWithValues{find-if, predicate sequence @key{} from-end start end key, element}
@DefunWithValues{find-if-not, predicate sequence @key{} from-end start end key, element}

@subsubheading Arguments and Values:

@param{item}---an @term{object}.

@param{sequence}---a @term{proper sequence}.

@param{predicate}---a @term{designator} for a @term{function} of one @term{argument}
that returns a @term{generalized boolean}.

@param{from-end}---a @term{generalized boolean}.
@Default{@term{false}}

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{start}, @param{end}---@term{bounding index designators} of @param{sequence}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{element}---an @term{element} of the @param{sequence}, or @nil{}.

@subsubheading Description:

@code{find}, @code{find-if}, and @code{find-if-not} 
each search for an @term{element} of the @param{sequence}
@term{bounded} by @param{start} and @term{end}
that @term{satisfies the predicate} @param{predicate} 
or that @term{satisfies the test} @param{test} or @param{test-not},
as appropriate.

If @param{from-end} is @term{true},
then the result is the rightmost @term{element} that @term{satisfies the test}. 

If the @param{sequence} contains an @term{element} that @term{satisfies the test},
then the leftmost or rightmost @param{sequence} element, 
depending on @param{from-end},
is returned;
otherwise @nil{}@spc{}is returned.

@subsubheading Examples:

@lisp
 (find #@bsl{}d "here are some letters that can be looked at" :test #'char>)
@EV{} #@bsl{}Space 
 (find-if #'oddp '(1 2 3 4 5) :end 3 :from-end t) @EV{} 3
 (find-if-not #'complexp                                    
             '#(3.5 2 #C(1.0 0.0) #C(0.0 1.0))
             :start 2) @EV{} NIL 
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}

@subsubheading See Also:

@ref{position},
@ref{Rules about Test Functions, Section 17.2 (Rules about Test Functions)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} @term{argument} is deprecated.

@Thefunction{find-if-not} is deprecated.


@node position; position-if; position-if-not
@heading position, position-if, position-if-not (Function)
@syindex position
@cindex position
@syindex position-if
@cindex position-if
@syindex position-if-not
@cindex position-if-not
@anchor{position}


@subsubheading Syntax:

@DefunWithValues{position, item sequence @key{} from-end test test-not start end key, position}

@DefunWithValues{position-if, predicate sequence @key{} from-end start end key, position}
@DefunWithValues{position-if-not, predicate sequence @key{} from-end start end key, position}

@subsubheading Arguments and Values:

@param{item}---an @term{object}.

@param{sequence}---a @term{proper sequence}.

@param{predicate}---a @term{designator} for a @term{function} of one argument 
that returns a @term{generalized boolean}.

@param{from-end}---a @term{generalized boolean}.
@Default{@term{false}}

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{start}, @param{end}---@term{bounding index designators} of @param{sequence}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{position}---a @term{bounding index} of @param{sequence}, or @nil{}.

@subsubheading Description:

@code{position}, @code{position-if}, and @code{position-if-not} 
each search @param{sequence} for an @term{element} that @term{satisfies the test}.

The @param{position} returned is the index within @param{sequence}
of the leftmost  (if @param{from-end} is @term{true})
or of the rightmost (if @param{from-end} is @term{false})
@term{element} that @term{satisfies the test};
otherwise @nil{}@spc{}is returned.
The index returned is relative to the left-hand end of the entire @param{sequence},
regardless of the value of @term{start}, @term{end}, or @term{from-end}.

@subsubheading Examples:

@lisp
 (position #@bsl{}a "baobab" :from-end t) @EV{} 4
 (position-if #'oddp '((1) (2) (3) (4)) :start 1 :key #'car) @EV{} 2
 (position 595 '()) @EV{} NIL
 (position-if-not #'integerp '(1 2 3 4 5.0)) @EV{} 4 
@end lisp


@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}

@subsubheading See Also:

@ref{find},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} @term{argument} is deprecated.

@Thefunction{position-if-not} is deprecated.


@node search
@heading search (Function)
@syindex search
@cindex search


@subsubheading Syntax:

@DefunWithValuesNewline{search, sequence-1 sequence-2  @key{} @vtop{@hbox{from-end test test-not} @hbox{key start1 start2} @hbox{end1 end2}}, position}

@subsubheading Arguments and Values:

@param{Sequence-1}---a @term{sequence}.

@param{Sequence-2}---a @term{sequence}.

@param{from-end}---a @term{generalized boolean}.
@Default{@term{false}}

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{start1}, @param{end1}---@term{bounding index designators} of @param{sequence-1}.
@Defaults{@param{start1} and @param{end1}, @f{0} and @nil{}}

@param{start2}, @param{end2}---@term{bounding index designators} of @param{sequence-2}.
@Defaults{@param{start2} and @param{end2}, @f{0} and @nil{}}

@param{position}---a @term{bounding index} of @param{sequence-2},
or @nil{}.

@subsubheading Description:

Searches @param{sequence-2} for a subsequence that matches @param{sequence-1}.  

The implementation may choose to search @param{sequence-2} in any order;
there is no guarantee on the number of times the test is made.
For example,
when @param{start-end} is @term{true},
the @param{sequence} might actually be searched from left to right
instead of from right to left (but in either case would return
the rightmost matching subsequence). 
If the search succeeds,
@code{search} returns the offset into @param{sequence-2} 
of the first element of the leftmost or rightmost matching subsequence, 
depending on @param{from-end};
otherwise @code{search} returns @nil{}.

If @param{from-end} is @term{true}, the index of the leftmost
element of the rightmost matching subsequence is returned.

@subsubheading Examples:
@lisp
 (search "dog" "it's a dog's life") @EV{} 7
 (search '(0 1) '(2 4 6 1 3 5) :key #'oddp) @EV{} 2
@end lisp


@subsubheading See Also:

@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} @term{argument} is deprecated.


@node mismatch
@heading mismatch (Function)
@syindex mismatch
@cindex mismatch


@subsubheading Syntax:

@DefunWithValuesNewline{mismatch, sequence-1 sequence-2  @key{} from-end test test-not key start1 start2 end1 end2, position}

@subsubheading Arguments and Values:

@param{Sequence-1}---a @term{sequence}.

@param{Sequence-2}---a @term{sequence}.

@param{from-end}---a @term{generalized boolean}.
@Default{@term{false}}

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{start1}, @param{end1}---@term{bounding index designators} of @param{sequence-1}.
@Defaults{@param{start1} and @param{end1}, @f{0} and @nil{}}

@param{start2}, @param{end2}---@term{bounding index designators} of @param{sequence-2}.
@Defaults{@param{start2} and @param{end2}, @f{0} and @nil{}}

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{position}---a @term{bounding index} of @param{sequence-1},
or @nil{}.

@subsubheading Description:

The specified subsequences of         
@param{sequence-1} and @param{sequence-2} are compared element-wise.

The @param{key} argument is used for both the @param{sequence-1} and the @param{sequence-2}.

If @param{sequence-1} and @param{sequence-2} 
are of equal length and match in every element, the result is
@term{false}.  Otherwise, the result is a non-negative @term{integer},
the index within
@param{sequence-1} of the leftmost or rightmost position, depending
on @param{from-end}, at which the two
subsequences fail to match.
If one subsequence 
is shorter than and a matching prefix of the other,
the result is the index
relative to @param{sequence-1} beyond the last position tested.

If @param{from-end} is @term{true}, then one plus the index of the rightmost
position in which the @param{sequences}
differ is returned.  In effect, the subsequences
are aligned at their right-hand ends; then, the last elements are compared,
the penultimate elements, and so on.  The index returned is 
an index relative to @param{sequence-1}.                  

@subsubheading Examples:
@lisp
 (mismatch "abcd" "ABCDE" :test #'char-equal) @EV{} 4
 (mismatch '(3 2 1 1 2 3) '(1 2 3) :from-end t) @EV{} 3
 (mismatch '(1 2 3) '(2 3 4) :test-not #'eq :key #'oddp) @EV{} NIL
 (mismatch '(1 2 3 4 5 6) '(3 4 5 6 7) :start1 2 :end2 4) @EV{} NIL 
@end lisp


@subsubheading See Also:

@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

The @kwd{test-not} @term{argument} is deprecated.


@node replace
@heading replace (Function)
@syindex replace
@cindex replace


@subsubheading Syntax:

@DefunWithValues{replace, sequence-1 sequence-2 @key{} start1 end1 start2 end2, sequence-1}

@subsubheading Arguments and Values:

@param{sequence-1}---a @term{sequence}.

@param{sequence-2}---a @term{sequence}.

@param{start1}, @param{end1}---@term{bounding index designators} of @param{sequence-1}.
@Defaults{@param{start1} and @param{end1}, @f{0} and @nil{}}

@param{start2}, @param{end2}---@term{bounding index designators} of @param{sequence-2}.
@Defaults{@param{start2} and @param{end2}, @f{0} and @nil{}}

@subsubheading Description:

Destructively modifies @param{sequence-1} 
by replacing the @term{elements} of @param{subsequence-1}
@term{bounded} by @param{start1} and @param{end1}
with the @term{elements} of @param{subsequence-2} 
@term{bounded} by @param{start2} and @param{end2}. 

@param{Sequence-1} is destructively modified by copying successive
@term{elements} into it from @param{sequence-2}.
@term{Elements} of the subsequence of @param{sequence-2} 
@term{bounded} by @param{start2} and @param{end2}
are copied into the subsequence of @param{sequence-1} 
@term{bounded} by @param{start1} and @param{end1}.
If these subsequences are not of the same length,
then the shorter length determines how many @term{elements} are copied;
the extra @term{elements} near the end of the longer subsequence 
are not involved in the operation.
The number of elements copied can be expressed as:

@lisp
 (min (- @i{end1} @i{start1}) (- @i{end2} @i{start2}))
@end lisp


If @param{sequence-1} and @param{sequence-2} are the @term{same} @term{object}
and the region being modified overlaps the region being copied
from, then it is as if the entire source region were copied to another
place and only then copied back into the target region.
However, if @param{sequence-1} and @param{sequence-2} are not the same,
but the region being modified overlaps the region being copied from
(perhaps because of shared list structure or displaced @term{arrays}),
then after the @code{replace} operation
the subsequence of @param{sequence-1} being modified will have
unpredictable contents.
It is an error if the elements of @param{sequence-2} are not of a 
@term{type} that can be stored into @param{sequence-1}.

@subsubheading Examples:
@lisp
 (replace "abcdefghij" "0123456789" :start1 4 :end1 7 :start2 4) 
@EV{} "abcd456hij"
 (setq lst "012345678") @EV{} "012345678"
 (replace lst lst :start1 2 :start2 0) @EV{} "010123456"
 lst @EV{} "010123456"
@end lisp


@subsubheading Side Effects:

The @param{sequence-1} is modified.

@subsubheading See Also:

@ref{fill}


@node substitute; substitute-if; substitute-if-not; nsubstitute; nsubstitute-+
@heading substitute, substitute-if, substitute-if-not, nsubstitute, nsubstitute-if, nsubstitute-if-not (Function)
@syindex substitute
@cindex substitute
@syindex substitute-if
@cindex substitute-if
@syindex substitute-if-not
@cindex substitute-if-not
@syindex nsubstitute
@cindex nsubstitute
@syindex nsubstitute-if
@cindex nsubstitute-if
@syindex nsubstitute-if-not
@cindex nsubstitute-if-not
@anchor{substitute}
@anchor{nsubstitute}


@subsubheading Syntax:

@DefunWithValuesNewline{substitute, newitem  olditem  sequence  @key{} @vtop{@hbox{from-end test} @hbox{test-not start} @hbox{end count key}}, result-sequence}

@DefunWithValuesNewline{substitute-if, newitem predicate sequence @key{} from-end start end count key, result-sequence}

@DefunWithValuesNewline{substitute-if-not, newitem predicate sequence @key{} from-end start end count key, result-sequence}

@DefunWithValuesNewline{nsubstitute, newitem  olditem  sequence @key{} from-end test test-not start end count key, sequence}

@DefunWithValuesNewline{nsubstitute-if, newitem predicate sequence @key{} from-end start end count key, sequence}

@DefunWithValuesNewline{nsubstitute-if-not, newitem predicate sequence @key{} from-end start end count key, sequence}

@subsubheading Arguments and Values:

@param{newitem}---an @term{object}.

@param{olditem}---an @term{object}.

@param{sequence}---a @term{proper sequence}.

@param{predicate}---a @term{designator} for a @term{function} of one @term{argument}
that returns a @term{generalized boolean}.

@param{from-end}---a @term{generalized boolean}.
@Default{@term{false}}

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{start}, @param{end}---@term{bounding index designators} of @param{sequence}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{count}---an @term{integer} or @nil{}.
@Default{@nil{}}

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{result-sequence}---a @term{sequence}.

@subsubheading Description:

@code{substitute}, @code{substitute-if}, and @code{substitute-if-not}
return a 
copy of @param{sequence} in which each @term{element}
that @term{satisfies the test} has been replaced with @param{newitem}.

@code{nsubstitute}, @code{nsubstitute-if}, and @code{nsubstitute-if-not}
are like @code{substitute}, @code{substitute-if}, and
@code{substitute-if-not} respectively, but they may modify 
@param{sequence}.

If 
@param{sequence} is a @term{vector}, the result is a
@term{vector} that has the same
@term{actual array element type} as @param{sequence}.
If @param{sequence} is a @term{list}, the result is a 
@term{list}. 

@param{Count}, if supplied, limits the number of elements
altered; if more than @param{count} @term{elements} @term{satisfy the test},
then of these @term{elements} only the leftmost or rightmost, depending
on @param{from-end}, are replaced,
as many as specified by @param{count}.
If @param{count} is supplied and negative, 
the behavior is as if zero had been supplied instead.
If @param{count} is @nil{}, all matching items are affected.

Supplying a @param{from-end} of @term{true} matters only when the
@param{count} is provided (and @term{non-nil});
in that case,
only the rightmost @param{count} @term{elements} @term{satisfying the test} are removed
(instead of the leftmost).

@param{predicate}, @param{test}, and @param{test-not} 
might be called more than once for each @term{sequence} @term{element},
and their side effects can happen in any order.         

The result of all these functions is a @term{sequence}
of the same @term{type} as @param{sequence}
that has the same elements except that those in the subsequence
@term{bounded} by @param{start} and @param{end} and @term{satisfying the test} 
have been replaced by @param{newitem}.  

@code{substitute}, @code{substitute-if}, and @code{substitute-if-not}
return a @param{sequence} which can share with @param{sequence} 
or may be @term{identical} to the input @param{sequence}
if no elements need to be changed.

@code{nsubstitute} and  @code{nsubstitute-if} are required to 
@code{setf} any @code{car} (if @param{sequence} is a @term{list}) 
or @code{aref} (if @param{sequence} is a @term{vector})
of @param{sequence} that is required to be replaced with @param{newitem}.
If @param{sequence} is a @term{list},
none of the @term{cdrs} of the top-level @term{list} can be modified.  

@subsubheading Examples:

@lisp
 (substitute #@bsl{}. #@bsl{}SPACE "0 2 4 6") @EV{} "0.2.4.6"
 (substitute 9 4 '(1 2 4 1 3 4 5)) @EV{} (1 2 9 1 3 9 5)
 (substitute 9 4 '(1 2 4 1 3 4 5) :count 1) @EV{} (1 2 9 1 3 4 5)
 (substitute 9 4 '(1 2 4 1 3 4 5) :count 1 :from-end t)
@EV{} (1 2 4 1 3 9 5)
 (substitute 9 3 '(1 2 4 1 3 4 5) :test #'>) @EV{} (9 9 4 9 3 4 5)

 (substitute-if 0 #'evenp '((1) (2) (3) (4)) :start 2 :key #'car)
@EV{} ((1) (2) (3) 0)
 (substitute-if 9 #'oddp '(1 2 4 1 3 4 5)) @EV{} (9 2 4 9 9 4 9)
 (substitute-if 9 #'evenp '(1 2 4 1 3 4 5) :count 1 :from-end t)
@EV{} (1 2 4 1 3 9 5)

 (setq some-things (list 'a 'car 'b 'cdr 'c)) @EV{} (A CAR B CDR C)
 (nsubstitute-if "function was here" #'fboundp some-things
                 :count 1 :from-end t) @EV{} (A CAR B "function was here" C)
 some-things @EV{} (A CAR B "function was here" C)
 (setq alpha-tester (copy-seq "ab ")) @EV{} "ab "
 (nsubstitute-if-not #@bsl{}z #'alpha-char-p alpha-tester) @EV{} "abz"
 alpha-tester @EV{} "abz"
@end lisp


@subsubheading Side Effects:

@code{nsubstitute}, @code{nsubstitute-if}, and @code{nsubstitute-if-not}
modify @param{sequence}.

@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}

@subsubheading See Also:

@ref{subst},
@ref{nsubst},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

If @param{sequence} is a @term{vector},
the result might or might not be simple, 
and might or might not be @term{identical} to @param{sequence}.

The @kwd{test-not} @term{argument} is deprecated.

The functions @code{substitute-if-not} and @code{nsubstitute-if-not} are deprecated.

@code{nsubstitute} and @code{nsubstitute-if} can be used 
in for-effect-only positions in code.

Because the side-effecting variants (@eg{} @code{nsubstitute})
potentially change the path that is being traversed, their effects in
the presence of shared or circular structure may vary in surprising ways when
compared to their non-side-effecting alternatives.  To see this,
consider the following side-effect behavior, which might be exhibited by
some implementations:

@lisp
 (defun test-it (fn)
   (let ((x (cons 'b nil)))
     (rplacd x x)
     (funcall fn 'a 'b x :count 1)))
 (test-it #'substitute) @EV{} (A . #1=(B . #1#))
 (test-it #'nsubstitute) @EV{} (A . #1#)
@end lisp



@node concatenate
@heading concatenate (Function)
@syindex concatenate
@cindex concatenate


@subsubheading Syntax:

@DefunWithValues{concatenate, result-type @rest{} sequences, result-sequence}

@subsubheading Arguments and Values:

@param{result-type}---a @code{sequence} @term{type specifier}.

@param{sequences}---a @term{sequence}.

@param{result-sequence}---a @term{proper sequence} of @term{type} @param{result-type}.

@subsubheading Description:

@code{concatenate} returns a @term{sequence} that contains 
all the individual elements of all the @param{sequences} in the order 
that they are supplied.
The @term{sequence} is of type @param{result-type}, 
which must be a @subtypeof{sequence}.

All of the @param{sequences} are copied from; the result
does not share any structure with any of the @param{sequences}.
Therefore, if only one @param{sequence} is provided
and it is of type @param{result-type},
@code{concatenate} is required to copy @param{sequence} rather than simply
returning it.  

It is an error if any element of the @param{sequences} cannot be an
element of the @term{sequence} result.
@reviewer{Barmar: Should signal?}

If the @param{result-type} is a @term{subtype} of @code{list},
the result will be a @term{list}.

If the @param{result-type} is a @term{subtype} of @code{vector},
then if the implementation can determine the element type specified
for the @param{result-type}, the element type of the resulting array 
is the result of @term{upgrading} that element type; or, if the
implementation can determine that the element type is unspecified (or @f{*}),
the element type of the resulting array is @code{t};
otherwise, an error is signaled.

@subsubheading Examples:

@lisp
(concatenate 'string "all" " " "together" " " "now") @EV{} "all together now"
(concatenate 'list "ABC" '(d e f) #(1 2 3) #*1011)
@EV{} (#@bsl{}A #@bsl{}B #@bsl{}C D E F 1 2 3 1 0 1 1)
(concatenate 'list) @EV{} NIL
@end lisp


@lisp
  (concatenate '(vector * 2) "a" "bc") should signal an error
@end lisp


@subsubheading Exceptional Situations:

An error is signaled if the @param{result-type} is neither
a @term{recognizable subtype} of @code{list},
nor a @term{recognizable subtype} of @code{vector}.

An error @oftype{type-error} should be signaled if @param{result-type} 
specifies the number of elements and the sum of @param{sequences}
is different from that number.

@subsubheading See Also:

@ref{append}


@node merge
@heading merge (Function)
@syindex merge
@cindex merge


@subsubheading Syntax:

@DefunWithValues{merge, result-type sequence-1 sequence-2 predicate @key{} key, result-sequence}

@subsubheading Arguments and Values:

@param{result-type}---a @code{sequence} @term{type specifier}.

@param{sequence-1}---a @term{sequence}.

@param{sequence-2}---a @term{sequence}.

@param{predicate}---a @term{designator} for
a @term{function} of two arguments that returns a @term{generalized boolean}.

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{result-sequence}---a @term{proper sequence} of @term{type} @param{result-type}.

@subsubheading Description:

Destructively merges @param{sequence-1} with @param{sequence-2} according
to an order determined by the @param{predicate}.  @code{merge} determines
the relationship between two elements by giving keys extracted from the
sequence elements to the @param{predicate}.

The first argument to the @param{predicate} function is an element of
@param{sequence-1} as returned by the @param{key} (if supplied); 
the second argument is an element of @param{sequence-2} as returned by 
the @param{key} (if supplied). 
@param{Predicate} should return @term{true} if and only if its first 
argument is strictly less than the second (in some appropriate sense). 
If the first argument is greater than or equal to the second
(in the appropriate sense), then @param{predicate} should return @term{false}.
@code{merge}
considers two elements @f{x} and @f{y} to be equal if
@f{(funcall predicate x y)} and
@f{(funcall predicate y x)} both @term{yield} @term{false}.

The argument to the @param{key} is the @param{sequence} element.
Typically, the return value of the @param{key} 
becomes the argument to @param{predicate}.
If @param{key} is not supplied or @nil{}, the sequence element itself is used.
The @param{key} may be executed more than once for each @term{sequence} @term{element},
and its side effects may occur in any order.

If @param{key} and @param{predicate} return, then the merging operation 
will terminate.  The result of merging two @term{sequences} @f{x} and @f{y}
is a new @term{sequence} of type @param{result-type} @f{z}, 
such that the length of @f{z} is the sum of the lengths of @f{x}
and @f{y}, and @f{z} contains all the elements of @f{x} and @f{y}.
If @f{x1} and @f{x2} are two elements of @f{x}, and @f{x1} precedes
@f{x2} in @f{x}, then @f{x1} precedes @f{x2} in @f{z}, and similarly for
elements of @f{y}.  In short, @f{z} is an interleaving of @f{x} and @f{y}.

If @f{x} and @f{y} were correctly sorted according to the
@param{predicate}, then @f{z} will also be correctly sorted.
If @f{x} or @f{y} is not so sorted, then @f{z} will not be sorted,
but will nevertheless be an interleaving of @f{x} and @f{y}.

The merging operation is guaranteed stable;
if two or more elements are considered equal by the @param{predicate}, 
then the elements from @param{sequence-1} will
precede those from @param{sequence-2} in the result.

@param{sequence-1} and/or @param{sequence-2} may be destroyed.

If the @param{result-type} is a @term{subtype} of @code{list},
the result will be a @term{list}.

If the @param{result-type} is a @term{subtype} of @code{vector},
then if the implementation can determine the element type specified
for the @param{result-type}, the element type of the resulting array 
is the result of @term{upgrading} that element type; or, if the
implementation can determine that the element type is unspecified (or @f{*}),
the element type of the resulting array is @code{t};
otherwise, an error is signaled.

@subsubheading Examples:
@lisp
 (setq test1 (list 1 3 4 6 7))
 (setq test2 (list 2 5 8))
 (merge 'list test1 test2 #'<) @EV{} (1 2 3 4 5 6 7 8)
 (setq test1 (copy-seq "BOY"))
 (setq test2 (copy-seq :nosy"))
 (merge 'string test1 test2 #'char-lessp) @EV{} "BnOosYy"
 (setq test1 (vector ((red . 1) (blue . 4))))
 (setq test2 (vector ((yellow . 2) (green . 7))))
 (merge 'vector test1 test2 #'< :key #'cdr) 
@EV{} #((RED . 1) (YELLOW . 2) (BLUE . 4) (GREEN . 7)) 
@end lisp

@lisp
 (merge '(vector * 4) '(1 5) '(2 4 6) #'<) should signal an error
@end lisp


@subsubheading Exceptional Situations:

An error must be signaled if the @param{result-type} is neither
a @term{recognizable subtype} of @code{list},
nor a @term{recognizable subtype} of @code{vector}.

An error @oftype{type-error} should be signaled
if @param{result-type} specifies the number of elements 
and the sum of the lengths of @param{sequence-1} and @param{sequence-2} 
is different from that number.

@subsubheading See Also:

@ref{sort},
@ref{stable-sort},
@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}


@node remove; remove-if; remove-if-not; delete; delete-if; delete-if-not
@heading remove, remove-if, remove-if-not, delete, delete-if, delete-if-not (Function)
@syindex remove
@cindex remove
@syindex remove-if
@cindex remove-if
@syindex remove-if-not
@cindex remove-if-not
@syindex delete
@cindex delete
@syindex delete-if
@cindex delete-if
@syindex delete-if-not
@cindex delete-if-not


@subsubheading Syntax:

@DefunWithValues{remove, item sequence @key{} from-end test test-not start end count key, result-sequence}

@DefunWithValues{remove-if, test sequence @key{} from-end start end count key, result-sequence}

@DefunWithValues{remove-if-not, test sequence @key{} from-end start end count key, result-sequence}

@DefunWithValues{delete, item sequence @key{} from-end test test-not start end count key, result-sequence}

@DefunWithValues{delete-if, test sequence @key{} from-end start end count key, result-sequence}

@DefunWithValues{delete-if-not, test sequence @key{} from-end start end count key, result-sequence}

@subsubheading Arguments and Values:

@param{item}---an @term{object}.

@param{sequence}---a @term{proper sequence}.

@param{test}---a @term{designator} for a @term{function} 
of one @term{argument} that returns a @term{generalized boolean}.

@param{from-end}---a @term{generalized boolean}.
@Default{@term{false}}

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{start}, @param{end}---@term{bounding index designators} of @param{sequence}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{count}---an @term{integer} or @nil{}.
@Default{@nil{}}

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{result-sequence}---a @term{sequence}.

@subsubheading Description:

@code{remove}, @code{remove-if}, and @code{remove-if-not}
return a @param{sequence} from which 
the elements that @term{satisfy the test} 
have been removed.  

@code{delete}, @code{delete-if}, and @code{delete-if-not}
are like @code{remove}, @code{remove-if}, and
@code{remove-if-not} respectively, 
but they may modify @param{sequence}.

If @param{sequence} is a @term{vector}, the result is a
@term{vector} that has the same
@term{actual array element type} as @param{sequence}.
If @param{sequence} is a @term{list}, the result is a @term{list}. 

Supplying a @param{from-end} of @term{true} matters only when the
@param{count} is provided; in that case only the rightmost @param{count} elements 
@term{satisfying the test} are deleted.

@param{Count}, if supplied, limits the number of elements
removed or deleted; if more than @param{count} elements @term{satisfy the test},
then of these elements only the leftmost or rightmost, depending on
@param{from-end},
are deleted or removed,
as many as specified by @param{count}.
If @param{count} is supplied and negative, 
the behavior is as if zero had been supplied instead.
If @param{count} is @nil{}, all matching items are affected.

For all these functions,
elements 
not removed or deleted occur in the same order in the result
as they did in @param{sequence}.

@code{remove}, @code{remove-if}, @code{remove-if-not} return
a @term{sequence}
of the same @term{type} as @param{sequence}
that has the same elements except that those in the subsequence
@term{bounded} by @param{start} and @param{end} and @term{satisfying the test}
have been removed.  
This is a non-destructive operation. If any
elements need to be removed, the result will be a copy.
The result of @code{remove} may share
with @param{sequence}; 
the result may be @term{identical} to the input @param{sequence}
if no elements need to be removed.

@code{delete}, @code{delete-if}, and @code{delete-if-not}
return a @term{sequence} 
of the same @term{type} as @param{sequence}
that has the same elements except that those in the subsequence
@term{bounded} by @param{start} and @param{end} and @term{satisfying the test}
have been deleted. 
@param{Sequence} may be destroyed and used to construct
the result; however, the result might or might not be @term{identical} 
to @param{sequence}.

@code{delete}, when @param{sequence} is a @term{list}, is permitted to 
@code{setf} any part, @code{car} or @code{cdr}, of the
top-level list structure in that @param{sequence}.
When @param{sequence} is a @term{vector},  @code{delete} is 
permitted to change the dimensions of the @term{vector} 
and to slide its elements into new positions without
permuting them to produce the resulting @term{vector}.

@code{delete-if} is constrained to behave exactly as follows:

@lisp
 (delete nil @i{sequence}
             :test #'(lambda (ignore @i{item}) (funcall @i{test} @i{item}))
             ...)
@end lisp



@subsubheading Examples:
@lisp
 (remove 4 '(1 3 4 5 9)) @EV{} (1 3 5 9)
 (remove 4 '(1 2 4 1 3 4 5)) @EV{} (1 2 1 3 5)
 (remove 4 '(1 2 4 1 3 4 5) :count 1) @EV{} (1 2 1 3 4 5)
 (remove 4 '(1 2 4 1 3 4 5) :count 1 :from-end t) @EV{} (1 2 4 1 3 5)
 (remove 3 '(1 2 4 1 3 4 5) :test #'>) @EV{} (4 3 4 5)
 (setq lst '(list of four elements)) @EV{} (LIST OF FOUR ELEMENTS)
 (setq lst2 (copy-seq lst)) @EV{} (LIST OF FOUR ELEMENTS)
 (setq lst3 (delete 'four lst)) @EV{} (LIST OF ELEMENTS)
 (equal lst lst2) @EV{} @term{false}
 (remove-if #'oddp '(1 2 4 1 3 4 5)) @EV{} (2 4 4)
 (remove-if #'evenp '(1 2 4 1 3 4 5) :count 1 :from-end t) 
@EV{} (1 2 4 1 3 5)
 (remove-if-not #'evenp '(1 2 3 4 5 6 7 8 9) :count 2 :from-end t)
@EV{} (1 2 3 4 5 6 8)
 (setq tester (list 1 2 4 1 3 4 5)) @EV{} (1 2 4 1 3 4 5)
 (delete 4 tester) @EV{} (1 2 1 3 5)
 (setq tester (list 1 2 4 1 3 4 5)) @EV{} (1 2 4 1 3 4 5)
 (delete 4 tester :count 1) @EV{} (1 2 1 3 4 5)
 (setq tester (list 1 2 4 1 3 4 5)) @EV{} (1 2 4 1 3 4 5)
 (delete 4 tester :count 1 :from-end t) @EV{} (1 2 4 1 3 5)
 (setq tester (list 1 2 4 1 3 4 5)) @EV{} (1 2 4 1 3 4 5)
 (delete 3 tester :test #'>) @EV{} (4 3 4 5)
 (setq tester (list 1 2 4 1 3 4 5)) @EV{} (1 2 4 1 3 4 5)
 (delete-if #'oddp tester) @EV{} (2 4 4)
 (setq tester (list 1 2 4 1 3 4 5)) @EV{} (1 2 4 1 3 4 5)
 (delete-if #'evenp tester :count 1 :from-end t) @EV{} (1 2 4 1 3 5)    
 (setq tester (list 1 2 3 4 5 6)) @EV{} (1 2 3 4 5 6) 
 (delete-if #'evenp tester) @EV{} (1 3 5) 
 tester @EV{} @term{implementation-dependent}
@end lisp


@lisp
 (setq foo (list 'a 'b 'c)) @EV{} (A B C)
 (setq bar (cdr foo)) @EV{} (B C)
 (setq foo (delete 'b foo)) @EV{} (A C)
 bar @EV{} ((C)) or ...
 (eq (cdr foo) (car bar)) @EV{} T or ...
@end lisp


@subsubheading Side Effects:

For @code{delete}, @code{delete-if}, and @code{delete-if-not},
@param{sequence} may be destroyed and used to construct the result.

@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}

@subsubheading See Also:

@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

If @param{sequence} is a @term{vector},
the result might or might not be simple, 
and might or might not be @term{identical} to @param{sequence}.

The @kwd{test-not} @term{argument} is deprecated.

The functions @code{delete-if-not} and @code{remove-if-not} are deprecated.


@node remove-duplicates; delete-duplicates
@heading remove-duplicates, delete-duplicates (Function)
@syindex remove-duplicates
@cindex remove-duplicates
@syindex delete-duplicates
@cindex delete-duplicates


@subsubheading Syntax:

@DefunWithValuesNewline{remove-duplicates, sequence @key{} @vtop{@hbox{from-end test test-not} @hbox{start end key}}, result-sequence}

@DefunWithValuesNewline{delete-duplicates, sequence @key{}  @vtop{@hbox{from-end test test-not} @hbox{start end key}}, result-sequence}

@subsubheading Arguments and Values:

@param{sequence}---a @term{proper sequence}.

@param{from-end}---a @term{generalized boolean}.
@Default{@term{false}}

@param{test}---a @term{designator} for a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{test-not}---a @term{designator} for 
a @term{function} of two @term{arguments}
that returns a @term{generalized boolean}.

@param{start}, @param{end}---@term{bounding index designators} of @param{sequence}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{key}---a @term{designator} for a @term{function} of one argument,
or @nil{}.

@param{result-sequence}---a @term{sequence}.

@subsubheading Description:

@code{remove-duplicates} returns a modified copy of @param{sequence} 
from which any element that matches another element occurring in
@param{sequence} has been removed. 

If @param{sequence} is a @term{vector}, the result is a
@term{vector} that has the same
@term{actual array element type} as @param{sequence}.
If @param{sequence} is a @term{list}, the result is a @term{list}. 

@code{delete-duplicates} is like @code{remove-duplicates},
but @code{delete-duplicates} may modify @param{sequence}.

The elements of @param{sequence} are compared @term{pairwise}, and if any two match,
then the one occurring earlier in @param{sequence}
is discarded, unless @param{from-end} is @term{true}, in which case the one
later in @param{sequence} is discarded.

@code{remove-duplicates} and @code{delete-duplicates} 
return a @term{sequence} of the same @term{type} as 
@param{sequence} with enough elements removed so that no two of the remaining
elements match.  The order of the elements remaining in the result
is the same as the order in which they appear in @param{sequence}.

@code{remove-duplicates} returns a @term{sequence}
that may share
with @param{sequence} or may be @term{identical} to @param{sequence}
if no elements need to be removed.

@code{delete-duplicates}, when @param{sequence} is a @term{list},
is permitted to @code{setf} any part, @code{car} or @code{cdr},
of the top-level list structure in that @param{sequence}.
When @param{sequence} is a @term{vector}, @code{delete-duplicates} 
is permitted to change the dimensions of the @term{vector} 
and to slide its elements into new positions without
permuting them to produce the resulting @term{vector}.

@subsubheading Examples:

@lisp
 (remove-duplicates "aBcDAbCd" :test #'char-equal :from-end t) @EV{} "aBcD"
 (remove-duplicates '(a b c b d d e)) @EV{} (A C B D E)
 (remove-duplicates '(a b c b d d e) :from-end t) @EV{} (A B C D E)
 (remove-duplicates '((foo #@bsl{}a) (bar #@bsl{}%) (baz #@bsl{}A))
     :test #'char-equal :key #'cadr) @EV{} ((BAR #@bsl{}%) (BAZ #@bsl{}A))
 (remove-duplicates '((foo #@bsl{}a) (bar #@bsl{}%) (baz #@bsl{}A)) 
     :test #'char-equal :key #'cadr :from-end t) @EV{} ((FOO #@bsl{}a) (BAR #@bsl{}%))
 (setq tester (list 0 1 2 3 4 5 6))
 (delete-duplicates tester :key #'oddp :start 1 :end 6) @EV{} (0 4 5 6)
@end lisp


@subsubheading Side Effects:

@code{delete-duplicates} might destructively modify @param{sequence}.

@subsubheading Exceptional Situations:

@Shouldchecktype{sequence, a @term{proper sequence}}

@subsubheading See Also:

@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}

@subsubheading Notes:

If @param{sequence} is a @term{vector},
the result might or might not be simple, 
and might or might not be @term{identical} to @param{sequence}.

The @kwd{test-not} @term{argument} is deprecated.

These functions are useful for converting @param{sequence} into a canonical
form suitable for representing a set.




@node Hash Tables
@chapter Hash Tables
@menu
* Hash Table Concepts::

Dictionary

* hash-table::
* make-hash-table::
* hash-table-p::
* hash-table-count::
* hash-table-rehash-size::
* hash-table-rehash-threshold::
* hash-table-size::
* hash-table-test::
* gethash::
* remhash::
* maphash::
* with-hash-table-iterator::
* clrhash::
* sxhash::
@end menu

@node Hash Table Concepts
@section Hash Table Concepts

@menu
* Hash-Table Operations::
* Modifying Hash Table Keys::
@end menu
@node Hash-Table Operations
@subsection Hash-Table Operations

@Thenextfigure{}@spc{}lists some @term{defined names} that are applicable 
to @term{hash tables}.  The following rules apply to @term{hash tables}.


@itemize --
@item
A @term{hash table} can only associate one value with a given
key. If an attempt is made to add a second value for a given key,
the second value will replace the first.
Thus, adding a value to a @term{hash table} is a destructive operation;
the @term{hash table} is modified.  

@item
There are four kinds of @term{hash tables}:
those whose keys are compared with @code{eq},
those whose keys are compared with @code{eql},
those whose keys are compared with @code{equal}, and
those whose keys are compared with @code{equalp}.  

@item
@term{Hash tables} are created by @code{make-hash-table}. 
@code{gethash} is used to look up a key and find the associated value.
New entries are added to @term{hash tables} using @code{setf} with @code{gethash}.
@code{remhash} is used to remove an entry.
For example:

@lisp
 (setq a (make-hash-table)) @EV{} #<HASH-TABLE EQL 0/120 32536573>
 (setf (gethash 'color a) 'brown) @EV{} BROWN
 (setf (gethash 'name a) 'fred) @EV{} FRED
 (gethash 'color a) @EV{} BROWN, @term{true}
 (gethash 'name a) @EV{} FRED, @term{true}
 (gethash 'pointy a) @EV{} NIL, @term{false}
@end lisp


In this example, the symbols @f{color} and @f{name} are being used as
keys, and the symbols @f{brown} and @f{fred} are being used as the
associated values.  The @term{hash table} 
has two items in it, one of which                              
associates from @f{color} to @f{brown}, and the other of which
associates from @f{name} to @f{fred}.

@item
A key or a value may be any @term{object}.


@item
The existence of an entry in the @term{hash table} can be determined
from the @term{secondary value} returned by @code{gethash}.
@end itemize



@float Figure,fig18.1
@cartouche
@multitable{hash-table-count}{make-hash-table}{remhash}

@item clrhash @tab hash-table-p @tab remhash
@item gethash @tab make-hash-table @tab sxhash
@item hash-table-count @tab maphash @tab 
@end multitable
@end cartouche
@caption{Hash-table defined names}
@end float



@node Modifying Hash Table Keys
@subsection Modifying Hash Table Keys


The function supplied as the @kwd{test} argument to @code{make-hash-table}
specifies the `equivalence test' for the @term{hash table} it creates.

An @term{object} is `visibly modified' with regard to an equivalence test
if there exists some set of @term{objects} (or potential @term{objects})
which are equivalent to the @term{object} before the modification but are
no longer equivalent afterwards.

If an @term{object} @mat{O@sub1{}} is used as a key in a @term{hash table} @mat{H}
and is then visibly modified with regard to the equivalence test of @mat{H},
then the consequences are unspecified if @mat{O@sub1{}}, or any @term{object}
@mat{O@sub2{}} equivalent to @mat{O@sub1{}} under the equivalence test (either before
or after the modification), is used as a key in further operations on @mat{H}.
The consequences of using @mat{O@sub1{}} as a key are unspecified 
even if @mat{O@sub1{}} is visibly modified 
and then later modified again in such a way as 
to undo the visible modification.

Following are specifications of the modifications which are visible to the
equivalence tests which must be supported by @term{hash tables}.  The modifications
are described in terms of modification of components, and are defined
recursively.  Visible modifications of components of the @term{object} are 
visible modifications of the @term{object}.

@subsubsection Visible Modification of Objects with respect to EQ and EQL
@anchor{VisModEQL}

No @term{standardized} @term{function} is provided that is capable of visibly
modifying an @term{object} with regard to @code{eq} or @code{eql}.


@subsubsection Visible Modification of Objects with respect to EQUAL
@anchor{VisModEQUAL}

As a consequence of the behavior for @code{equal},
the rules for visible modification of @term{objects} not explicitly mentioned in this
section are inherited from those in @ref{VisModEQL, Section 18.1.2.1 (Visible Modification of Objects with respect to EQ and EQL)}.

@unnumberedsubsubsec 18.1.2.2.1 Visible Modification of Conses with respect to EQUAL


Any visible change to the @term{car} or the @term{cdr} of a @term{cons}
is considered a visible modification with regard to @code{equal}.


@unnumberedsubsubsec 18.1.2.2.2 Visible Modification of Bit Vectors and Strings with respect to EQUAL


For a @term{vector} @oftype{bit-vector} or @oftype{string}, any visible change
to an @term{active} @term{element} of the @term{vector},
or to the @term{length} of the @term{vector} (if it is @term{actually adjustable} 
or has a @term{fill pointer})
is considered a visible modification with regard to @code{equal}.



@subsubsection Visible Modification of Objects with respect to EQUALP

As a consequence of the behavior for @code{equalp},
the rules for visible modification of @term{objects} not explicitly mentioned in this
section are inherited from those in @ref{VisModEQUAL, Section 18.1.2.2 (Visible Modification of Objects with respect to EQUAL)}.

@unnumberedsubsubsec 18.1.2.3.1 Visible Modification of Structures with respect to EQUALP


Any visible change to a @term{slot} of a @term{structure}
is considered a visible modification with regard to @code{equalp}.


@unnumberedsubsubsec 18.1.2.3.2 Visible Modification of Arrays with respect to EQUALP


In an @term{array}, any visible change
to an @term{active} @term{element},
to the @term{fill pointer} (if the @term{array} can and does have one),
or to the @term{dimensions} (if the @term{array} is @term{actually adjustable})
is considered a visible modification with regard to @code{equalp}.


@unnumberedsubsubsec 18.1.2.3.3 Visible Modification of Hash Tables with respect to EQUALP


In a @term{hash table}, any visible change
to the count of entries in the @term{hash table},
to the keys,
or to the values associated with the keys
is considered a visible modification with regard to @code{equalp}.

Note that the visibility of modifications to the keys depends on the equivalence test
of the @term{hash table}, not on the specification of @code{equalp}.



@subsubsection Visible Modifications by Language Extensions

@term{Implementations} that extend the language by providing additional mutator
functions (or additional behavior for existing mutator functions) must
document how the use of these extensions interacts with equivalence tests and
@term{hash table} searches.

@term{Implementations} that extend the language by defining additional acceptable
equivalence tests for @term{hash tables} (allowing additional values for the @kwd{test}
argument to @code{make-hash-table}) must document the visible components of these
tests.




@node hash-table
@heading hash-table (System Class)
@syindex hash-table
@cindex hash-table


@subsubheading Class Precedence List:
@code{hash-table},
@code{t}

@subsubheading Description:

@term{Hash tables} provide a way of mapping any @term{object} (a @term{key})
to an associated @term{object} (a @term{value}).

@subsubheading See Also:

@ref{Hash Table Concepts, Section 18.1 (Hash Table Concepts)},
@ref{PrintingOtherObjects, Section 22.1.3.13 (Printing Other Objects)}

@subsubheading Notes:

The intent is that this mapping be implemented by a hashing mechanism,
such as that described in Section 6.4 ``Hashing'' of @KnuthVolThree{}
(pp506-549).  In spite of this intent, no @term{conforming implementation} 
is required to use any particular technique to implement the mapping.


@node make-hash-table
@heading make-hash-table (Function)
@syindex make-hash-table
@cindex make-hash-table


@subsubheading Syntax:

@DefunWithValues{make-hash-table, @key{} test size rehash-size rehash-threshold, hash-table}

@subsubheading Arguments and Values:

@param{test}---a @term{designator} for one of the @term{functions}
@code{eq},
@code{eql},
@code{equal}, or
@code{equalp}.
@Default{@code{eql}}

@param{size}---a non-negative @term{integer}.
@Default{@term{implementation-dependent}}

@param{rehash-size}---a @term{real} of @term{type} @f{(or (integer 1 *) (float (1.0) *))}.
@Default{@term{implementation-dependent}}

@param{rehash-threshold}---a @term{real} of @term{type} @f{(real 0 1)}.
@Default{@term{implementation-dependent}}

@param{hash-table}---a @term{hash table}.

@subsubheading Description:

Creates and returns a new @term{hash table}.

@param{test} determines how @term{keys} are compared.
An @term{object} is said to be present in the @param{hash-table}
if that @term{object} is the @term{same} under the @term{test} 
as the @term{key} for some entry in the @param{hash-table}.

@param{size} is a hint to the @term{implementation} about how much initial space
to allocate in the @param{hash-table}.
This information, taken together with the @param{rehash-threshold}, controls
the approximate number of entries which it should be possible
to insert before the table has to grow.
The actual size might be rounded up from @param{size} to the next `good' size;
for example, some @term{implementations} might round to the next prime number.

@param{rehash-size} specifies a minimum amount to increase the size of the 
@param{hash-table} when it becomes full
enough to require rehashing; 
see @param{rehash-theshold} below.
If @param{rehash-size} is an @term{integer},
the expected growth rate for the table is additive and
the @term{integer} is the number of entries to add;
if it is a @term{float},
the expected growth rate for the table is multiplicative and
the @term{float} is the ratio of the new size to the old size.
As with @param{size}, the actual size of the increase might be rounded up.

@param{rehash-threshold} specifies how full the @param{hash-table} can get 
before it must grow.
It specifies the maximum desired hash-table occupancy level.

The @term{values} of @param{rehash-size} and @param{rehash-threshold} do not constrain the
@term{implementation} to use any particular method for computing when and by how much
the size of @param{hash-table} should be enlarged.  Such decisions are   
@term{implementation-dependent}, and these @term{values} only hints
from the @term{programmer} to the @term{implementation}, and the @term{implementation}
is permitted to ignore them.

@subsubheading Examples:

@lisp
 (setq table (make-hash-table)) @EV{} #<HASH-TABLE EQL 0/120 46142754>
 (setf (gethash "one" table) 1) @EV{} 1
 (gethash "one" table) @EV{} NIL, @term{false}
 (setq table (make-hash-table :test 'equal)) @EV{} #<HASH-TABLE EQUAL 0/139 46145547>
 (setf (gethash "one" table) 1) @EV{} 1
 (gethash "one" table) @EV{} 1, T
 (make-hash-table :rehash-size 1.5 :rehash-threshold 0.7) 
@EV{} #<HASH-TABLE EQL 0/120 46156620>
@end lisp



@subsubheading See Also:

@ref{gethash},
@ref{hash-table}


@node hash-table-p
@heading hash-table-p (Function)
@syindex hash-table-p
@cindex hash-table-p


@subsubheading Syntax:

@DefunWithValues{hash-table-p, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, hash-table}

@subsubheading Examples:

@lisp
 (setq table (make-hash-table)) @EV{} #<HASH-TABLE EQL 0/120 32511220>
 (hash-table-p table) @EV{} @term{true}
 (hash-table-p 37) @EV{} @term{false}
 (hash-table-p '((a . 1) (b . 2))) @EV{} @term{false}
@end lisp


@subsubheading Notes:

@lisp
 (hash-table-p @param{object}) @EQ{} (typep @param{object} 'hash-table)
@end lisp



@node hash-table-count
@heading hash-table-count (Function)
@syindex hash-table-count
@cindex hash-table-count


@subsubheading Syntax:

@DefunWithValues{hash-table-count, hash-table, count}

@subsubheading Arguments and Values:

@param{hash-table}---a @term{hash table}.

@param{count}---a non-negative @term{integer}.

@subsubheading Description:

Returns the number of entries in the @param{hash-table}.
If @param{hash-table} has just been created 
or newly cleared (see @code{clrhash})
the entry count is @f{0}.

@subsubheading Examples:

@lisp
 (setq table (make-hash-table)) @EV{} #<HASH-TABLE EQL 0/120 32115135>
 (hash-table-count table) @EV{} 0
 (setf (gethash 57 table) "fifty-seven") @EV{} "fifty-seven"
 (hash-table-count table) @EV{} 1
 (dotimes (i 100) (setf (gethash i table) i)) @EV{} NIL
 (hash-table-count table) @EV{} 100
@end lisp


@subsubheading Affected By:

@code{clrhash},
@code{remhash},
@SETFof{gethash}

@subsubheading See Also:

@ref{hash-table-size}

@subsubheading Notes:

The following relationships are functionally correct, although in practice
using @code{hash-table-count} is probably much faster:

@lisp
 (hash-table-count @param{table}) @EQ{}
 (loop for value being the hash-values of @param{table} count t) @EQ{}
 (let ((total 0))
   (maphash #'(lambda (key value)
                (declare (ignore key value))
                (incf total))
            @param{table})
   total)
@end lisp



@node hash-table-rehash-size
@heading hash-table-rehash-size (Function)
@syindex hash-table-rehash-size
@cindex hash-table-rehash-size



@subsubheading Syntax:

@DefunWithValues{hash-table-rehash-size, hash-table, rehash-size}

@subsubheading Arguments and Values:

@param{hash-table}---a @term{hash table}.

@param{rehash-size}---a @term{real} of @term{type} @f{(or (integer 1 *) (float (1.0) *))}.

@subsubheading Description:

Returns the current rehash size of @param{hash-table},
suitable for use in a call to @code{make-hash-table} 
in order to produce a @term{hash table} 
with state corresponding to the current state of the @param{hash-table}.

@subsubheading Examples:

@lisp
 (setq table (make-hash-table :size 100 :rehash-size 1.4))
@EV{} #<HASH-TABLE EQL 0/100 2556371>
 (hash-table-rehash-size table) @EV{} 1.4
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{hash-table, a @term{hash table}}

@subsubheading See Also:

@ref{make-hash-table},
@ref{hash-table-rehash-threshold}

@subsubheading Notes:

If the hash table was created with an @term{integer} rehash size,
the result is an @term{integer},
indicating that the rate of growth of the @param{hash-table} when rehashed
is intended to be additive;
otherwise,
the result is a @term{float}, 
indicating that the rate of growth of the @param{hash-table} when rehashed
is intended to be multiplicative.
However, this value is only advice to the @term{implementation};
the actual amount by which the @param{hash-table} will grow upon rehash is
@term{implementation-dependent}.


@node hash-table-rehash-threshold
@heading hash-table-rehash-threshold (Function)
@syindex hash-table-rehash-threshold
@cindex hash-table-rehash-threshold



@subsubheading Syntax:

@DefunWithValues{hash-table-rehash-threshold, hash-table, rehash-threshold}

@subsubheading Arguments and Values:

@param{hash-table}---a @term{hash table}.

@param{rehash-threshold}---a @term{real} of @term{type} @f{(real 0 1)}.

@subsubheading Description:

Returns the current rehash threshold of @param{hash-table}, which is
suitable for use in a call to @code{make-hash-table} in order to
produce a @term{hash table} with state corresponding to the current 
state of the @param{hash-table}.

@subsubheading Examples:

@lisp
 (setq table (make-hash-table :size 100 :rehash-threshold 0.5))
@EV{} #<HASH-TABLE EQL 0/100 2562446>
 (hash-table-rehash-threshold table) @EV{} 0.5
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{hash-table, a @term{hash table}}

@subsubheading See Also:

@ref{make-hash-table},
@ref{hash-table-rehash-size}



@node hash-table-size
@heading hash-table-size (Function)
@syindex hash-table-size
@cindex hash-table-size



@subsubheading Syntax:

@DefunWithValues{hash-table-size, hash-table, size}

@subsubheading Arguments and Values:

@param{hash-table}---a @term{hash table}.

@param{size}---a non-negative @term{integer}.

@subsubheading Description:

Returns the current size of @param{hash-table}, which is suitable for use in
a call to @code{make-hash-table} in order to produce a @term{hash table} 
with state corresponding to the current state of the @param{hash-table}.

@subsubheading Exceptional Situations:

@Shouldchecktype{hash-table, a @term{hash table}}

@subsubheading See Also:

@ref{hash-table-count},
@ref{make-hash-table}



@node hash-table-test
@heading hash-table-test (Function)
@syindex hash-table-test
@cindex hash-table-test



@subsubheading Syntax:

@DefunWithValues{hash-table-test, hash-table, test}

@subsubheading Arguments and Values:

@param{hash-table}---a @term{hash table}.

@param{test}---a @term{function designator}.
For the four @term{standardized} @term{hash table} test @term{functions}
(see @code{make-hash-table}), the @param{test} value returned
is always a @term{symbol}.  If an @term{implementation} permits additional 
tests, it is @term{implementation-dependent} whether such tests are
returned as @term{function} @term{objects} or @term{function names}.

@subsubheading Description:

Returns the test used for comparing @term{keys} in @param{hash-table}.

@subsubheading Exceptional Situations:

@Shouldchecktype{hash-table, a @term{hash table}}

@subsubheading See Also:

@ref{make-hash-table}



@node gethash
@heading gethash (Accessor)
@syindex gethash
@cindex gethash


@subsubheading Syntax:

@DefunWithValues{gethash, key hash-table @opt{} default, value\, present-p}
@Defsetf{gethash, key hash-table @opt{} default, new-value}

@subsubheading Arguments and Values:

@param{key}---an @term{object}.

@param{hash-table}---a @term{hash table}.

@param{default}---an @term{object}.
@Default{@nil{}}

@param{value}---an @term{object}.

@param{present-p}---a @term{generalized boolean}.

@subsubheading Description:

@param{Value} is the @term{object} in @param{hash-table} whose @term{key} 
is the @term{same} as @param{key} under the @param{hash-table}'s equivalence test.
If there is no such entry, @param{value} is the @param{default}.

@param{Present-p} is @term{true} if an entry is found; otherwise, it is @term{false}.

@code{setf} may be used with @code{gethash} to modify the @term{value}
associated with a given @term{key}, or to add a new entry.
When a @code{gethash} @term{form} is used as a @code{setf} @param{place},
any @param{default} which is supplied is evaluated according to normal
left-to-right evaluation rules, but its @term{value} is ignored.

@subsubheading Examples:

@lisp
 (setq table (make-hash-table)) @EV{} #<HASH-TABLE EQL 0/120 32206334>
 (gethash 1 table) @EV{} NIL, @term{false}
 (gethash 1 table 2) @EV{} 2, @term{false}
 (setf (gethash 1 table) "one") @EV{} "one"
 (setf (gethash 2 table "two") "two") @EV{} "two"
 (gethash 1 table) @EV{} "one", @term{true}
 (gethash 2 table) @EV{} "two", @term{true}
 (gethash nil table) @EV{} NIL, @term{false}
 (setf (gethash nil table) nil) @EV{} NIL 
 (gethash nil table) @EV{} NIL, @term{true}
 (defvar *counters* (make-hash-table)) @EV{} *COUNTERS*
 (gethash 'foo *counters*) @EV{} NIL, @term{false}
 (gethash 'foo *counters* 0) @EV{} 0, @term{false}
 (defmacro how-many (obj) `(values (gethash ,obj *counters* 0))) @EV{} HOW-MANY
 (defun count-it (obj) (incf (how-many obj))) @EV{} COUNT-IT
 (dolist (x '(bar foo foo bar bar baz)) (count-it x))
 (how-many 'foo) @EV{} 2
 (how-many 'bar) @EV{} 3
 (how-many 'quux) @EV{} 0
@end lisp


@subsubheading See Also:

@ref{remhash}

@subsubheading Notes:

The @term{secondary value}, @param{present-p},
can be used to distinguish the absence of an entry
from the presence of an entry that has a value of @param{default}.


@node remhash
@heading remhash (Function)
@syindex remhash
@cindex remhash


@subsubheading Syntax:

@DefunWithValues{remhash, key hash-table, generalized-boolean}

@subsubheading Arguments and Values:

@param{key}---an @term{object}.

@param{hash-table}---a @term{hash table}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Removes the entry for @param{key} in @param{hash-table}, if any.
Returns @term{true} if there was such an entry, or @term{false} otherwise.

@subsubheading Examples:
@lisp
 (setq table (make-hash-table)) @EV{} #<HASH-TABLE EQL 0/120 32115666>
 (setf (gethash 100 table) "C") @EV{} "C"
 (gethash 100 table) @EV{} "C", @term{true}
 (remhash 100 table) @EV{} @term{true}
 (gethash 100 table) @EV{} NIL, @term{false}
 (remhash 100 table) @EV{} @term{false}
@end lisp


@subsubheading Side Effects:

The @param{hash-table} is modified.


@node maphash
@heading maphash (Function)
@syindex maphash
@cindex maphash


@subsubheading Syntax:

@DefunWithValues{maphash, function hash-table, @nil{}}

@subsubheading Arguments and Values:

@param{function}---a @term{designator} for a @term{function} of two @term{arguments},
the @term{key} and the @term{value}.

@param{hash-table}---a @term{hash table}.

@subsubheading Description:

Iterates over all entries in the @param{hash-table}.  For each entry,
the @param{function} is called with two @term{arguments}---the @term{key} 
and the @term{value} of that entry.

The consequences are unspecified if any attempt is made to add or remove
an entry from the @param{hash-table} while a @code{maphash} is in progress,
with two exceptions:
the @param{function} can use can use @code{setf} of @code{gethash}
to change the @term{value} part of the entry currently being processed, 
or it can use @code{remhash} to remove that entry.

@subsubheading Examples:

@lisp
 (setq table (make-hash-table)) @EV{} #<HASH-TABLE EQL 0/120 32304110>
 (dotimes (i 10) (setf (gethash i table) i)) @EV{} NIL
 (let ((sum-of-squares 0))
    (maphash #'(lambda (key val) 
                 (let ((square (* val val)))
                   (incf sum-of-squares square)
                   (setf (gethash key table) square)))
             table)
    sum-of-squares) @EV{} 285
 (hash-table-count table) @EV{} 10
 (maphash #'(lambda (key val)
               (when (oddp val) (remhash key table)))
           table) @EV{} NIL
 (hash-table-count table) @EV{} 5
 (maphash #'(lambda (k v) (print (list k v))) table)
(0 0) 
(8 64) 
(2 4) 
(6 36) 
(4 16) 
@EV{} NIL
@end lisp


@subsubheading Side Effects:

None, other than any which might be done by the @param{function}.

@subsubheading See Also:

@ref{loop},
@ref{with-hash-table-iterator},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}


@node with-hash-table-iterator
@heading with-hash-table-iterator (Macro)
@syindex with-hash-table-iterator
@cindex with-hash-table-iterator




@subsubheading Syntax:

@DefmacWithValues{with-hash-table-iterator, @paren{name hash-table}  @starparam{declaration} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{name}---a name suitable for the first argument to @code{macrolet}.

@param{hash-table}---a @term{form}, evaluated once, that should produce a @term{hash table}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by @param{forms}.

@subsubheading Description:

Within the lexical scope of the body, @param{name} is defined via @code{macrolet} 
such that successive invocations of @f{(@param{name})} return the items,
one by one, from the @term{hash table} that is obtained by evaluating
@param{hash-table} only once.

An invocation @f{(@param{name})} returns three values as follows:


@enumerate 1
@item A @term{generalized boolean} that is @term{true} if an entry is returned.
@item The key from the @param{hash-table} entry.
@item The value from the @param{hash-table} entry.
@end enumerate

After all entries have been returned by successive invocations of
@f{(@param{name})}, then only one value is returned, namely @nil{}.

It is unspecified what happens if any of the implicit interior state 
of an iteration is returned outside the dynamic extent of the 
@code{with-hash-table-iterator} @term{form}
such as by returning some @term{closure} over the invocation @term{form}.

Any number of invocations of @code{with-hash-table-iterator} 
can be nested, and the body of the innermost one can invoke all of the
locally @term{established} @term{macros}, provided all of those @term{macros}
have @term{distinct} names.

@subsubheading Examples:

The following function should return @code{t}@spc{}on any 
@term{hash table}, and signal
an error if the usage of @code{with-hash-table-iterator} does not agree
with the corresponding usage of @code{maphash}.

@lisp
 (defun test-hash-table-iterator (hash-table)
   (let ((all-entries '())
         (generated-entries '())
         (unique (list nil)))
     (maphash #'(lambda (key value) (push (list key value) all-entries))
              hash-table)
     (with-hash-table-iterator (generator-fn hash-table)
       (loop     
         (multiple-value-bind (more? key value) (generator-fn)
           (unless more? (return))
           (unless (eql value (gethash key hash-table unique))
             (error "Key ~S not found for value ~S" key value))
           (push (list key value) generated-entries))))
     (unless (= (length all-entries)
                (length generated-entries)
                (length (union all-entries generated-entries
                               :key #'car :test (hash-table-test hash-table))))
       (error "Generated entries and Maphash entries don't correspond"))
     t))
@end lisp


The following could be an acceptable definition of 
@code{maphash}, implemented by @code{with-hash-table-iterator}.

@lisp
 (defun maphash (function hash-table)
   (with-hash-table-iterator (next-entry hash-table)
     (loop (multiple-value-bind (more key value) (next-entry)
             (unless more (return nil))
             (funcall function key value)))))
@end lisp


@subsubheading Exceptional Situations:

The consequences are undefined if the local function named @param{name}
@term{established} by @code{with-hash-table-iterator} is called after it has
returned @term{false} as its @term{primary value}.

@subsubheading See Also:

@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}



@node clrhash
@heading clrhash (Function)
@syindex clrhash
@cindex clrhash


@subsubheading Syntax:

@DefunWithValues{clrhash, hash-table, hash-table}

@subsubheading Arguments and Values:

@param{hash-table}---a @term{hash table}.

@subsubheading Description:

Removes all entries from @param{hash-table},
and then returns that empty @term{hash table}.

@subsubheading Examples:

@lisp
 (setq table (make-hash-table)) @EV{} #<HASH-TABLE EQL 0/120 32004073>
 (dotimes (i 100) (setf (gethash i table) (format nil "~R" i))) @EV{} NIL
 (hash-table-count table) @EV{} 100
 (gethash 57 table) @EV{} "fifty-seven", @term{true}
 (clrhash table) @EV{} #<HASH-TABLE EQL 0/120 32004073>
 (hash-table-count table) @EV{} 0
 (gethash 57 table) @EV{} NIL, @term{false}
@end lisp


@subsubheading Side Effects:

The @param{hash-table} is modified.


@node sxhash
@heading sxhash (Function)
@syindex sxhash
@cindex sxhash



@subsubheading Syntax:

@DefunWithValues{sxhash, object, hash-code}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{hash-code}---a non-negative @term{fixnum}.

@subsubheading Description:

@code{sxhash} returns a hash code for @param{object}. 

The manner in which the hash code is computed is @term{implementation-dependent},
but subject to certain constraints:


@enumerate 1
@item
@f{(equal @param{x} @param{y})} implies @f{(= (sxhash @param{x}) (sxhash @param{y}))}.

@item
For any two @term{objects}, @param{x} and @param{y},
both of which are 
@term{bit vectors},
@term{characters}, 
@term{conses},
@term{numbers},
@term{pathnames},
@term{strings},
or @term{symbols},
and which are @term{similar},
@f{(sxhash @param{x})} and @f{(sxhash @param{y})}
@term{yield} the same mathematical value 
even if @param{x} and @param{y} exist in different @term{Lisp images} of
the same @term{implementation}.
See @ref{Literal Objects in Compiled Files, Section 3.2.4 (Literal Objects in Compiled Files)}.

@item
The @param{hash-code} for an @term{object} is always the @term{same}
within a single @term{session} provided that the @term{object} is not
visibly modified with regard to the equivalence test @code{equal}.
See @ref{Modifying Hash Table Keys, Section 18.1.2 (Modifying Hash Table Keys)}.

@item
The @param{hash-code} is intended for hashing.  This places no verifiable
constraint on a @term{conforming implementation}, but the intent is that
an @term{implementation} should make a good-faith effort to produce
@param{hash-codes} that are well distributed within the range of
non-negative @term{fixnums}.

@item
Computation of the @param{hash-code} must terminate, 
even if the @param{object} contains circularities.  
@end enumerate


@subsubheading Examples:

@lisp
 (= (sxhash (list 'list "ab")) (sxhash (list 'list "ab"))) @EV{} @term{true}
 (= (sxhash "a") (sxhash (make-string 1 :initial-element #@bsl{}a))) @EV{} @term{true}
 (let ((r (make-random-state)))
   (= (sxhash r) (sxhash (make-random-state r))))
@EV{} @term{implementation-dependent}
@end lisp


@subsubheading Affected By:

The @term{implementation}.

@subsubheading Notes:

Many common hashing needs are satisfied by @code{make-hash-table} and the
related functions on @term{hash tables}.  @code{sxhash} is intended for use
where the pre-defined abstractions are insufficient.  Its main intent is to
allow the user a convenient means of implementing more complicated hashing
paradigms than are provided through @term{hash tables}.

The hash codes returned by @code{sxhash} are not necessarily related to 
any hashing strategy used by any other @term{function} in @clisp{}.

For @term{objects} of @term{types} that @code{equal} compares 
with @code{eq}, item 3 requires that the @param{hash-code} be
based on some immutable quality of the identity of the object.
Another legitimate implementation technique would be to have 
@code{sxhash} assign (and cache) a random hash code for these
@term{objects}, since there is no requirement that @term{similar} but
non-@code{eq} objects have the same hash code.

Although @term{similarity} is defined for @term{symbols} in terms
of both the @term{symbol}'s @term{name} and the @term{packages} in which 
the @term{symbol} is @term{accessible}, item 3 disallows using @term{package}
information to compute the hash code, since changes to the package status 
of a symbol are not visible to @param{equal}.





@node Filenames
@chapter Filenames
@menu
* Overview of Filenames::
* Pathnames::
* Logical Pathnames::

Dictionary

* pathname (System Class)::
* logical-pathname (System Class)::
* pathname (Function)::
* make-pathname::
* pathnamep::
* pathname-host; pathname-device; pathname-directory; pathname-name; path+::
* load-logical-pathname-translations::
* logical-pathname-translations::
* logical-pathname (Function)::
* *default-pathname-defaults*::
* namestring; file-namestring; directory-namestring; host-namestring; eno+::
* parse-namestring::
* wild-pathname-p::
* pathname-match-p::
* translate-logical-pathname::
* translate-pathname::
* merge-pathnames::
@end menu

@node Overview of Filenames
@section Overview of Filenames

There are many kinds of @term{file systems},
varying widely both in their superficial syntactic details,
and in their underlying power and structure.
The facilities provided by @clisp{}@spc{}for referring to and manipulating @term{files}
has been chosen to be compatible with many kinds of @term{file systems},
while at the same time minimizing the program-visible differences 
between kinds of @term{file systems}.

Since @term{file systems} vary in their conventions for naming @term{files},
there are two distinct ways to represent @term{filenames}:
as @term{namestrings} and as @term{pathnames}.

@menu
* Namestrings as Filenames::
* Pathnames as Filenames::
* Parsing Namestrings Into Pathnames::
@end menu
@node Namestrings as Filenames
@subsection Namestrings as Filenames

A @newterm{namestring} is a @term{string} that represents a @term{filename}.

In general, the syntax of @term{namestrings} involves the use of 
@term{implementation-defined} conventions, 
usually those customary for the @term{file system} in which the named @term{file} resides.
The only exception is the syntax of a @term{logical pathname} @term{namestring},
which is defined in this specification; see @ref{Syntax of Logical Pathname Namestrings, Section 19.3.1 (Syntax of Logical Pathname Namestrings)}.

A @term{conforming program} must never unconditionally use a
@term{literal} @term{namestring} other than a @term{logical pathname} @term{namestring}
because @clisp{}@spc{}does not define any @term{namestring} syntax 
other than that for @term{logical pathnames}
that would be guaranteed to be portable.
However, a @term{conforming program} can, if it is careful, 
successfully manipulate user-supplied data 
which contains or refers to non-portable @term{namestrings}.

A @term{namestring} can be @term{coerced} to a @term{pathname} by @thefunctions{pathname}
or @code{parse-namestring}.


@node Pathnames as Filenames
@subsection Pathnames as Filenames

@cindex pathname
@dfn{Pathnames} are structured @term{objects} that can represent,
in an @term{implementation-independent} way,
the @term{filenames} that are used natively by an underlying @term{file system}.

In addition, @term{pathnames} can also represent certain partially composed 
@term{filenames} for which an underlying @term{file system} 
might not have a specific @term{namestring} representation.

A @term{pathname} need not correspond to any file that actually exists, 
and more than one @term{pathname} can refer to the same file.
For example, the @term{pathname} with a version of @kwd{newest} 
might refer to the same file as a @term{pathname} 
with the same components except a certain number as the version.
Indeed, a @term{pathname} with version @kwd{newest} might refer to
different files as time passes, because the meaning of such a @term{pathname}
depends on the state of the file system.  

Some @term{file systems} naturally use a structural model for their
@term{filenames}, while others do not.  Within the @clisp{}@spc{}@term{pathname} model, 
all @term{filenames} are seen as having a particular structure,
even if that structure is not reflected in the underlying @term{file system}.
The nature of the mapping between structure imposed by @term{pathnames}
and the structure, if any, that is used by the underlying @term{file system}
is @term{implementation-defined}.

Every @term{pathname} has six components:
a host,
a device,
a directory,
a name,
a type,
and a version.
By naming @term{files} with @term{pathnames}, 
@clisp{}@spc{}programs can work in essentially the same way even in @term{file systems}
that seem superficially quite different.
For a detailed description of these components, see @ref{Pathname Components, Section 19.2.1 (Pathname Components)}.

The mapping of the @term{pathname} components into the concepts peculiar to
each @term{file system} is @term{implementation-defined}.
There exist conceivable @term{pathnames}
for which there is no mapping to a syntactically valid @term{filename}
in a particular @term{implementation}.
An @term{implementation} may use various strategies in an attempt to find a mapping;
for example, 
an @term{implementation} may quietly truncate @term{filenames}
that exceed length limitations imposed by the underlying @term{file system},
or ignore certain @term{pathname} components
for which the @term{file system} provides no support.
If such a mapping cannot be found,
an error @oftype{file-error} is signaled.

The time at which this mapping and associated error signaling 
occurs is @term{implementation-dependent}.
Specifically, it may occur 
at the time the @term{pathname} is constructed,
when coercing a @term{pathname} to a @term{namestring},
or when an attempt is made to @term{open} or otherwise access the @term{file} 
designated by the @term{pathname}.

@Thenextfigure{}@spc{}lists some @term{defined names} that are applicable to @term{pathnames}.


@float Figure,fig19.1
@cartouche
@multitable{*default-pathname-defaults*}{pathname-directory}{user-homedir-pathname}

@item *default-pathname-defaults* @tab namestring @tab pathname-name
@item directory-namestring @tab open @tab pathname-type
@item enough-namestring @tab parse-namestring @tab pathname-version
@item file-namestring @tab pathname @tab pathnamep
@item file-string-length @tab pathname-device @tab translate-pathname
@item host-namestring @tab pathname-directory @tab truename
@item make-pathname @tab pathname-host @tab user-homedir-pathname
@item merge-pathnames @tab pathname-match-p @tab wild-pathname-p
@end multitable
@end cartouche
@caption{Pathname Operations}
@end float


@node Parsing Namestrings Into Pathnames
@subsection Parsing Namestrings Into Pathnames

Parsing is the operation used to convert a @term{namestring} into a @term{pathname}.
Except in the case of parsing @term{logical pathname} @term{namestrings},
this operation is @term{implementation-dependent},
because the format of @term{namestrings} is @term{implementation-dependent}.

A @term{conforming implementation} is free to accommodate other @term{file system}
features in its @term{pathname} representation and provides a parser that can process 
such specifications in @term{namestrings}.  
@term{Conforming programs} must not depend on any such features, 
since those features will not be portable.


@node Pathnames
@section Pathnames

@menu
* Pathname Components::
* Interpreting Pathname Component Values::
* Merging Pathnames::
@end menu
@node Pathname Components
@subsection Pathname Components

A @term{pathname} has six components:
a host,
a device,
a directory,
a name,
a type,
and a version.

@subsubsection The Pathname Host Component

The name of the file system on which the file resides,
or the name of a @term{logical host}.


@subsubsection The Pathname Device Component

Corresponds to the ``device'' or ``file structure'' concept in many
host file systems: the name of a logical or physical device containing files.


@subsubsection The Pathname Directory Component

Corresponds to the ``directory'' concept in many host file systems:
the name of a group of related files.


@subsubsection The Pathname Name Component

The ``name'' part of a group of @term{files} that can be thought of
as conceptually related.


@subsubsection The Pathname Type Component

Corresponds to the ``filetype'' or ``extension'' concept in many host
file systems.  This says what kind of file this is.  
This component is always a @term{string}, @nil{}, @kwd{wild}, or @kwd{unspecific}.


@subsubsection The Pathname Version Component

Corresponds to the ``version number'' concept in many host file systems.

The version is either a positive @term{integer} 
or a @term{symbol} from the following list:
@nil{}, @kwd{wild}, @kwd{unspecific}, or @kwd{newest}
(refers to the largest version number that already exists in 
the file system when reading a file, or to
a version number
greater than any already existing in the file system
when writing a new file).  Implementations 
can define other special version @term{symbols}.



@node Interpreting Pathname Component Values
@subsection Interpreting Pathname Component Values

@subsubsection Strings in Component Values


@unnumberedsubsubsec 19.2.2.1.1 Special Characters in Pathname Components


@term{Strings} in @term{pathname} component values 
never contain special @term{characters} that represent
separation between @term{pathname} fields, 
such as @term{slash} in @Unix{}@spc{}@term{filenames}.
Whether separator @term{characters} are permitted as 
part of a @term{string} in a @term{pathname} component
is @term{implementation-defined}; 
however, if the @term{implementation} does permit it, 
it must arrange to properly ``quote'' the character for the 
@term{file system} when constructing a @term{namestring}.
For example,

@lisp
 ;; In a TOPS-20 implementation, which uses @hat{}V to quote 
 (NAMESTRING (MAKE-PATHNAME :HOST "OZ" :NAME "<TEST>"))
@EV{} #P"OZ:PS:@hat{}V<TEST@hat{}V>"
@NV{} #P"OZ:PS:<TEST>"
@end lisp





@unnumberedsubsubsec 19.2.2.1.2 Case in Pathname Components

@anchor{PathnameComponentCase}

@term{Namestrings} always use local file system @term{case} conventions, 
but @clisp{}@spc{}@term{functions} that manipulate @term{pathname} components
allow the caller to select either of two conventions for representing
@term{case} in component values by supplying a value for the
@kwd{case} keyword argument.
@Thenextfigure{}@spc{}lists the functions 
relating to @term{pathnames} that permit a @kwd{case} argument:



@float Figure,PathnameCaseFuns
@cartouche
@multitable{pathname-device}{pathname-directory}{pathname-name}

@item make-pathname @tab pathname-directory @tab pathname-name
@item pathname-device @tab pathname-host @tab pathname-type
@end multitable
@end cartouche
@caption{Pathname functions using a :CASE argument}
@end float


@unnumberedsubsubsec 19.2.2.1.2.1 Local Case in Pathname Components


For the functions in @ref{PathnameCaseFuns, Figure 19.2},
a value of @kwd{local}
@cindex :local 
for the @kwd{case} argument 
(the default for these functions)
indicates that the functions should receive and yield @term{strings} in component values
as if they were already represented according to the host @term{file system}'s 
convention for @term{case}.

If the @term{file system} supports both @term{cases}, @term{strings} given or received
as @term{pathname} component values under this protocol are to be used exactly
as written.  If the file system only supports one @term{case}, 
the @term{strings} will be translated to that @term{case}.


@unnumberedsubsubsec 19.2.2.1.2.2 Common Case in Pathname Components


For the functions in @ref{PathnameCaseFuns, Figure 19.2},
a value of @kwd{common}
@cindex :common 
for the @kwd{case} argument 
that these @term{functions} should receive 
and yield @term{strings} in component values according to the following conventions:


@itemize @bullet{}
@item
All @term{uppercase} means to use a file system's customary @term{case}.
@item
All @term{lowercase} means to use the opposite of the customary @term{case}.
@item
Mixed @term{case} represents itself.
@end itemize

Note that these conventions have been chosen in such a way that translation
from @kwd{local} to @kwd{common} and back to @kwd{local} is information-preserving.




@subsubsection Special Pathname Component Values
@anchor{SpecialComponentValues}

@unnumberedsubsubsec 19.2.2.2.1 NIL as a Component Value


As a @term{pathname} component value,
@nil{} represents that the component is ``unfilled'';
see @ref{Merging Pathnames, Section 19.2.3 (Merging Pathnames)}.

The value of any @term{pathname} component can be @nil{}.

When constructing a @term{pathname},
@nil{}@spc{}in the host component might mean a default host
rather than an actual @nil{}@spc{}in some @term{implementations}.


@unnumberedsubsubsec 19.2.2.2.2 :WILD as a Component Value

@anchor{WildComponents}

If @kwd{wild}
@cindex :wild 
is the value of a @term{pathname} component,
that component is considered to be a wildcard, which matches anything.

A @term{conforming program} must be prepared to encounter a value of @kwd{wild}
as the value of any @term{pathname} component,
or as an @term{element} of a @term{list} that is the value of the directory component.

When constructing a @term{pathname},
a @term{conforming program} may use @kwd{wild} as the value of any or all of
the directory, name, type, 
or version component, but must not use @kwd{wild} as the value of the host,
or device component.

If @kwd{wild} is used as the value of the directory component in the construction
of a @term{pathname}, the effect is equivalent to specifying the list
@f{(:absolute :wild-inferiors)},
or the same as @f{(:absolute :wild)} in a @term{file system} that does not support
@kwd{wild-inferiors}.
@cindex :wild-inferiors


@unnumberedsubsubsec 19.2.2.2.3 :UNSPECIFIC as a Component Value

@anchor{UnspecificComponent}

If @kwd{unspecific}
@cindex :unspecific 
is the value of a @term{pathname} component,
the component is considered to be ``absent'' 
or to ``have no meaning''
in the @term{filename} being represented by the @term{pathname}.

Whether a value of @kwd{unspecific} is permitted for any component
on any given @term{file system} accessible to the @term{implementation}
is @term{implementation-defined}.
A @term{conforming program} must never unconditionally use a
@kwd{unspecific} as the value of a @term{pathname} component because
such a value is not guaranteed to be permissible in all implementations.
However, a @term{conforming program} can, if it is careful, 
successfully manipulate user-supplied data 
which contains or refers to non-portable @term{pathname} components.
And certainly a @term{conforming program} should be prepared for the
possibility that any components of a @term{pathname} could be @kwd{unspecific}.

When @term{reading}@sub1{} the value of any @term{pathname} component,
@term{conforming programs} should be prepared for the value to be @kwd{unspecific}.

When @term{writing}@sub1{} the value of any @term{pathname} component,
the consequences are undefined if @kwd{unspecific} is given 
for a @term{pathname} in a @term{file system} for which it does not make sense.

@unnumberedsubsubsec 19.2.2.2.3.1 Relation between component values NIL and :UNSPECIFIC


If a @term{pathname} is converted to a @term{namestring}, 
the @term{symbols} @nil{}@spc{}and @kwd{unspecific}
cause the field to be treated as if it were empty.
That is,
both @nil{}@spc{}and @kwd{unspecific} 
cause the component not to appear in the @term{namestring}.

However, when merging a @term{pathname} with a set of defaults,
only a @nil{}@spc{}value for a component 
will be replaced with the default for that component, 
while a value of @kwd{unspecific}
will be left alone as if the field were ``filled'';
see the @term{function} @ref{merge-pathnames} and @ref{Merging Pathnames, Section 19.2.3 (Merging Pathnames)}.





@subsubsection Restrictions on Wildcard Pathnames
@anchor{WildcardRestrictions}

Wildcard @term{pathnames} can be used with @code{directory} but not with 
@code{open},
and return true from @code{wild-pathname-p}. When examining
wildcard components of a wildcard @term{pathname}, conforming programs
must be prepared to encounter any of the following additional values
in any component or any element of a @term{list} that is the directory component:


@itemize @bullet{}

@item The @term{symbol} @kwd{wild}, which matches anything.

@item A @term{string} containing @term{implementation-dependent} 
special wildcard @term{characters}.

@item Any @term{object},
representing an @term{implementation-dependent} wildcard pattern.
@end itemize




@subsubsection Restrictions on Examining Pathname Components

The space of possible @term{objects} that a @term{conforming program} 
must be prepared to @term{read}@sub1{} 
as the value of a @term{pathname} component
is substantially larger than the space of possible @term{objects} 
that a @term{conforming program} is permitted to @term{write}@sub1{}
into such a component.

While the values discussed 
in the subsections of this section,
in @ref{SpecialComponentValues, Section 19.2.2.2 (Special Pathname Component Values)},
and in @ref{WildcardRestrictions, Section 19.2.2.3 (Restrictions on Wildcard Pathnames)} 
apply to values that might be seen when 
reading the component values,
substantially more restrictive rules apply to constructing pathnames;
see @ref{ConstructingPathnames, Section 19.2.2.5 (Restrictions on Constructing Pathnames)}.

When examining @term{pathname} components,
@term{conforming programs} should be aware of the following restrictions.

@unnumberedsubsubsec 19.2.2.4.1 Restrictions on Examining a Pathname Host Component


It is @term{implementation-dependent} what @term{object} is used to represent the host. 


@unnumberedsubsubsec 19.2.2.4.2 Restrictions on Examining a Pathname Device Component


The device might be a @term{string},
@kwd{wild}, @kwd{unspecific}, or @nil{}.

Note that @kwd{wild} might result from an attempt to @term{read}@sub1{}
the @term{pathname} component, even though portable programs are restricted
from @term{writing}@sub1{} such a component value; 
see @ref{WildcardRestrictions, Section 19.2.2.3 (Restrictions on Wildcard Pathnames)}@spc{}and @ref{ConstructingPathnames, Section 19.2.2.5 (Restrictions on Constructing Pathnames)}.


@unnumberedsubsubsec 19.2.2.4.3 Restrictions on Examining a Pathname Directory Component


The directory might be a @term{string},
@kwd{wild}, @kwd{unspecific}, or @nil{}.

The directory can be a @term{list} of @term{strings} and @term{symbols}. 
The @term{car} of the @term{list} is one of the symbols @kwd{absolute}
@cindex :absolute 
or 
@kwd{relative}
@cindex :relative
, meaning:


@table @asis

@item @id{@kwd{absolute}}


A @term{list} whose @term{car} is the symbol @kwd{absolute} represents 
a directory path starting from the root directory.  The list 
@f{(:absolute)} represents the root directory.  The list 
@f{(:absolute "foo" "bar" "baz")} represents the directory called
@f{"/foo/bar/baz"} in Unix (except possibly for @term{case}).

@item @id{@kwd{relative}}


A @term{list} whose @term{car} is the symbol @kwd{relative} represents 
a directory path starting from a default directory.  
The list @f{(:relative)} has the same meaning as @nil{}@spc{}and hence is not used.
The list @tt{(:relative "foo" "bar")} represents the directory named @tt{"bar"} 
in the directory named @tt{"foo"} in the default directory.
@end table


Each remaining element of the @term{list} is a @term{string} or a @term{symbol}.

Each @term{string} names a single level of directory structure.
The @term{strings} should contain only the directory names 
themselves---no punctuation characters.

In place of a @term{string}, at any point in the @term{list}, @term{symbols} 
can occur to indicate special file notations.
@Thenextfigure{}@spc{}lists the @term{symbols} that have standard meanings.
Implementations are permitted to add additional @term{objects} 
of any @term{type} that is disjoint from @code{string}
if necessary to represent features of their file systems that cannot be
represented with the standard @term{strings} and @term{symbols}.

Supplying any non-@term{string}, including any of the @term{symbols} listed below, 
to a file system for which it does not make sense
signals an error @oftype{file-error}.
For example, Unix does not support @kwd{wild-inferiors} in most implementations.

@cindex :wild
@cindex :wild-inferiors
@cindex :up
@cindex :back

@float Figure,fig19.3
@cartouche
@multitable{@kwd{wild-inferiors}}{Wildcard match of one level of directory structure}
@headitem Symbol @tab Meaning
@item @kwd{wild} @tab Wildcard match of one level of directory structure
@item @kwd{wild-inferiors} @tab Wildcard match of any number of directory levels
@item @kwd{up} @tab Go upward in directory structure (semantic)
@item @kwd{back} @tab Go upward in directory structure (syntactic)
@end multitable
@end cartouche
@caption{Special Markers In Directory Component}
@end float


The following notes apply to the previous figure:


@table @asis
@item @id{Invalid Combinations}


Using @kwd{absolute} or @kwd{wild-inferiors} 
immediately followed by @kwd{up} or @kwd{back}
signals an error @oftype{file-error}.

@item @id{Syntactic vs Semantic}


``Syntactic'' means that the action of @kwd{back} 
depends only on the @term{pathname}
and not on the contents of the file system.  

``Semantic'' means that the action of @kwd{up} 
depends on the contents of the file system; 
to resolve a @term{pathname} containing 
@kwd{up} to a @term{pathname} whose directory component
contains only @kwd{absolute} and 
@term{strings} requires probing the file system.

@kwd{up} differs from 
@kwd{back} only in file systems that support multiple
names for directories, perhaps via symbolic links.  For example,
suppose that there is a directory
@f{(:absolute "X" "Y" "Z")}
linked to 
@f{(:absolute "A" "B" "C")}
and there also exist directories
@f{(:absolute "A" "B" "Q")} and 
@f{(:absolute "X" "Y" "Q")}.
Then
@f{(:absolute "X" "Y" "Z" :up "Q")}
designates
@f{(:absolute "A" "B" "Q")}
while
@f{(:absolute "X" "Y" "Z" :back "Q")}
designates
@f{(:absolute "X" "Y" "Q")}
@end table



@unnumberedsubsubsec 19.2.2.4.3.1 Directory Components in Non-Hierarchical File Systems


In non-hierarchical @term{file systems},
the only valid @term{list} values for the directory component of a @term{pathname}
are @f{(:absolute @term{string})} and @f{(:absolute :wild)}.
@kwd{relative} directories and the keywords
@kwd{wild-inferiors}, @kwd{up}, and @kwd{back} are not used 
in non-hierarchical @term{file systems}.



@unnumberedsubsubsec 19.2.2.4.4 Restrictions on Examining a Pathname Name Component


The name might be a @term{string},
@kwd{wild}, @kwd{unspecific}, or @nil{}.


@unnumberedsubsubsec 19.2.2.4.5 Restrictions on Examining a Pathname Type Component


The type might be a @term{string},
@kwd{wild}, @kwd{unspecific}, or @nil{}.


@unnumberedsubsubsec 19.2.2.4.6 Restrictions on Examining a Pathname Version Component


The version can be any @term{symbol} or any @term{integer}.  

The symbol @kwd{newest} refers to the largest version number 
that already exists in the @term{file system}
when reading, overwriting, appending, superseding, or directory listing 
an existing @term{file}.
The symbol @kwd{newest} refers to the smallest version number
greater than any existing version number when creating a new file.

The symbols @nil{}, @kwd{unspecific}, and @kwd{wild} have special meanings and
restrictions; see @ref{SpecialComponentValues, Section 19.2.2.2 (Special Pathname Component Values)}@spc{}and @ref{ConstructingPathnames, Section 19.2.2.5 (Restrictions on Constructing Pathnames)}.

Other @term{symbols} and @term{integers}
have @term{implementation-defined} meaning.

@unnumberedsubsubsec 19.2.2.4.7 Notes about the Pathname Version Component


It is suggested, but not required, that implementations do the following:


@itemize @bullet{}

@item Use positive @term{integers} starting at 1 as version numbers.

@item Recognize the symbol @kwd{oldest}
to designate the smallest existing version number.

@item Use @term{keywords} for other special versions.
@end itemize



@subsubsection Restrictions on Constructing Pathnames
@anchor{ConstructingPathnames}

When constructing a @term{pathname} from components, conforming programs
must follow these rules:


@itemize @bullet{}

@item
Any component can be @nil{}.
@nil{}@spc{}in the host might mean a default host 
rather than an actual @nil{}@spc{}in some implementations.

@item
The host, device, directory, name, and type can be @term{strings}.  There
are @term{implementation-dependent} limits on the number and type of
@term{characters} in these @term{strings}.

@item
The directory can be a @term{list} of @term{strings} and @term{symbols}.
There are @term{implementation-dependent} limits on the @term{list}'s
length and contents.

@item
The version can be @kwd{newest}.

@item
Any component can be taken 
from the corresponding component of another @term{pathname}.
When the two @term{pathnames} are for different file systems
(in implementations that support multiple file systems),
an appropriate translation occurs.
If no meaningful translation is possible,
an error is signaled.
The definitions of ``appropriate'' and ``meaningful'' 
are @term{implementation-dependent}.

@item
An implementation might support other values for some components,
but a portable program cannot use those values.
A conforming program can use @term{implementation-dependent} values
but this can make it non-portable;
for example, it might work only with @Unix{}@spc{}file systems.
@end itemize





@node Merging Pathnames
@subsection Merging Pathnames

Merging takes a @term{pathname} with unfilled components
and supplies values for those components from a source of defaults.

If a component's value is @nil{}, that component is considered to be unfilled.
If a component's value is any @term{non-nil} @term{object}, 
including @kwd{unspecific}, that component is considered to be filled.

Except as explicitly specified otherwise,
for functions that manipulate or inquire about @term{files} in the @term{file system},
the pathname argument to such a function
is merged with @code{*default-pathname-defaults*} before accessing the @term{file system}
(as if by @code{merge-pathnames}).

@subsubsection Examples of Merging Pathnames

Although the following examples are possible to execute only in
@term{implementations} which permit @kwd{unspecific} in the indicated
position andwhich permit four-letter type components, they serve to illustrate
the basic concept of @term{pathname} merging.

@medbreak{}
@lisp
 (pathname-type 
   (merge-pathnames (make-pathname :type "LISP")
                    (make-pathname :type "TEXT")))
@EV{} "LISP"
@smallbreak{}
 (pathname-type 
   (merge-pathnames (make-pathname :type nil)
                    (make-pathname :type "LISP")))
@EV{} "LISP"
@smallbreak{}
 (pathname-type 
   (merge-pathnames (make-pathname :type :unspecific)
                    (make-pathname :type "LISP")))
@EV{} :UNSPECIFIC
@end lisp





@node Logical Pathnames
@section Logical Pathnames

@menu
* Syntax of Logical Pathname Namestrings::
* Logical Pathname Components::
@end menu
@node Syntax of Logical Pathname Namestrings
@subsection Syntax of Logical Pathname Namestrings

The syntax of a @term{logical pathname} @term{namestring} is as follows.
(Note that unlike many notational descriptions in this document,
this is a syntactic description of character sequences,
not a structural description of @term{objects}.)

@auxbnf{logical-pathname, @brac{@down{host} @param{host-marker}} @CR{} @brac{@down{@param{relative-directory-marker}}} @star{@curly{@down{directory} @param{directory-marker}}} @CR{} @brac{@down{name}} @brac{@param{type-marker} @down{type} @brac{@param{version-marker} @down{version}}}}

@auxbnf{host, @down{word}}
@auxbnf{directory, @down{word} | @down{wildcard-word} | @down{wild-inferiors-word}}
@auxbnf{name, @down{word} | @down{wildcard-word}}
@auxbnf{type, @down{word} | @down{wildcard-word}}
@auxbnf{version, @down{pos-int} | @param{newest-word} | @param{wildcard-version}}

@param{host-marker}---a @term{colon}.

@param{relative-directory-marker}---a @term{semicolon}.

@param{directory-marker}---a @term{semicolon}.

@param{type-marker}---a @term{dot}.

@param{version-marker}---a @term{dot}.

@param{wild-inferiors-word}---The two character sequence ``@f{**}'' (two @term{asterisks}).

@param{newest-word}---The six character sequence ``@f{newest}'' 
or the six character sequence ``@f{NEWEST}''.

@param{wildcard-version}---an @term{asterisk}.

@param{wildcard-word}---one or more @term{asterisks}, uppercase letters,
digits, and hyphens, including at least one @term{asterisk}, 
with no two @term{asterisks} adjacent.

@param{word}---one or more uppercase letters, digits, and hyphens.

@param{pos-int}---a positive @term{integer}.

@subsubsection Additional Information about Parsing Logical Pathname Namestrings

@unnumberedsubsubsec 19.3.1.1.1 The Host part of a Logical Pathname Namestring


The @param{host} must have been defined as a @term{logical pathname} host;
this can be done by using @code{setf} of @code{logical-pathname-translations}.

The @term{logical pathname} host name @f{"SYS"} is reserved for the implementation.
The existence and meaning of @f{SYS:} @term{logical pathnames} 
is @term{implementation-defined}.


@unnumberedsubsubsec 19.3.1.1.2 The Device part of a Logical Pathname Namestring


There is no syntax for a @term{logical pathname} device since
the device component of a @term{logical pathname} is always @kwd{unspecific};
see @ref{LogicalPathCompUnspecific, Section 19.3.2.1 (Unspecific Components of a Logical Pathname)}.


@unnumberedsubsubsec 19.3.1.1.3 The Directory part of a Logical Pathname Namestring


If a @param{relative-directory-marker} precedes the @param{directories},
the directory component parsed is as @term{relative};
otherwise, the directory component is parsed as @term{absolute}.

If a @param{wild-inferiors-marker} is specified,
it parses into @kwd{wild-inferiors}.


@unnumberedsubsubsec 19.3.1.1.4 The Type part of a Logical Pathname Namestring


The @param{type} of a @term{logical pathname} for a @term{source file}
is @f{"LISP"}.   This should be translated into whatever type is 
appropriate in a physical pathname.


@unnumberedsubsubsec 19.3.1.1.5 The Version part of a Logical Pathname Namestring


Some @term{file systems} do not have @param{versions}. 
@term{Logical pathname} translation to such a @term{file system}
ignores the @param{version}.
This implies that a program cannot rely on being able to store
more than one version of a file named by a @term{logical pathname}.

If a @param{wildcard-version} is specified,
it parses into @kwd{wild}.


@unnumberedsubsubsec 19.3.1.1.6 Wildcard Words in a Logical Pathname Namestring


Each @term{asterisk} in a @param{wildcard-word} matches a sequence of 
zero or more characters.  The @param{wildcard-word} ``@f{*}'' 
parses into @kwd{wild}; other @term{wildcard-words} parse into @term{strings}.


@unnumberedsubsubsec 19.3.1.1.7 Lowercase Letters in a Logical Pathname Namestring


When parsing @param{words} and @param{wildcard-words},
lowercase letters are translated to uppercase.


@unnumberedsubsubsec 19.3.1.1.8 Other Syntax in a Logical Pathname Namestring


The consequences of using characters other than those specified here
in a @term{logical pathname} @term{namestring} are unspecified.

The consequences of using any value not specified here as a 
@term{logical pathname} component are unspecified.





@node Logical Pathname Components
@subsection Logical Pathname Components

@subsubsection Unspecific Components of a Logical Pathname
@anchor{LogicalPathCompUnspecific}

The device component of a @term{logical pathname} is always @kwd{unspecific};
no other component of a @term logical pathname can be @kwd{unspecific}.  


@subsubsection Null Strings as Components of a Logical Pathname

The null string, @f{""}, is not a valid value for any component of a @term{logical pathname}.



@node pathname (System Class)
@heading pathname (System Class)
@syindex pathname
@cindex pathname


@subsubheading Class Precedence List:
@code{pathname},
@code{t}

@subsubheading Description:

A @term{pathname} is a structured @term{object} which represents a @term{filename}.

There are two kinds of @term{pathnames}---@term{physical pathnames} and
@term{logical pathnames}.

@node logical-pathname (System Class)
@heading logical-pathname (System Class)
@syindex logical-pathname
@cindex logical-pathname



@subsubheading Class Precedence List:

@code{logical-pathname},
@code{pathname},
@code{t}

@subsubheading Description:

A @term{pathname} that uses a @term{namestring} syntax that is 
@term{implementation-independent}, 
and that has component values that are @term{implementation-independent}.
@term{Logical pathnames} do not refer directly to @term{filenames}

@subsubheading See Also:

@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{SharpsignP, Section 2.4.8.14 (Sharpsign P)},
@ref{PrintingPathnames, Section 22.1.3.11 (Printing Pathnames)}



@node pathname (Function)
@heading pathname (Function)
@syindex pathname
@cindex pathname


@subsubheading Syntax:

@DefunWithValues{pathname, pathspec, pathname}

@subsubheading Arguments and Values:

@param{pathspec}---a @term{pathname designator}.

@param{pathname}---a @term{pathname}.

@subsubheading Description:

Returns the @term{pathname} denoted by @param{pathspec}.

If the @param{pathspec} @term{designator} is a @term{stream},
the @term{stream} can be either open or closed;
in both cases, the @code{pathname} returned 
corresponds to the @term{filename} used to open the @term{file}.
@code{pathname} returns the same @term{pathname} for a @term{file stream}
after it is closed as it did when it was open.

If the @param{pathspec} @term{designator} is
a @term{file stream} created by opening a @term{logical pathname},
a @term{logical pathname} is returned.

@subsubheading Examples:

@lisp
 ;; There is a great degree of variability permitted here.  The next
 ;; several examples are intended to illustrate just a few of the many
 ;; possibilities.  Whether the name is canonicalized to a particular
 ;; case (either upper or lower) depends on both the file system and the
 ;; implementation since two different implementations using the same
 ;; file system might differ on many issues.  How information is stored
 ;; internally (and possibly presented in #S notation) might vary,
 ;; possibly requiring `accessors' such as PATHNAME-NAME to perform case
 ;; conversion upon access.  The format of a namestring is dependent both
 ;; on the file system and the implementation since, for example, one
 ;; implementation might include the host name in a namestring, and
 ;; another might not.  #S notation would generally only be used in a
 ;; situation where no appropriate namestring could be constructed for use
 ;; with #P.
 (setq p1 (pathname "test"))
@EV{} #P"CHOCOLATE:TEST" ; with case canonicalization (e.g., VMS)
@OV{} #P"VANILLA:test"   ; without case canonicalization (e.g., Unix)
@OV{} #P"test"
@OV{} #S(PATHNAME :HOST "STRAWBERRY" :NAME "TEST")
@OV{} #S(PATHNAME :HOST "BELGIAN-CHOCOLATE" :NAME "test")
 (setq p2 (pathname "test"))
@EV{} #P"CHOCOLATE:TEST"
@OV{} #P"VANILLA:test"
@OV{} #P"test"
@OV{} #S(PATHNAME :HOST "STRAWBERRY" :NAME "TEST")
@OV{} #S(PATHNAME :HOST "BELGIAN-CHOCOLATE" :NAME "test")
 (pathnamep p1) @EV{} @term{true}
 (eq p1 (pathname p1)) @EV{} @term{true}
 (eq p1 p2)
@EV{} @term{true}
@OV{} @term{false}
 (with-open-file (stream "test" :direction :output)
   (pathname stream))
@EV{} #P"ORANGE-CHOCOLATE:>Gus>test.lisp.newest"
@end lisp


@subsubheading See Also:

@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}


@node make-pathname
@heading make-pathname (Function)
@syindex make-pathname
@cindex make-pathname


@subsubheading Syntax:

@DefunWithValuesNewline{make-pathname, @key{} host device directory name type version defaults case, pathname}

@subsubheading Arguments and Values:

@param{host}---a @term{valid physical pathname host}.
@HairyDefault{}.

@param{device}---a @term{valid pathname device}.
@HairyDefault{}.

@param{directory}---a @term{valid pathname directory}.
@HairyDefault{}.

@param{name}---a @term{valid pathname name}.
@HairyDefault{}.

@param{type}---a @term{valid pathname type}.
@HairyDefault{}.

@param{version}---a @term{valid pathname version}.
@HairyDefault{}.

@param{defaults}---a @term{pathname designator}.
@Default{a @term{pathname} whose host component is the same as the
host component of @thevalueof{*default-pathname-defaults*},
and whose other components are all @nil{}}

@param{case}---one of @kwd{common} or @kwd{local}.
@Default{@kwd{local}}

@param{pathname}---a @term{pathname}.

@subsubheading Description:

Constructs and returns a @term{pathname} from the supplied keyword arguments.

After the components supplied explicitly by
@param{host},
@param{device}, 
@param{directory},
@param{name},
@param{type},
and @param{version} 
are filled in, 
the merging rules used by @code{merge-pathnames} 
are used to fill in any 
unsupplied
components
from the defaults supplied by @param{defaults}.

Whenever a @term{pathname} is constructed the components may be 
canonicalized if appropriate.
For the explanation of the arguments that can be supplied for each component,
see @ref{Pathname Components, Section 19.2.1 (Pathname Components)}.

If @param{case} is supplied,
it is treated as described in @ref{PathnameComponentCase, Section 19.2.2.1.2 (Case in Pathname Components)}.

The resulting @param{pathname} is a @term{logical pathname} 
if and only its host component 
is
a @term{logical host} 
or a @term{string} that names a defined @term{logical host}.

If the @param{directory} is a @term{string},
it should be the name of a top level directory,
and should not contain any punctuation characters; that is,
specifying a @term{string}, @i{str}, is
equivalent to specifying the list @f{(:absolute @i{str})}.
Specifying the symbol @kwd{wild} is equivalent to specifying the list 
@f{(:absolute :wild-inferiors)}, or @f{(:absolute :wild)} 
in a file system that does not support @kwd{wild-inferiors}.

@subsubheading Examples:

@lisp
 ;; Implementation A -- an implementation with access to a single
 ;;  Unix file system.  This implementation happens to never display
 ;;  the `host' information in a namestring, since there is only one host. 
 (make-pathname :directory '(:absolute "public" "games")
                :name "chess" :type "db")
@EV{} #P"/public/games/chess.db" 
@medbreak{}
 ;; Implementation B -- an implementation with access to one or more
 ;;  VMS file systems.  This implementation displays `host' information
 ;;  in the namestring only when the host is not the local host.
 ;;  It uses a double colon to separate a host name from the host's local
 ;;  file name.
 (make-pathname :directory '(:absolute "PUBLIC" "GAMES")
                :name "CHESS" :type "DB")
@EV{} #P"SYS$DISK:[PUBLIC.GAMES]CHESS.DB" 
 (make-pathname :host "BOBBY"
                :directory '(:absolute "PUBLIC" "GAMES")
                :name "CHESS" :type "DB")
@EV{} #P"BOBBY::SYS$DISK:[PUBLIC.GAMES]CHESS.DB" 
@medbreak{}
 ;; Implementation C -- an implementation with simultaneous access to
 ;;  multiple file systems from the same Lisp image.  In this 
 ;;  implementation, there is a convention that any text preceding the
 ;;  first colon in a pathname namestring is a host name.
 (dolist (case '(:common :local))
   (dolist (host '("MY-LISPM" "MY-VAX" "MY-UNIX"))
     (print (make-pathname :host host :case case
                           :directory '(:absolute "PUBLIC" "GAMES")
                           :name "CHESS" :type "DB"))))
@OUT{} #P"MY-LISPM:>public>games>chess.db"
@OUT{} #P"MY-VAX:SYS$DISK:[PUBLIC.GAMES]CHESS.DB"
@OUT{} #P"MY-UNIX:/public/games/chess.db"
@OUT{} #P"MY-LISPM:>public>games>chess.db" 
@OUT{} #P"MY-VAX:SYS$DISK:[PUBLIC.GAMES]CHESS.DB" 
@OUT{} #P"MY-UNIX:/PUBLIC/GAMES/CHESS.DB" 
@EV{} NIL
@end lisp


@subsubheading Affected By:

The @term{file system}.

@subsubheading See Also:

@ref{merge-pathnames},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}

@subsubheading Notes:

Portable programs should not supply @kwd{unspecific} for any component.
See @ref{UnspecificComponent, Section 19.2.2.2.3 (.UNSPECIFIC as a Component Value)}.


@node pathnamep
@heading pathnamep (Function)
@syindex pathnamep
@cindex pathnamep


@subsubheading Syntax:

@DefunWithValues{pathnamep, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, pathname}

@subsubheading Examples:

@lisp
 (setq q "test")  @EV{} "test"
 (pathnamep q) @EV{} @term{false}
 (setq q (pathname "test"))
@EV{} #S(PATHNAME :HOST NIL :DEVICE NIL :DIRECTORY NIL :NAME "test" :TYPE NIL
       :VERSION NIL)
 (pathnamep q) @EV{} @term{true} 
 (setq q (logical-pathname "SYS:SITE;FOO.SYSTEM"))
@EV{} #P"SYS:SITE;FOO.SYSTEM"
 (pathnamep q) @EV{} @term{true}
@end lisp


@subsubheading Notes:

@lisp
 (pathnamep @param{object}) @EQ{} (typep @param{object} 'pathname)
@end lisp



@node pathname-host; pathname-device; pathname-directory; pathname-name; path+
@heading pathname-host, pathname-device, pathname-directory, pathname-name, pathname-type, pathname-version (Function)
@syindex pathname-host
@cindex pathname-host
@syindex pathname-device
@cindex pathname-device
@syindex pathname-directory
@cindex pathname-directory
@syindex pathname-name
@cindex pathname-name
@syindex pathname-type
@cindex pathname-type
@syindex pathname-version
@cindex pathname-version
@anchor{pathname-host}


@subsubheading Syntax:


@DefunWithValues{pathname-host, pathname @key{} case, host}

@DefunWithValues{pathname-device, pathname @key{} case, device}

@DefunWithValues{pathname-directory, pathname @key{} case, directory}

@DefunWithValues{pathname-name, pathname @key{} case, name}

@DefunWithValues{pathname-type, pathname @key{} case, type}


@DefunWithValues{pathname-version, pathname, version}

@subsubheading Arguments and Values:

@param{pathname}---a @term{pathname designator}.

@param{case}---one of @kwd{local} or @kwd{common}.
@Default{@kwd{local}}

@param{host}---a @term{valid pathname host}.

@param{device}---a @term{valid pathname device}.

@param{directory}---a @term{valid pathname directory}.

@param{name}---a @term{valid pathname name}.

@param{type}---a @term{valid pathname type}.

@param{version}---a @term{valid pathname version}.


@subsubheading Description:

These functions return the components of @param{pathname}.

If the @param{pathname} @term{designator} is a @term{pathname},
it represents the name used to open the file. This may be, but is
not required to be, the actual name of the file. 

If @param{case} is supplied,
it is treated as described in @ref{PathnameComponentCase, Section 19.2.2.1.2 (Case in Pathname Components)}.

@subsubheading Examples:

@lisp
 (setq q (make-pathname :host "KATHY"
                        :directory "CHAPMAN" 
                        :name "LOGIN" :type "COM"))
@EV{} #P"KATHY::[CHAPMAN]LOGIN.COM"
 (pathname-host q) @EV{} "KATHY"
 (pathname-name q) @EV{} "LOGIN"
 (pathname-type q) @EV{} "COM"

 ;; Because namestrings are used, the results shown in the remaining
 ;; examples are not necessarily the only possible results.  Mappings
 ;; from namestring representation to pathname representation are 
 ;; dependent both on the file system involved and on the implementation
 ;; (since there may be several implementations which can manipulate the
 ;; the same file system, and those implementations are not constrained
 ;; to agree on all details). Consult the documentation for each
 ;; implementation for specific information on how namestrings are treated
 ;; that implementation.

 ;; VMS
 (pathname-directory (parse-namestring "[FOO.*.BAR]BAZ.LSP"))
@EV{} (:ABSOLUTE "FOO" "BAR")
 (pathname-directory (parse-namestring "[FOO.*.BAR]BAZ.LSP") :case :common)
@EV{} (:ABSOLUTE "FOO" "BAR")

 ;; Unix
 (pathname-directory "foo.l") @EV{} NIL
 (pathname-device "foo.l") @EV{} :UNSPECIFIC
 (pathname-name "foo.l") @EV{} "foo"
 (pathname-name "foo.l" :case :local) @EV{} "foo"
 (pathname-name "foo.l" :case :common) @EV{} "FOO"
 (pathname-type "foo.l") @EV{} "l"
 (pathname-type "foo.l" :case :local) @EV{} "l"
 (pathname-type "foo.l" :case :common) @EV{} "L"
 (pathname-type "foo") @EV{} :UNSPECIFIC
 (pathname-type "foo" :case :common) @EV{} :UNSPECIFIC
 (pathname-type "foo.") @EV{} ""
 (pathname-type "foo." :case :common) @EV{} ""
 (pathname-directory (parse-namestring "/foo/bar/baz.lisp") :case :local)
@EV{} (:ABSOLUTE "foo" "bar")
 (pathname-directory (parse-namestring "/foo/bar/baz.lisp") :case :local)
@EV{} (:ABSOLUTE "FOO" "BAR")
 (pathname-directory (parse-namestring "../baz.lisp"))
@EV{} (:RELATIVE :UP)
 (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/BAR/../Mum/baz"))
@EV{} (:ABSOLUTE "foo" "BAR" :UP "Mum")
 (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/BAR/../Mum/baz") :case :common)
@EV{} (:ABSOLUTE "FOO" "bar" :UP "Mum")
 (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/*/bar/baz.l"))
@EV{} (:ABSOLUTE "foo" :WILD "bar")
 (PATHNAME-DIRECTORY (PARSE-NAMESTRING "/foo/*/bar/baz.l") :case :common)
@EV{} (:ABSOLUTE "FOO" :WILD "BAR")

 ;; Symbolics LMFS
 (pathname-directory (parse-namestring ">foo>**>bar>baz.lisp"))
@EV{} (:ABSOLUTE "foo" :WILD-INFERIORS "bar")
 (pathname-directory (parse-namestring ">foo>*>bar>baz.lisp"))
@EV{} (:ABSOLUTE "foo" :WILD "bar")
 (pathname-directory (parse-namestring ">foo>*>bar>baz.lisp") :case :common)
@EV{} (:ABSOLUTE "FOO" :WILD "BAR")
 (pathname-device (parse-namestring ">foo>baz.lisp")) @EV{} :UNSPECIFIC
@end lisp


@subsubheading Affected By:

The @term{implementation} and the host @term{file system}.

@subsubheading Exceptional Situations:

Should signal an error @oftype{type-error} if its first argument is not a @term{pathname}.

@subsubheading See Also:

@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}


@node load-logical-pathname-translations
@heading load-logical-pathname-translations (Function)
@syindex load-logical-pathname-translations
@cindex load-logical-pathname-translations



@subsubheading Syntax:

@DefunWithValues{load-logical-pathname-translations, host, just-loaded}

@subsubheading Arguments and Values:

@param{host}---a @term{string}.

@term{just-loaded}---a @term{generalized boolean}.

@subsubheading Description:

Searches for and loads the definition of a @term{logical host} named @param{host},
if it is not already defined.
The specific nature of the search is @term{implementation-defined}.

If the @param{host} is already defined, 
no attempt to find or load a definition is attempted,
and @term{false} is returned.
If the @param{host} is not already defined,
but a definition is successfully found and loaded,
@term{true} is returned.
Otherwise, an error is signaled.

@subsubheading Examples:

@lisp
 (translate-logical-pathname "hacks:weather;barometer.lisp.newest")
@OUT{} Error: The logical host HACKS is not defined.
 (load-logical-pathname-translations "HACKS")
@OUT{} ;; Loading SYS:SITE;HACKS.TRANSLATIONS
@OUT{} ;; Loading done.
@EV{} @term{true}
 (translate-logical-pathname "hacks:weather;barometer.lisp.newest")
@EV{} #P"HELIUM:[SHARED.HACKS.WEATHER]BAROMETER.LSP;0"
 (load-logical-pathname-translations "HACKS")
@EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

If no definition is found, an error @oftype{error} is signaled.

@subsubheading See Also:

@ref{logical-pathname (System Class)}

@subsubheading Notes:

@term{Logical pathname} definitions will be created not just by 
@term{implementors} but also by @term{programmers}.  As such,
it is important that the search strategy be documented.
For example, an @term{implementation} might define that the
definition of a @param{host} is to be found in a file called
``@param{host}.translations'' in some specifically named directory.



@node logical-pathname-translations
@heading logical-pathname-translations (Accessor)
@syindex logical-pathname-translations
@cindex logical-pathname-translations



@subsubheading Syntax:

@DefunWithValues{logical-pathname-translations, host, translations}
@Defsetf{logical-pathname-translations, host, new-translations}

@subsubheading Arguments and Values:

@param{host}---a @term{logical host designator}.

@param{translations}, @param{new-translations}---a @term{list}.

@subsubheading Description:

Returns the host's @term{list} of translations.
Each translation is a @term{list} of at least two elements: 
@i{from-wildcard} and @i{to-wildcard}.  Any
additional elements are @term{implementation-defined}.  
@i{From-wildcard} is a
@term{logical pathname} whose host is @param{host}.  
@i{To-wildcard} is a @term{pathname}.    
@reviewer{Laddaga: Can this be a logical pathname?}

@f{(setf (logical-pathname-translations @param{host}) @i{translations})} sets a 
@term{logical pathname} host's
@term{list} of @i{translations}.  If @param{host} 
is a @term{string} that has
not been previously used as 
a @term{logical pathname} host, a new 
@term{logical pathname} host is defined; 
otherwise an existing host's translations are
replaced.  @term{logical pathname} host names are compared with @code{string-equal}.

When setting the translations list, each @i{from-wildcard} 
can be a @term{logical pathname} whose
host is @param{host} or a @term{logical pathname} namestring
parseable by @f{(parse-namestring @term{string} @i{host})}, 
where @i{host}
represents the appropriate @term{object} as defined 
by @code{parse-namestring}. Each
@i{to-wildcard} can be anything coercible to a 
@term{pathname} by
@f{(pathname @i{to-wildcard})}.  
If @i{to-wildcard} coerces to a @term{logical pathname},
@code{translate-logical-pathname} 
will perform repeated translation steps when
it uses it.

@param{host} is either the host component of a 
@term{logical pathname} or a
@term{string} that has been defined 
as a @term{logical pathname} host name by @code{setf} of
@code{logical-pathname-translations}. 

@subsubheading Examples:

@reviewer{Laddaga: Shouldn't there be some @f{*.*}'s in the list
of translations for @f{PROG} below?}

@lisp
 ;;;A very simple example of setting up a logical pathname host.  No
 ;;;translations are necessary to get around file system restrictions, so
 ;;;all that is necessary is to specify the root of the physical directory
 ;;;tree that contains the logical file system.
 ;;;The namestring syntax on the right-hand side is implementation-dependent.
 (setf (logical-pathname-translations "foo")
       '(("**;*.*.*"              "MY-LISPM:>library>foo>**>")))
@smallbreak{} 
 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "foo:bar;baz;mum.quux.3")
@EV{} #P"MY-LISPM:>library>foo>bar>baz>mum.quux.3"
@medbreak{} 
 ;;;A more complex example, dividing the files among two file servers
 ;;;and several different directories.  This Unix doesn't support
 ;;;:WILD-INFERIORS in the directory, so each directory level must
 ;;;be translated individually.  No file name or type translations
 ;;;are required except for .MAIL to .MBX.
 ;;;The namestring syntax on the right-hand side is implementation-dependent.
 (setf (logical-pathname-translations "prog")
       '(("RELEASED;*.*.*"        "MY-UNIX:/sys/bin/my-prog/")
         ("RELEASED;*;*.*.*"      "MY-UNIX:/sys/bin/my-prog/*/")
         ("EXPERIMENTAL;*.*.*"    "MY-UNIX:/usr/Joe/development/prog/")
         ("EXPERIMENTAL;DOCUMENTATION;*.*.*"
                                  "MY-VAX:SYS$DISK:[JOE.DOC]")
         ("EXPERIMENTAL;*;*.*.*"  "MY-UNIX:/usr/Joe/development/prog/*/")
         ("MAIL;**;*.MAIL"        "MY-VAX:SYS$DISK:[JOE.MAIL.PROG...]*.MBX")))
@smallbreak{}
 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "prog:mail;save;ideas.mail.3")
@EV{} #P"MY-VAX:SYS$DISK:[JOE.MAIL.PROG.SAVE]IDEAS.MBX.3"
@medbreak{}
 ;;;Example translations for a program that uses three files main.lisp,
 ;;;auxiliary.lisp, and documentation.lisp.  These translations might be
 ;;;supplied by a software supplier as examples.
@smallbreak{}
 ;;;For Unix with long file names
 (setf (logical-pathname-translations "prog")
       '(("CODE;*.*.*"             "/lib/prog/")))
@smallbreak{}
 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "prog:code;documentation.lisp")
@EV{} #P"/lib/prog/documentation.lisp"
@smallbreak{}
 ;;;For Unix with 14-character file names, using .lisp as the type
 (setf (logical-pathname-translations "prog")
       '(("CODE;DOCUMENTATION.*.*" "/lib/prog/docum.*")
         ("CODE;*.*.*"             "/lib/prog/")))

 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "prog:code;documentation.lisp")
@EV{} #P"/lib/prog/docum.lisp"
@medbreak{}
 ;;;For Unix with 14-character file names, using .l as the type
 ;;;The second translation shortens the compiled file type to .b
 (setf (logical-pathname-translations "prog")
       `(("**;*.LISP.*"            ,(logical-pathname "PROG:**;*.L.*"))
         (,(compile-file-pathname (logical-pathname "PROG:**;*.LISP.*"))
                                   ,(logical-pathname "PROG:**;*.B.*"))
         ("CODE;DOCUMENTATION.*.*" "/lib/prog/documentatio.*")
         ("CODE;*.*.*"             "/lib/prog/")))
@smallbreak{}
 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "prog:code;documentation.lisp")
@EV{} #P"/lib/prog/documentatio.l"
@medbreak{}
 ;;;For a Cray with 6 character names and no directories, types, or versions.
 (setf (logical-pathname-translations "prog")
       (let ((l '(("MAIN" "PGMN")
                  ("AUXILIARY" "PGAUX")
                  ("DOCUMENTATION" "PGDOC")))
             (logpath (logical-pathname "prog:code;"))
             (phypath (pathname "XXX")))
         (append
           ;; Translations for source files
           (mapcar #'(lambda (x)
                       (let ((log (first x))
                             (phy (second x)))
                         (list (make-pathname :name log
                                              :type "LISP"
                                              :version :wild
                                              :defaults logpath)
                               (make-pathname :name phy
                                              :defaults phypath))))
                   l)
           ;; Translations for compiled files
           (mapcar #'(lambda (x)
                       (let* ((log (first x))
                              (phy (second x))
                              (com (compile-file-pathname
                                     (make-pathname :name log
                                                    :type "LISP"
                                                    :version :wild
                                                    :defaults logpath))))
                         (setq phy (concatenate 'string phy "B"))
                         (list com
                               (make-pathname :name phy
                                              :defaults phypath))))
                   l))))

 ;;;Sample use of that logical pathname.  The return value
 ;;;is implementation-dependent.          
 (translate-logical-pathname "prog:code;documentation.lisp")
@EV{} #P"PGDOC"
@end lisp


@subsubheading Exceptional Situations:

If @param{host} is incorrectly supplied, 
an error @oftype{type-error} is signaled.

@subsubheading See Also:

@ref{logical-pathname (System Class)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}

@subsubheading Notes:

Implementations can define additional @term{functions}
that operate on @term{logical pathname} hosts,
for example to specify additional translation rules or options.



@node logical-pathname (Function)
@heading logical-pathname (Function)
@syindex logical-pathname
@cindex logical-pathname



@subsubheading Syntax:

@DefunWithValues{logical-pathname, pathspec, logical-pathname}

@subsubheading Arguments and Values:

@param{pathspec}---a @term{logical pathname}, 
a @term{logical pathname} @term{namestring},
or a @term{stream}.

@param{logical-pathname}---a @term{logical pathname}.

@subsubheading Description:

@code{logical-pathname} converts @param{pathspec} to a
@term{logical pathname} and returns the new @term{logical pathname}.
If @param{pathspec} is a @term{logical pathname} @term{namestring},
it should contain a host component and its following @term{colon}.
If @param{pathspec} is a @term{stream}, it should be one
for which @code{pathname} returns a @term{logical pathname}.  

If @param{pathspec} is a @term{stream}, the @term{stream} can be either open or closed.
@code{logical-pathname} returns the same @term{logical pathname} after a
file is closed as it did when the file was open.
It is an error if @param{pathspec} is a @term{stream} that is 
created with
@code{make-two-way-stream}, 
@code{make-echo-stream},             
@code{make-broadcast-stream}, 
@code{make-concatenated-stream},
@code{make-string-input-stream},
or
@code{make-string-output-stream}.

@subsubheading Exceptional Situations:

Signals an error @oftype{type-error} if @param{pathspec} isn't supplied correctly.

@subsubheading See Also:

@ref{logical-pathname (System Class)},
@ref{translate-logical-pathname},
@ref{Logical Pathnames, Section 19.3 (Logical Pathnames)}



@node *default-pathname-defaults*
@heading *default-pathname-defaults* (Variable)
@syindex *default-pathname-defaults*
@cindex *default-pathname-defaults*


@subsubheading Value Type:

a @term{pathname} @term{object}.

@subsubheading Initial Value:

An @term{implementation-dependent} @term{pathname}, 
typically in the working directory that was current when @clisp{}@spc{}was started up.

@subsubheading Description:

a @term{pathname}, used as the default whenever a @term{function}
needs a default @term{pathname} and one is not supplied.

@subsubheading Examples:
@lisp
 ;; This example illustrates a possible usage for a hypothetical Lisp running on a
 ;; DEC TOPS-20 file system.  Since pathname conventions vary between Lisp 
 ;; implementations and host file system types, it is not possible to provide a
 ;; general-purpose, conforming example.
 *default-pathname-defaults* @EV{} #P"PS:<FRED>"
 (merge-pathnames (make-pathname :name "CALENDAR"))
@EV{} #P"PS:<FRED>CALENDAR"
 (let ((*default-pathname-defaults* (pathname "<MARY>")))
   (merge-pathnames (make-pathname :name "CALENDAR")))
@EV{} #P"<MARY>CALENDAR"
@end lisp


@subsubheading Affected By:

The @term{implementation}.


@node namestring; file-namestring; directory-namestring; host-namestring; eno+
@heading namestring, file-namestring, directory-namestring, host-namestring, enough-namestring (Function)
@syindex namestring
@cindex namestring
@syindex file-namestring
@cindex file-namestring
@syindex directory-namestring
@cindex directory-namestring
@syindex host-namestring
@cindex host-namestring
@syindex enough-namestring
@cindex enough-namestring
@anchor{namestring}


@subsubheading Syntax:

@DefunWithValues{namestring, pathname, namestring}

@DefunWithValues{file-namestring, pathname, namestring}
@DefunWithValues{directory-namestring, pathname, namestring}
@DefunWithValues{host-namestring, pathname, namestring}

@DefunWithValues{enough-namestring, pathname @opt{} defaults, namestring}

@subsubheading Arguments and Values:

@param{pathname}---a @term{pathname designator}.

@param{defaults}---a @term{pathname designator}.
@Default{@thevalueof{*default-pathname-defaults*}}

@param{namestring}---a @term{string} or @nil{}.
@editornote{KMP: Under what circumstances can NIL be returned??}

@subsubheading Description:


These functions convert @param{pathname} into a namestring.
The name represented by @param{pathname} is returned as a @term{namestring}
in an @term{implementation-dependent} canonical form.

@code{namestring} returns the full form of @param{pathname}.

@code{file-namestring} returns just the name, type, and version
components of @param{pathname}.

@code{directory-namestring} returns the directory name portion.

@code{host-namestring} returns the host name. 

@code{enough-namestring} returns an abbreviated namestring 
that is just sufficient to identify the file named by @param{pathname}
when considered relative to the @param{defaults}.
It is required that

@lisp
 (merge-pathnames (enough-namestring pathname defaults) defaults)
@EQ{} (merge-pathnames (parse-namestring pathname nil defaults) defaults)
@end lisp

in all cases, and the result of @code{enough-namestring} is
the shortest reasonable @term{string} that will satisfy this criterion.

It is not necessarily possible to construct a valid @term{namestring} 
by concatenating some of the three shorter @term{namestrings} in some order.

@subsubheading Examples:

@lisp
 (namestring "getty")            
@EV{} "getty"
 (setq q (make-pathname :host "kathy" 
                         :directory 
                           (pathname-directory *default-pathname-defaults*)
                         :name "getty")) 
@EV{} #S(PATHNAME :HOST "kathy" :DEVICE NIL :DIRECTORY @i{directory-name} 
       :NAME "getty" :TYPE NIL :VERSION NIL)
 (file-namestring q) @EV{} "getty"
 (directory-namestring q) @EV{} @i{directory-name}
 (host-namestring q) @EV{} "kathy" 
@end lisp

@lisp
 ;;;Using Unix syntax and the wildcard conventions used by the
 ;;;particular version of Unix on which this example was created:
 (namestring
   (translate-pathname "/usr/dmr/hacks/frob.l"
                       "/usr/d*/hacks/*.l"
                       "/usr/d*/backup/hacks/backup-*.*"))
@EV{} "/usr/dmr/backup/hacks/backup-frob.l"
 (namestring
   (translate-pathname "/usr/dmr/hacks/frob.l"
                       "/usr/d*/hacks/fr*.l"
                       "/usr/d*/backup/hacks/backup-*.*"))
@EV{} "/usr/dmr/backup/hacks/backup-ob.l"
 
 ;;;This is similar to the above example but uses two different hosts,
 ;;;U: which is a Unix and V: which is a VMS.  Note the translation
 ;;;of file type and alphabetic case conventions.
 (namestring
   (translate-pathname "U:/usr/dmr/hacks/frob.l"
                       "U:/usr/d*/hacks/*.l"
                       "V:SYS$DISK:[D*.BACKUP.HACKS]BACKUP-*.*"))
@EV{} "V:SYS$DISK:[DMR.BACKUP.HACKS]BACKUP-FROB.LSP"
 (namestring
   (translate-pathname "U:/usr/dmr/hacks/frob.l"
                       "U:/usr/d*/hacks/fr*.l"
                       "V:SYS$DISK:[D*.BACKUP.HACKS]BACKUP-*.*"))
@EV{} "V:SYS$DISK:[DMR.BACKUP.HACKS]BACKUP-OB.LSP"
@end lisp


@subsubheading See Also:

@ref{truename},
@ref{merge-pathnames},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}


@node parse-namestring
@heading parse-namestring (Function)
@syindex parse-namestring
@cindex parse-namestring


@subsubheading Syntax:

@DefunWithValuesNewline{parse-namestring, thing @opt{} host default-pathname @key{} start end junk-allowed, pathname\, position}

@subsubheading Arguments and Values:

@param{thing}---a @term{string},
a @term{pathname},
or a @term{stream associated with a file}.

@param{host}---a @term{valid pathname host}, a @term{logical host}, or @nil{}.

@param{default-pathname}---a @term{pathname designator}.
@Default{@thevalueof{*default-pathname-defaults*}}

@param{start}, @param{end}---@term{bounding index designators} of @param{thing}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{junk-allowed}---a @term{generalized boolean}.
@Default{@term{false}}

@param{pathname}---a @term{pathname}, or @nil{}.

@param{position}---a @term{bounding index designator} for @param{thing}.

@subsubheading Description:

Converts @param{thing} into a @term{pathname}.

The @param{host} supplies a host name with respect to which the parsing occurs.

If @param{thing} is a @term{stream associated with a file},
processing proceeds as if the @term{pathname} used to open that @term{file}
had been supplied instead.

If @param{thing} is a @term{pathname},
the @param{host} and the host component of @param{thing} are compared.
If they match, 
two values are immediately returned: @param{thing} and @param{start};
otherwise (if they do not match), an error is signaled.


Otherwise (if @param{thing} is a @term{string}),
@code{parse-namestring} parses the name of a @term{file} within
the substring of @param{thing} bounded by @param{start} and @param{end}.

If @param{thing} is a @term{string} then 
the substring of @param{thing} @term{bounded} by @param{start} and @param{end}
is parsed into a @term{pathname} 
as follows:


@itemize @bullet{}

@item 
If @param{host} is a @term{logical host} then @param{thing} is parsed
as a @term{logical pathname} @term{namestring} 
on the @param{host}.

@item
If @param{host} is @nil{}@spc{}and @param{thing} is a syntactically valid 
@term{logical pathname} @term{namestring} containing an explicit host,
then it is parsed as a @term{logical pathname} @term{namestring}.

@item
If  @param{host} is @nil{},
@param{default-pathname} is a @term{logical pathname},
and @param{thing} is a syntactically valid @term{logical pathname} @term{namestring}
without an explicit host,
then it is parsed as a @term{logical pathname} @term{namestring}
on the host that is the host component of @param{default-pathname}.

@item
Otherwise, the parsing of @param{thing} is @term{implementation-defined}.
@end itemize


In the first 
of these
cases,
the host portion of the @term{logical pathname} namestring
and its following @term{colon} are optional.

If the host portion of the namestring and @param{host} 
are both present and do not match,
an error is signaled.               

If @param{junk-allowed} is @term{true},
then the @term{primary value} is the @term{pathname} parsed 
or, if no syntactically correct @term{pathname} was seen, @nil{}.
If @param{junk-allowed} is @term{false},
then the entire substring is scanned, 
and the @term{primary value} is the @term{pathname} parsed.

In either case, the @term{secondary value}
is the index into @param{thing} of the delimiter that terminated the parse,
or the index beyond the substring if the parse terminated at the end of the substring
(as will always be the case if @param{junk-allowed} is @term{false}).

Parsing a @term{null} @term{string} always succeeds,
producing a @term{pathname} with all components (except the host) equal to @nil{}.

If @param{thing} contains an explicit host name and no explicit device name,
then it is @term{implementation-defined} whether @code{parse-namestring}
will supply the standard default device for that host as the device component
of the resulting @term{pathname}.

@subsubheading Examples:

@lisp
 (setq q (parse-namestring "test"))  
@EV{} #S(PATHNAME :HOST NIL :DEVICE NIL :DIRECTORY NIL :NAME "test" 
       :TYPE NIL :VERSION NIL)
 (pathnamep q) @EV{} @term{true}
 (parse-namestring "test") 
@EV{} #S(PATHNAME :HOST NIL :DEVICE NIL :DIRECTORY NIL :NAME "test"
       :TYPE NIL :VERSION NIL), 4
 (setq s (open @i{xxx})) @EV{} #<Input File Stream...>
 (parse-namestring s) 
@EV{} #S(PATHNAME :HOST NIL :DEVICE NIL :DIRECTORY NIL :NAME @i{xxx} 
       :TYPE NIL :VERSION NIL), 0
 (parse-namestring "test" nil nil :start 2 :end 4 )
 @EV{} #S(PATHNAME ...), 15
 (parse-namestring "foo.lisp")
@EV{} #P"foo.lisp"
@end lisp


@subsubheading Exceptional Situations:

If @param{junk-allowed} is @term{false},
an error @oftype{parse-error} is signaled if @param{thing} 
does not consist entirely of the representation of a @term{pathname}, 
possibly surrounded on either side by @term{whitespace}@sub1{} characters if that is
appropriate to the cultural conventions of the implementation.

If @param{host} is supplied and not @nil{},
and @param{thing} contains a manifest host name, 
an error @oftype{error} is signaled if the hosts do not match.

If @param{thing} is a @term{logical pathname} namestring
and if the host portion of the namestring and @param{host} 
are both present and do not match,
an error @oftype{error} is signaled.               

@subsubheading See Also:

@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{UnspecificComponent, Section 19.2.2.2.3 (.UNSPECIFIC as a Component Value)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}


@node wild-pathname-p
@heading wild-pathname-p (Function)
@syindex wild-pathname-p
@cindex wild-pathname-p



@subsubheading Syntax:

@DefunWithValues{wild-pathname-p, pathname @opt{} field-key, generalized-boolean}

@subsubheading Arguments and Values:

@param{pathname}---a @term{pathname designator}.

@param{Field-key}---one of @kwd{host},
@kwd{device}
@kwd{directory},
@kwd{name},
@kwd{type},
@kwd{version},
or @nil{}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@code{wild-pathname-p} tests @param{pathname} for the presence of wildcard components.  

If @param{pathname} is a @term{pathname} (as returned by @code{pathname})
it represents the name used to open the file. This may be, but is
not required to be, the actual name of the file. 

If @param{field-key} is not supplied or @nil{}, @code{wild-pathname-p}    
returns true if @param{pathname} has any wildcard components, @nil{}@spc{}
if @param{pathname} has none.
If @param{field-key} is @term{non-nil}, @code{wild-pathname-p}    
returns true if the indicated component of @param{pathname} is a wildcard, 
@nil{}@spc{}if the component is not a wildcard.  

@subsubheading Examples:
@lisp
 ;;;The following examples are not portable.  They are written to run
 ;;;with particular file systems and particular wildcard conventions.
 ;;;Other implementations will behave differently.  These examples are
 ;;;intended to be illustrative, not to be prescriptive.
 
 (wild-pathname-p (make-pathname :name :wild)) @EV{} @term{true}
 (wild-pathname-p (make-pathname :name :wild) :name) @EV{} @term{true}
 (wild-pathname-p (make-pathname :name :wild) :type) @EV{} @term{false}
 (wild-pathname-p (pathname "s:>foo>**>")) @EV{} @term{true} ;Lispm
 (wild-pathname-p (pathname :name "F*O")) @EV{} @term{true} ;Most places
@end lisp


@subsubheading Exceptional Situations:

If @param{pathname} is not a @term{pathname}, a @term{string}, 
or a @term{stream associated with a file} an error @oftype{type-error} is signaled.

@subsubheading See Also:

@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}

@subsubheading Notes:

Not all implementations support wildcards in all fields.
See @ref{WildComponents, Section 19.2.2.2.2 (.WILD as a Component Value)}@spc{}and @ref{WildcardRestrictions, Section 19.2.2.3 (Restrictions on Wildcard Pathnames)}.


@node pathname-match-p
@heading pathname-match-p (Function)
@syindex pathname-match-p
@cindex pathname-match-p



@subsubheading Syntax:

@DefunWithValues{pathname-match-p, pathname wildcard, generalized-boolean}

@subsubheading Arguments and Values:

@param{pathname}---a @term{pathname designator}.

@param{wildcard}---a @term{designator} for a @term{wild} @term{pathname}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@code{pathname-match-p} returns true if 
@param{pathname} matches @param{wildcard}, otherwise @nil{}.  The 
matching rules are @term{implementation-defined} but should be consistent with 
@code{directory}. Missing components of @param{wildcard} default to @kwd{wild}.

It is valid for @param{pathname} to be a wild @term{pathname}; 
a wildcard field in @param{pathname} only matches a
wildcard field in @param{wildcard} (@ie{} 
@code{pathname-match-p} is not commutative).
It is valid for @param{wildcard} to be a non-wild @term{pathname}.

@subsubheading Exceptional Situations:

If @param{pathname} or @param{wildcard} is not a @term{pathname}, @term{string}, 
or @term{stream associated with a file} an error @oftype{type-error} is signaled.

@subsubheading See Also:

@ref{directory},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}


@node translate-logical-pathname
@heading translate-logical-pathname (Function)
@syindex translate-logical-pathname
@cindex translate-logical-pathname



@subsubheading Syntax:

@DefunWithValues{translate-logical-pathname, pathname @key{}, physical-pathname}

@subsubheading Arguments and Values:

@param{pathname}---a @term{pathname designator},
or a @term{logical pathname} @term{namestring}.

@param{physical-pathname}---a @term{physical pathname}.

@subsubheading Description:

Translates @param{pathname} to a @term{physical pathname}, which it returns.

If @param{pathname} is a @term{stream}, the
@term{stream} can be either open or closed.
@code{translate-logical-pathname} returns the same 
physical pathname after a
file is closed as it did when the file was open.
It is an error if @param{pathname} is a @term{stream} that is 
created with @code{make-two-way-stream}, 
@code{make-echo-stream},             
@code{make-broadcast-stream}, 
@code{make-concatenated-stream}, @code{make-string-input-stream},
@code{make-string-output-stream}.

If @param{pathname} is a @term{logical pathname} namestring,
the host portion of the 
@term{logical pathname} namestring and its following @term{colon} are required.


@param{Pathname} is first coerced to a @term{pathname}.
If the coerced @param{pathname} is a physical pathname, it is returned.
If the coerced @param{pathname} is a @term{logical pathname},
the first matching translation (according to @code{pathname-match-p})
of the @term{logical pathname} host is applied, as if by calling 
@code{translate-pathname}.  If the result is
a @term{logical pathname}, this process is repeated.  
When the result is
finally a physical pathname, it is returned.
If no translation matches, an error 
is signaled.

@code{translate-logical-pathname} might perform additional translations,
typically to provide translation of file types to local naming
conventions, to accomodate physical file systems with limited length
names, or to deal with special character requirements such as
translating hyphens to underscores or uppercase letters to lowercase.
Any such additional translations are @term{implementation-defined}.  Some
implementations do no additional translations.

There are no specified keyword arguments for
@code{translate-logical-pathname}, 
but implementations are permitted to extend
it by adding keyword arguments.  



@subsubheading Examples:

See @code{logical-pathname-translations}.

@subsubheading Exceptional Situations:

If @param{pathname} is incorrectly supplied, an error @oftype{type-error} is signaled.

If no translation matches, an error @oftype{file-error} is signaled.
@editornote{KMP: Is file-error really right, or should it be pathname-error?}

@subsubheading See Also:

@ref{logical-pathname (Function)},
@ref{logical-pathname-translations}, 
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}



@node translate-pathname
@heading translate-pathname (Function)
@syindex translate-pathname
@cindex translate-pathname



@subsubheading Syntax:

@DefunWithValuesNewline{translate-pathname, source from-wildcard to-wildcard @key{}, translated-pathname}

@subsubheading Arguments and Values:

@param{source}---a @term{pathname designator}.

@param{from-wildcard}---a @term{pathname designator}.

@param{to-wildcard}---a @term{pathname designator}.

@param{translated-pathname}---a @term{pathname}.

@subsubheading Description:

@code{translate-pathname} translates @param{source} 
(that matches @param{from-wildcard}) into a corresponding @term{pathname} 
that matches @param{to-wildcard}, and returns the corresponding @term{pathname}.

The resulting @term{pathname} is @param{to-wildcard} with each wildcard or missing
field replaced by a portion of @param{source}.  A ``wildcard field'' is a
@term{pathname} component with a value of @kwd{wild}, a @kwd{wild} element of a
@term{list}-valued directory component, or an @term{implementation-defined} portion
of a component, such as the @f{"*"} in the complex wildcard string
@f{"foo*bar"} that some implementations support.  An implementation that
adds other wildcard features, such as regular expressions, must define
how @code{translate-pathname} extends to those features.  
A ``missing field'' is a @term{pathname} component with a value of @nil{}.

The portion of @param{source} 
that is copied into the resulting @term{pathname} is 
@term{implementation-defined}.  Typically 
it is determined by the user interface conventions
of the file systems involved.  Usually it is the portion of @param{source}
that matches a wildcard field of 
@param{from-wildcard} that is in the same
position as the wildcard or missing field of 
@param{to-wildcard}.  If there
is no wildcard field in 
@param{from-wildcard} at that position, then usually
it is the entire corresponding 
@term{pathname} component of @param{source}, or in
the case of a 
@term{list}-valued directory component, the entire corresponding
@term{list} element.  

During the copying of a portion of @param{source} into 
the resulting @term{pathname}, additional
@term{implementation-defined} translations of @term{case} or file naming
conventions might occur, especially when 
@param{from-wildcard} and
@param{to-wildcard} are for different hosts.

It is valid for
@param{source} to be a wild 
@term{pathname}; in general this will produce a wild
result.  It 
is valid for @param{from-wildcard} and/or @param{to-wildcard} to be
non-wild @term{pathnames}.  

There are no specified keyword arguments for 
@code{translate-pathname}, but
implementations are permitted to extend it by adding keyword arguments.

@code{translate-pathname} maps customary case in
@param{source} into customary case in the output @term{pathname}.


@subsubheading Examples:

@lisp
 ;; The results of the following five forms are all implementation-dependent.
 ;; The second item in particular is shown with multiple results just to 
 ;; emphasize one of many particular variations which commonly occurs.
 (pathname-name (translate-pathname "foobar" "foo*" "*baz")) @EV{} "barbaz"
 (pathname-name (translate-pathname "foobar" "foo*" "*"))
@EV{} "foobar"
@OV{} "bar"
 (pathname-name (translate-pathname "foobar" "*"    "foo*")) @EV{} "foofoobar"
 (pathname-name (translate-pathname "bar"    "*"    "foo*")) @EV{} "foobar"
 (pathname-name (translate-pathname "foobar" "foo*" "baz*")) @EV{} "bazbar"

 (defun translate-logical-pathname-1 (pathname rules)
   (let ((rule (assoc pathname rules :test #'pathname-match-p)))
     (unless rule (error "No translation rule for ~A" pathname))
     (translate-pathname pathname (first rule) (second rule))))
 (translate-logical-pathname-1 "FOO:CODE;BASIC.LISP"
                       '(("FOO:DOCUMENTATION;" "MY-UNIX:/doc/foo/")
                         ("FOO:CODE;"          "MY-UNIX:/lib/foo/")
                         ("FOO:PATCHES;*;"     "MY-UNIX:/lib/foo/patch/*/")))
@EV{} #P"MY-UNIX:/lib/foo/basic.l"

;;;This example assumes one particular set of wildcard conventions
;;;Not all file systems will run this example exactly as written
 (defun rename-files (from to)
   (dolist (file (directory from))
     (rename-file file (translate-pathname file from to))))
 (rename-files "/usr/me/*.lisp" "/dev/her/*.l")
   ;Renames /usr/me/init.lisp to /dev/her/init.l
 (rename-files "/usr/me/pcl*/*" "/sys/pcl/*/")
   ;Renames /usr/me/pcl-5-may/low.lisp to /sys/pcl/pcl-5-may/low.lisp
   ;In some file systems the result might be /sys/pcl/5-may/low.lisp
 (rename-files "/usr/me/pcl*/*" "/sys/library/*/")
   ;Renames /usr/me/pcl-5-may/low.lisp to /sys/library/pcl-5-may/low.lisp
   ;In some file systems the result might be /sys/library/5-may/low.lisp
 (rename-files "/usr/me/foo.bar" "/usr/me2/")
   ;Renames /usr/me/foo.bar to /usr/me2/foo.bar
 (rename-files "/usr/joe/*-recipes.text" "/usr/jim/cookbook/joe's-*-rec.text")
   ;Renames /usr/joe/lamb-recipes.text to /usr/jim/cookbook/joe's-lamb-rec.text
   ;Renames /usr/joe/pork-recipes.text to /usr/jim/cookbook/joe's-pork-rec.text
   ;Renames /usr/joe/veg-recipes.text to /usr/jim/cookbook/joe's-veg-rec.text
@end lisp


@subsubheading Exceptional Situations:

If any of @param{source}, @param{from-wildcard}, or @param{to-wildcard}
is not a @term{pathname}, a @term{string}, or a @term{stream associated with a file}
an error @oftype{type-error} is signaled.  

@f{(pathname-match-p @param{source from-wildcard})} must
be true or an error @oftype{error} is signaled.

@subsubheading See Also:

@ref{namestring},
@ref{pathname-host},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}

@subsubheading Notes:

The exact behavior of @code{translate-pathname} cannot be dictated
by the @clisp{}@spc{}language and must be allowed to vary, depending on the
user interface conventions of the file systems involved.

The following is an implementation guideline.
One file system performs this operation by
examining each piece of the three 
@term{pathnames} in turn, where a piece is a
@term{pathname} component or a 
@term{list} element of a structured component such as
a hierarchical directory.  Hierarchical directory elements in
@param{from-wildcard} and 
@param{to-wildcard} are matched by whether they are
wildcards, not by depth in the directory hierarchy.  If the piece in
@param{to-wildcard} is present and not wild, it is copied into the result.
If the piece in @param{to-wildcard} is 
@kwd{wild} or @nil{}, the piece in @param{source} is
copied into the result.  Otherwise, the piece in
@param{to-wildcard} might be
a complex wildcard such as @f{"foo*bar"} and the piece in 
@param{from-wildcard}
should be wild; the portion of the piece in 
@param{source} that matches the
wildcard portion of the piece in 
@param{from-wildcard} replaces the wildcard
portion of the piece in 
@param{to-wildcard} and the value produced is used in
the result.


@node merge-pathnames
@heading merge-pathnames (Function)
@syindex merge-pathnames
@cindex merge-pathnames


@subsubheading Syntax:

@DefunWithValuesNewline{merge-pathnames, pathname @opt{} default-pathname default-version, merged-pathname}

@subsubheading Arguments and Values:

@param{pathname}---a @term{pathname designator}.

@param{default-pathname}---a @term{pathname designator}.
@Default{@thevalueof{*default-pathname-defaults*}}

@param{default-version}---a @term{valid pathname version}.
@Default{@kwd{newest}}

@param{merged-pathname}---a @term{pathname}.

@subsubheading Description:

Constructs a @term{pathname} from @param{pathname} 
by filling in any unsupplied components with the corresponding values
from @param{default-pathname} and @param{default-version}. 

Defaulting of pathname components 
is done by filling in components taken from another @term{pathname}.
This is especially useful for cases such as 
a program that has an input file and an output file.
Unspecified components of the output pathname will come from the input pathname,
except that the type should not default
to the type of the input pathname
but rather to the appropriate default type for output from the program;
for example, see the @term{function} @ref{compile-file-pathname}.

If no version is supplied, @param{default-version} is used.
If @param{default-version} is @nil{}, the version component will remain unchanged.

If @param{pathname} explicitly specifies a host and not a device, and 
if the host component of @param{default-pathname} matches the host component
of @param{pathname}, then the device is taken from the @param{default-pathname};
otherwise the device will be the default file device for that host.  If
@param{pathname} does not specify a host, device, directory, name,
or type, each such component is copied from @param{default-pathname}.
If @param{pathname} does not specify a name, then the version, if not provided, will
come from @param{default-pathname}, just like the other components.  If
@param{pathname} does specify a name, then the version is not affected
by @param{default-pathname}. If this process leaves the
version missing, the @param{default-version} is used.
If the host's file name syntax provides a way
to input a version without a name or type, the user can let the name
and type default but supply a version different from the one in @param{default-pathname}.

If @param{pathname} is a @term{stream}, @param{pathname} effectively
becomes @f{(pathname @param{pathname})}. @code{merge-pathnames}
can be used on either an open or a closed @term{stream}.

If @param{pathname} is a @term{pathname}
it represents the name used to open the file. This may be, but is
not required to be, the actual name of the file. 

@code{merge-pathnames} recognizes a @term{logical pathname} @term{namestring}
when @param{default-pathname} is a @term{logical pathname},
or when the @term{namestring} begins with 
the name of a defined @term{logical host} followed by a @term{colon}.
In the first of these two cases,
the host portion of the @term{logical pathname} @term{namestring}
and its following @term{colon} are optional.

@code{merge-pathnames} returns a 
@term{logical pathname} if and only if
its first argument is a @term{logical pathname},
or its first argument is a @term{logical pathname} @term{namestring} with an explicit host,
or its first argument does not specify a host 
and the @param{default-pathname} is a @term{logical pathname}.

@term{Pathname} merging treats a relative directory specially.  
If @f{(pathname-directory @param{pathname})} is a @term{list} whose
@term{car} is @kwd{relative}, and 
@f{(pathname-directory @param{default-pathname})} is a @term{list}, then
the merged directory is the value of

@lisp
 (append (pathname-directory @param{default-pathname})
         (cdr  ;remove :relative from the front
           (pathname-directory @param{pathname})))
@end lisp

except that if the resulting @term{list} contains a @term{string} or @kwd{wild}
immediately followed by @kwd{back}, both of them are removed.  This removal of 
redundant @kwd{back} @term{keywords} is repeated as many times as possible.
If @f{(pathname-directory @param{default-pathname})} is not a @term{list} or
@f{(pathname-directory @param{pathname})} is not a @term{list} 
whose @term{car} is @kwd{relative}, the merged directory is
@f{(or (pathname-directory @param{pathname}) (pathname-directory @param{default-pathname}))}

@code{merge-pathnames} maps customary case in @param{pathname} 
into customary case in the output @term{pathname}.

@subsubheading Examples:
@lisp
 (merge-pathnames "CMUC::FORMAT"
                  "CMUC::PS:<LISPIO>.FASL")
@EV{} #P"CMUC::PS:<LISPIO>FORMAT.FASL.0"
@end lisp


@subsubheading See Also:

@ref{*default-pathname-defaults*},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}

@subsubheading Notes:

The net effect 
is that if just a name is supplied, 
the host, device, directory, and type will come from @param{default-pathname}, 
but the version will come from @param{default-version}.
If nothing or just a directory is supplied,
the name, type, and version will come from @param{default-pathname} together.




@node Files
@chapter Files
@menu
* File System Concepts::

Dictionary

* directory::
* probe-file::
* ensure-directories-exist::
* truename::
* file-author::
* file-write-date::
* rename-file::
* delete-file::
* file-error::
* file-error-pathname::
@end menu

@node File System Concepts
@section File System Concepts

This section describes the @clisp{}@spc{}interface to file systems.
The model used by this interface assumes 
that 
@cindex file
@dfn{files} are named by 
@cindex filename
@dfn{filenames},
that a @term{filename} can be represented by a @term{pathname} @term{object}, 
and that given a @term{pathname} a @newterm{stream} can be constructed 
that connects to a @term{file} whose @term{filename} it represents.

For information about opening and closing @term{files},
and manipulating their contents, see @ref{Streams, Chapter 21 (Streams)}.

@Thenextfigure{}@spc{}lists some @term{operators} 
that are applicable to @term{files} and directories.


@float Figure,fig20.1
@cartouche
@multitable{compile-file}{file-write-date}{with-open-file}

@item compile-file @tab file-length @tab open
@item delete-file @tab file-position @tab probe-file
@item directory @tab file-write-date @tab rename-file
@item file-author @tab load @tab with-open-file
@end multitable
@end cartouche
@caption{File and Directory Operations}
@end float


@menu
* Coercion of Streams to Pathnames::
* File Operations on Open and Closed Streams::
* Truenames::
@end menu
@node Coercion of Streams to Pathnames
@subsection Coercion of Streams to Pathnames

A @newterm{stream associated with a file} is either a @term{file stream}
or a @term{synonym stream} whose target is a @newterm{stream associated with a file}.
Such streams can be used as @term{pathname designators}.

Normally, when a @term{stream associated with a file} is used as a
@term{pathname designator}, it denotes the @term{pathname} used to 
open the @term{file}; this may be, but is not required to be, the
actual name of the @term{file}.

Some functions, such as @code{truename} and @code{delete-file},
coerce @term{streams} to @term{pathnames} in a different way that 
involves referring to the actual @term{file} that is open, which might
or might not be the file whose name was opened originally.  Such special
situations are always notated specifically and are not the default.


@node File Operations on Open and Closed Streams
@subsection File Operations on Open and Closed Streams


Many @term{functions} that perform @term{file} operations accept either
@term{open} or @term{closed} @term{streams} as @term{arguments};
see @ref{Stream Arguments to Standardized Functions, Section 21.1.3 (Stream Arguments to Standardized Functions)}.

Of these, the @term{functions} in @thenextfigure{}@spc{}treat @term{open} and 
@term{closed} @term{streams} differently.


@float Figure,fig20.2
@cartouche
@multitable{delete-file}{file-write-date}{probe-file}

@item delete-file @tab file-author @tab probe-file
@item directory @tab file-write-date @tab truename
@end multitable
@end cartouche
@caption{File Functions that Treat Open and Closed Streams Differently}
@end float


Since treatment of @term{open} @term{streams} by the @term{file system} 
may vary considerably between @term{implementations}, however, 
a @term{closed} @term{stream} might be the most reliable kind of
@term{argument} for some of these functions---in particular, those in
@thenextfigure{}.  For example, in some @term{file systems}, 
@term{open} @term{files} are written under temporary names 
and not renamed until @term{closed}
and/or are held invisible until @term{closed}.
In general, any code that is intended to be portable should
use such @term{functions} carefully.


@float Figure,fig20.3
@cartouche
@multitable{directory}{probe-file}{truename}

@item directory @tab probe-file @tab truename
@end multitable
@end cartouche
@caption{File Functions where Closed Streams Might Work Best}
@end float



@node Truenames
@subsection Truenames

Many @term{file systems} permit more than one @term{filename} to designate 
a particular @term{file}.

Even where multiple names are possible, most @term{file systems} have a convention
for generating a canonical @term{filename} in such situations.  Such a canonical
@term{filename} (or the @term{pathname} representing such a @term{filename}) is
called a @newterm{truename}.  

The @term{truename} of a @term{file} may differ from other @term{filenames}
for the file because of
symbolic links,
version numbers,
logical device translations in the @term{file system},
@term{logical pathname} translations within @clisp{},
or other artifacts of the @term{file system}.

The @term{truename} for a @term{file} is often, but not necessarily, unique for
each @term{file}.  For instance, a Unix @term{file} with multiple hard links 
could have several @term{truenames}.

@subsubsection Examples of Truenames

For example, a DEC TOPS-20 system with @term{files} @f{PS:<JOE>FOO.TXT.1} 
and @f{PS:<JOE>FOO.TXT.2} might permit the second @term{file} to be referred
to as @f{PS:<JOE>FOO.TXT.0}, since the ``@f{.0}'' notation denotes ``newest''
version of several @term{files}.
In the same @term{file system}, a ``logical device'' ``@f{JOE:}'' might be 
taken to refer to @f{PS:<JOE>}'' and so the names @f{JOE:FOO.TXT.2} or
@f{JOE:FOO.TXT.0} might refer to @f{PS:<JOE>FOO.TXT.2}.
In all of these cases, the @term{truename} of the file would probably be
@f{PS:<JOE>FOO.TXT.2}.

If a @term{file} is a symbolic link to another @term{file} (in a @term{file system}
permitting such a thing), it is conventional for the @term{truename} to be
the canonical name of the @term{file} after any symbolic links have been followed;
that is, it is the canonical name of the @term{file} whose contents would
become available if an @term{input} @term{stream} to that @term{file} were 
opened.

In the case of a @term{file} still being created (that is, of an @term{output}
@term{stream} open to such a @term{file}), the exact @term{truename} of the file
might not be known until the @term{stream} is closed.  In this case, 
@thefunction{truename} might return different values for such a @term{stream}
before and after it was closed.  In fact, before it is closed, the name returned
might not even be a valid name in the @term{file system}---for example, while a
file is being written, it might have version @kwdref{newest} and might only take on 
a specific numeric value later when the file is closed even in a @term{file system}
where all files have numeric versions.



@node directory
@heading directory (Function)
@syindex directory
@cindex directory


@subsubheading Syntax:

@DefunWithValues{directory, pathspec @key{}, pathnames}

@subsubheading Arguments and Values:

@param{pathspec}---a @term{pathname designator},
which may contain @term{wild} components.

@param{pathnames}---a @term{list} of
@term{physical pathnames}.

@subsubheading Description:

Determines which, if any, @term{files} that are present
in the file system have names matching @param{pathspec},
and returns a 
@term{fresh}
@term{list} of @term{pathnames} corresponding to the @term{truenames} of
those @term{files}.

An @term{implementation} may be extended to accept 
@term{implementation-defined} keyword arguments to @code{directory}.  

@subsubheading Affected By:

The host computer's file system.

@subsubheading Exceptional Situations:

If the attempt to obtain a directory listing is not successful,
an error @oftype{file-error} is signaled.

@subsubheading See Also:

@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{ensure-directories-exist},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{File Operations on Open and Closed Streams, Section 21.1.1.1.2 (Open and Closed Streams)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}

@subsubheading Notes:

If the @param{pathspec} is not @term{wild},
the resulting list will contain either zero or one elements.

@clisp{}@spc{}specifies ``@key{}'' in the argument list to @code{directory} 
even though no @term{standardized} keyword arguments to @code{directory} are defined.
``@f{:allow-other-keys t}''
may be used in @term{conforming programs} in order to quietly ignore any
additional keywords which are passed by the program but not supported
by the @term{implementation}.


@node probe-file
@heading probe-file (Function)
@syindex probe-file
@cindex probe-file


@subsubheading Syntax:

@DefunWithValues{probe-file, pathspec, truename}

@subsubheading Arguments and Values:

@param{pathspec}---a @term{pathname designator}.

@param{truename}---a @term{physical pathname} or @nil{}.

@subsubheading Description:

@code{probe-file} tests whether a file exists.

@code{probe-file} returns @term{false} if there is no file named @param{pathspec},
and otherwise returns the @term{truename} of @param{pathspec}.

If the @param{pathspec} @term{designator} is an open @term{stream},
then @code{probe-file} produces the @term{truename} of its associated @term{file}.
If @param{pathspec} is a @term{stream}, whether open or closed,
it is coerced to a @term{pathname} as if by @thefunction{pathname}.

@subsubheading Affected By:

The host computer's file system.

@subsubheading Exceptional Situations:

An error @oftype{file-error} is signaled if @param{pathspec} is @term{wild}.

An error @oftype{file-error} is signaled
if the @term{file system} cannot perform the requested operation.

@subsubheading See Also:

@ref{truename},
@ref{open},
@ref{ensure-directories-exist},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{File Operations on Open and Closed Streams, Section 21.1.1.1.2 (Open and Closed Streams)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}


@node ensure-directories-exist
@heading ensure-directories-exist (Function)
@syindex ensure-directories-exist
@cindex ensure-directories-exist


@subsubheading Syntax:

@DefunWithValues{ensure-directories-exist, pathspec @key{} verbose, pathspec\, created}

@subsubheading Arguments and Values:

@param{pathspec}---a @term{pathname designator}.

@param{verbose}---a @term{generalized boolean}.

@param{created}---a @term{generalized boolean}.

@subsubheading Description:

Tests whether the directories containing the specified @term{file} actually exist,
and attempts to create them if they do not.

If the containing directories do not exist and if @param{verbose} is @term{true}, 
then the @term{implementation} is permitted (but not required) 
to perform output to @term{standard output} saying what directories were created.
If the containing directories exist, or if @param{verbose} is @term{false},
this function performs no output.

The @term{primary value} is the given @term{pathspec} so that this operation can
be straightforwardly composed with other file manipulation expressions.
The @term{secondary value}, @param{created}, is @term{true} if any directories were
created.

@subsubheading Affected By:

The host computer's file system.

@subsubheading Exceptional Situations:

An error @oftype{file-error} is signaled if the host, device, or directory
part of @param{pathspec} is @term{wild}.

If the directory creation attempt is not successful,
an error @oftype{file-error} is signaled;
if this occurs, 
it might be the case that none, some, or all
of the requested creations have actually occurred 
within the @term{file system}.

@subsubheading See Also:

@ref{probe-file},
@ref{open},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}


@node truename
@heading truename (Function)
@syindex truename
@cindex truename


@subsubheading Syntax:

@DefunWithValues{truename, filespec, truename}

@subsubheading Arguments and Values:

@param{filespec}---a @term{pathname designator}.

@param{truename}---a @term{physical pathname}.

@subsubheading Description:

@code{truename} tries to find the @term{file} indicated by 
@param{filespec} and returns its @term{truename}.
If the @param{filespec} @term{designator} is an open @term{stream},
its associated @term{file} is used.
If @param{filespec} is a @term{stream},
@code{truename} can be used whether the @term{stream}
is open or closed. It is permissible for @code{truename} 
to return more specific information after the @term{stream}
is closed than when the @term{stream} was open.
If @param{filespec} is a @term{pathname} 
it represents the name used to open the file. This may be, but is
not required to be, the actual name of the file. 

@subsubheading Examples:

@lisp
;; An example involving version numbers.  Note that the precise nature of
;; the truename is implementation-dependent while the file is still open.
 (with-open-file (stream ">vistor>test.text.newest")
   (values (pathname stream)
           (truename stream)))
@EV{} #P"S:>vistor>test.text.newest", #P"S:>vistor>test.text.1"
@OV{} #P"S:>vistor>test.text.newest", #P"S:>vistor>test.text.newest"
@OV{} #P"S:>vistor>test.text.newest", #P"S:>vistor>_temp_._temp_.1"

;; In this case, the file is closed when the truename is tried, so the
;; truename information is reliable.
 (with-open-file (stream ">vistor>test.text.newest")
   (close stream)
   (values (pathname stream)
           (truename stream)))
@EV{} #P"S:>vistor>test.text.newest", #P"S:>vistor>test.text.1"

;; An example involving TOP-20's implementation-dependent concept 
;; of logical devices -- in this case, "DOC:" is shorthand for
;; "PS:<DOCUMENTATION>" ...
 (with-open-file (stream "CMUC::DOC:DUMPER.HLP")
   (values (pathname stream)
           (truename stream)))
@EV{} #P"CMUC::DOC:DUMPER.HLP", #P"CMUC::PS:<DOCUMENTATION>DUMPER.HLP.13"
@end lisp


@subsubheading Exceptional Situations:

An error @oftype{file-error} is signaled if an appropriate @term{file}
cannot be located within the @term{file system} for the given @param{filespec},
or if the @term{file system} cannot perform the requested operation.

An error @oftype{file-error} is signaled if @param{pathname} is @term{wild}.

@subsubheading See Also:

@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}

@subsubheading Notes:

@code{truename} may be used to account for any @term{filename} translations 
performed by the @term{file system}.


@node file-author
@heading file-author (Function)
@syindex file-author
@cindex file-author


@subsubheading Syntax:

@DefunWithValues{file-author, pathspec, author}

@subsubheading Arguments and Values:

@param{pathspec}---a @term{pathname designator}.

@param{author}---a @term{string} or @nil{}.

@subsubheading Description:

Returns a @term{string} naming the author of the @term{file} specified by @param{pathspec},
or @nil{}@spc{}if the author's name cannot be determined.

@subsubheading Examples:

@lisp
 (with-open-file (stream ">relativity>general.text")
   (file-author s))
@EV{} "albert"
@end lisp


@subsubheading Affected By:
The host computer's file system.

Other users of the @term{file} named by @param{pathspec}.
@subsubheading Exceptional Situations:

An error @oftype{file-error} is signaled if @param{pathspec} is @term{wild}.

An error @oftype{file-error} is signaled
if the @term{file system} cannot perform the requested operation.

@subsubheading See Also:

@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}


@node file-write-date
@heading file-write-date (Function)
@syindex file-write-date
@cindex file-write-date


@subsubheading Syntax:

@DefunWithValues{file-write-date, pathspec, date}

@subsubheading Arguments and Values:

@param{pathspec}---a @term{pathname designator}.

@param{date}---a @term{universal time} or @nil{}.

@subsubheading Description:

Returns a @term{universal time} representing the time at which the @term{file} 
specified by @param{pathspec} was last written (or created), 
or returns @nil{}@spc{}if such a time cannot be determined.

@subsubheading Examples:

@lisp
 (with-open-file (s "noel.text" 
                    :direction :output :if-exists :error)
   (format s "~&Dear Santa,~2%I was good this year.  ~
                Please leave lots of toys.~2%Love, Sue~
             ~2%attachments: milk, cookies~%")
   (truename s))
@EV{} #P"CUPID:/susan/noel.text"
 (with-open-file (s "noel.text")
   (file-write-date s))
@EV{} 2902600800
@end lisp


@subsubheading Affected By:

The host computer's file system.

@subsubheading Exceptional Situations:

An error @oftype{file-error} is signaled if @param{pathspec} is @term{wild}.

An error @oftype{file-error} is signaled
if the @term{file system} cannot perform the requested operation.

@subsubheading See Also:

@ref{UniversalTime, Section 25.1.4.2 (Universal Time)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}


@node rename-file
@heading rename-file (Function)
@syindex rename-file
@cindex rename-file


@subsubheading Syntax:

@DefunWithValues{rename-file, filespec new-name, defaulted-new-name\, old-truename\, new-truename}

@subsubheading Arguments and Values:

@param{filespec}---a @term{pathname designator}.

@param{new-name}---a @term{pathname designator} 
other than a @term{stream}.

@param{defaulted-new-name}---a @term{pathname}

@param{old-truename}---a @term{physical pathname}.

@param{new-truename}---a @term{physical pathname}.

@subsubheading Description:

@code{rename-file} modifies the file system in such a way
that the file indicated by @param{filespec} is renamed to
@param{defaulted-new-name}.

It is an error to specify a filename containing a @term{wild} component,
for @param{filespec} to contain a @nil{}@spc{}component where the file system does
not permit a @nil{}@spc{}component, or for the result of defaulting missing
components of @param{new-name} from @param{filespec} to contain a @nil{}@spc{}component
where the file system does not permit a @nil{}@spc{}component.

If @param{new-name} is a @term{logical pathname}, 
@code{rename-file} returns a @term{logical pathname} as its @term{primary value}.

@code{rename-file} 
returns three values if successful.  The @term{primary value}, @param{defaulted-new-name},
is the resulting name which is composed of
@param{new-name} with any missing components filled in by performing
a @code{merge-pathnames} operation using @param{filespec} as the defaults.
The @term{secondary value}, @param{old-truename},
is the @term{truename} of the @term{file} before it was renamed.
The @term{tertiary value}, @param{new-truename},
is the @term{truename} of the @term{file} after it was renamed.

If the @param{filespec} @term{designator} is an open @term{stream},
then the @term{stream} itself and the file associated with it are 
affected (if the @term{file system} permits).

@subsubheading Examples:

@lisp
;; An example involving logical pathnames.
 (with-open-file (stream "sys:chemistry;lead.text"
                         :direction :output :if-exists :error)
   (princ "eureka" stream)
   (values (pathname stream) (truename stream)))
@EV{} #P"SYS:CHEMISTRY;LEAD.TEXT.NEWEST", #P"Q:>sys>chem>lead.text.1"
 (rename-file "sys:chemistry;lead.text" "gold.text")
@EV{} #P"SYS:CHEMISTRY;GOLD.TEXT.NEWEST",
   #P"Q:>sys>chem>lead.text.1",
   #P"Q:>sys>chem>gold.text.1"
@end lisp


@subsubheading Exceptional Situations:

If the renaming operation is not successful, an error @oftype{file-error} is signaled.

An error @oftype{file-error} might be signaled if @param{filespec} is @term{wild}.

@subsubheading See Also:

@ref{truename},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}


@node delete-file
@heading delete-file (Function)
@syindex delete-file
@cindex delete-file


@subsubheading Syntax:

@DefunWithValues{delete-file, filespec, @code{t}}

@subsubheading Arguments and Values:

@param{filespec}---a @term{pathname designator}.

@subsubheading Description:

Deletes the @term{file} specified by @param{filespec}.

If the @param{filespec} @term{designator} is an open @term{stream},
then @param{filespec} and the file associated with it are affected 
(if the file system permits),
in which case @param{filespec} might be closed immediately,
and the deletion might be immediate or delayed until @param{filespec} is explicitly closed,
depending on the requirements of the file system.

It is @term{implementation-dependent} whether an attempt
to delete a nonexistent file is considered to be successful.

@code{delete-file} returns @term{true} if it succeeds,
or signals an error @oftype{file-error} if it does not.

The consequences are undefined 
if @param{filespec} has a @term{wild} component,
or if @param{filespec} has a @nil{}@spc{}component 
and the file system does not permit a @nil{}@spc{}component.

@subsubheading Examples:

@lisp
 (with-open-file (s "delete-me.text" :direction :output :if-exists :error))
@EV{} NIL
 (setq p (probe-file "delete-me.text")) @EV{} #P"R:>fred>delete-me.text.1"
 (delete-file p) @EV{} T
 (probe-file "delete-me.text") @EV{} @term{false}
 (with-open-file (s "delete-me.text" :direction :output :if-exists :error)
   (delete-file s))
@EV{} T
 (probe-file "delete-me.text") @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

If the deletion operation is not successful, an error @oftype{file-error} is signaled.

An error @oftype{file-error} might be signaled if @param{filespec} is @term{wild}.

@subsubheading See Also:

@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}


@node file-error
@heading file-error (Condition Type)
@syindex file-error
@cindex file-error


@subsubheading Class Precedence List:
@code{file-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{file-error} consists of error conditions that occur during 
an attempt to open or close a file, or during some low-level transactions 
with a file system.  The ``offending pathname'' is initialized by 
@theinitkeyarg{pathname} to @code{make-condition}, and is @term{accessed}
by @thefunction{file-error-pathname}.

@subsubheading See Also:

@ref{file-error-pathname},
@ref{open},
@ref{probe-file},
@ref{directory},
@ref{ensure-directories-exist}


@node file-error-pathname
@heading file-error-pathname (Function)
@syindex file-error-pathname
@cindex file-error-pathname


@subsubheading Syntax:

@DefunWithValues{file-error-pathname, condition, pathspec}

@subsubheading Arguments and Values:

@param{condition}---a @term{condition} @oftype{file-error}.

@param{pathspec}---a @term{pathname designator}.

@subsubheading Description:

Returns the ``offending pathname'' of a @term{condition} @oftype{file-error}.

@subsubheading Exceptional Situations:

@subsubheading See Also:

@ref{file-error},
@ref{Conditions, Chapter 9 (Conditions)}




@node Streams
@chapter Streams
@menu
* Stream Concepts::

Dictionary

* stream::
* broadcast-stream::
* concatenated-stream::
* echo-stream::
* file-stream::
* string-stream::
* synonym-stream::
* two-way-stream::
* input-stream-p; output-stream-p::
* interactive-stream-p::
* open-stream-p::
* stream-element-type::
* streamp::
* read-byte::
* write-byte::
* peek-char::
* read-char::
* read-char-no-hang::
* terpri; fresh-line::
* unread-char::
* write-char::
* read-line::
* write-string; write-line::
* read-sequence::
* write-sequence::
* file-length::
* file-position::
* file-string-length::
* open::
* stream-external-format::
* with-open-file::
* close::
* with-open-stream::
* listen::
* clear-input::
* finish-output; force-output; clear-output::
* y-or-n-p; yes-or-no-p::
* make-synonym-stream::
* synonym-stream-symbol::
* broadcast-stream-streams::
* make-broadcast-stream::
* make-two-way-stream::
* two-way-stream-input-stream; two-way-stream-output-stream::
* echo-stream-input-stream; echo-stream-output-stream::
* make-echo-stream::
* concatenated-stream-streams::
* make-concatenated-stream::
* get-output-stream-string::
* make-string-input-stream::
* make-string-output-stream::
* with-input-from-string::
* with-output-to-string::
* *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+::
* *terminal-io*::
* stream-error::
* stream-error-stream::
* end-of-file::
@end menu

@node Stream Concepts
@section Stream Concepts

@menu
* Introduction to Streams::
* Stream Variables::
* Stream Arguments to Standardized Functions::
* Restrictions on Composite Streams::
@end menu
@node Introduction to Streams
@subsection Introduction to Streams

A @newterm{stream} is an @term{object} that can be used with an input or output
function to identify an appropriate source or sink of @term{characters} or 
@term{bytes} for that operation.
A @newterm{character} @newterm{stream} is a source or sink of @term{characters}.
A @newterm{binary} @newterm{stream} is a source or sink of @term{bytes}.

Some operations may be performed on any kind of @term{stream};
@thenextfigure{}@spc{}provides a list of @term{standardized} operations
that are potentially useful with any kind of @term{stream}.


@float Figure,fig21.1
@cartouche
@multitable{interactive-stream-p}{stream-element-type}

@item close @tab stream-element-type
@item input-stream-p @tab streamp
@item interactive-stream-p @tab with-open-stream
@item output-stream-p @tab 
@end multitable
@end cartouche
@caption{Some General-Purpose Stream Operations}
@end float


Other operations are only meaningful on certain @term{stream} @term{types}.
For example, @code{read-char} is only defined for @term{character} @term{streams}
and @code{read-byte} is only defined for @term{binary} @term{streams}.

@subsubsection Abstract Classifications of Streams

@unnumberedsubsubsec 21.1.1.1.1 Input, Output, and Bidirectional Streams


A @term{stream}, whether a @term{character} @term{stream} or a @term{binary} @term{stream},
can be an @newterm{input} @newterm{stream} (source of data),
an @newterm{output} @newterm{stream} (sink for data),
both, 
or (@eg{} when ``@f{:direction :probe}'' is given to @code{open}) neither.

@Thenextfigure{}@spc{}shows @term{operators} relating to
@term{input} @term{streams}.



@float Figure,InputStreamOps
@cartouche
@multitable{clear-input}{read-delimited-list}{read-preserving-whitespace}

@item clear-input @tab read-byte @tab read-from-string
@item listen @tab read-char @tab read-line
@item peek-char @tab read-char-no-hang @tab read-preserving-whitespace
@item read @tab read-delimited-list @tab unread-char
@end multitable
@end cartouche
@caption{Operators relating to Input Streams.}
@end float


@Thenextfigure{}@spc{}shows @term{operators} relating to
@term{output} @term{streams}.



@float Figure,OutputStreamOps
@cartouche
@multitable{finish-output}{prin1-to-string}{write-to-string}

@item clear-output @tab prin1 @tab write
@item finish-output @tab prin1-to-string @tab write-byte
@item force-output @tab princ @tab write-char
@item format @tab princ-to-string @tab write-line
@item fresh-line @tab print @tab write-string
@item pprint @tab terpri @tab write-to-string
@end multitable
@end cartouche
@caption{Operators relating to Output Streams.}
@end float


A @term{stream} that is both an @term{input} @term{stream} and an @term{output} @term{stream}
is called a @newterm{bidirectional} @newterm{stream}.
See the @term{functions} @ref{input-stream-p} and @code{output-stream-p}.

Any of the @term{operators} listed in @ref{InputStreamOps, Figure 21.2}@spc{}or @ref{OutputStreamOps, Figure 21.3}
can be used with @term{bidirectional} @term{streams}.  In addition, @thenextfigure{}
shows a list of @term{operators} that relate specificaly to 
@term{bidirectional} @term{streams}.


@float Figure,fig21.4
@cartouche
@multitable{y-or-n-p}{yes-or-no-p}{}

@item y-or-n-p @tab yes-or-no-p @tab 
@end multitable
@end cartouche
@caption{Operators relating to Bidirectional Streams.}
@end float



@unnumberedsubsubsec 21.1.1.1.2 Open and Closed Streams


@term{Streams} are either @newterm{open} or @newterm{closed}.  

Except as explicitly specified otherwise,
operations that create and return @term{streams} return @term{open} @term{streams}.

The action of @term{closing} a @term{stream} marks the end of its use as a source
or sink of data, permitting the @term{implementation} to reclaim its internal data
structures, and to free any external resources which might have been locked by the
@term{stream} when it was opened.

Except as explicitly specified otherwise,
the consequences are undefined when a @term{closed} @term{stream} 
is used where a @term{stream} is called for.

Coercion of @term{streams} to @term{pathnames} 
is permissible for @term{closed} @term{streams};
in some situations, such as for a @term{truename} computation, 
the result might be different for an @term{open} @term{stream}
and for that same @term{stream} once it has been @term{closed}.


@unnumberedsubsubsec 21.1.1.1.3 Interactive Streams

@anchor{InteractiveStreams}

An @newterm{interactive stream} is one on which it makes sense to perform
interactive querying.

The precise meaning of an @term{interactive stream} is
@term{implementation-defined}, and may depend on the underlying
operating system.  Some examples of the things that an
@term{implementation} might choose to use as identifying characteristics
of an @term{interactive stream} include:


@itemize @bullet{}

@item 
The @term{stream} is connected to a person (or equivalent) in such a way
that the program can prompt for information and expect to receive different
input depending on the prompt.

@item
The program is expected to prompt for input and support ``normal input editing''.

@item 
@code{read-char} might wait for the user to type something before returning
instead of immediately returning a character or end-of-file. 
@end itemize


The general intent of having some @term{streams} be classified as
@term{interactive streams} is to allow them to be distinguished from
streams containing batch (or background or command-file) input.
Output to batch streams is typically discarded or saved for later viewing, 
so interactive queries to such streams might not have the expected effect.

@term{Terminal I/O} might or might not be an @term{interactive stream}.


@subsubsection Abstract Classifications of Streams

@unnumberedsubsubsec 21.1.1.2.4 File Streams


Some @term{streams}, called 
@cindex file stream
@dfn{file streams}, provide access to @term{files}.
An @term{object} @ofclass{file-stream} is used to represent a @term{file stream}.

The basic operation for opening a @term{file} is @code{open},
which typically returns a @term{file stream} 
(see its dictionary entry for details).
The basic operation for closing a @term{stream} is @code{close}.
The macro @code{with-open-file} is useful 
to express the common idiom of opening a @term{file} 
for the duration of a given body of @term{code}, 
and assuring that the resulting @term{stream} is closed upon exit from that body.


@subsubsection Other Subclasses of Stream

@Theclass{stream} has a number of @term{subclasses} defined 
by this specification.  @Thenextfigure{}@spc{}shows some information 
about these subclasses.


@float Figure,fig21.5
@cartouche
@multitable{@code{concatenated-stream}}{@code{two-way-stream-output-stream}}
@headitem Class @tab Related Operators
@item @code{broadcast-stream} @tab @code{make-broadcast-stream}
@item  @tab @code{broadcast-stream-streams}
@item @code{concatenated-stream} @tab @code{make-concatenated-stream}
@item  @tab @code{concatenated-stream-streams}
@item @code{echo-stream} @tab @code{make-echo-stream}
@item  @tab @code{echo-stream-input-stream}
@item  @tab @code{echo-stream-output-stream}
@item @code{string-stream} @tab @code{make-string-input-stream}
@item  @tab @code{with-input-from-string}
@item  @tab @code{make-string-output-stream}
@item  @tab @code{with-output-to-string}
@item  @tab @code{get-output-stream-string}
@item @code{synonym-stream} @tab @code{make-synonym-stream}
@item  @tab @code{synonym-stream-symbol}
@item @code{two-way-stream} @tab @code{make-two-way-stream}
@item  @tab @code{two-way-stream-input-stream}
@item  @tab @code{two-way-stream-output-stream}
@end multitable
@end cartouche
@caption{Defined Names related to Specialized Streams}
@end float




@node Stream Variables
@subsection Stream Variables

@term{Variables} whose @term{values} must be @term{streams} are sometimes called 
@cindex stream variable
@dfn{stream variables}.

Certain @term{stream variables} are defined by this specification 
to be the proper source of input or output in various @term{situations} 
where no specific @term{stream} has been specified instead.
A complete list of such @term{standardized} @term{stream variables}
appears in @thenextfigure{}.  
The consequences are undefined if at any time
the @term{value} of any of these @term{variables} is not an @term{open} @term{stream}.



@float Figure,StandardizedStreamVars
@cartouche
@multitable{@term{standard output}}{@code{*standard-output*}}
@headitem Glossary Term @tab Variable Name
@item @term{debug I/O} @tab @code{*debug-io*}
@item @term{error output} @tab @code{*error-output*}
@item @term{query I/O} @tab @code{*query-io*}
@item @term{standard input} @tab @code{*standard-input*}
@item @term{standard output} @tab @code{*standard-output*}
@item @term{terminal I/O} @tab @code{*terminal-io*}
@item @term{trace output} @tab @code{*trace-output*}
@end multitable
@end cartouche
@caption{Standardized Stream Variables}
@end float


Note that, by convention, @term{standardized} @term{stream variables} have names 
ending in ``@f{-input*}''  if they must be @term{input} @term{streams},
ending in ``@f{-output*}'' if they must be @term{output} @term{streams},
or ending in ``@f{-io*}''     if they must be @term{bidirectional} @term{streams}.

User programs may @term{assign} or @term{bind} any @term{standardized} @term{stream variable}
except @code{*terminal-io*}.


@node Stream Arguments to Standardized Functions
@subsection Stream Arguments to Standardized Functions

The @term{operators} in @thenextfigure{}@spc{}accept @term{stream} @term{arguments} that
might be either @term{open} or @term{closed} @term{streams}.



@float Figure,OpenOrClosedStreamOps
@cartouche
@multitable{concatenated-stream-streams}{logical-pathname}{two-way-stream-output-stream}

@item broadcast-stream-streams @tab file-author @tab pathnamep
@item close @tab file-namestring @tab probe-file
@item compile-file @tab file-write-date @tab rename-file
@item compile-file-pathname @tab host-namestring @tab streamp
@item concatenated-stream-streams @tab load @tab synonym-stream-symbol
@item delete-file @tab logical-pathname @tab translate-logical-pathname
@item directory @tab merge-pathnames @tab translate-pathname
@item directory-namestring @tab namestring @tab truename
@item dribble @tab open @tab two-way-stream-input-stream
@item echo-stream-input-stream @tab open-stream-p @tab two-way-stream-output-stream
@item echo-stream-ouput-stream @tab parse-namestring @tab wild-pathname-p
@item ed @tab pathname @tab with-open-file
@item enough-namestring @tab pathname-match-p @tab 
@end multitable
@end cartouche
@caption{Operators that accept either Open or Closed Streams}
@end float


The @term{operators} in @thenextfigure{}@spc{}accept @term{stream} @term{arguments} that
must be @term{open} @term{streams}.


@float Figure,fig21.8
@cartouche
@multitable{get-output-stream-string}{print-unreadable-object}{read-preserving-whitespace}

@item clear-input @tab output-stream-p @tab read-char-no-hang
@item clear-output @tab peek-char @tab read-delimited-list
@item file-length @tab pprint @tab read-line
@item file-position @tab pprint-fill @tab read-preserving-whitespace
@item file-string-length @tab pprint-indent @tab stream-element-type
@item finish-output @tab pprint-linear @tab stream-external-format
@item force-output @tab pprint-logical-block @tab terpri
@item format @tab pprint-newline @tab unread-char
@item fresh-line @tab pprint-tab @tab with-open-stream
@item get-output-stream-string @tab pprint-tabular @tab write
@item input-stream-p @tab prin1 @tab write-byte
@item interactive-stream-p @tab princ @tab write-char
@item listen @tab print @tab write-line
@item make-broadcast-stream @tab print-object @tab write-string
@item make-concatenated-stream @tab print-unreadable-object @tab y-or-n-p
@item make-echo-stream @tab read @tab yes-or-no-p
@item make-synonym-stream @tab read-byte @tab 
@item make-two-way-stream @tab read-char @tab 
@end multitable
@end cartouche
@caption{Operators that accept Open Streams only}
@end float



@node Restrictions on Composite Streams
@subsection Restrictions on Composite Streams

The consequences are undefined if any @term{component} of a @term{composite stream}
is @term{closed} before the @term{composite stream} is @term{closed}.

The consequences are undefined if the @term{synonym stream symbol} is not @term{bound}
to an @term{open} @term{stream} from the time of the @term{synonym stream}'s creation
until the time it is @term{closed}.


@node stream
@heading stream (System Class)
@syindex stream
@cindex stream


@subsubheading Class Precedence List:
@code{stream},
@code{t}

@subsubheading Description:

A @term{stream} is an @term{object} that can be used with an input or output
function to identify an appropriate source or sink of @term{characters} or 
@term{bytes} for that operation.

For more complete information, see @ref{Stream Concepts, Section 21.1 (Stream Concepts)}.


@subsubheading See Also:

@ref{Stream Concepts, Section 21.1 (Stream Concepts)},
@ref{PrintingOtherObjects, Section 22.1.3.13 (Printing Other Objects)},
@ref{Printer, Chapter 22 (Printer)},
@ref{Reader, Chapter 23 (Reader)}

@node broadcast-stream
@heading broadcast-stream (System Class)
@syindex broadcast-stream
@cindex broadcast-stream



@subsubheading Class Precedence List:

@code{broadcast-stream},
@code{stream},
@code{t}

@subsubheading Description:

A @term{broadcast stream} is an @term{output} @term{stream} which 
has associated with it a set of zero or more @term{output} @term{streams} 
such that any output sent to the @term{broadcast stream} gets passed on
as output to each of the associated @term{output} @term{streams}.
(If a @term{broadcast stream} has no @term{component streams},
then all output to the @term{broadcast stream} is discarded.)

The set of operations that may be performed on a @term{broadcast stream} 
is the intersection of those for its associated @term{output} @term{streams}.

Some output operations (@eg{} @code{fresh-line}) return @term{values} based on the
state of the @term{stream} at the time of the operation.
Since these @term{values} might differ for each of the @term{component streams},
it is necessary to describe their return value specifically:


@itemize @bullet{}

@item
@code{stream-element-type} returns
the value from the last component stream, 
or @code{t} if there are no component streams.

@item
@code{fresh-line} returns
the value from the last component stream, 
or @nil{}@spc{}if there are no component streams.

@item
The functions
@code{file-length},
@code{file-position},
@code{file-string-length},
and @code{stream-external-format}
return the value from the last component stream;
if there are no component streams,
@code{file-length} and @code{file-position} return @f{0},
@code{file-string-length} returns @f{1},
and @code{stream-external-format} returns @kwd{default}.

@item
The functions @code{streamp} and @code{output-stream-p} 
always return @term{true} for @term{broadcast streams}.

@item
The functions @code{open-stream-p} tests whether the @term{broadcast stream}
is @term{open}@sub2{}, not whether its component streams are @term{open}.

@item
The functions @code{input-stream-p} and @term{interactive-stream-p} 
return an @term{implementation-defined}, @term{generalized boolean} value.

@item
For the input operations
@code{clear-input}
@code{listen},
@code{peek-char},
@code{read-byte},
@code{read-char-no-hang},
@code{read-char},
@code{read-line},
and @code{unread-char},
the consequences are undefined if the indicated operation is performed.
However, an @term{implementation} is permitted 
to define such a behavior as an @term{implementation-dependent} extension.
@end itemize


For any output operations not having their return values explicitly specified above
or elsewhere in this document, it is defined that
the @term{values} returned by such an operation are 
the @term{values} resulting from performing the operation 
on the last of its @term{component streams};
the @term{values} resulting from performing the operation
on all preceding @term{streams} are discarded.                    
If there are no @term{component streams}, 
the value is @term{implementation-dependent}.

@subsubheading See Also:

@ref{broadcast-stream-streams},
@ref{make-broadcast-stream}


@node concatenated-stream
@heading concatenated-stream (System Class)
@syindex concatenated-stream
@cindex concatenated-stream



@subsubheading Class Precedence List:

@code{concatenated-stream},
@code{stream},
@code{t}

@subsubheading Description:

A @term{concatenated stream} is an @term{input} @term{stream} which 
is a @term{composite stream} of zero or more other @term{input} @term{streams}, 
such that the sequence of data which can be read from the
@term{concatenated stream} is the same as the concatenation of the 
sequences of data which could be read from each of the 
constituent @term{streams}.

Input from a @term{concatenated stream} is taken from the first
of the associated @term{input streams} until it reaches @term{end of file}@sub1{}; 
then that @term{stream} is discarded, and subsequent input is taken
from the next @term{input stream}, and so on.
An @term{end of file} on the associated @term{input streams} is always managed
invisibly by the @term{concatenated stream}---the only time a client of
a @term{concatenated stream} sees an @term{end of file} is when an attempt is
made to obtain data from the @term{concatenated stream} but it has no
remaining @term{input streams} from which to obtain such data.


@subsubheading See Also:

@ref{concatenated-stream-streams},
@ref{make-concatenated-stream}

@node echo-stream
@heading echo-stream (System Class)
@syindex echo-stream
@cindex echo-stream



@subsubheading Class Precedence List:

@code{echo-stream},
@code{stream},
@code{t}

@subsubheading Description:

An @term{echo stream} is a @term{bidirectional} @term{stream}
that gets  its input  from an associated @term{input}  @term{stream}
and  sends its output to   an associated @term{output} @term{stream}.

All input taken from the @term{input} @term{stream} 
is echoed to the @term{output} @term{stream}.
Whether the input is echoed immediately after it is encountered,
or after it has been read from the @term{input stream}
is @term{implementation-dependent}.


@subsubheading See Also:

@ref{echo-stream-input-stream},
@ref{echo-stream-output-stream},
@ref{make-echo-stream}

@node file-stream
@heading file-stream (System Class)
@syindex file-stream
@cindex file-stream



@subsubheading Class Precedence List:

@code{file-stream},
@code{stream},
@code{t}

@subsubheading Description:

An @term{object} @oftype{file-stream} is a @term{stream} the direct
source or sink of which is a @term{file}.  Such a @term{stream} is
created explicitly by @code{open} and @code{with-open-file}, and
implicitly by @term{functions} such as @code{load} that process @term{files}.


@subsubheading See Also:

@ref{load},
@ref{open},
@ref{with-open-file}

@node string-stream
@heading string-stream (System Class)
@syindex string-stream
@cindex string-stream



@subsubheading Class Precedence List:

@code{string-stream},
@code{stream},
@code{t}

@subsubheading Description:

A @term{string stream} is a @term{stream} 
which reads input from or writes output to an associated @term{string}.

The @term{stream element type} of a @term{string stream} is always
a @subtypeof{character}.

@subsubheading See Also:

@ref{make-string-input-stream},
@ref{make-string-output-stream},
@ref{with-input-from-string},
@ref{with-output-to-string}


@node synonym-stream
@heading synonym-stream (System Class)
@syindex synonym-stream
@cindex synonym-stream



@subsubheading Class Precedence List:

@code{synonym-stream},
@code{stream},
@code{t}

@subsubheading Description:

A @term{stream} that is an alias for another @term{stream},
which is the @term{value} of a @term{dynamic variable}
whose @term{name} is the @term{synonym stream symbol} of the @term{synonym stream}.

Any operations on a @term{synonym stream} will be performed 
on the @term{stream} that is then the @term{value} of the
@term{dynamic variable} named by the @term{synonym stream symbol}.
If the @term{value} of the @term{variable} should change,
or if the @term{variable} should be @term{bound},
then the @term{stream} will operate on the new @term{value} of the @term{variable}.

@subsubheading See Also:

@ref{make-synonym-stream},
@ref{synonym-stream-symbol}


@node two-way-stream
@heading two-way-stream (System Class)
@syindex two-way-stream
@cindex two-way-stream



@subsubheading Class Precedence List:

@code{two-way-stream},
@code{stream},
@code{t}

@subsubheading Description:

A @term{bidirectional} @term{composite stream} that 
receives its input  from an associated @term{input}  @term{stream} 
and sends    its output to   an associated @term{output} @term{stream}.

@subsubheading See Also:

@ref{make-two-way-stream},
@ref{two-way-stream-input-stream},
@ref{two-way-stream-output-stream}




@node input-stream-p; output-stream-p
@heading input-stream-p, output-stream-p (Function)
@syindex input-stream-p
@cindex input-stream-p
@syindex output-stream-p
@cindex output-stream-p
@anchor{input-stream-p}
@anchor{output-stream-p}


@subsubheading Syntax:

@DefunWithValues{input-stream-p, stream, generalized-boolean}
@DefunWithValues{output-stream-p, stream, generalized-boolean}

@subsubheading Arguments and Values:

@param{stream}---a @term{stream}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@NamedPredicate{input-stream-p, stream, an @term{input} @term{stream}}

@NamedPredicate{output-stream-p, stream, an @term{output} @term{stream}}

@subsubheading Examples:

@lisp
 (input-stream-p *standard-input*) @EV{} @term{true}
 (input-stream-p *terminal-io*) @EV{} @term{true}
 (input-stream-p (make-string-output-stream)) @EV{} @term{false}

 (output-stream-p *standard-output*) @EV{} @term{true}
 (output-stream-p *terminal-io*) @EV{} @term{true}
 (output-stream-p (make-string-input-stream "jr")) @EV{} @term{false}
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{stream, a @term{stream}}


@node interactive-stream-p
@heading interactive-stream-p (Function)
@syindex interactive-stream-p
@cindex interactive-stream-p



@subsubheading Syntax:

@DefunWithValues{interactive-stream-p, stream, generalized-boolean}

@subsubheading Arguments and Values:

@param{stream}---a @term{stream}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@Predicate{stream, an @term{interactive stream}}

@subsubheading Examples:

@lisp
 (when (> measured limit)
   (let ((error (round (* (- measured limit) 100)
                       limit)))
     (unless (if (interactive-stream-p *query-io*)
                 (yes-or-no-p "The frammis is out of tolerance by ~D%.~@@
                               Is it safe to proceed? " error)
                 (< error 15))  ;15% is acceptable
       (error "The frammis is out of tolerance by ~D%." error))))
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{stream, a @term{stream}}

@subsubheading See Also:

@ref{Stream Concepts, Section 21.1 (Stream Concepts)}



@node open-stream-p
@heading open-stream-p (Function)
@syindex open-stream-p
@cindex open-stream-p



@subsubheading Syntax:

@DefunWithValues{open-stream-p, stream, generalized-boolean}

@subsubheading Arguments and Values:

@param{stream}---a @term{stream}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@Predicate{stream, an @term{open} @term{stream}}

@term{Streams} are open until they have been explicitly closed with @code{close},
or until they are implicitly closed due to exit from a
@code{with-output-to-string}, 
@code{with-open-file},
@code{with-input-from-string},  or 
@code{with-open-stream} @term{form}.

@subsubheading Examples:

@lisp
 (open-stream-p *standard-input*) @EV{} @term{true}
@end lisp


@subsubheading Affected By:

@code{close}.

@subsubheading Exceptional Situations:

@Shouldchecktype{stream, a @term{stream}}



@node stream-element-type
@heading stream-element-type (Function)
@syindex stream-element-type
@cindex stream-element-type


@subsubheading Syntax:

@DefunWithValues{stream-element-type, stream, typespec}

@subsubheading Arguments and Values:

@param{stream}---a @term{stream}.

@param{typespec}---a @term{type specifier}.

@subsubheading Description:

@code{stream-element-type} returns a @term{type specifier} that
indicates the @term{types} of @term{objects} that may be read from 
or written to @param{stream}.

@term{Streams} created by @code{open} have an @term{element type}
restricted to @code{integer} or a @subtypeof{character}.

@subsubheading Examples:

@lisp
;; Note that the stream must accomodate at least the specified type,
;; but might accomodate other types.  Further note that even if it does
;; accomodate exactly the specified type, the type might be specified in
;; any of several ways.
 (with-open-file (s "test" :element-type '(integer 0 1)
                           :if-exists :error
                           :direction :output)
   (stream-element-type s))
@EV{} INTEGER
@OV{} (UNSIGNED-BYTE 16)
@OV{} (UNSIGNED-BYTE 8)
@OV{} BIT
@OV{} (UNSIGNED-BYTE 1)
@OV{} (INTEGER 0 1)
@OV{} (INTEGER 0 (2))
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{stream, a @term{stream}}


@node streamp
@heading streamp (Function)
@syindex streamp
@cindex streamp


@subsubheading Syntax:

@DefunWithValues{streamp, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, stream}

@code{streamp} is unaffected by whether @param{object},
if it is a @term{stream}, is @term{open} or closed.

@subsubheading Examples:

@lisp
 (streamp *terminal-io*) @EV{} @term{true}
 (streamp 1) @EV{} @term{false}
@end lisp


@subsubheading Notes:

@lisp
 (streamp @param{object}) @EQ{} (typep @param{object} 'stream)
@end lisp



@node read-byte
@heading read-byte (Function)
@syindex read-byte
@cindex read-byte


@subsubheading Syntax:

@DefunWithValues{read-byte, stream @opt{} eof-error-p eof-value, byte}

@subsubheading Arguments and Values:

@param{stream}---a @term{binary} @term{input} @term{stream}.

@param{eof-error-p}---a @term{generalized boolean}.
@Default{@term{true}}

@param{eof-value}---an @term{object}.
@Default{@nil{}}

@param{byte}---an @term{integer},
or the @param{eof-value}.

@subsubheading Description:

@code{read-byte} reads and returns one byte from @param{stream}.

If an @term{end of file}@sub2{} occurs and @param{eof-error-p} is @term{false}, 
the @param{eof-value} is returned.  

@subsubheading Examples:
@lisp
 (with-open-file (s "temp-bytes" 
                     :direction :output
                     :element-type 'unsigned-byte)
    (write-byte 101 s)) @EV{} 101
 (with-open-file (s "temp-bytes" :element-type 'unsigned-byte)
    (format t "~S ~S" (read-byte s) (read-byte s nil 'eof)))
@OUT{} 101 EOF
@EV{} NIL
@end lisp


@subsubheading Side Effects:

Modifies @param{stream}.

@subsubheading Exceptional Situations:

@Shouldchecktype{stream, a @term{stream}}

Should signal an error @oftype{error} 
if @param{stream} is not  a @term{binary} @term{input} @term{stream}.

If there are no @term{bytes} remaining in the @param{stream} 
and @param{eof-error-p} is @term{true}, an error @oftype{end-of-file} is signaled.

@subsubheading See Also:

@ref{read-char},
@ref{read-sequence},
@ref{write-byte}


@node write-byte
@heading write-byte (Function)
@syindex write-byte
@cindex write-byte


@subsubheading Syntax:

@DefunWithValues{write-byte, byte stream, byte}

@subsubheading Arguments and Values:

@param{byte}---an @term{integer} of the @term{stream element type}
of @term{stream}.

@param{stream}---a @term{binary} @term{output} @term{stream}.

@subsubheading Description:

@code{write-byte} writes one byte, @param{byte}, to @param{stream}.

@subsubheading Examples:

@lisp
 (with-open-file (s "temp-bytes" 
                    :direction :output
                    :element-type 'unsigned-byte)
    (write-byte 101 s)) @EV{} 101
@end lisp


@subsubheading Side Effects:

@param{stream} is modified.

@subsubheading Affected By:

The @term{element type} of the @param{stream}.

@subsubheading Exceptional Situations:

@Shouldchecktype{stream, a @term{stream}}
Should signal an error @oftype{error} 
if @param{stream} is not  a @term{binary} @term{output} @term{stream}.

Might signal an error @oftype{type-error} if @param{byte} is not
an @term{integer} of the @term{stream element type} of @term{stream}.

@subsubheading See Also:

@ref{read-byte},
@ref{write-char},
@ref{write-sequence}


@node peek-char
@heading peek-char (Function)
@syindex peek-char
@cindex peek-char


@subsubheading Syntax:

@DefunWithValues{peek-char, @opt{} @vtop{@hbox{peek-type input-stream eof-error-p} @hbox{eof-value recursive-p}}, char}

@subsubheading Arguments and Values:

@param{peek-type}---a @term{character} or @code{t}@spc{}or @nil{}.

@param{input-stream}---@term{input} @term{stream designator}.
@Default{@term{standard input}}

@param{eof-error-p}---a @term{generalized boolean}.
@Default{@term{true}}

@param{eof-value}---an @term{object}.
@Default{@nil{}}

@param{recursive-p}---a @term{generalized boolean}.
@Default{@term{false}}

@param{char}---a @term{character} or the @param{eof-value}.

@subsubheading Description:

@code{peek-char} obtains the next character in @param{input-stream}
without actually reading it, thus leaving the character
to be read at a later time.  It can
also be used to skip over and discard intervening
characters in the @param{input-stream} 
until a particular character is found.

If @param{peek-type} is not supplied or @nil{},
@code{peek-char} returns the next character to be read from 
@param{input-stream}, without actually removing it from 
@param{input-stream}.
The next time input is done from @param{input-stream}, the character will still
be there.  
If @param{peek-type} is @code{t},
then @code{peek-char} skips over @term{whitespace}@sub2{} @term{characters},
but not comments,
and then performs the peeking operation on the next
character.
The last character examined, the one that starts an @term{object},
is not removed from @param{input-stream}.
If @param{peek-type} is a @term{character},
then @code{peek-char} skips
over input characters until a character that
is @code{char=} to that @term{character} is found;          
that character is left in @param{input-stream}.

If an @term{end of file}@sub2{} occurs and @param{eof-error-p} is @term{false},
@param{eof-value} is returned.  

@mat{ }@ExplainRecursiveP{}

When @param{input-stream} is an @term{echo stream},
characters that are only peeked at are not echoed. In the
case that @param{peek-type} is not @nil{},
the characters that are passed by @code{peek-char} 
are treated as if by @code{read-char},
and so are echoed unless they have been marked otherwise by @code{unread-char}.

@subsubheading Examples:
@lisp
 (with-input-from-string (input-stream "    1 2 3 4 5")
    (format t "~S ~S ~S" 
            (peek-char t input-stream)
            (peek-char #@bsl{}4 input-stream)
            (peek-char nil input-stream)))
@OUT{} #@bsl{}1 #@bsl{}4 #@bsl{}4
@EV{} NIL
@end lisp


@subsubheading Affected By:

@code{*readtable*},
@code{*standard-input*},
@code{*terminal-io*}.

@subsubheading Exceptional Situations:

If @param{eof-error-p} is @term{true} and an @term{end of file}@sub2{} occurs
an error @oftype{end-of-file} is signaled.

If     @param{peek-type} is a @term{character},
an @term{end of file}@sub2{} occurs,
and @param{eof-error-p} is @term{true},
an error @oftype{end-of-file} is signaled.

If @param{recursive-p} is @term{true}
and an @term{end of file}@sub2{} occurs,
an error @oftype{end-of-file} is signaled.


@node read-char
@heading read-char (Function)
@syindex read-char
@cindex read-char


@subsubheading Syntax:

@DefunWithValues{read-char, @opt{} input-stream eof-error-p eof-value recursive-p, char}

@subsubheading Arguments and Values:

@param{input-stream}---an @term{input} @term{stream designator}.
@Default{@term{standard input}}

@param{eof-error-p}---a @term{generalized boolean}.
@Default{@term{true}}

@param{eof-value}---an @term{object}.
@Default{@nil{}}

@param{recursive-p}---a @term{generalized boolean}.
@Default{@term{false}}

@param{char}---a @term{character} or the @param{eof-value}.

@subsubheading Description:

@code{read-char} returns the next @term{character} from @param{input-stream}.

When @param{input-stream} is an @param{echo stream},
the character is echoed on @param{input-stream} the first time the character is 
seen.
Characters that are not echoed by @code{read-char} 
are those that were
put there by @code{unread-char} 
and hence are assumed to have been echoed
already by a previous call to @code{read-char}.

@mat{ }@ExplainRecursiveP{}

If an @term{end of file}@sub2{} occurs and @param{eof-error-p} is @term{false}, 
@param{eof-value} is returned.  

@subsubheading Examples:
@lisp
 (with-input-from-string (is "0123")
    (do ((c (read-char is) (read-char is nil 'the-end)))
        ((not (characterp c)))
     (format t "~S " c)))
@OUT{} #@bsl{}0 #@bsl{}1 #@bsl{}2 #@bsl{}3
@EV{} NIL
@end lisp


@subsubheading Affected By:

@code{*standard-input*},
@code{*terminal-io*}.

@subsubheading Exceptional Situations:

If an @term{end of file}@sub2{} occurs before a character can be read, and 
@param{eof-error-p} is @term{true}, 
an error @oftype{end-of-file} is signaled.

@subsubheading See Also:

@ref{read-byte},
@ref{read-sequence},
@ref{write-char},
@ref{read}

@subsubheading Notes:
The corresponding output function is @code{write-char}.


@node read-char-no-hang
@heading read-char-no-hang (Function)
@syindex read-char-no-hang
@cindex read-char-no-hang


@subsubheading Syntax:

@DefunWithValues{read-char-no-hang, @opt{} @vtop{@hbox{input-stream eof-error-p} @hbox{eof-value recursive-p}}, char}

@subsubheading Arguments and Values:

@param{input-stream}---an @term{input} @term{stream designator}.
@Default{@term{standard input}}

@param{eof-error-p}---a @term{generalized boolean}.
@Default{@term{true}}

@param{eof-value}---an @term{object}.
@Default{@nil{}}

@param{recursive-p}---a @term{generalized boolean}.
@Default{@term{false}}

@param{char}---a @term{character} or @nil{}@spc{}or the @param{eof-value}.

@subsubheading Description:

@code{read-char-no-hang} returns a character
from @param{input-stream} if such a character is available.  If no character
is available, @code{read-char-no-hang} returns @nil{}.

@mat{ }@ExplainRecursiveP{}

If an @term{end of file}@sub2{} occurs and @param{eof-error-p} is @term{false}, 
@param{eof-value} is returned.  

@subsubheading Examples:

@lisp
;; This code assumes an implementation in which a newline is not
;; required to terminate input from the console.
 (defun test-it ()
   (unread-char (read-char))
   (list (read-char-no-hang) 
         (read-char-no-hang) 
         (read-char-no-hang)))
@EV{} TEST-IT
;; Implementation A, where a Newline is not required to terminate
;; interactive input on the console.
 (test-it)
@OUT{} @IN{a}
@EV{} (#@bsl{}a NIL NIL)
;; Implementation B, where a Newline is required to terminate
;; interactive input on the console, and where that Newline remains
;; on the input stream.
 (test-it)
@OUT{} @IN{a@CRLF{}}
@EV{} (#@bsl{}a #@bsl{}Newline NIL)
@end lisp


@subsubheading Affected By:

@code{*standard-input*},
@code{*terminal-io*}.

@subsubheading Exceptional Situations:

If an @term{end of file}@sub2{} occurs
when @param{eof-error-p} is @term{true},
an error @oftype{end-of-file} is signaled .

@subsubheading See Also:

@ref{listen}

@subsubheading Notes:

@code{read-char-no-hang} is exactly like @code{read-char}, except
that if it would be necessary to wait in order to get a character (as
from a keyboard), @nil{}@spc{}is immediately returned without waiting.  


@node terpri; fresh-line
@heading terpri, fresh-line (Function)
@syindex terpri
@cindex terpri
@syindex fresh-line
@cindex fresh-line


@subsubheading Syntax:

@DefunWithValues{terpri, @opt{} output-stream, @nil{}}
@DefunWithValues{fresh-line, @opt{} output-stream, generalized-boolean}

@subsubheading Arguments and Values:

@param{output-stream}---an @term{output} @term{stream designator}.
@Default{@term{standard output}}

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@code{terpri} outputs a @term{newline} to @param{output-stream}.

@code{fresh-line} is similar to @code{terpri} but outputs a @term{newline}
only if the @param{output-stream} is not already at the start of a line.
If for some reason this cannot be determined, then a @term{newline} is output anyway.
@code{fresh-line} returns @term{true} if it outputs a @term{newline};
otherwise it returns @term{false}.

@subsubheading Examples:

@lisp
 (with-output-to-string (s)
    (write-string "some text" s)
    (terpri s)
    (terpri s)
    (write-string "more text" s))
@EV{} "some text

more text"
 (with-output-to-string (s)
    (write-string "some text" s)
    (fresh-line s)
    (fresh-line s)
    (write-string "more text" s))
@EV{} "some text
more text"
@end lisp


@subsubheading Side Effects:

The @param{output-stream} is modified.

@subsubheading Affected By:

@code{*standard-output*},
@code{*terminal-io*}.

@subsubheading Exceptional Situations:

None.
@reviewer{Barmar: What if stream is closed?}

@subsubheading Notes:

@code{terpri} is identical in effect to

@lisp
 (write-char #@bsl{}Newline output-stream)
@end lisp



@node unread-char
@heading unread-char (Function)
@syindex unread-char
@cindex unread-char


@subsubheading Syntax:

@DefunWithValues{unread-char, character @opt{} input-stream, @nil{}}

@subsubheading Arguments and Values:

@param{character}---a @term{character};
must be the last @term{character} that was read from @param{input-stream}.

@param{input-stream}---an @term{input} @term{stream designator}.
@Default{@term{standard input}}

@subsubheading Description:

@code{unread-char} places @param{character} back onto the front of
@param{input-stream} so that it will again be the next character
in @param{input-stream}.

When @param{input-stream} is an @term{echo stream},
no attempt is made to undo any echoing of the character that might already
have been done on @param{input-stream}. However, characters placed on 
@param{input-stream} by @code{unread-char} are marked in such a way 
as to inhibit later re-echo by @code{read-char}.

It is an error to invoke @code{unread-char} 
twice consecutively on the same @term{stream}
without an intervening call to @code{read-char} 
(or some other input operation which implicitly reads characters)
on that @term{stream}.

Invoking @code{peek-char} or @code{read-char} commits all previous characters.
The consequences of invoking @code{unread-char}
on any character preceding that which is returned by 
@code{peek-char} (including those passed over by 
@code{peek-char} that has a @term{non-nil} @param{peek-type})
are unspecified.
In particular, the consequences of 
invoking @code{unread-char} after @code{peek-char}
are unspecified.

@subsubheading Examples:

@lisp
 (with-input-from-string (is "0123")
    (dotimes (i 6)
      (let ((c (read-char is)))
        (if (evenp i) (format t "~&~S ~S~%" i c) (unread-char c is)))))
@OUT{} 0 #@bsl{}0
@OUT{} 2 #@bsl{}1
@OUT{} 4 #@bsl{}2
@EV{} NIL
@end lisp


@subsubheading Affected By:

@code{*standard-input*},
@code{*terminal-io*}.

@subsubheading See Also:

@ref{peek-char},
@ref{read-char},
@ref{Stream Concepts, Section 21.1 (Stream Concepts)}

@subsubheading Notes:

@code{unread-char} is intended to be an efficient mechanism for allowing
the @term{Lisp reader} and other parsers to perform one-character lookahead
in @param{input-stream}.


@node write-char
@heading write-char (Function)
@syindex write-char
@cindex write-char


@subsubheading Syntax:

@DefunWithValues{write-char, character @opt{} output-stream, character}

@subsubheading Arguments and Values:

@param{character}---a @term{character}.

@param{output-stream}---an @term{output} @term{stream designator}.
@Default{@term{standard output}}

@subsubheading Description:

@code{write-char} outputs @param{character} to @param{output-stream}.

@subsubheading Examples:
@lisp
 (write-char #@bsl{}a)
@OUT{} a
@EV{} #@bsl{}a
 (with-output-to-string (s) 
   (write-char #@bsl{}a s)
   (write-char #@bsl{}Space s)
   (write-char #@bsl{}b s))
@EV{} "a b"
@end lisp


@subsubheading Side Effects:

The @param{output-stream} is modified.

@subsubheading Affected By:

@code{*standard-output*},
@code{*terminal-io*}.

@subsubheading See Also:

@ref{read-char},
@ref{write-byte},
@ref{write-sequence}


@node read-line
@heading read-line (Function)
@syindex read-line
@cindex read-line


@subsubheading Syntax:

@DefunWithValuesNewline{read-line, @opt{} input-stream eof-error-p eof-value recursive-p, line\, missing-newline-p}

@subsubheading Arguments and Values:

@param{input-stream}---an @term{input} @term{stream designator}.
@Default{@term{standard input}}

@param{eof-error-p}---a @term{generalized boolean}.
@Default{@term{true}}

@param{eof-value}---an @term{object}.
@Default{@nil{}}

@param{recursive-p}---a @term{generalized boolean}.
@Default{@term{false}}

@param{line}---a @term{string} or the @param{eof-value}.

@param{missing-newline-p}---a @term{generalized boolean}.

@subsubheading Description:

Reads from @param{input-stream} a line of text
that is terminated by a @term{newline} or @term{end of file}.

@mat{ }@ExplainRecursiveP{}

The @term{primary value}, @param{line}, is the line that is read,
represented as a @term{string} (without the trailing @term{newline}, if any).
If  @param{eof-error-p} is @term{false} 
and the @term{end of file} for @param{input-stream} is reached
before any @term{characters} are read,
@param{eof-value} is returned as the @param{line}.

The @term{secondary value}, @param{missing-newline-p}, 
is a @term{generalized boolean} that is
@term{false} if the @param{line} was terminated by a @term{newline},
or @term{true}  if the @param{line} was terminated by 
the @term{end of file} for @param{input-stream}
(or if the @param{line} is the @param{eof-value}).

@subsubheading Examples:

@lisp
 (setq a "line 1
 line2")
@EV{} "line 1
 line2"
 (read-line (setq input-stream (make-string-input-stream a)))
@EV{} "line 1", @term{false}
 (read-line input-stream)
@EV{} "line2", @term{true}
 (read-line input-stream nil nil)
@EV{} NIL, @term{true}
@end lisp


@subsubheading Affected By:

@code{*standard-input*},
@code{*terminal-io*}.

@subsubheading Exceptional Situations:

If an @term{end of file}@sub2{} occurs before any characters are read in the line,
an error is signaled if @param{eof-error-p} is @term{true}.  

@subsubheading See Also:

@ref{read}

@subsubheading Notes:

The corresponding output function is @code{write-line}.


@node write-string; write-line
@heading write-string, write-line (Function)
@syindex write-string
@cindex write-string
@syindex write-line
@cindex write-line
@anchor{write-string}
@anchor{write-line}


@subsubheading Syntax:

@DefunWithValues{write-string, string @opt{} output-stream @key{} start end, string}
@DefunWithValues{write-line, string @opt{} output-stream @key{} start end, string}

@subsubheading Arguments and Values:

@param{string}---a @term{string}.

@param{output-stream}---an @term{output} @term{stream designator}.
@Default{@term{standard output}}

@param{start}, @param{end}---@term{bounding index designators} of @param{string}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@subsubheading Description:

@code{write-string} writes the @term{characters} of 
the subsequence of @param{string} @term{bounded} by @param{start} and @param{end}
to @param{output-stream}.
@code{write-line} does the same thing, 
but then outputs a newline afterwards.  

@subsubheading Examples:

@lisp
 (prog1 (write-string "books" nil :end 4) (write-string "worms"))
@OUT{} bookworms
@EV{} "books"
 (progn (write-char #@bsl{}*)
        (write-line "test12" *standard-output* :end 5) 
        (write-line "*test2")
        (write-char #@bsl{}*)
        nil)
@OUT{} *test1
@OUT{} *test2
@OUT{} *
@EV{} NIL
@end lisp


@subsubheading Affected By:

@code{*standard-output*},
@code{*terminal-io*}.

@subsubheading See Also:

@ref{read-line}, @ref{write-char}

@subsubheading Notes:

@code{write-line} and @code{write-string} return @param{string},
not the substring @term{bounded} by @param{start} and @param{end}.

@lisp
 (write-string string)
@EQ{} (dotimes (i (length string)
      (write-char (char string i)))

 (write-line string)
@EQ{} (prog1 (write-string string) (terpri))
@end lisp




@node read-sequence
@heading read-sequence (Function)
@syindex read-sequence
@cindex read-sequence


@subsubheading Syntax:

@DefunWithValues{read-sequence, sequence stream @key{} start end, position}

@param{sequence}---a @term{sequence}.

@param{stream}---an @term{input} @term{stream}.

@param{start}, @param{end}---@term{bounding index designators} of
@param{sequence}.  @Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{position}---an @term{integer} greater than or equal to zero, and
less than or equal to the @term{length} of the @param{sequence}.

@subsubheading Description:

Destructively modifies @param{sequence} by replacing the @term{elements}
of @param{sequence} @term{bounded} by @param{start} and @param{end} with
@term{elements} read from @param{stream}.

@param{Sequence} is destructively modified by copying successive
@term{elements} into it from @param{stream}.  If the @term{end of file} for
@param{stream} is reached before copying all @term{elements} of the
subsequence, then the extra @term{elements} near the end of @param{sequence}
are not updated.

@param{Position} is the index of the first @term{element} of @param{sequence}
that was not updated, which might be less than @param{end} because the
@term{end of file} was reached.

@subsubheading Examples:

@lisp
 (defvar *data* (make-array 15 :initial-element nil))
 (values (read-sequence *data* (make-string-input-stream "test string")) *data*)
 @EV{} 11, #(#@bsl{}t #@bsl{}e #@bsl{}s #@bsl{}t #@bsl{}Space #@bsl{}s #@bsl{}t #@bsl{}r #@bsl{}i #@bsl{}n #@bsl{}g NIL NIL NIL NIL)
@end lisp


@subsubheading Side Effects:

Modifies @param{stream} and @param{sequence}.

@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}
@Shouldchecktype{start, a non-negative @term{integer}}
@Shouldchecktype{end, a non-negative @term{integer} or @nil{}}

Might signal an error @oftype{type-error} if an @term{element} read from
the @param{stream} is not a member of the @term{element type} of the
@param{sequence}.

@subsubheading See Also:

@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{write-sequence},
@ref{read-line}

@subsubheading Notes:

@code{read-sequence} is identical in effect to iterating over the indicated
subsequence and reading one @term{element} at a time from @param{stream} and
storing it into @param{sequence}, but may be more efficient than the
equivalent loop.  An efficient implementation is more likely to exist
for the case where the @param{sequence} is a @term{vector} with the same
@term{element type} as the @param{stream}.


@node write-sequence
@heading write-sequence (Function)
@syindex write-sequence
@cindex write-sequence


@subsubheading Syntax:

@DefunWithValues{write-sequence, sequence stream @key{} start end, sequence}

@param{sequence}---a @term{sequence}.

@param{stream}---an @term{output} @term{stream}.

@param{start}, @param{end}---@term{bounding index designators} of
@param{sequence}.  @Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@subsubheading Description:

@code{write-sequence} writes the @term{elements} of the subsequence
of @param{sequence} @term{bounded} by @param{start} and @param{end} to
@param{stream}.

@subsubheading Examples:

@lisp
 (write-sequence "bookworms" *standard-output* :end 4)
 @OUT{} book
 @EV{} "bookworms"
@end lisp


@subsubheading Side Effects:

Modifies @param{stream}.

@subsubheading Exceptional Situations:

@Lazychecktype{sequence, a @term{proper sequence}}
@Shouldchecktype{start, a non-negative @term{integer}}
@Shouldchecktype{end, a non-negative @term{integer} or @nil{}}

Might signal an error @oftype{type-error} if an @term{element} of the
@term{bounded} @term{sequence} is not a member of the
@term{stream element type} of the @param{stream}.

@subsubheading See Also:

@ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)},
@ref{read-sequence},
@ref{write-string},
@ref{write-line}

@subsubheading Notes:

@code{write-sequence} is identical in effect to iterating over the indicated
subsequence and writing one @term{element} at a time to @param{stream}, but
may be more efficient than the equivalent loop.  An efficient implementation
is more likely to exist for the case where the @param{sequence} is a
@term{vector} with the same @term{element type} as the @param{stream}.



@node file-length
@heading file-length (Function)
@syindex file-length
@cindex file-length


@subsubheading Syntax:

@DefunWithValues{file-length, stream, length}

@subsubheading Arguments and Values:

@param{stream}---a @term{stream associated with a file}.

@param{length}---a non-negative @term{integer} or @nil{}.

@subsubheading Description:

@code{file-length} returns the length of @param{stream},  
or @nil{}@spc{}if the length cannot be determined.

For a binary file, the length is measured in units of
the @term{element type} of the @param{stream}.

@subsubheading Examples:

@lisp
 (with-open-file (s "decimal-digits.text" 
                    :direction :output :if-exists :error)
   (princ "0123456789" s)
   (truename s))
@EV{} #P"A:>Joe>decimal-digits.text.1"
 (with-open-file (s "decimal-digits.text")
   (file-length s))
@EV{} 10
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{stream, a @term{stream associated with a file}}

@subsubheading See Also:

@ref{open}


@node file-position
@heading file-position (Function)
@syindex file-position
@cindex file-position


@subsubheading Syntax:

@DefunWithValues{file-position, stream, position}
@DefunWithValues{file-position, stream position-spec, success-p}

@subsubheading Arguments and Values:

@param{stream}---a @term{stream}.

@param{position-spec}---a @term{file position designator}.

@param{position}---a @term{file position} or @nil{}.

@param{success-p}---a @term{generalized boolean}.

@subsubheading Description:

Returns or changes the current position within a @param{stream}.

When @param{position-spec} is not supplied,
@code{file-position} returns the current @term{file position} in the @param{stream},
or @nil{}@spc{}if this cannot be determined.

When @param{position-spec} is supplied,
the @term{file position} in @param{stream} is set to that @term{file position} (if possible).
@code{file-position} returns @term{true} 
if the repositioning is performed successfully,
or @term{false} if it is not.

An @term{integer} returned by @code{file-position} of one argument 
should be acceptable as @param{position-spec} for use with the same file.

For a character file,
performing a single @code{read-char} or @code{write-char} operation
may cause the file position to be increased by more than 1 because of
character-set translations (such as translating between the @clisp{}
@f{#@bsl{}Newline} character and an external ASCII
carriage-return/line-feed sequence) and other aspects of the
implementation.  For a binary file, every @code{read-byte} 
or @code{write-byte}
operation increases the file position by 1.

@subsubheading Examples:

@lisp
 (defun tester ()
   (let ((noticed '()) file-written)
     (flet ((notice (x) (push x noticed) x))
       (with-open-file (s "test.bin" 
                          :element-type '(unsigned-byte 8)
                          :direction :output
                          :if-exists :error)
          (notice (file-position s)) ;1
          (write-byte 5 s) 
          (write-byte 6 s)
          (let ((p (file-position s)))
            (notice p) ;2
            (notice (when p (file-position s (1- p))))) ;3
          (write-byte 7 s)
          (notice (file-position s)) ;4
          (setq file-written (truename s)))
        (with-open-file (s file-written
                           :element-type '(unsigned-byte 8)
                           :direction :input)
          (notice (file-position s)) ;5
          (let ((length (file-length s)))
            (notice length) ;6
            (when length
              (dotimes (i length)
                (notice (read-byte s)))))) ;7,...
        (nreverse noticed))))
@EV{} tester
 (tester)
@EV{} (0 2 T 2 0 2 5 7)
@OV{} (0 2 NIL 3 0 3 5 6 7)
@OV{} (NIL NIL NIL NIL NIL NIL)
@end lisp


@subsubheading Side Effects:

When the @param{position-spec} argument is supplied,
the @term{file position} in the @param{stream} might be moved.

@subsubheading Affected By:

The value returned by @code{file-position} increases monotonically
as input or output operations are performed.  

@subsubheading Exceptional Situations:

If @param{position-spec} is supplied, but is too large or otherwise inappropriate, 
an error is signaled.

@subsubheading See Also:

@ref{file-length},
@ref{file-string-length},
@ref{open}

@subsubheading Notes:

Implementations that have character files represented
as a sequence of records of bounded size might choose to encode the
file position as, for example,
@metavar{record-number}*@metavar{max-record-size}+@metavar{character-within-record}.
This is a valid encoding because it increases monotonically as
each character is read or written, though not necessarily by 1 at
each step.  An @term{integer} might then be considered ``inappropriate''
as @param{position-spec} to @code{file-position} if, when decoded into
record number and character number, it turned out that the
supplied record was too short for the specified character number.


@node file-string-length
@heading file-string-length (Function)
@syindex file-string-length
@cindex file-string-length



@subsubheading Syntax:

@DefunWithValues{file-string-length, stream object, length}

@subsubheading Arguments and Values:

@param{stream}---an @term{output} @term{character} @term{file stream}.

@param{object}---a @term{string} or a @term{character}.

@param{length}---a non-negative @term{integer}, or @nil{}.

@subsubheading Description:

@code{file-string-length} returns the difference between what 
@f{(file-position @param{stream})} would be after writing 
@param{object} and its current value, or @nil{}@spc{}if this cannot be determined.  

The returned value corresponds to the current state of @param{stream}
at the time of the call and might not be 
the same if it is called again
when the state of the @term{stream} has changed.



@node open
@heading open (Function)
@syindex open
@cindex open


@subsubheading Syntax:

@DefunWithValuesNewline{open, filespec @key{} @vtop{@hbox{direction element-type} @hbox{if-exists if-does-not-exist external-format}}, stream}

@subsubheading Arguments and Values:

@param{filespec}---a @term{pathname designator}.

@param{direction}---one of @kwd{input}, @kwd{output}, @kwd{io}, or @kwd{probe}.
@Default{@kwd{input}}

@param{element-type}---a @term{type specifier} 
for @term{recognizable subtype} of @code{character};
or a @term{type specifier} 
for a @term{finite} @term{recognizable subtype} of @term{integer};
or one of the @term{symbols} 
@t{signed-byte},
@t{unsigned-byte},
or @kwd{default}.
@Default{@code{character}}

@param{if-exists}---one of @kwd{error}, @kwd{new-version}, @kwd{rename},
@kwd{rename-and-delete}, @kwd{overwrite}, @kwd{append},
@kwd{supersede}, or @nil{}.
@Default{@kwd{new-version} if the version component of @param{filespec} is @kwd{newest},
or @kwd{error} otherwise}

@param{if-does-not-exist}---one of @kwd{error}, @kwd{create}, or @nil{}.
@Default{@kwd{error} if @param{direction} is @kwd{input} 
or @param{if-exists} is @kwd{overwrite} or @kwd{append};
@kwd{create} if @param{direction} is @kwd{output} or @kwd{io},
and @param{if-exists} is neither @kwd{overwrite} nor @kwd{append};
or @nil{}@spc{}when @param{direction} is @kwd{probe}}

@param{external-format}---an @term{external file format designator}.
@Default{@kwd{default}}

@param{stream}---a @term{file stream} or @nil{}.

@subsubheading Description:

@code{open} creates, opens, and returns a @term{file stream} 
that is connected to the file specified by @param{filespec}.
@param{Filespec} is the name of the file to be opened.  
If the @param{filespec} @term{designator} is a @term{stream},
that @term{stream} is not closed first or otherwise affected.

The keyword arguments to @code{open} specify the characteristics 
of the @term{file stream} that is returned, and how to handle errors.

If @param{direction} is @kwd{input}
or @kwd{probe},
or if @param{if-exists} is not @kwd{new-version}
and the version component of the @param{filespec} is @kwd{newest},
then the file opened is that file already existing in the file system
that has a version greater than that of any other file in the file system
whose other pathname components are the same as those of @param{filespec}.

An implementation is required to recognize all of 
the @code{open} keyword options 
and to do something reasonable in the context of the host operating
system.  
For example, if a file system does not support distinct file
versions and does not distinguish the notions of deletion and expunging,
@kwd{new-version} might be treated the same as
@kwd{rename} or @kwd{supersede}, and @kwd{rename-and-delete} might
be treated the same as @kwd{supersede}.


@table @asis

@item @id{@kwd{direction}}


These are the possible values for @param{direction}, 
and how they affect the nature of the @term{stream} that is created:


@table @asis
@item @id{@kwd{input}}


Causes the creation of an @term{input} @term{file stream}.

@item @id{@kwd{output}}
             

Causes the creation of an @term{output} @term{file stream}.

@item @id{@kwd{io}}


Causes the creation of a @term{bidirectional} @term{file stream}.

@item @id{@kwd{probe}}


Causes the creation of a ``no-directional'' @term{file stream}; 
in effect, the @term{file stream} is created 
and then closed prior to being returned by @code{open}.
@end table


@item @id{@kwd{element-type}}


The @param{element-type} specifies the unit of transaction for the @term{file stream}.
If it is @kwd{default},
the unit is determined by @term{file system},
possibly based on the @term{file}.

@item @id{@kwd{if-exists}}


@param{if-exists} specifies the action to be taken if @param{direction} is
@kwd{output} or @kwd{io} and a file of the name @param{filespec} 
already exists.
If @param{direction} is @kwd{input}, not supplied, or @kwd{probe}, 
@param{if-exists} is ignored.
These are the results of @code{open} as modified by @param{if-exists}:


@table @asis

@item @id{@kwd{error}}


An error @oftype{file-error} is signaled.

@item @id{@kwd{new-version}}


A new file is created with a larger version number.

@item @id{@kwd{rename}}
 

The existing file is renamed to some other name and then a new file is created.

@item @id{@kwd{rename-and-delete}}


The existing file is renamed to some other name,
then it is deleted but not expunged, and then a new file is created.

@item @id{@kwd{overwrite}}


Output operations on the @term{stream} destructively modify the existing file.
If @param{direction} is @kwd{io} the file is opened in a bidirectional mode
that allows both reading and writing.  The file pointer is initially 
positioned at the beginning of the file; however, the file is not truncated
back to length zero when it is opened.

@item @id{@kwd{append}}


Output operations on the @term{stream} destructively modify the existing file.
The file pointer is initially positioned at the end of the file.

If @param{direction} is @kwd{io},
the file is opened in a bidirectional mode that allows both reading and writing.

@item @id{@kwd{supersede}}


The existing file is superseded;
that is, a new file with the same name as the old one is created.
If possible, the implementation should not destroy the old file until the new
@term{stream} is closed.

@item @id{@nil{}}


No file or @term{stream} is created;
instead, @nil{}@spc{}is returned to indicate failure.
@end table


@item @id{@kwd{if-does-not-exist}}


@param{if-does-not-exist}
specifies the action to be taken if
a file of name @param{filespec} does not already exist.
These are the results of @code{open} as modified by @param{if-does-not-exist}:


@table @asis

@item @id{@kwd{error}}


An error @oftype{file-error} is signaled.

@item @id{@kwd{create}}


An empty file is created.
Processing continues  as if the file 
had already existed but no processing as 
directed by @param{if-exists} is performed.

@item @id{@nil{}}


No file or @term{stream} is created;
instead, @nil{}@spc{}is returned to indicate failure.
@end table


@item @id{@kwd{external-format}}


This option selects an @term{external file format} for the @term{file}:
The only @term{standardized} value for this option is @kwd{default},
although @term{implementations} are permitted to define additional 
@term{external file formats} and @term{implementation-dependent} values 
returned by @code{stream-external-format} can also be used by @term{conforming programs}.

The @param{external-format} is meaningful for
any kind of @term{file stream} whose @term{element type}
is a @term{subtype} of @term{character}.
This option is ignored for @term{streams} for which it is not meaningful;
however, @term{implementations} may define other @term{element types} 
for which it is meaningful.
The consequences are unspecified if a @term{character} is written 
that cannot be represented by the given @term{external file format}.
@end table


When a file is opened, a @term{file stream} is constructed to serve
as the file system's ambassador to the @Lisp{}@spc{}environment;
operations on the @term{file stream} are reflected by operations on the file
in the file system.  

A file can be deleted, renamed, or destructively modified by @code{open}.

For information about opening relative pathnames,
see @ref{Merging Pathnames, Section 19.2.3 (Merging Pathnames)}.

@subsubheading Examples:

@lisp
 (open @i{filespec} :direction :probe)  @EV{} #<Closed Probe File Stream...>
 (setq q (merge-pathnames (user-homedir-pathname) "test"))
@EV{} #<PATHNAME :HOST NIL :DEVICE @i{device-name} :DIRECTORY @i{directory-name}
    :NAME "test" :TYPE NIL :VERSION :NEWEST>
 (open @i{filespec} :if-does-not-exist :create) @EV{} #<Input File Stream...>
 (setq s (open @i{filespec} :direction :probe)) @EV{} #<Closed Probe File Stream...>
 (truename s) @EV{} #<PATHNAME :HOST NIL :DEVICE @i{device-name} :DIRECTORY
    @i{directory-name} :NAME @i{filespec} :TYPE @i{extension} :VERSION 1>
 (open s :direction :output :if-exists nil) @EV{} NIL 
@end lisp


@subsubheading Affected By:

The nature and state of the host computer's @term{file system}.

@subsubheading Exceptional Situations:

If @param{if-exists} is @kwd{error}, (subject to the
constraints on the meaning of @param{if-exists} listed above),
an error @oftype{file-error} is signaled.                        

If @param{if-does-not-exist} is @kwd{error} (subject to the
constraints on the meaning of @param{if-does-not-exist} listed above),
an error @oftype{file-error} is signaled.

If it is impossible for an implementation to handle some option
in a manner close to what is specified here,
an error @oftype{error} might be signaled.

An error @oftype{file-error} is signaled if
@tt{(wild-pathname-p @param{filespec})} returns true.

An error @oftype{error} is signaled if the @param{external-format} 
is not understood by the @term{implementation}.

The various @term{file systems} in existence today have widely differing capabilities,
and some aspects of the @term{file system} are beyond the scope of this specification
to define.  A given @term{implementation} might not be able to support all of these options 
in exactly the manner stated.  An @term{implementation} is required to recognize all of 
these option keywords and to try to do something ``reasonable'' in the context of the 
host @term{file system}.  Where necessary to accomodate the @term{file system},
an @term{implementation} deviate slightly from the semantics specified here without 
being disqualified for consideration as a @term{conforming implementation}.
If it is utterly impossible for an @term{implementation} to handle some option
in a manner similar to what is specified here, it may simply signal an error.

With regard to the @kwd{element-type} option, if a @term{type} is
requested that is not supported by the @term{file system}, a substitution of types 
such as that which goes on in @term{upgrading} is permissible.  As a minimum 
requirement, it should be the case that opening an @term{output} @term{stream}
to a @term{file} in a given @term{element type} and later opening 
an @term{input} @term{stream} to the same @term{file} in the same @term{element type}
should work compatibly.

@subsubheading See Also:

@ref{with-open-file},
@ref{close},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{Merging Pathnames, Section 19.2.3 (Merging Pathnames)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}

@subsubheading Notes:


@code{open} does not automatically close the file when an abnormal
exit occurs.

When @param{element-type} is a @term{subtype} of @code{character},
@code{read-char} and/or @code{write-char} can be
used on the resulting @term{file stream}. 

When @param{element-type} is a @term{subtype} of @term{integer},
@code{read-byte} and/or @code{write-byte} can be used on the resulting @term{file stream}.

When @param{element-type} is @kwd{default},
the @term{type} can be determined by using @code{stream-element-type}.


@node stream-external-format
@heading stream-external-format (Function)
@syindex stream-external-format
@cindex stream-external-format


@subsubheading Syntax:

@DefunWithValues{stream-external-format, stream, format}

@subsubheading Arguments and Values:

@param{stream}---a @term{file stream}.

@param{format}---an @term{external file format}.

@subsubheading Description:

Returns an @term{external file format designator} for the @param{stream}.

@subsubheading Examples:

@lisp
 (with-open-file (stream "test" :direction :output)
   (stream-external-format stream))
@EV{} :DEFAULT
@OV{} :ISO8859/1-1987
@OV{} (:ASCII :SAIL)
@OV{} ACME::PROPRIETARY-FILE-FORMAT-17
@OV{} #<FILE-FORMAT :ISO646-1983 2343673>
@end lisp


@subsubheading See Also:

the @kwd{external-format} @term{argument} to @thefunction{open} and
@themacro{with-open-file}.

@subsubheading Notes:

The @param{format} returned is not necessarily meaningful 
to other @term{implementations}.


@node with-open-file
@heading with-open-file (macro)
@syindex with-open-file
@cindex with-open-file



@subsubheading Syntax:

@DefmacWithValuesNewline{with-open-file, @paren{stream filespec @starparam{options}} @starparam{declaration} @starparam{form}, results}

@subsubheading Arguments and Values:

@param{stream}---a variable.

@param{filespec}---a @term{pathname designator}.

@param{options}---@term{forms}; @eval{}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @param{forms}.

@subsubheading Description:

@code{with-open-file} uses @code{open} to create a @term{file stream}
to @term{file} named by @param{filespec}. 
@param{Filespec} is the name of the file to be opened.
@param{Options} are used as keyword arguments to @code{open}.

The @term{stream} @term{object} to which the @param{stream} @term{variable} 
is @term{bound} has @term{dynamic extent};
its @term{extent} ends when the @term{form} is exited.

@code{with-open-file} evaluates the @param{forms} as an @term{implicit progn} 
with @param{stream} bound to 
the value returned by @code{open}.

When control leaves the body, either normally or abnormally (such as by
use of @code{throw}), the file is automatically closed.  If a new
output file is being written, and control leaves abnormally, the file is
aborted and the file system is left, so far as possible, as if the file
had never been opened.  

It is possible by the use of @f{:if-exists nil} 
or @f{:if-does-not-exist nil} for
@param{stream} to be bound to @nil{}.
Users of @f{:if-does-not-exist nil} should check for a valid @term{stream}.

The consequences are undefined if an attempt is made to @term{assign} the 
@param{stream} @term{variable}.  The compiler may choose to issue a
warning if such an attempt is detected.

@subsubheading Examples:

@lisp
 (setq p (merge-pathnames "test"))
@EV{} #<PATHNAME :HOST NIL :DEVICE @i{device-name} :DIRECTORY @i{directory-name}
    :NAME "test" :TYPE NIL :VERSION :NEWEST>
 (with-open-file (s p :direction :output :if-exists :supersede)
    (format s "Here are a couple~%of test data lines~%")) @EV{} NIL
 (with-open-file (s p)
    (do ((l (read-line s) (read-line s nil 'eof)))
        ((eq l 'eof) "Reached end of file.")
     (format t "~&*** ~A~%" l)))
@OUT{} *** Here are a couple
@OUT{} *** of test data lines
@EV{} "Reached end of file."
@end lisp


@lisp
;; Normally one would not do this intentionally because it is
;; not perspicuous, but beware when using :IF-DOES-NOT-EXIST NIL
;; that this doesn't happen to you accidentally...
 (with-open-file (foo "no-such-file" :if-does-not-exist nil)
   (read foo))
@OUT{} @IN{hello?}
@EV{} HELLO? ;This value was read from the terminal, not a file!

;; Here's another bug to avoid...
 (with-open-file (foo "no-such-file" :direction :output :if-does-not-exist nil)
   (format foo "Hello"))
@EV{} "Hello" ;FORMAT got an argument of NIL!
@end lisp


@subsubheading Side Effects:

Creates a @term{stream} to the @term{file} named by @param{filename} (upon entry),
and closes the @term{stream} (upon exit).
In some @term{implementations},
the @term{file} might be locked in some way while it is open.
If the @term{stream} is an @term{output} @term{stream},
a @term{file} might be created.

@subsubheading Affected By:

The host computer's file system.

@subsubheading Exceptional Situations:

See the @term{function} @ref{open}.

@subsubheading See Also:

@ref{open},
@ref{close},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}




@node close
@heading close (Function)
@syindex close
@cindex close


@subsubheading Syntax:

@DefunWithValues{close, stream @key{} abort, result}

@subsubheading Arguments and Values:

@param{stream}---a @term{stream} (either @term{open} or @term{closed}).

@param{abort}---a @term{generalized boolean}.
@Default{@term{false}}

@param{result}---@code{t}@spc{}if the @param{stream} was @term{open} at the time it was
received as an @term{argument},
or @term{implementation-dependent} otherwise.

@subsubheading Description:

@code{close} closes @param{stream}. 
Closing a @term{stream} means
that it may no longer be used in input or output operations.
The act of @term{closing} a @term{file stream}
ends the association between the @term{stream} and its associated @term{file}; 
the transaction with the @term{file system} is terminated,
and input/output may no longer be performed on the @term{stream}. 

If @param{abort} is @term{true}, an attempt is made to clean up any side
effects of having created @param{stream}.
If @param{stream} performs output to a file
that was created when the @term{stream} was created, the
file is deleted and any previously existing file is not superseded.

It is permissible to close an already closed @term{stream},
but in that case the @param{result} is @term{implementation-dependent}.

After @param{stream} is closed, it is still possible to perform 
the following query operations upon it:
@code{streamp}, @code{pathname}, @code{truename}, 
@code{merge-pathnames}, @code{pathname-host}, @code{pathname-device},
@code{pathname-directory},@code{pathname-name}, 
@code{pathname-type}, @code{pathname-version}, @code{namestring}, 
@code{file-namestring}, @code{directory-namestring}, 
@code{host-namestring}, @code{enough-namestring}, @code{open},
@code{probe-file}, and @code{directory}. 

The effect of @code{close} on a @term{constructed stream} is 
to close the argument @param{stream} only. 
There is no effect on the @term{constituents} of @term{composite streams}.

For a @term{stream} created with @code{make-string-output-stream},
the result of @code{get-output-stream-string} is unspecified after @code{close}.

@subsubheading Examples:

@lisp
 (setq s (make-broadcast-stream)) @EV{} #<BROADCAST-STREAM>
 (close s) @EV{} T
 (output-stream-p s) @EV{} @term{true}
@end lisp


@subsubheading Side Effects:

The @param{stream} is @term{closed} (if necessary).
If @param{abort} is @term{true} and the @param{stream} is
an @term{output} @term{file stream}, its associated @term{file}
might be deleted.

@subsubheading See Also:

@ref{open}


@node with-open-stream
@heading with-open-stream (Macro)
@syindex with-open-stream
@cindex with-open-stream



@subsubheading Syntax:

@DefmacWithValuesNewline{with-open-stream, @paren{var stream} @starparam{declaration}  @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{variable} @term{name}.

@param{stream}---a @term{form}; evaluated to produce a @term{stream}.

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @param{forms}.

@subsubheading Description:

@code{with-open-stream} performs a series of operations on 
@param{stream}, returns a value, and then closes the @param{stream}.

@param{Var} is bound to the value of @param{stream},
and then @param{forms} are executed
as an @term{implicit progn}. 
@param{stream}
is automatically closed on exit from @code{with-open-stream},
no matter whether the exit is normal or abnormal.
The @param{stream} has @term{dynamic extent};
its @term{extent} ends when the @term{form} is exited.

The consequences are undefined if an attempt is made to @term{assign} the 
the @term{variable} @param{var} with the @param{forms}.

@subsubheading Examples:

@lisp
 (with-open-stream (s (make-string-input-stream "1 2 3 4"))
    (+ (read s) (read s) (read s))) @EV{} 6
@end lisp


@subsubheading Side Effects:

The @param{stream} is closed (upon exit).

@subsubheading See Also:

@ref{close}



@node listen
@heading listen (Function)
@syindex listen
@cindex listen


@subsubheading Syntax:

@DefunWithValues{listen, @opt{} input-stream, generalized-boolean}

@subsubheading Arguments and Values:

@param{input-stream}---an @term{input} @term{stream designator}.
@Default{@term{standard input}}

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

Returns @term{true} if 
there is a character immediately available from @param{input-stream};
otherwise, returns @term{false}.
On a non-interactive @param{input-stream},
@code{listen} returns @term{true} except when at @term{end of file}@sub1{}.
If an @term{end of file} is encountered, @code{listen} returns @term{false}.
@code{listen} is intended to be used 
when @param{input-stream} obtains characters
from an interactive device such as a keyboard.  

@subsubheading Examples:

@lisp
 (progn (unread-char (read-char)) (list (listen) (read-char)))
@OUT{} @IN{1}
@EV{} (T #@bsl{}1)
 (progn (clear-input) (listen))
@EV{} NIL ;Unless you're a very fast typist!
@end lisp


@subsubheading Affected By:

@code{*standard-input*}

@subsubheading See Also:

@ref{interactive-stream-p},
@ref{read-char-no-hang}


@node clear-input
@heading clear-input (Function)
@syindex clear-input
@cindex clear-input


@subsubheading Syntax:

@DefunWithValues{clear-input, @opt{} input-stream, @nil{}}

@subsubheading Arguments and Values:

@param{input-stream}---an @term{input} @term{stream designator}.
@Default{@term{standard input}}

@subsubheading Description:

Clears any available input from @param{input-stream}.

If @code{clear-input} does not make sense for @param{input-stream}, 
then @code{clear-input} does nothing. 

@subsubheading Examples:
@lisp
;; The exact I/O behavior of this example might vary from implementation
;; to implementation depending on the kind of interactive buffering that
;; occurs.  (The call to SLEEP here is intended to help even out the 
;; differences in implementations which do not do line-at-a-time buffering.)

(defun read-sleepily (&optional (clear-p nil) (zzz 0))
  (list (progn (print '>) (read))
        ;; Note that input typed within the first ZZZ seconds 
        ;; will be discarded.
        (progn (print '>) 
               (if zzz (sleep zzz))
               (print '>>)
               (if clear-p (clear-input))
               (read))))

(read-sleepily)
@OUT{} > @IN{10}
@OUT{} >
@OUT{} >> @IN{20}
@EV{} (10 20)

(read-sleepily t)
@OUT{} > @IN{10}
@OUT{} >
@OUT{} >> @IN{20}
@EV{} (10 20)

(read-sleepily t 10)
@OUT{} > @IN{10}
@OUT{} > @IN{20}  ; Some implementations won't echo typeahead here.
@OUT{} >> @IN{30}
@EV{} (10 30)
@end lisp


@subsubheading Side Effects:

The @param{input-stream} is modified.

@subsubheading Affected By:

@code{*standard-input*}

@subsubheading Exceptional Situations:

@Shouldchecktype{input-stream, a @term{stream designator}}

@subsubheading See Also:

@ref{clear-output}


@node finish-output; force-output; clear-output
@heading finish-output, force-output, clear-output (Function)
@syindex finish-output
@cindex finish-output
@syindex force-output
@cindex force-output
@syindex clear-output
@cindex clear-output
@anchor{clear-output}


@subsubheading Syntax:

@DefunWithValues{finish-output, @opt{} output-stream, @nil{}}
@DefunWithValues{force-output, @opt{} output-stream, @nil{}}
@DefunWithValues{clear-output, @opt{} output-stream, @nil{}}

@subsubheading Arguments and Values:

@param{output-stream}---an @term{output} @term{stream designator}.
@Default{@term{standard output}}

@subsubheading Description:

@code{finish-output}, @code{force-output}, and @code{clear-output}
exercise control over the internal handling of buffered stream output.  

@code{finish-output} attempts to ensure that any buffered output
sent to @param{output-stream} has reached its destination, and then returns.

@code{force-output} initiates the emptying of any
internal buffers but does not wait for completion
or acknowledgment to return.

@code{clear-output} attempts to abort any
outstanding output operation in progress in order
to allow as little output as possible
to continue to the destination.  

If any of these operations does not make sense for @param{output-stream}, 
then it does nothing. 
The precise actions of these @term{functions} are @term{implementation-dependent}.

@subsubheading Examples:
@lisp
;; Implementation A
 (progn (princ "am i seen?") (clear-output))
@EV{} NIL

;; Implementation B
 (progn (princ "am i seen?") (clear-output))
@OUT{} am i seen?
@EV{} NIL
@end lisp


@subsubheading Affected By:

@code{*standard-output*}

@subsubheading Exceptional Situations:

@Shouldchecktype{output-stream, a @term{stream designator}}

@subsubheading See Also:

@ref{clear-input}


@node y-or-n-p; yes-or-no-p
@heading y-or-n-p, yes-or-no-p (Function)
@syindex y-or-n-p
@cindex y-or-n-p
@syindex yes-or-no-p
@cindex yes-or-no-p


@subsubheading Syntax:

@DefunWithValues{y-or-n-p, @opt{} control @rest{} arguments, generalized-boolean}
@DefunWithValues{yes-or-no-p, @opt{} control @rest{} arguments, generalized-boolean}

@subsubheading Arguments and Values:

@param{control}---a @term{format control}.

@param{arguments}---@term{format arguments} for @param{control}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

These functions ask a question and parse a response from the user.
They return @term{true} if the answer is affirmative,
or @term{false} if the answer is negative.

@code{y-or-n-p} is for asking the user a question whose answer is either
``yes'' or ``no.''  
It is intended that the reply require
the user to answer a yes-or-no question with a single
character.
@code{yes-or-no-p} is also for asking the user a question
whose answer is either ``Yes'' or ``No.''  
It is intended that the reply require
the user to take more action than just a single keystroke, such as typing
the full word @f{yes} or @f{no} followed by a newline.

@code{y-or-n-p} types out a message (if supplied), reads an answer
in some @term{implementation-dependent} manner (intended to be short and simple,
such as reading a single character such as @f{Y} or @f{N}).
@code{yes-or-no-p} types out a message (if supplied), 
attracts the user's attention (for example, by ringing
the terminal's bell),
and reads an answer
in some @term{implementation-dependent} manner (intended to be multiple characters,
such as @f{YES} or @f{NO}).

If @param{format-control} is supplied and not @nil{},
then a @code{fresh-line} operation is performed; then
a message is printed as if @param{format-control} and @param{arguments}
were given to @code{format}.
In any case, @code{yes-or-no-p} and @code{y-or-n-p} will provide 
a prompt such as ``@f{(Y or N)}'' or ``@f{(Yes or No)}'' if appropriate.

All input and output are performed using @term{query I/O}.

@subsubheading Examples:
@lisp
 (y-or-n-p "(t or nil) given by")
@OUT{} (t or nil) given by (Y or N) @IN{Y}
@EV{} @term{true}
 (yes-or-no-p "a ~S message" 'frightening) 
@OUT{} a FRIGHTENING message (Yes or No) @IN{no}
@EV{} @term{false}
 (y-or-n-p "Produce listing file?") 
@OUT{} Produce listing file?
@OUT{} Please respond with Y or N. @IN{n}
@EV{} @term{false}
@end lisp


@subsubheading Side Effects:

Output to and input from @term{query I/O} will occur.

@subsubheading Affected By:

@code{*query-io*}.

@subsubheading See Also:

@ref{format}

@subsubheading Notes:

@code{yes-or-no-p} and @code{yes-or-no-p} do not add question marks
to the end of the prompt string, so any desired question mark or other
punctuation should be explicitly included in the text query.


@node make-synonym-stream
@heading make-synonym-stream (Function)
@syindex make-synonym-stream
@cindex make-synonym-stream


@subsubheading Syntax:

@DefunWithValues{make-synonym-stream, symbol, synonym-stream}

@subsubheading Arguments and Values:

@param{symbol}---a @term{symbol} that names a @term{dynamic variable}.

@param{synonym-stream}---a @term{synonym stream}.

@subsubheading Description:

Returns a @term{synonym stream} whose @term{synonym stream symbol} is @param{symbol}.

@subsubheading Examples:

@lisp
 (setq a-stream (make-string-input-stream "a-stream")
        b-stream (make-string-input-stream "b-stream"))
@EV{} #<String Input Stream> 
 (setq s-stream (make-synonym-stream 'c-stream))
@EV{} #<SYNONYM-STREAM for C-STREAM> 
 (setq c-stream a-stream)
@EV{} #<String Input Stream> 
 (read s-stream) @EV{} A-STREAM
 (setq c-stream b-stream)
@EV{} #<String Input Stream> 
 (read s-stream) @EV{} B-STREAM
@end lisp


@subsubheading Exceptional Situations:

Should signal @code{type-error} if its argument is not a @term{symbol}.

@subsubheading See Also:

@ref{Stream Concepts, Section 21.1 (Stream Concepts)}


@node synonym-stream-symbol
@heading synonym-stream-symbol (Function)
@syindex synonym-stream-symbol
@cindex synonym-stream-symbol



@subsubheading Syntax:

@DefunWithValues{synonym-stream-symbol, synonym-stream, symbol}

@subsubheading Arguments and Values:

@param{synonym-stream}---a @term{synonym stream}.

@param{symbol}---a @term{symbol}.

@subsubheading Description:

Returns the @term{symbol} whose @code{symbol-value} the @param{synonym-stream} is using.  

@subsubheading See Also:

@ref{make-synonym-stream}



@node broadcast-stream-streams
@heading broadcast-stream-streams (Function)
@syindex broadcast-stream-streams
@cindex broadcast-stream-streams



@subsubheading Syntax:

@DefunWithValues{broadcast-stream-streams, broadcast-stream, streams}

@subsubheading Arguments and Values:

@param{broadcast-stream}---a @term{broadcast stream}.

@param{streams}---a @term{list} of @term{streams}.

@subsubheading Description:

Returns a @term{list} of output @term{streams} that constitute
all the @term{streams} to which the @param{broadcast-stream} is broadcasting.  



@node make-broadcast-stream
@heading make-broadcast-stream (Function)
@syindex make-broadcast-stream
@cindex make-broadcast-stream


@subsubheading Syntax:

@DefunWithValues{make-broadcast-stream, @rest{} streams, broadcast-stream}

@subsubheading Arguments and Values:

@param{stream}---an @term{output} @term{stream}.


@param{broadcast-stream}---a @term{broadcast stream}.

@subsubheading Description:

Returns a @term{broadcast stream}.

@subsubheading Examples:

@lisp
 (setq a-stream (make-string-output-stream)
        b-stream (make-string-output-stream)) @EV{} #<String Output Stream>
 (format (make-broadcast-stream a-stream b-stream)
          "this will go to both streams") @EV{} NIL
 (get-output-stream-string a-stream) @EV{} "this will go to both streams"
 (get-output-stream-string b-stream) @EV{} "this will go to both streams"
@end lisp


@subsubheading Exceptional Situations:

@Shouldcheckanytype{stream, an @term{output} @term{stream}}

@subsubheading See Also:

@ref{broadcast-stream-streams}


@node make-two-way-stream
@heading make-two-way-stream (Function)
@syindex make-two-way-stream
@cindex make-two-way-stream


@subsubheading Syntax:

@DefunWithValues{make-two-way-stream, input-stream output-stream, two-way-stream}

@subsubheading Arguments and Values:

@param{input-stream}---a @term{stream}.

@param{output-stream}---a @term{stream}.

@param{two-way-stream}---a @term{two-way stream}.

@subsubheading Description:

Returns a @term{two-way stream} 
that gets  its input  from @param{input-stream}
and  sends its output to   @param{output-stream}.

@subsubheading Examples:

@lisp
 (with-output-to-string (out)
    (with-input-from-string (in "input...")
      (let ((two (make-two-way-stream in out)))
        (format two "output...")
        (setq what-is-read (read two))))) @EV{} "output..."
 what-is-read @EV{} INPUT... 
@end lisp


@subsubheading Exceptional Situations:

@Shouldchecktype{input-stream, an @term{input} @term{stream}}
@Shouldchecktype{output-stream, an @term{output} @term{stream}}


@node two-way-stream-input-stream; two-way-stream-output-stream
@heading two-way-stream-input-stream, two-way-stream-output-stream (Function)
@syindex two-way-stream-input-stream
@cindex two-way-stream-input-stream
@syindex two-way-stream-output-stream
@cindex two-way-stream-output-stream
@anchor{two-way-stream-input-stream}
@anchor{two-way-stream-output-stream}



@subsubheading Syntax:

@DefunWithValues{two-way-stream-input-stream, two-way-stream, input-stream}
@DefunWithValues{two-way-stream-output-stream, two-way-stream, output-stream}

@subsubheading Arguments and Values:

@param{two-way-stream}---a @term{two-way stream}.

@param{input-stream}---an @term{input} @term{stream}.

@param{output-stream}---an @term{output} @term{stream}.

@subsubheading Description:

@code{two-way-stream-input-stream} returns the @term{stream}
from which @param{two-way-stream} receives input.

@code{two-way-stream-output-stream} returns the @term{stream} 
to which @param{two-way-stream} sends output.



@node echo-stream-input-stream; echo-stream-output-stream
@heading echo-stream-input-stream, echo-stream-output-stream (Function)
@syindex echo-stream-input-stream
@cindex echo-stream-input-stream
@syindex echo-stream-output-stream
@cindex echo-stream-output-stream
@anchor{echo-stream-input-stream}
@anchor{echo-stream-output-stream}



@subsubheading Syntax:

@DefunWithValues{echo-stream-input-stream, echo-stream, input-stream}
@DefunWithValues{echo-stream-output-stream, echo-stream, output-stream}

@subsubheading Arguments and Values:

@param{echo-stream}---an @term{echo stream}.

@param{input-stream}---an @term{input} @term{stream}.

@code{output-stream}---an @term{output} @term{stream}.

@subsubheading Description:

@code{echo-stream-input-stream} returns the @term{input} @term{stream} 
from which @param{echo-stream} receives input.

@code{echo-stream-output-stream} returns the @term{output} @term{stream}
to which @param{echo-stream} sends output.



@node make-echo-stream
@heading make-echo-stream (Function)
@syindex make-echo-stream
@cindex make-echo-stream


@subsubheading Syntax:


@DefunWithValues{make-echo-stream, input-stream output-stream, echo-stream}

@subsubheading Arguments and Values:

@param{input-stream}---an @term{input} @term{stream}.

@param{output-stream}---an @term{output} @term{stream}.

@param{echo-stream}---an @term{echo stream}.

@subsubheading Description:

Creates and returns an @term{echo stream} 
that takes input  from @param{input-stream}
and  sends output to   @param{output-stream}.


@subsubheading Examples:
@lisp
 (let ((out (make-string-output-stream)))
    (with-open-stream 
        (s (make-echo-stream
            (make-string-input-stream "this-is-read-and-echoed")
            out))
      (read s)
      (format s " * this-is-direct-output")
      (get-output-stream-string out)))
@EV{} "this-is-read-and-echoed * this-is-direct-output"
@end lisp


@subsubheading See Also:

@ref{echo-stream-input-stream},
@ref{echo-stream-output-stream},
@ref{make-two-way-stream}


@node concatenated-stream-streams
@heading concatenated-stream-streams (Function)
@syindex concatenated-stream-streams
@cindex concatenated-stream-streams



@subsubheading Syntax:

@DefunWithValues{concatenated-stream-streams, concatenated-stream, streams}

@subsubheading Arguments and Values:

@param{concatenated-stream}---a @term{concatenated stream}.

@param{streams}---a @term{list} of @term{input} @term{streams}.

@subsubheading Description:

Returns a @term{list} of @term{input} @term{streams} that constitute the
ordered set of @term{streams} the @param{concatenated-stream} still 
has to read from, starting with the current one it is reading from.
The list may be @term{empty} if no more @term{streams} remain to be read.

The consequences are undefined if the @term{list structure} of the @param{streams}
is ever modified.



@node make-concatenated-stream
@heading make-concatenated-stream (Function)
@syindex make-concatenated-stream
@cindex make-concatenated-stream


@subsubheading Syntax:

@DefunWithValues{make-concatenated-stream, @rest{} input-streams, concatenated-stream}

@subsubheading Arguments and Values:

@param{input-stream}---an @term{input} @term{stream}.


@param{concatenated-stream}---a @term{concatenated stream}.

@subsubheading Description:

Returns a @term{concatenated stream} that has the indicated @param{input-streams}
initially associated with it.


@subsubheading Examples:
@lisp
 (read (make-concatenated-stream
         (make-string-input-stream "1")
         (make-string-input-stream "2"))) @EV{} 12
@end lisp


@subsubheading Exceptional Situations:

Should signal @code{type-error} if any argument is not an @term{input} @term{stream}.

@subsubheading See Also:

@ref{concatenated-stream-streams}


@node get-output-stream-string
@heading get-output-stream-string (Function)
@syindex get-output-stream-string
@cindex get-output-stream-string


@subsubheading Syntax:

@DefunWithValues{get-output-stream-string, string-output-stream, string}

@subsubheading Arguments and Values:

@param{string-output-stream}---a @term{stream}.

@param{string}---a @term{string}.

@subsubheading Description:

Returns a @term{string} containing, in order, all the @term{characters} 
that have been output to @param{string-output-stream}.
This operation clears any @term{characters} on @param{string-output-stream},
so the @param{string} contains only those @term{characters} which have been output
since the last call to @code{get-output-stream-string}
or since the creation of the @param{string-output-stream},
whichever occurred most recently.

@subsubheading Examples:
@lisp
 (setq a-stream (make-string-output-stream)
        a-string "abcdefghijklm") @EV{} "abcdefghijklm"
 (write-string a-string a-stream) @EV{} "abcdefghijklm"
 (get-output-stream-string a-stream) @EV{} "abcdefghijklm"
 (get-output-stream-string a-stream) @EV{} ""
@end lisp


@subsubheading Side Effects:

The @param{string-output-stream} is cleared.

@subsubheading Exceptional Situations:

The consequences are undefined if @param{stream-output-string} is @term{closed}.

The consequences are undefined if @param{string-output-stream} is a @term{stream} that
was not produced by @code{make-string-output-stream}.
The consequences are undefined if @param{string-output-stream} was 
created implicitly by @code{with-output-to-string} or @code{format}.


@subsubheading See Also:

@ref{make-string-output-stream}


@node make-string-input-stream
@heading make-string-input-stream (Function)
@syindex make-string-input-stream
@cindex make-string-input-stream


@subsubheading Syntax:

@DefunWithValues{make-string-input-stream, string @opt{} start end, string-stream}

@subsubheading Arguments and Values:

@param{string}---a @term{string}.

@param{start}, @param{end}---@term{bounding index designators} of @param{string}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{string-stream}---an @term{input} @term{string stream}.

@subsubheading Description:

Returns an @term{input} @term{string stream}.  
This @term{stream} will supply, in order, the @term{characters} in the substring
of @param{string} @term{bounded} by @param{start} and @param{end}.
After the last @term{character} has been supplied, 
the @term{string stream} will then be at @term{end of file}.

@subsubheading Examples:

@lisp
 (let ((string-stream (make-string-input-stream "1 one ")))
   (list (read string-stream nil nil)
         (read string-stream nil nil)
         (read string-stream nil nil)))
@EV{} (1 ONE NIL)

 (read (make-string-input-stream "prefixtargetsuffix" 6 12)) @EV{} TARGET
@end lisp


@subsubheading See Also:

@ref{with-input-from-string}


@node make-string-output-stream
@heading make-string-output-stream (Function)
@syindex make-string-output-stream
@cindex make-string-output-stream


@subsubheading Syntax:

@DefunWithValues{make-string-output-stream, @key{} element-type, string-stream}

@subsubheading Arguments and Values:

@param{element-type}---a @term{type specifier}.
@Default{@code{character}}

@param{string-stream}---an @term{output} @term{string stream}.

@subsubheading Description:

Returns
an @term{output} @term{string stream} that accepts @term{characters}
and makes available (via @code{get-output-stream-string})
a @term{string} that contains the @term{characters} that were actually output.

The @param{element-type} names the @term{type} of the @term{elements}
of the @term{string}; a @term{string} is constructed of the most specialized
@term{type} that can accommodate @term{elements} of that @term{element-type}.

@subsubheading Examples:

@lisp
 (let ((s (make-string-output-stream)))
   (write-string "testing... " s)
   (prin1 1234 s)
   (get-output-stream-string s))
@EV{} "testing... 1234"
@end lisp


@None{}.

@subsubheading See Also:

@ref{get-output-stream-string}, @ref{with-output-to-string}


@node with-input-from-string
@heading with-input-from-string (Macro)
@syindex with-input-from-string
@cindex with-input-from-string



@subsubheading Syntax:

@DefmacWithValuesNewline{with-input-from-string, @paren{var string @key{} index start end} @starparam{declaration} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{variable} @term{name}.

@param{string}---a @term{form}; evaluated to produce a @term{string}.

@param{index}---a @term{place}.

@param{start}, @param{end}---@term{bounding index designators} of @param{string}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{result}---the @term{values} returned by the @param{forms}.

@subsubheading Description:

Creates an
@term{input} @term{string stream}, 
provides an opportunity to perform operations on the @term{stream} 
(returning zero or more @term{values}),
and then closes the @term{string stream}.

@param{String} is evaluated first, and @param{var} is bound to
a character @term{input} @term{string stream} that supplies 
@term{characters} from the subsequence of the resulting @term{string} @term{bounded} by
@param{start} and @param{end}. 
The body is executed as an @term{implicit progn}.

The @term{input} @term{string stream} is automatically closed on exit from
@code{with-input-from-string}, no matter whether the exit is normal or abnormal.
The @term{input} @term{string stream} to which the @term{variable} @param{var}
is @term{bound} has @term{dynamic extent};
its @term{extent} ends when the @term{form} is exited.

The @param{index} is a pointer within the @param{string} to be advanced.
If @code{with-input-from-string}
is exited normally, then @param{index} will have
as its @term{value}
the index into the @param{string} indicating the first character not read
which is @tt{(length @param{string})} if all characters were used.
The place specified by @param{index}
is not updated as reading progresses, but only at the
end of the operation. 

@param{start} and @param{index} may both specify the same variable, 
which is a pointer within the @param{string} to be advanced,
perhaps repeatedly by some containing loop.

The consequences are undefined if an attempt is made to @term{assign} 
the @term{variable} @param{var}.

@subsubheading Examples:
@lisp
 (with-input-from-string (s "XXX1 2 3 4xxx"
                             :index ind
                             :start 3 :end 10)
    (+ (read s) (read s) (read s))) @EV{} 6
 ind @EV{} 9
 (with-input-from-string (s "Animal Crackers" :index j :start 6)
   (read s)) @EV{} CRACKERS
@end lisp

The variable @f{j} is set to @f{15}.

@subsubheading Side Effects:

The @term{value} of the @term{place} named by @param{index}, if any, is modified.

@subsubheading See Also:

@ref{make-string-input-stream},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}



@node with-output-to-string
@heading with-output-to-string (Macro)
@syindex with-output-to-string
@cindex with-output-to-string



@subsubheading Syntax:

@DefmacWithValuesNewline{with-output-to-string, @paren{var @opt{} string-form @key{} element-type} @starparam{declaration} @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{var}---a @term{variable} @term{name}.

@param{string-form}---a @term{form} or @nil{};
if @term{non-nil}, evaluated to produce @param{string}.

@param{string}---a @term{string} that has a @term{fill pointer}.

@param{element-type}---a @term{type specifier}; @eval{}.
@Default{@code{character}}

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@param{results}---If a @param{string-form} is not supplied or @nil{},
a @term{string}; otherwise, 
the @term{values} returned by the @param{forms}.

@subsubheading Description:

@code{with-output-to-string} creates a
character @term{output} @term{stream}, performs a series of operations
that may send results to this @term{stream}, and then closes the @term{stream}. 

The @param{element-type} names the @term{type} of the elements
of the @term{stream}; a @term{stream} is constructed of the most specialized
@term{type} that can accommodate elements of the given @term{type}.  

The body is executed as an @term{implicit progn} with @param{var}
bound to an @term{output} @term{string stream}.  
All output to that @term{string stream} is saved in a @term{string}.  

If @param{string} is supplied, @param{element-type} is ignored, 
and the output is incrementally appended to @param{string} as
if by use of @code{vector-push-extend}.

The @term{output} @term{stream} 
is automatically closed on exit from @code{with-output-from-string},
no matter whether the exit is normal or abnormal.
The @term{output} @term{string stream} to which the @term{variable} @param{var}
is @term{bound} has @term{dynamic extent};
its @term{extent} ends when the @term{form} is exited.

If no @param{string} is provided, then @code{with-output-from-string} 
produces a @term{stream} that accepts characters and returns a @term{string} 
of the indicated @param{element-type}.
If @param{string} is provided,
@code{with-output-to-string} returns the results of evaluating the last @param{form}.

The consequences are undefined if an attempt is made to @term{assign}
the @term{variable} @param{var}.

@subsubheading Examples:
@lisp
 (setq fstr (make-array '(0) :element-type 'base-char
                             :fill-pointer 0 :adjustable t)) @EV{} ""
 (with-output-to-string (s fstr)
    (format s "here's some output")
    (input-stream-p s)) @EV{} @term{false}
 fstr @EV{} "here's some output"
@end lisp


@subsubheading Side Effects:

The @param{string} is modified.

@subsubheading Exceptional Situations:

The consequences are undefined if destructive modifications are performed
directly on the @param{string} during the @term{dynamic extent} of the call.

@subsubheading See Also:

@ref{make-string-output-stream},
@ref{vector-push-extend},
@ref{Traversal Rules and Side Effects, Section 3.6 (Traversal Rules and Side Effects)}



@node *debug-io*; *error-output*; *query-io*; *standard-input*; *standard-out+
@heading *debug-io*, *error-output*, *query-io*, *standard-input*, *standard-output*, *trace-output* (Variable)
@syindex *debug-io*
@cindex *debug-io*
@syindex *error-output*
@cindex *error-output*
@syindex *query-io*
@cindex *query-io*
@syindex *standard-input*
@cindex *standard-input*
@syindex *standard-output*
@cindex *standard-output*
@syindex *trace-output*
@cindex *trace-output*
@anchor{*debug-io*}
@anchor{*error-output*}
@anchor{*query-io*}
@anchor{*standard-input*}
@anchor{*standard-output*}
@anchor{*trace-output*}


@subsubheading Value Type:

For @code{*standard-input*}:
an @term{input} @term{stream}

For @code{*error-output*}, @code{*standard-output*}, and @code{*trace-output*}:
an @term{output} @term{stream}.

For @code{*debug-io*}, @code{*query-io*}:
a @term{bidirectional} @term{stream}.

@subsubheading Initial Value:

@term{implementation-dependent}, but
it must be an @term{open} @term{stream} 
that is not a  @term{generalized synonym stream}
to an @term{I/O customization variables}
but that might be a @term{generalized synonym stream} to 
the value of some @term{I/O customization variable}.
The initial value might also be a @term{generalized synonym stream} 
to either the @term{symbol} @code{*terminal-io*} or to the @term{stream} 
that is its @term{value}.

@subsubheading Description:

These @term{variables} are collectively called the
@term{standardized} @term{I/O customization variables}.
They can be @term{bound} or @term{assigned} in order to 
change the default destinations for input and/or output 
used by various @term{standardized} @term{operators} and facilities.

@Thevalueof{*debug-io*}, called @term{debug I/O},
is a @term{stream} to be used for interactive debugging purposes.  

@Thevalueof{*error-output*}, called @term{error output},
is a @term{stream} to which warnings and non-interactive error messages should be sent.

@Thevalueof{*query-io*}, called @term{query I/O},
is a @term{bidirectional} @term{stream} 
to be used when asking questions of the user.  The question should be output 
to this @term{stream}, and the answer read from it.

@Thevalueof{*standard-input*}, called @term{standard input},
is a @term{stream} that is used by many @term{operators} 
as a default source of input when no specific @term{input} @term{stream}
is explicitly supplied.

@Thevalueof{*standard-output*}, called @term{standard output},
is a @term{stream} that is used by many @term{operators} 
as a default destination for output when no specific @term{output} @term{stream}
is explicitly supplied.

@Thevalueof{*trace-output*}, called @term{trace output},
is the @term{stream} on which traced functions (see @code{trace})
and @themacro{time} print their output.

@subsubheading Examples:

@lisp
 (with-output-to-string (*error-output*)
   (warn "this string is sent to *error-output*"))
 @EV{} "Warning: this string is sent to *error-output*
" ;The exact format of this string is @term{implementation-dependent}.
@medbreak{}
 (with-input-from-string (*standard-input* "1001")
    (+ 990 (read))) @EV{} 1991                       
@medbreak{}
 (progn (setq out (with-output-to-string (*standard-output*)
                     (print "print and format t send things to")
                     (format t "*standard-output* now going to a string")))
        :done)
@EV{} :DONE
 out
@EV{} "
@bsl{}"print and format t send things to@bsl{}" *standard-output* now going to a string"
@medbreak{}
 (defun fact (n) (if (< n 2) 1 (* n (fact (- n 1)))))
@EV{} FACT
 (trace fact)
@EV{} (FACT)
;; Of course, the format of traced output is implementation-dependent.
 (with-output-to-string (*trace-output*)
   (fact 3)) 
@EV{} "
1 Enter FACT 3
| 2 Enter FACT 2
|   3 Enter FACT 1
|   3 Exit FACT 1
| 2 Exit FACT 2
1 Exit FACT 6"
@end lisp


@subsubheading See Also:

@ref{*terminal-io*},
@ref{synonym-stream},
@ref{time (Macro)},
@ref{trace},
@ref{Conditions, Chapter 9 (Conditions)},
@ref{Reader, Chapter 23 (Reader)},
@ref{Printer, Chapter 22 (Printer)}

@subsubheading Notes:

The intent of the constraints on the initial @term{value} 
of the @term{I/O customization variables} is to ensure that it
is always safe to @term{bind} or @term{assign} such a @term{variable} to 
the @term{value} of another @term{I/O customization variable}, without
unduly restricting @term{implementation} flexibility.

It is common for an @term{implementation} to make
the initial @term{values} of @code{*debug-io*} and @code{*query-io*} 
be the @term{same} @term{stream}, 
and to make
the initial @term{values} of @code{*error-output*} and @code{*standard-output*} 
be the @term{same} @term{stream}.

The functions @code{y-or-n-p} and @code{yes-or-no-p} use @term{query I/O}
for their input and output.

In the normal @term{Lisp read-eval-print loop},
input is read from @term{standard input}.
Many input functions, including @code{read} and @code{read-char},
take a @term{stream} argument that defaults to @term{standard input}.

In the normal @term{Lisp read-eval-print loop}, output is sent to @term{standard output}.
Many output functions, including @code{print} and @code{write-char}, 
take a @term{stream} argument that defaults to @term{standard output}.

A program that wants, for example, to divert output to a file should do so by 
@term{binding} @code{*standard-output*}; that way error messages sent to
@code{*error-output*} can still get to the user by going through
@code{*terminal-io*} (if @code{*error-output*} is bound to @code{*terminal-io*}),
which is usually what is desired.


@node *terminal-io*
@heading *terminal-io* (Variable)
@syindex *terminal-io*
@cindex *terminal-io*


@subsubheading Value Type:

a @term{bidirectional} @term{stream}.

@subsubheading Initial Value:

@term{implementation-dependent}, but
it must be an @term{open} @term{stream} 
that is not a  @term{generalized synonym stream}
to an @term{I/O customization variables}
but that might be a @term{generalized synonym stream} to 
the @term{value} of some @term{I/O customization variable}.

@subsubheading Description:

@Thevalueof{*terminal-io*}, called  @term{terminal I/O}, is ordinarily 
a @term{bidirectional} @term{stream} that connects to the user's console.
Typically, writing to this @term{stream} 
would cause the output to appear
on a display screen, for example, and reading from the @term{stream} would
accept input from a keyboard.  It is intended
that standard input functions such as @code{read} and @code{read-char},
when used with this @term{stream}, cause echoing of the input
into the output side of the @term{stream}. The means by which this is
accomplished are @term{implementation-dependent}.

The effect of changing @thevalueof{*terminal-io*},
either by @term{binding} or @term{assignment},
is @term{implementation-defined}.

@subsubheading Examples:

@lisp
 (progn (prin1 'foo) (prin1 'bar *terminal-io*))
@OUT{} FOOBAR
@EV{} BAR
 (with-output-to-string (*standard-output*)
   (prin1 'foo) 
   (prin1 'bar *terminal-io*))
@OUT{} BAR
@EV{} "FOO"
@end lisp


@subsubheading See Also:

@ref{*debug-io*},
@ref{*error-output*},
@ref{*query-io*},
@ref{*standard-input*},
@ref{*standard-output*},
@ref{*trace-output*}


@node stream-error
@heading stream-error (Condition Type)
@syindex stream-error
@cindex stream-error


@subsubheading Class Precedence List:
@code{stream-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{stream-error}
consists of error conditions that are related to receiving input from
or sending output to a @term{stream}.  
The ``offending stream'' is initialized by
@theinitkeyarg{stream} to @code{make-condition}, 
and is @term{accessed} by @thefunction{stream-error-stream}.

@subsubheading See Also:

@ref{stream-error-stream}


@node stream-error-stream
@heading stream-error-stream (Function)
@syindex stream-error-stream
@cindex stream-error-stream


@subsubheading Syntax:

@DefunWithValues{stream-error-stream, condition, stream}

@subsubheading Arguments and Values:

@param{condition}---a @term{condition} @oftype{stream-error}.

@param{stream}---a @term{stream}.

@subsubheading Description:

Returns the offending @term{stream} of a @term{condition} @oftype{stream-error}.

@subsubheading Examples:
@lisp
 (with-input-from-string (s "(FOO")
   (handler-case (read s)
     (end-of-file (c)
       (format nil "~&End of file on ~S." (stream-error-stream c)))))
"End of file on #<String Stream>."
@end lisp


@subsubheading See Also:

@ref{stream-error},
@ref{Conditions, Chapter 9 (Conditions)}


@node end-of-file
@heading end-of-file (Condition Type)
@syindex end-of-file
@cindex end-of-file


@subsubheading Class Precedence List:
@code{end-of-file},
@code{stream-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{end-of-file} consists of
error conditions related to read operations that are done on
@term{streams} that have no more data.

@subsubheading See Also:

@ref{stream-error-stream}




@node Printer
@chapter Printer
@menu
* The Lisp Printer::
* The Lisp Pretty Printer::
* Formatted Output::

Dictionary

* copy-pprint-dispatch::
* formatter::
* pprint-dispatch::
* pprint-exit-if-list-exhausted::
* pprint-fill; pprint-linear; pprint-tabular::
* pprint-indent::
* pprint-logical-block::
* pprint-newline::
* pprint-pop::
* pprint-tab::
* print-object::
* print-unreadable-object::
* set-pprint-dispatch::
* write; prin1; print; pprint; princ::
* write-to-string; prin1-to-string; princ-to-string::
* *print-array*::
* *print-base*; *print-radix*::
* *print-case*::
* *print-circle*::
* *print-escape*::
* *print-gensym*::
* *print-level*; *print-length*::
* *print-lines*::
* *print-miser-width*::
* *print-pprint-dispatch*::
* *print-pretty*::
* *print-readably*::
* *print-right-margin*::
* print-not-readable::
* print-not-readable-object::
* format::
@end menu

@node The Lisp Printer
@section The Lisp Printer

@menu
* Overview of The Lisp Printer::
* Printer Dispatching::
* Default Print-Object Methods::
* Examples of Printer Behavior::
@end menu
@node Overview of The Lisp Printer
@subsection Overview of The Lisp Printer

@clisp{}@spc{}provides a representation of most @term{objects} in the form 
of printed text called the printed representation.
Functions such as @code{print} take an @term{object} 
and send the characters of its printed representation to a @term{stream}. 
The collection of routines that does this is known as the (@clisp{}) printer.  

Reading a printed representation 
typically
produces an @term{object} that is @code{equal} to the
originally printed @term{object}.

@subsubsection Multiple Possible Textual Representations

Most @term{objects} have more than one possible textual representation.
For example, the positive @term{integer} with a magnitude of twenty-seven
can be textually expressed in any of these ways:

@lisp
 27    27.    #o33    #x1B    #b11011    #.(* 3 3 3)    81/3
@end lisp


A list containing the two symbols @f{A} and @f{B} can also be textually
expressed in a variety of ways:

@lisp
 (A B)    (a b)    (  a  b )    (@bsl{}A |B|) 
(|@bsl{}A|
  B
)
@end lisp


In general,
from the point of view of the @term{Lisp reader},
wherever @term{whitespace} is permissible in a textual representation,
any number of @term{spaces} and @term{newlines} can appear in @term{standard syntax}.

When a function such as @code{print} produces a printed representation,
it must choose 
from among many possible textual representations.
In most cases, it chooses a 
program readable representation,
but in certain cases it might use a more compact notation that is not 
program-readable.

A number of option variables, called
@cindex printer control variable
@dfn{printer control variables},
are provided to permit control of individual aspects of the 
printed representation of @term{objects}.
@Thenextfigure{}@spc{}shows the @term{standardized} @term{printer control variables};
there might also be @term{implementation-defined} @term{printer control variables}.



@float Figure,StdPrinterControlVars
@cartouche
@multitable{*print-circle*}{*print-miser-width*}{*print-pprint-dispatch*}

@item *print-array* @tab *print-gensym* @tab *print-pprint-dispatch*
@item *print-base* @tab *print-length* @tab *print-pretty*
@item *print-case* @tab *print-level* @tab *print-radix*
@item *print-circle* @tab *print-lines* @tab *print-readably*
@item *print-escape* @tab *print-miser-width* @tab *print-right-margin*
@end multitable
@end cartouche
@caption{Standardized Printer Control Variables}
@end float


In addition to the @term{printer control variables}, 
the following additional @term{defined names} 
relate to or affect the behavior of the @term{Lisp printer}:


@float Figure,fig22.2
@cartouche
@multitable{*read-default-float-format*}{*read-eval*}{readtable-case}

@item *package* @tab *read-eval* @tab readtable-case
@item *read-default-float-format* @tab *readtable* @tab 
@end multitable
@end cartouche
@caption{Additional Influences on the Lisp printer.}
@end float


@unnumberedsubsubsec 22.1.1.1.1 Printer Escaping


@Thevariable{*print-escape*} controls whether the @term{Lisp printer}
tries to produce notations such as escape characters and package prefixes.

@Thevariable{*print-readably*} can be used to override
many of the individual aspects controlled by the other 
@term{printer control variables} when program-readable output
is especially important.

One of the many effects of making @thevalueof{*print-readably*} be @term{true}
is that the @term{Lisp printer} behaves as if @code{*print-escape*} were also @term{true}.
For notational convenience, we say that 
if the value of either @code{*print-readably*} or @code{*print-escape*} is @term{true}, 
then @newterm{printer escaping} is ``enabled'';
and we say that
if the values of both @code{*print-readably*} and @code{*print-escape*} are @term{false}, 
then @term{printer escaping} is ``disabled''.




@node Printer Dispatching
@subsection Printer Dispatching


The @term{Lisp printer} makes its determination of how to print an
@term{object} as follows:

If @thevalueof{*print-pretty*} is @term{true}, 
printing is controlled by the @term{current pprint dispatch table};
see @ref{PPrintDispatchTables, Section 22.2.1.4 (Pretty Print Dispatch Tables)}.

Otherwise (if @thevalueof{*print-pretty*} is @term{false}),
the object's @code{print-object} method is used;
see @ref{Default Print-Object Methods, Section 22.1.3 (Default Print-Object Methods)}.


@node Default Print-Object Methods
@subsection Default Print-Object Methods

This section describes the default behavior of 
@code{print-object} methods for the @term{standardized} @term{types}.

@subsubsection Printing Numbers

@unnumberedsubsubsec 22.1.3.1.1 Printing Integers

@anchor{PrintingIntegers}

@term{Integers} are printed in the radix specified by the @term{current output base}
in positional notation, most significant digit first.
If appropriate, a radix specifier can be printed; see @code{*print-radix*}.
If an @term{integer} is negative, a minus sign is printed and then the
absolute value of the @term{integer} is printed.
The @term{integer} zero is represented
by the single digit @f{0} and never has a sign.
A decimal point might be printed, 
depending on @thevalueof{*print-radix*}.

For related information about the syntax of an @term{integer},
see @ref{SyntaxOfIntegers, Section 2.3.2.1.1 (Syntax of an Integer)}.

@unnumberedsubsubsec 22.1.3.1.2 Printing Ratios

@anchor{PrintingRatios}
@cindex ratio

@term{Ratios} are printed as follows:
the absolute value of the numerator is printed, as for an @term{integer};
then a @f{/}; then the denominator.  The numerator and denominator are
both printed in the radix specified by the @term{current output base}; 
they are obtained as if by
@code{numerator} and @code{denominator}, and so @term{ratios}
are printed in reduced form (lowest terms).
If appropriate, a radix specifier can be printed; see 
@code{*print-radix*}.
If the ratio is negative, a minus sign is printed before the numerator.

For related information about the syntax of a @term{ratio},
see @ref{SyntaxOfRatios, Section 2.3.2.1.2 (Syntax of a Ratio)}.

@unnumberedsubsubsec 22.1.3.1.3 Printing Floats

@anchor{PrintingFloats}
@cindex float

If the magnitude of the @term{float} is either zero or between @mat{10^-3} (inclusive)
and @mat{10^7} (exclusive), it is printed as the integer part of the number,
then a decimal point,
followed by the fractional part of the number;
there is always at least one
digit on each side of the decimal point.    
If the sign of the number
(as determined by @code{float-sign})
is negative, then a minus sign is printed before the number.
If the format of the number
does not match that specified by
@code{*read-default-float-format*}, then the @term{exponent marker} for
that format and the digit @f{0} are also printed.
For example, the base of the natural logarithms as a @term{short float}
might be printed as @f{2.71828S0}.

For non-zero magnitudes outside of the range @mat{10^-3} to @mat{10^7},
a @term{float} is printed in computerized scientific notation.
The representation of the number is scaled to be between
1 (inclusive) and 10 (exclusive) and then printed, with one digit
before the decimal point and at least one digit after the decimal point.
Next the @term{exponent marker} for the format is printed,
except that
if the format of the number matches that specified by 
@code{*read-default-float-format*}, then the @term{exponent marker} @f{E}
is used.
Finally, the power of ten by which the fraction must be multiplied
to equal the original number is printed as a decimal integer.
For example, Avogadro's number as a @term{short float} 
is printed as @f{6.02S23}.

For related information about the syntax of a @term{float},
see @ref{SyntaxOfFloats, Section 2.3.2.2 (Syntax of a Float)}.

@unnumberedsubsubsec 22.1.3.1.4 Printing Complexes

@anchor{PrintingComplexes}
@cindex complex

A @term{complex} is printed as @f{#C}, an open parenthesis,
the printed representation of its real part, a space,
the printed representation of its imaginary part, and finally
a close parenthesis.

For related information about the syntax of a @term{complex},
see @ref{SyntaxOfComplexes, Section 2.3.2.3 (Syntax of a Complex)}@spc{}and @ref{SharpsignC, Section 2.4.8.11 (Sharpsign C)}.

@unnumberedsubsubsec 22.1.3.1.5 Note about Printing Numbers


The printed representation of a number must not contain @term{escape} @term{characters};
see @ref{EscCharsAndPotentialNums, Section 2.3.1.1.1 (Escape Characters and Potential Numbers)}.

@subsubsection Printing Characters
@anchor{PrintingCharacters}

When @term{printer escaping} is disabled,
a @term{character} prints as itself;
it is sent directly to the output @term{stream}.
When @term{printer escaping} is enabled,
then @f{#@bsl{}} syntax is used.

When the printer types out the name of a @term{character},
it uses the same table as the @f{#@bsl{}} @term{reader macro} would use;
therefore any @term{character} name that is typed out
is acceptable as input (in that @term{implementation}).
If a @term{non-graphic} @term{character} has a @term{standardized} @term{name}@sub5{},
that @term{name} is preferred over non-standard @term{names}
for printing in @f{#@bsl{}} notation.
For the @term{graphic} @term{standard characters},
the @term{character} itself is always used
for printing in @f{#@bsl{}} notation---even if 
the @term{character} also has a @term{name}@sub5{}.

For details about the @f{#@bsl{}} @term{reader macro}, see @ref{SharpsignBackslash, Section 2.4.8.1 (Sharpsign Backslash)}.

@subsubsection Printing Symbols
@anchor{PrintingSymbols}

When @term{printer escaping} is disabled,
only the characters of the @term{symbol}'s @term{name} are output 
(but the case in which to print characters in the @term{name} is
controlled by @code{*print-case*};
see @ref{ReadtableCasePrintEffect, Section 22.1.3.3.2 (Effect of Readtable Case on the Lisp Printer)}).

The remainder of @thissection{}@spc{}applies only 
when @term{printer escaping} is enabled.

When printing a @term{symbol}, the printer inserts enough 
@term{single escape} and/or @term{multiple escape}
characters (@term{backslashes} and/or @term{vertical-bars}) so that if
@code{read} were called with the same @code{*readtable*} and
with @code{*read-base*} bound to the @term{current output base}, it
would return the same @term{symbol} (if it is not 
@term{apparently uninterned}) or an @term{uninterned} @term{symbol}
with the same @term{print name} (otherwise).

For example, if @thevalueof{*print-base*} were @f{16} 
when printing the symbol @f{face}, it would have to be printed as
@f{@bsl{}FACE} or @f{@bsl{}Face} or @f{|FACE|}, 
because the token @f{face} would be read as a hexadecimal
number (decimal value 64206) if @thevalueof{*read-base*} were @f{16}.

For additional restrictions concerning characters with  nonstandard
@term{syntax types} in the @term{current readtable}, see the @term{variable} @ref{*print-readably*} 

For information about how the @term{Lisp reader} parses @term{symbols},
see @ref{Symbols as Tokens, Section 2.3.4 (Symbols as Tokens)}@spc{}and @ref{SharpsignColon, Section 2.4.8.5 (Sharpsign Colon)}.

@nil{}@spc{}might be printed as @f{()} 
when @code{*print-pretty*} is @term{true}
and @term{printer escaping} is enabled.

@unnumberedsubsubsec 22.1.3.3.1 Package Prefixes for Symbols


@term{Package prefixes} are printed if necessary.
The rules for @term{package prefixes} are as follows.
When the @term{symbol} is printed, if it is in the @code{KEYWORD} @term{package}, 
then it is printed with a preceding @term{colon}; otherwise, if
it is @term{accessible} in the @term{current package}, it is printed without any
@term{package prefix}; otherwise, it is printed with a @term{package prefix}.

A @term{symbol} that is @term{apparently uninterned} is printed
preceded by ``@f{#:}'' 
if @code{*print-gensym*} is @term{true} and @term{printer escaping} is enabled;
if @code{*print-gensym*} is @term{false} or @term{printer escaping} is disabled,
then the @term{symbol} is printed without a prefix,
as if it were in the @term{current package}.

Because the @f{#:} syntax does not intern the
following symbol, it is necessary to use circular-list syntax
if @code{*print-circle*} is @term{true} and
the same uninterned symbol appears several times in an expression
to be printed.  For example, the result of

@lisp
 (let ((x (make-symbol "FOO"))) (list x x))
@end lisp

would be printed as @f{(#:foo #:foo)} if @code{*print-circle*}
were @term{false}, but as @f{(#1=#:foo #1#)} if @code{*print-circle*}
were @term{true}.

A summary of the preceding package prefix rules follows:


@table @asis
@item @id{@f{foo:bar}}


@f{foo:bar} is printed when @term{symbol} @f{bar} 
is external in its @term{home package} @f{foo} 
and is not @term{accessible} in the @term{current package}.

@item @id{@f{foo::bar}}


@f{foo::bar} is printed when @f{bar} is internal in its @term{home package}
@f{foo} and is not @term{accessible} in the @term{current package}.

@item @id{@f{:bar}}


@f{:bar} is printed when the home package of @f{bar} is the @code{KEYWORD} @term{package}.

@item @id{@tt{#:bar}}
  

@f{#:bar} is printed when @f{bar} is @term{apparently uninterned},
even in the pathological case that @f{bar} 
has no @term{home package} but is nevertheless somehow @term{accessible} 
in the @term{current package}.
@end table



@unnumberedsubsubsec 22.1.3.3.2 Effect of Readtable Case on the Lisp Printer

@anchor{ReadtableCasePrintEffect}

When 
@term{printer escaping} is disabled,
or the characters under consideration are not already 
quoted specifically by @term{single escape} or @term{multiple escape}
syntax,
the @term{readtable case} of the @term{current readtable} 
affects the way the @term{Lisp printer} writes @term{symbols}
in the following ways:


@table @asis
@item @id{@kwd{upcase}}


When the @term{readtable case} is @kwd{upcase},
@term{uppercase} @term{characters}
are printed in the case specified by @code{*print-case*}, and
@term{lowercase} @term{characters} are printed in their own case.

@item @id{@kwd{downcase}}


When the @term{readtable case} is @kwd{downcase},
@term{uppercase} @term{characters} are printed in their own case, and
@term{lowercase} @term{characters}
are printed in the case specified by @code{*print-case*}.

@item @id{@kwd{preserve}}


When the @term{readtable case} is @kwd{preserve},
all @term{alphabetic} @term{characters} are printed in their own case.

@item @id{@kwd{invert}}


When the @term{readtable case} is @kwd{invert},
the case of all @term{alphabetic} @term{characters} 
in single case symbol names is inverted.
Mixed-case symbol names are printed as is.
@end table


The rules for escaping @term{alphabetic} @term{characters} in symbol names are affected by
the @code{readtable-case} 
if @term{printer escaping} is enabled.
@term{Alphabetic} @term{characters} are escaped as follows:                

@table @asis
@item @id{@kwd{upcase}}


When the @term{readtable case} is @kwd{upcase},
all @term{lowercase} @term{characters} must be escaped.

@item @id{@kwd{downcase}}


When the @term{readtable case} is @kwd{downcase},
all @term{uppercase} @term{characters} must be escaped.

@item @id{@kwd{preserve}}


When the @term{readtable case} is @kwd{preserve}, 
no @term{alphabetic} @term{characters} need be escaped.

@item @id{@kwd{invert}}


When the @term{readtable case} is @kwd{invert},
no @term{alphabetic} @term{characters} need be escaped.
@end table


@unnumberedsubsubsec 22.1.3.3.2.1 Examples of Effect of Readtable Case on the Lisp Printer

@anchor{ReadtableCasePrintExamples}

@lisp
 (defun test-readtable-case-printing ()
   (let ((*readtable* (copy-readtable nil))
         (*print-case* *print-case*))
     (format t "READTABLE-CASE *PRINT-CASE*  Symbol-name  Output~
              ~%--------------------------------------------------~
              ~%")
     (dolist (readtable-case '(:upcase :downcase :preserve :invert))
       (setf (readtable-case *readtable*) readtable-case)
       (dolist (print-case '(:upcase :downcase :capitalize))
         (dolist (symbol '(|ZEBRA| |Zebra| |zebra|))
           (setq *print-case* print-case)
           (format t "~&:~A~15T:~A~29T~A~42T~A"
                   (string-upcase readtable-case)
                   (string-upcase print-case)
                   (symbol-name symbol)
                   (prin1-to-string symbol)))))))
@end lisp

The output from @f{(test-readtable-case-printing)} should be as follows:

@lisp
    READTABLE-CASE *PRINT-CASE*  Symbol-name  Output
    --------------------------------------------------
    :UPCASE        :UPCASE       ZEBRA        ZEBRA
    :UPCASE        :UPCASE       Zebra        |Zebra|
    :UPCASE        :UPCASE       zebra        |zebra|
    :UPCASE        :DOWNCASE     ZEBRA        zebra
    :UPCASE        :DOWNCASE     Zebra        |Zebra|
    :UPCASE        :DOWNCASE     zebra        |zebra|
    :UPCASE        :CAPITALIZE   ZEBRA        Zebra
    :UPCASE        :CAPITALIZE   Zebra        |Zebra|
    :UPCASE        :CAPITALIZE   zebra        |zebra|
    :DOWNCASE      :UPCASE       ZEBRA        |ZEBRA|
    :DOWNCASE      :UPCASE       Zebra        |Zebra|
    :DOWNCASE      :UPCASE       zebra        ZEBRA
    :DOWNCASE      :DOWNCASE     ZEBRA        |ZEBRA|
    :DOWNCASE      :DOWNCASE     Zebra        |Zebra|
    :DOWNCASE      :DOWNCASE     zebra        zebra
    :DOWNCASE      :CAPITALIZE   ZEBRA        |ZEBRA|
    :DOWNCASE      :CAPITALIZE   Zebra        |Zebra|
    :DOWNCASE      :CAPITALIZE   zebra        Zebra
    :PRESERVE      :UPCASE       ZEBRA        ZEBRA
    :PRESERVE      :UPCASE       Zebra        Zebra
    :PRESERVE      :UPCASE       zebra        zebra
    :PRESERVE      :DOWNCASE     ZEBRA        ZEBRA
    :PRESERVE      :DOWNCASE     Zebra        Zebra
    :PRESERVE      :DOWNCASE     zebra        zebra
    :PRESERVE      :CAPITALIZE   ZEBRA        ZEBRA
    :PRESERVE      :CAPITALIZE   Zebra        Zebra
    :PRESERVE      :CAPITALIZE   zebra        zebra
    :INVERT        :UPCASE       ZEBRA        zebra
    :INVERT        :UPCASE       Zebra        Zebra
    :INVERT        :UPCASE       zebra        ZEBRA
    :INVERT        :DOWNCASE     ZEBRA        zebra
    :INVERT        :DOWNCASE     Zebra        Zebra
    :INVERT        :DOWNCASE     zebra        ZEBRA
    :INVERT        :CAPITALIZE   ZEBRA        zebra
    :INVERT        :CAPITALIZE   Zebra        Zebra
    :INVERT        :CAPITALIZE   zebra        ZEBRA
@end lisp




@subsubsection Printing Strings
@anchor{PrintingStrings}

The characters of the @term{string} are output in order.
If @term{printer escaping} is enabled,
a @term{double-quote} is output before and after, and all
@term{double-quotes} and @term{single escapes} are preceded by @term{backslash}.
The printing of @term{strings} is not affected by @code{*print-array*}.
Only the @term{active} @term{elements} of the @term{string} are printed.

For information on how the @term{Lisp reader} parses @term{strings},
see @ref{Double-Quote, Section 2.4.5 (Double-Quote)}.

@subsubsection Printing Lists and Conses
@anchor{PrintingListsAndConses}

Wherever possible, list notation is preferred over dot notation.  
Therefore the following algorithm is used to print a @term{cons} @mat{x}:

@goodbreak{}

@enumerate 1
@item A @term{left-parenthesis} is printed.

@medbreak{}
@item The @term{car} of @mat{x} is printed. 

@medbreak{}
@item If the @term{cdr} of @mat{x} is itself a @term{cons},
it is made to be the current @term{cons} 
(@ie{} @mat{x} becomes that @term{cons}), 
a @term{space}
is printed,
and step 2 is re-entered.

@medbreak{}
@item If the @term{cdr} of @mat{x} is not @term{null}, 
a @term{space},
a @term{dot},
a @term{space},
and the @term{cdr} of @mat{x} are printed.

@medbreak{}
@item A @term{right-parenthesis} is printed.
@end enumerate


Actually, the above algorithm is only used when @code{*print-pretty*}
is @term{false}.  When @code{*print-pretty*} is @term{true} (or 
when @code{pprint} is used),
additional @term{whitespace}@sub1{} 
may replace the use of a single @term{space},
and a more elaborate algorithm with similar goals but more presentational 
flexibility is used; see @ref{Printer Dispatching, Section 22.1.2 (Printer Dispatching)}.

Although the two expressions below are equivalent,
and the reader accepts
either one and 
produces
the same @term{cons}, the printer
always prints such a @term{cons} in the second form.

@lisp
 (a . (b . ((c . (d . nil)) . (e . nil))))
 (a b (c d) e)
@end lisp

The printing of @term{conses} is affected by @code{*print-level*},
@code{*print-length*}, and @code{*print-circle*}.

@goodbreak{}         
Following are examples of printed representations of @term{lists}:

@lisp
 (a . b)     ;A dotted pair of a and b
 (a.b)       ;A list of one element, the symbol named a.b
 (a. b)      ;A list of two elements a. and b
 (a .b)      ;A list of two elements a and .b
 (a b . c)   ;A dotted list of a and b with c at the end; two conses
 .iot        ;The symbol whose name is .iot
 (. b)       ;Invalid -- an error is signaled if an attempt is made to read 
             ;this syntax.
 (a .)       ;Invalid -- an error is signaled.
 (a .. b)    ;Invalid -- an error is signaled.
 (a . . b)   ;Invalid -- an error is signaled.
 (a b c ...) ;Invalid -- an error is signaled.
 (a @bsl{}. b)    ;A list of three elements a, ., and b
 (a |.| b)   ;A list of three elements a, ., and b
 (a @bsl{}... b)  ;A list of three elements a, ..., and b
 (a |...| b) ;A list of three elements a, ..., and b
@end lisp


For information on how the @term{Lisp reader} parses @term{lists} and @term{conses},
see @ref{Left-Parenthesis, Section 2.4.1 (Left-Parenthesis)}. 

@subsubsection Printing Bit Vectors
@anchor{PrintingBitVectors}

A @term{bit vector} is printed as @f{#*} followed by the bits of the @term{bit vector}
in order.  If @code{*print-array*} is @term{false}, then the @term{bit vector} is
printed in a format (using @f{#<}) that is concise but not readable.
Only the @term{active} @term{elements} of the @term{bit vector} are printed.

@reviewer{Barrett: Need to provide for @f{#5*0} as an alternate 
notation for @f{#*00000}.}

For information on @term{Lisp reader} parsing of @term{bit vectors},
see @ref{SharpsignStar, Section 2.4.8.4 (Sharpsign Asterisk)}.

@subsubsection Printing Other Vectors
@anchor{PrintingOtherVectors}

If @code{*print-array*} is @term{true} 
and @code{*print-readably*} is @term{false},
any
@term{vector} 
other than a @term{string} or @term{bit vector} is printed using
general-vector syntax; this means that information
about specialized vector representations does not appear.
The printed representation of a zero-length @term{vector} is @f{#()}.
The printed representation of a non-zero-length @term{vector} begins with @f{#(}.
Following that, the first element of the @term{vector} is printed.  
If there are any other elements, they are printed in turn, with 
each such additional element preceded by
a @term{space} if @code{*print-pretty*} is @term{false},
or @term{whitespace}@sub1{} if @code{*print-pretty*} is @term{true}.
A @term{right-parenthesis} after the last element
terminates the printed representation of the @term{vector}. 
The printing of @term{vectors} 
is affected by @code{*print-level*} and @code{*print-length*}.
If the @term{vector} has a @term{fill pointer}, 
then only those elements below
the @term{fill pointer} are printed.

If both @code{*print-array*} and @code{*print-readably*} are @term{false},
the @term{vector} is not printed as described above,
but in a format (using @f{#<}) that is concise but not readable.

If @code{*print-readably*} is @term{true},
the @term{vector} prints in an @term{implementation-defined} manner;
see the @term{variable} @ref{*print-readably*}.

For information on how the @term{Lisp reader} parses these ``other @term{vectors},''
see @ref{SharpsignLeftParen, Section 2.4.8.3 (Sharpsign Left-Parenthesis)}.

@subsubsection Printing Other Arrays
@anchor{PrintingOtherArrays}

If  @code{*print-array*} is @term{true} 
and @code{*print-readably*} is @term{false},
any
@term{array} other than a @term{vector} is printed
using @f{#}@f{n}@f{A} format.
Let @f{n} be the @term{rank} of the @term{array}.
Then @f{#} is printed, then @f{n} as a decimal integer,
then @f{A}, then @f{n} open parentheses.  
Next the @term{elements} are scanned in row-major order,
using @code{write} on each @term{element}, 
and separating @term{elements} from each other with @term{whitespace}@sub1{}.
The array's dimensions are numbered 0 to @f{n}-1 from left to right,
and are enumerated with the rightmost index changing fastest.
Every time the index for dimension @f{j} is incremented,
the following actions are taken:


@itemize @bullet{}
@item
If @f{j} < @f{n}-1, then a close parenthesis is printed.

@item
If incrementing the index for dimension @f{j} caused it to equal
dimension @f{j}, that index is reset to zero and the
index for dimension @f{j}-1 is incremented (thereby performing these three steps recursively),
unless @f{j}=0, in which case the entire algorithm is terminated.
If incrementing the index for dimension @f{j} did not cause it to
equal dimension @f{j}, then a space is printed.

@item
If @f{j} < @f{n}-1, then an open parenthesis is printed.
@end itemize


This causes the contents to be printed in a format suitable for
@kwd{initial-contents} to @code{make-array}.
The lists effectively printed by this procedure are subject to
truncation by @code{*print-level*} and @code{*print-length*}.

If the @term{array} 
is of a specialized @term{type}, containing bits or characters,
then the innermost lists generated by the algorithm given above can instead
be printed using bit-vector or string syntax, provided that these innermost
lists would not be subject to truncation by @code{*print-length*}.  

If both @code{*print-array*} and @code{*print-readably*} are @term{false},
then the @term{array} is printed
in a format (using @f{#<}) that is concise but not readable.

If @code{*print-readably*} is @term{true},
the @term{array} prints in an @term{implementation-defined} manner; 
see the @term{variable} @ref{*print-readably*}.
In particular,
this may be important for arrays having some dimension @f{0}.

For information on how the @term{Lisp reader} parses these ``other @term{arrays},''
see @ref{SharpsignA, Section 2.4.8.12 (Sharpsign A)}.

@subsubsection Examples of Printing Arrays

@lisp
 (let ((a (make-array '(3 3)))
       (*print-pretty* t)
       (*print-array* t))
   (dotimes (i 3) (dotimes (j 3) (setf (aref a i j) (format nil "<~D,~D>" i j))))
   (print a)
   (print (make-array 9 :displaced-to a)))
@OUT{} #2A(("<0,0>" "<0,1>" "<0,2>") 
@OUT{}     ("<1,0>" "<1,1>" "<1,2>") 
@OUT{}     ("<2,0>" "<2,1>" "<2,2>")) 
@OUT{} #("<0,0>" "<0,1>" "<0,2>" "<1,0>" "<1,1>" "<1,2>" "<2,0>" "<2,1>" "<2,2>") 
@EV{} #<ARRAY 9 indirect 36363476>
@end lisp



@subsubsection Printing Random States
@anchor{PrintingRandomStates}

A specific syntax for printing @term{objects} @oftype{random-state} is
not specified. However, every @term{implementation}
must arrange to print a @term{random state} @term{object} in such a way that,
within the same implementation, @code{read}
can construct from the printed representation a copy of the 
@term{random state}
object as if the copy had been made by @code{make-random-state}.

If the type @term{random state} is effectively implemented 
by using the machinery for @code{defstruct},
the usual structure syntax can then be used for printing 
@term{random state}
objects; one might look something like

@lisp
 #S(RANDOM-STATE :DATA #(14 49 98436589 786345 8734658324 ... ))
@end lisp

where the components are @term{implementation-dependent}.

@subsubsection Printing Pathnames
@anchor{PrintingPathnames}


When @term{printer escaping} is enabled,
the syntax @f{#P"..."} is how a
@term{pathname} is printed by @code{write} and the other functions herein described.
The @f{"..."} is the namestring representation of the pathname.


When @term{printer escaping} is disabled,
@code{write} writes a @term{pathname} @i{P}
by writing @f{(namestring @i{P})} instead.

For information on how the @term{Lisp reader} parses @term{pathnames},
see @ref{SharpsignP, Section 2.4.8.14 (Sharpsign P)}.


@subsubsection Printing Structures
@anchor{PrintingStructures}

By default, a @term{structure} of type @mat{S} is printed using @f{#S} syntax.
This behavior can be customized by specifying a @kwd{print-function} 
or @kwd{print-object} option to the @code{defstruct} @term{form} that defines @mat{S},
or by writing a @code{print-object} @term{method} 
that is @term{specialized} for @term{objects} of type @mat{S}.

Different structures might print out in different ways;
the default notation for structures is:

@lisp
 #S(@param{structure-name} @star{@curly{@param{slot-key} @param{slot-value}}})
@end lisp

where @f{#S} indicates structure syntax,
@param{structure-name} is a @term{structure name},
each @param{slot-key} is an initialization argument @term{name}
for a @term{slot} in the @term{structure},
and each corresponding @param{slot-value} is a representation
of the @term{object} in that @term{slot}.

For information on how the @term{Lisp reader} parses @term{structures},
see @ref{SharpsignS, Section 2.4.8.13 (Sharpsign S)}.

@subsubsection Printing Other Objects
@anchor{PrintingOtherObjects}

Other @term{objects} are printed in an @term{implementation-dependent} manner.
It is not required that an @term{implementation} print those @term{objects}
@term{readably}.

For example, @term{hash tables}, 
@term{readtables},
@term{packages},
@term{streams},
and @term{functions}
might not print @term{readably}.

A common notation to use in this circumstance is @f{#<...>}.
Since @f{#<} is not readable by the @term{Lisp reader},
the precise format of the text which follows is not important,
but a common format to use is that provided by @themacro{print-unreadable-object}.

For information on how the @term{Lisp reader} treats this notation,
see @ref{SharpsignLeftAngle, Section 2.4.8.20 (Sharpsign Less-Than-Sign)}.
For information on how to notate @term{objects} that cannot be printed @term{readably},
see @ref{SharpsignDot, Section 2.4.8.6 (Sharpsign Dot)}.



@node Examples of Printer Behavior
@subsection Examples of Printer Behavior

@lisp
 (let ((*print-escape* t)) (fresh-line) (write #@bsl{}a))
@OUT{} #@bsl{}a
@EV{} #@bsl{}a
 (let ((*print-escape* nil) (*print-readably* nil))
   (fresh-line)
   (write #@bsl{}a))
@OUT{} a
@EV{} #@bsl{}a
 (progn (fresh-line) (prin1 #@bsl{}a))
@OUT{} #@bsl{}a
@EV{} #@bsl{}a
 (progn (fresh-line) (print #@bsl{}a))
@OUT{} 
@OUT{} #@bsl{}a
@EV{} #@bsl{}a
 (progn (fresh-line) (princ #@bsl{}a))
@OUT{} a
@EV{} #@bsl{}a
@medbreak{}
 (dolist (val '(t nil))
   (let ((*print-escape* val) (*print-readably* val))
     (print '#@bsl{}a) 
     (prin1 #@bsl{}a) (write-char #@bsl{}Space)
     (princ #@bsl{}a) (write-char #@bsl{}Space)
     (write #@bsl{}a)))
@OUT{} #@bsl{}a #@bsl{}a a #@bsl{}a
@OUT{} #@bsl{}a #@bsl{}a a a
@EV{} NIL
@medbreak{}
 (progn (fresh-line) (write '(let ((a 1) (b 2)) (+ a b))))
@OUT{} (LET ((A 1) (B 2)) (+ A B))
@EV{} (LET ((A 1) (B 2)) (+ A B))
@medbreak{}
 (progn (fresh-line) (pprint '(let ((a 1) (b 2)) (+ a b))))
@OUT{} (LET ((A 1)
@OUT{}       (B 2))               
@OUT{}   (+ A B))
@EV{} (LET ((A 1) (B 2)) (+ A B))
@medbreak{}
 (progn (fresh-line) 
        (write '(let ((a 1) (b 2)) (+ a b)) :pretty t))
@OUT{} (LET ((A 1)
@OUT{}       (B 2))
@OUT{}   (+ A B))                 
@EV{} (LET ((A 1) (B 2)) (+ A B))
@medbreak{}
 (with-output-to-string (s)  
    (write 'write :stream s)
    (prin1 'prin1 s))
@EV{} "WRITEPRIN1"
@end lisp




@node The Lisp Pretty Printer
@section The Lisp Pretty Printer


@menu
* Pretty Printer Concepts::
* Examples of using the Pretty Printer::
* Notes about the Pretty Printer's Background::
@end menu
@node Pretty Printer Concepts
@subsection Pretty Printer Concepts

The facilities provided by the @newterm{pretty printer} permit
@term{programs} to redefine the way in which @term{code} is displayed, 
and allow the full power of @term{pretty printing} to be applied 
to complex combinations of data structures.

Whether any given style of output is in fact ``pretty'' is inherently a
somewhat subjective issue.  However, since the effect of the 
@term{pretty printer} can be customized by @term{conforming programs},
the necessary flexibility is provided for individual @term{programs}
to achieve an arbitrary degree of aesthetic control.

By providing direct access to the mechanisms within the pretty printer
that make dynamic decisions about layout, the macros and functions
@code{pprint-logical-block}, @code{pprint-newline}, and
@code{pprint-indent} make it possible to specify pretty printing
layout rules as a part of any function that produces output.  They also
make it very easy for the detection of circularity and sharing, and
abbreviation based on length and nesting depth to be supported by the
function.

The @term{pretty printer} is driven entirely by dispatch based on
@thevalueof{*print-pprint-dispatch*}.
@Thefunction{set-pprint-dispatch} makes it possible
for @term{conforming programs} to associate new pretty printing 
functions with a @term{type}.

@subsubsection Dynamic Control of the Arrangement of Output
@anchor{DynamicControlofOutput}

The actions of the @term{pretty printer} when a piece of output is too
large to fit in the space available can be precisely controlled.
Three concepts underlie 
the way these operations work---@newterm{logical blocks},
@newterm{conditional newlines},
and @newterm{sections}.
Before proceeding further, it is important to define these terms.

The first line of @thenextfigure{}@spc{}shows a schematic piece of output.  Each of
the characters in the output is represented by ``@f{-}''.  The positions of
conditional newlines are indicated by digits.  The beginnings and ends of
logical blocks are indicated by ``@f{<}'' and ``@f{>}'' respectively.

The output as a whole is a logical block and the outermost section.  This
section is indicated by the @f{0}'s on the second line of Figure 1.  Logical
blocks nested within the output are specified by the macro
@code{pprint-logical-block}.  Conditional newline positions are specified 
by calls to @code{pprint-newline}.  Each conditional newline defines 
two sections (one before it and one after it) and is associated with a 
third (the section immediately containing it).

The section after a conditional newline consists of: all the output up to,
but not including, (a) the next conditional newline immediately contained
in the same logical block; or if (a) is not applicable, (b) the next
newline that is at a lesser level of nesting in logical blocks; or if (b)
is not applicable, (c) the end of the output.

The section before a conditional newline consists of: all the output back
to, but not including, (a) the previous conditional newline that is
immediately contained in the same logical block; or if (a) is not
applicable, (b) the beginning of the immediately containing logical block.
The last four lines in Figure 1 indicate the sections before and after the
four conditional newlines.

The section immediately containing a conditional newline is the shortest
section that contains the conditional newline in question.  In @thenextfigure{},
the first conditional newline is immediately contained in the section
marked with @f{0}'s, the second and third conditional newlines are immediately
contained in the section before the fourth conditional newline, and the
fourth conditional newline is immediately contained in the section after
the first conditional newline.

@float Figure,fig22.3
@lisp
 <-1---<--<--2---3->--4-->->
 000000000000000000000000000
 11 111111111111111111111111
           22 222
              333 3333
        44444444444444 44444
@end lisp

@caption{Example of Logical Blocks, Conditional Newlines, and Sections}
@end float


Whenever possible, the pretty printer displays the entire contents of a
section on a single line.  However, if the section is too long to fit in
the space available, line breaks are inserted at conditional newline
positions within the section.


@subsubsection Format Directive Interface

The primary interface to operations for dynamically determining the
arrangement of output is provided through the functions and macros of the
pretty printer.  @Thenextfigure{}@spc{}shows the defined names related to @term{pretty printing}.


@float Figure,fig22.4
@cartouche
@multitable{*print-pprint-dispatch*}{pprint-exit-if-list-exhausted}{set-pprint-dispatch}

@item *print-lines* @tab pprint-dispatch @tab pprint-pop
@item *print-miser-width* @tab pprint-exit-if-list-exhausted @tab pprint-tab
@item *print-pprint-dispatch* @tab pprint-fill @tab pprint-tabular
@item *print-right-margin* @tab pprint-indent @tab set-pprint-dispatch
@item copy-pprint-dispatch @tab pprint-linear @tab write
@item format @tab pprint-logical-block @tab 
@item formatter @tab pprint-newline @tab 
@end multitable
@end cartouche
@caption{Defined names related to pretty printing.}
@end float


@Thenextfigure{}@spc{}identifies a set of @term{format directives} which serve
as an alternate interface to the same pretty printing operations in a 
more textually compact form.



@float Figure,fig22.5
@cartouche
@multitable{@formatOp{:T}}{@formatOp{/.../}}{@formatOp{<...@tie{}:>}}

@item @formatOp{I} @tab @formatOp{W} @tab @formatOp{<...@tie{}:>}
@item @formatOp{:T} @tab @formatOp{/.../} @tab @formatOp{_}
@end multitable
@end cartouche
@caption{Format directives related to Pretty Printing}
@end float



@subsubsection Compiling Format Strings
@anchor{CompilingFormatStrings}

A @term{format string} is essentially a program in a special-purpose language
that performs printing, and that is interpreted by @thefunction{format}.
@Themacro{formatter} provides the efficiency of using a @term{compiled function} 
to do that same printing but without losing the textual compactness of @term{format strings}.

A @newterm{format control} is either a @term{format string} or a @term{function}
that was returned by the @themacro{formatter}.


@subsubsection Pretty Print Dispatch Tables
@anchor{PPrintDispatchTables}


A @newterm{pprint dispatch table} is a mapping from keys to pairs of values.  
Each key is a @term{type specifier}.  
The values associated with a key are
a ``function'' (specifically, a @term{function designator} or @nil{})
and a ``numerical priority'' (specifically, a @term{real}).
Basic insertion and retrieval is done based on the keys with the equality
of keys being tested by @code{equal}.

When @code{*print-pretty*} is @term{true}, 
the @newterm{current pprint dispatch table} (in @code{*print-pprint-dispatch*})
controls how @term{objects} are printed.
The information in this table takes precedence over
all other mechanisms for specifying how to print @term{objects}.
In particular, it 
has priority over
user-defined @code{print-object} @term{methods} 
because the @term{current pprint dispatch table} is consulted first.

The function is chosen from the @term{current pprint dispatch table}
by finding the highest priority function 
that is associated with a @term{type specifier} that matches the @term{object};
if there is more than one such function, 
it is @term{implementation-dependent} which is used.

However, if there is no 
information in the table
about how to @term{pretty print} a particular kind of @term{object}, 
a @term{function} is invoked which uses @code{print-object} to print the @term{object}.
The value of @code{*print-pretty*} is still @term{true} 
when this function is @term{called},
and individual methods for @code{print-object} might still elect to
produce output in a special format conditional on @thevalueof{*print-pretty*}.


@subsubsection Pretty Printer Margins

A primary goal of pretty printing is to keep the output between a pair of
margins. 
The column where the output begins is taken as the left margin.
If the current column cannot be determined at the time output begins,
the left margin is assumed to be zero.
The right margin is controlled by @code{*print-right-margin*}.



@node Examples of using the Pretty Printer
@subsection Examples of using the Pretty Printer

As an example of the interaction of logical blocks, conditional newlines,
and indentation, consider the function @f{simple-pprint-defun} below.  This
function prints out lists whose @term{cars} are @code{defun} in the 
standard way assuming that the list has exactly length @f{4}.

@lisp
(defun simple-pprint-defun (*standard-output* list)
  (pprint-logical-block (*standard-output* list :prefix "(" :suffix ")")
    (write (first list))
    (write-char #@bsl{}Space)
    (pprint-newline :miser)
    (pprint-indent :current 0)
    (write (second list))
    (write-char #@bsl{}Space)
    (pprint-newline :fill)
    (write (third list))
    (pprint-indent :block 1)
    (write-char #@bsl{}Space)
    (pprint-newline :linear)
    (write (fourth list))))
@end lisp


Suppose that one evaluates the following:

@lisp
(simple-pprint-defun *standard-output* '(defun prod (x y) (* x y)))
@end lisp


If the line width available is greater than or equal to @f{26}, then all of the
output appears on one line.  If the line width available is reduced to @f{25},
a line break is inserted at the 
linear-style conditional newline
@cindex linear-style conditional newline
before the
@term{expression} @f{(* x y)}, producing the output shown.  The
@f{(pprint-indent :block 1)} causes @f{(* x y)} to be printed at a relative
indentation of @f{1} in the logical block.

@lisp
 (DEFUN PROD (X Y) 
   (* X Y))
@end lisp


If the line width available is @f{15}, a line break is also inserted at the
fill style conditional newline before the argument list.  The call on
@f{(pprint-indent :current 0)} causes the argument list to line up under the
function name.

@lisp
(DEFUN PROD
       (X Y)
  (* X Y))
@end lisp


If @code{*print-miser-width*} were greater than or equal to 14, the example 
output above would have been as follows, because all indentation changes 
are ignored in miser mode and line breaks are inserted at 
miser-style conditional newlines.
@cindex miser-style conditional newline

@lisp
 (DEFUN
  PROD
  (X Y)
  (* X Y))
@end lisp


As an example of a per-line prefix, consider that evaluating the following
produces the output shown with a line width of @f{20} and
@code{*print-miser-width*} of @nil{}.

@lisp
 (pprint-logical-block (*standard-output* nil :per-line-prefix ";;; ")
   (simple-pprint-defun *standard-output* '(defun prod (x y) (* x y))))
 
 ;;; (DEFUN PROD
 ;;;        (X Y)
 ;;;   (* X Y))
@end lisp


As a more complex (and realistic) example, consider the function @f{pprint-let}
below.  This specifies how to print a @code{let} @term{form} in the traditional
style.  It is more complex than the example above, because it has to deal with
nested structure.  Also, unlike the example above it contains complete code to 
readably print any possible list that begins with the @term{symbol} @code{let}.
The outermost @code{pprint-logical-block} @term{form} handles the printing of
the input list as a whole and specifies that parentheses should be printed in the
output.  The second @code{pprint-logical-block} @term{form} handles the list 
of binding pairs.  Each pair in the list is itself printed by the innermost
@code{pprint-logical-block}.  (A @code{loop} @term{form} is used instead of
merely decomposing the pair into two @term{objects} so that readable output will
be produced no matter whether the list corresponding to the pair has one element,
two elements, or (being malformed) has more than two elements.)   
A space and a 
fill-style conditional newline
@cindex fill-style conditional newline
are placed after
each pair except the last.  The loop at the end of the topmost
@code{pprint-logical-block} @term{form} prints out the forms in the body
of the @code{let} @term{form} separated by spaces and 
linear-style conditional newlines.

@lisp
 (defun pprint-let (*standard-output* list)
   (pprint-logical-block (nil list :prefix "(" :suffix ")")
     (write (pprint-pop))
     (pprint-exit-if-list-exhausted)
     (write-char #@bsl{}Space)
     (pprint-logical-block (nil (pprint-pop) :prefix "(" :suffix ")")
       (pprint-exit-if-list-exhausted)
       (loop (pprint-logical-block (nil (pprint-pop) :prefix "(" :suffix ")")
               (pprint-exit-if-list-exhausted)
               (loop (write (pprint-pop))
                     (pprint-exit-if-list-exhausted)
                     (write-char #@bsl{}Space)
                     (pprint-newline :linear)))
             (pprint-exit-if-list-exhausted)
             (write-char #@bsl{}Space)
             (pprint-newline :fill)))
     (pprint-indent :block 1)
     (loop (pprint-exit-if-list-exhausted)
           (write-char #@bsl{}Space)
           (pprint-newline :linear)
           (write (pprint-pop)))))
@end lisp


Suppose that one evaluates the following with @code{*print-level*} being 4, 
and @code{*print-circle*} being @term{true}.

@lisp
 (pprint-let *standard-output*
             '#1=(let (x (*print-length* (f (g 3))) 
                       (z . 2) (k (car y)))
                   (setq x (sqrt z)) #1#))
@end lisp


If the line length is greater than or equal to @f{77}, the output produced
appears on one line.  However, if the line length is @f{76}, line breaks are
inserted at the linear-style conditional newlines separating the forms in
the body and the output below is produced.  Note that, the degenerate
binding pair @f{x} is printed readably even though it fails to be a list; a
depth abbreviation marker is printed in place of @f{(g 3)}; the binding pair
@f{(z . 2)} is printed readably even though it is not a proper list; and
appropriate circularity markers are printed.

@lisp
 #1=(LET (X (*PRINT-LENGTH* (F #)) (Z . 2) (K (CAR Y))) 
      (SETQ X (SQRT Z))
      #1#)
@end lisp


If the line length is reduced to @f{35}, a line break is inserted at one of the
fill-style conditional newlines separating the binding pairs.

@lisp
 #1=(LET (X (*PRINT-PRETTY* (F #))
          (Z . 2) (K (CAR Y)))
      (SETQ X (SQRT Z))
      #1#)
@end lisp


Suppose that the line length is further reduced to @f{22} and @code{*print-length*} is
set to @f{3}. In this situation, line breaks are inserted after both the first
and second binding pairs.  In addition, the second binding pair is itself
broken across two lines.  Clause (b) of the description of fill-style
conditional newlines (see the @term{function} @ref{pprint-newline}) 
prevents the binding pair @f{(z . 2)} from being printed
at the end of the third line.  Note that the length abbreviation hides the
circularity from view and therefore the printing of circularity markers
disappears.

@lisp
 (LET (X
       (*PRINT-LENGTH*
        (F #))
       (Z . 2) ...)
   (SETQ X (SQRT Z))
   ...)
@end lisp


The next function prints a vector using ``@f{#(...)}'' notation.

@lisp
(defun pprint-vector (*standard-output* v)
  (pprint-logical-block (nil nil :prefix "#(" :suffix ")")
    (let ((end (length v)) (i 0))
      (when (plusp end)
        (loop (pprint-pop)
              (write (aref v i))
              (if (= (incf i) end) (return nil))
              (write-char #@bsl{}Space)
              (pprint-newline :fill))))))
@end lisp


Evaluating the following with a line length of 15 produces the output shown.

@lisp
 (pprint-vector *standard-output* '#(12 34 567 8 9012 34 567 89 0 1 23))
 
 #(12 34 567 8 
   9012 34 567 
   89 0 1 23)
@end lisp


As examples of the convenience of specifying pretty printing with 
@term{format strings}, consider that the functions @f{simple-pprint-defun}
and @f{pprint-let} used as examples above can be compactly defined as follows.
(The function @f{pprint-vector} cannot be defined using @code{format}
because the data structure it traverses is not a list.)

@lisp
(defun simple-pprint-defun (*standard-output* list)
  (format T "~:<~W ~@@_~:I~W ~:_~W~1I ~_~W~:>" list))

(defun pprint-let (*standard-output* list)
  (format T "~:<~W~@hat{}~:<~@@@lcurly{}~:<~@@@lcurly{}~W~@hat{}~_~@rcurly{}~:>~@hat{}~:_~@rcurly{}~:>~1I~@@@lcurly{}~@hat{}~_~W~@rcurly{}~:>" list)) 
@end lisp


In the following example, the first @term{form} restores
@code{*print-pprint-dispatch*} to the equivalent of its initial value.
The next two forms then set up a special way to pretty print ratios.
Note that the more specific @term{type specifier} has to be associated
with a higher priority.

@lisp
 (setq *print-pprint-dispatch* (copy-pprint-dispatch nil))

 (set-pprint-dispatch 'ratio
   #'(lambda (s obj)
       (format s "#.(/ ~W ~W)" 
                 (numerator obj) (denominator obj))))

 (set-pprint-dispatch '(and ratio (satisfies minusp))
   #'(lambda (s obj)
       (format s "#.(- (/ ~W ~W))" 
               (- (numerator obj)) (denominator obj)))
   5)

 (pprint '(1/3 -2/3))
 (#.(/ 1 3) #.(- (/ 2 3)))
@end lisp


The following two @term{forms} illustrate the definition of 
pretty printing functions for types of @term{code}.  The first
@term{form} illustrates how to specify the traditional method 
for printing quoted objects using @term{single-quote}.  Note
the care taken to ensure that data lists that happen to begin
with @t{quote} will be printed readably.  The second form 
specifies that lists beginning with the symbol @f{my-let}
should print the same way that lists beginning with @code{let}
print when the initial @term{pprint dispatch table} is in effect.

@lisp
 (set-pprint-dispatch '(cons (member quote)) () 
   #'(lambda (s list)
       (if (and (consp (cdr list)) (null (cddr list)))
          (funcall (formatter "'~W") s (cadr list))
          (pprint-fill s list))))
 
 (set-pprint-dispatch '(cons (member my-let)) 
                      (pprint-dispatch '(let) nil))
@end lisp


The next example specifies a default method for printing lists that do not
correspond to function calls.  Note that the functions @code{pprint-linear},
@code{pprint-fill}, and @code{pprint-tabular} are all defined with
optional @param{colon-p} and @param{at-sign-p} arguments so that they can 
be used as @code{pprint dispatch functions} as well as @formatOp{/.../} 
functions.

@lisp
 (set-pprint-dispatch '(cons (not (and symbol (satisfies fboundp))))
                      #'pprint-fill -5)
 
 ;; Assume a line length of 9
 (pprint '(0 b c d e f g h i j k))
 (0 b c d
  e f g h
  i j k)
@end lisp


This final example shows how to define a pretty printing function for a
user defined data structure.

@lisp
 (defstruct family mom kids)
 
 (set-pprint-dispatch 'family
   #'(lambda (s f)
       (funcall (formatter "~@@<#<~;~W and ~2I~_~/pprint-fill/~;>~:>")
               s (family-mom f) (family-kids f))))
@end lisp


The pretty printing function for the structure @f{family} specifies how to
adjust the layout of the output so that it can fit aesthetically into
a variety of line widths.  In addition, it obeys 
the printer control variables @code{*print-level*},
@code{*print-length*}, @code{*print-lines*},
@code{*print-circle*}
and @code{*print-escape*},
and can tolerate several different kinds of malformity in the data structure.
The output below shows what is printed out with a right margin of @f{25},
@code{*print-pretty*} being @term{true}, @code{*print-escape*} being @term{false},
and a malformed @f{kids} list.

@lisp
 (write (list 'principal-family
              (make-family :mom "Lucy"
                           :kids '("Mark" "Bob" . "Dan")))
        :right-margin 25 :pretty T :escape nil :miser-width nil)
 (PRINCIPAL-FAMILY
  #<Lucy and
      Mark Bob . Dan>)
@end lisp


Note that a pretty printing function for a structure is different from
the structure's @code{print-object} @term{method}.
While
@code{print-object} @term{methods}
are permanently associated with a structure,
pretty printing functions are stored in 
@term{pprint dispatch tables} and can be rapidly changed to reflect 
different printing needs.  If there is no pretty printing function for 
a structure in the current @term{pprint dispatch table},
its @code{print-object} @term{method}
is used instead.


@node Notes about the Pretty Printer's Background
@subsection Notes about the Pretty Printer's Background

For a background reference to the abstract concepts detailed in this
section, see @XPPaper{}.  The details of that paper are not binding on
this document, but may be helpful in establishing a conceptual basis for
understanding this material.



@node Formatted Output
@section Formatted Output

@editornote{KMP: This is transplanted from FORMAT and will need a bit of work before
it looks good standing alone. Bear with me.}

@code{format} is useful for producing nicely formatted text, producing
good-looking messages, and so on.  @code{format} can generate and return
a @term{string} or output to @param{destination}.

The @param{control-string} argument to @code{format} is actually a @term{format control}.
That is, it can be either a @term{format string} or a @term{function},
for example a @term{function} returned
by the @code{formatter} @term{macro}.

If it is a @term{function}, the @term{function} is called with the appropriate
output stream as its first argument and the data arguments to @code{format}
as its remaining arguments.  The function should perform whatever output is 
necessary and return the unused tail of the arguments (if any).

The compilation process performed by @code{formatter} produces a @term{function}
that would do with its @term{arguments} as the @code{format} interpreter
would do with those @term{arguments}.

The remainder of this section describes what happens if the @param{control-string}
is a @term{format string}.  

@param{Control-string} is composed of simple text (@term{characters}) 
and embedded directives.

@code{format} writes the simple text as is;
each embedded directive specifies further text output 
that is to appear at the corresponding point within the simple text.  
Most directives use one or more elements of @param{args} to
create their output.

A directive consists of a @term{tilde},
optional prefix parameters
separated by commas, optional @term{colon} and @term{at-sign} modifiers,
and a single character indicating what kind of directive this is.
There is no required ordering between the @term{at-sign} and @term{colon} modifier.
The @term{case} of the directive character is ignored.
Prefix parameters are notated as signed (sign is optional) decimal numbers,
or as a @term{single-quote} followed by a character.
For example, @f{@tild{}5,'0d} can be used
to print an @term{integer} 
in decimal radix in five columns with leading zeros,
or @f{@tild{}5,'*d} to get leading asterisks.

In place of a prefix parameter to a directive, @f{V} (or @f{v}) can be used. 
In this case, @code{format} takes an argument from @param{args} as a parameter to
the directive.  The argument should be an @term{integer} or @term{character}.
If the @param{arg} used by a @f{V} parameter is @nil{},
the effect is as if the parameter had been omitted.
@f{#} can be used in place of a prefix parameter; it
represents the number of @param{args} remaining to be processed.
When used within a recursive format, in the context of @f{@tild{}?} or @f{@tild{}@lcurly{}},
the @f{#} prefix parameter represents the number of @term{format arguments}
remaining within the recursive call.

Examples of @term{format strings}:


@float Figure,fig22.6
@cartouche
@multitable{@f{"@tild{}3,-4:@@s"}}{;This is an S directive with two parameters, @f{3} and @f{-4},}

@item @f{"@tild{}S"} @tab ;This is an S directive with no parameters or modifiers.
@item @f{"@tild{}3,-4:@@s"} @tab ;This is an S directive with two parameters, @f{3} and @f{-4},
@item  @tab ; and both the @term{colon} and @term{at-sign} flags.
@item @f{"@tild{},+4S"} @tab ;Here the first prefix parameter is omitted and takes
@item  @tab ; on its default value, while the second parameter is @f{4}.
@end multitable
@end cartouche
@caption{Examples of format control strings}
@end float


@code{format} sends the output to @param{destination}.
If @param{destination} is @nil{},
@code{format} creates and returns a @term{string} 
containing the output from @param{control-string}.
If @param{destination} is @term{non-nil}, 
it must be a @term{string} with a @term{fill pointer}, 
a @term{stream}, or the symbol @code{t}.
If @param{destination} is a @term{string} with a @term{fill pointer}, 
the output is added to the end of the @term{string}. 
If @param{destination} is a @term{stream}, 
the output is sent to that @term{stream}. 
If @param{destination} is @code{t},
the output is sent to @term{standard output}.

In the description of the directives that follows,
the term @j{arg} in general
refers to the next item of the set of @param{args} to be processed.
The word or phrase at the beginning of each description is a mnemonic
for the directive.
@code{format} directives do not bind any of the printer control
variables (@code{*print-...*}) except as specified in the following
descriptions.
Implementations may specify the binding of new, implementation-specific 
printer control variables for each @code{format} directive, but they
may neither bind any standard printer control variables not
specified in description of a @code{format} 
directive nor fail to bind
any standard printer control variables as specified in the
description.

@menu
* FORMAT Basic Output::
* FORMAT Radix Control::
* FORMAT Floating-Point Printers::
* FORMAT Printer Operations::
* FORMAT Pretty Printer Operations::
* FORMAT Layout Control::
* FORMAT Control-Flow Operations::
* FORMAT Miscellaneous Operations::
* FORMAT Miscellaneous Pseudo-Operations::
* Additional Information about FORMAT Operations::
* Examples of FORMAT::
* Notes about FORMAT::
@end menu
@node FORMAT Basic Output
@subsection FORMAT Basic Output

@subsubsection Tilde C: Character
@cindex C (format directive)
@cindex Tilde C (format directive)


The next @j{arg} should be a @term{character}; 
it is printed
according to the modifier flags.

@f{@tild{}C} prints the @term{character} 
as if by using @code{write-char} if it is a @term{simple character}.
@term{Characters} that are not @term{simple}
are not necessarily printed as if by @code{write-char},
but are displayed in an @term{implementation-defined}, abbreviated format.
For example,

@lisp
 (format nil "~C" #@bsl{}A) @EV{} "A"
 (format nil "~C" #@bsl{}Space) @EV{} " "
@end lisp


@f{@tild{}:C} is the same as @f{@tild{}C} for @term{printing} @term{characters},
but other @term{characters} are ``spelled out.''  The intent is that this
is a ``pretty'' format for printing characters.
For @term{simple} @term{characters} that are not @term{printing},
what is spelled out is the @term{name} of the @term{character} (see @code{char-name}).
For @term{characters} that are not @term{simple} and not @term{printing},
what is spelled out is @term{implementation-defined}.
For example, 

@lisp
 (format nil "~:C" #@bsl{}A) @EV{} "A"
 (format nil "~:C" #@bsl{}Space) @EV{} "Space"
;; This next example assumes an implementation-defined "Control" attribute.
 (format nil "~:C" #@bsl{}Control-Space)
@EV{} "Control-Space"
@OV{} "c-Space"
@end lisp


@f{@tild{}:@@C} prints what @f{@tild{}:C} would, and then
if the @term{character} requires unusual shift keys on the keyboard to type it,
this fact is mentioned.  For example,

@begingroup{}
@lisp
 (format nil "~:@@C" #@bsl{}Control-Partial) @EV{} "Control-@Partial{} (Top-F)"  
@end lisp

@endgroup{}

This is the format used for telling the user about a key he is expected to type,
in prompts, for instance.  The precise output may depend not only
on the implementation, but on the particular I/O devices in use.

@f{@tild{}@@C} 
prints the @term{character} in a way that the @term{Lisp reader} can understand,
using @f{#@bsl{}} syntax.

@f{@tild{}@@C}  binds @code{*print-escape*} to @code{t}.


@subsubsection Tilde Percent: Newline
@cindex Percent (format directive)
@cindex Tilde Percent (format directive)

This outputs a @f{#@bsl{}Newline} character, thereby terminating the current
output line and beginning a new one.
@f{@tild{}@j{n}@percent{}} outputs @j{n} newlines.
No @j{arg} is used.  


@subsubsection Tilde Ampersand: Fresh-Line
@cindex Ampersand (format directive)
@cindex Tilde Ampersand (format directive)

Unless it can be determined that the output stream
is already at the beginning of a line,
this outputs a newline.
@f{@tild{}@j{n}@ampers{}} calls @code{fresh-line}
and then outputs @j{n}@minussign{} 1 newlines.
@f{@tild{}0@ampers{}} does nothing.


@subsubsection Tilde Vertical-Bar: Page
@cindex Vertical-Bar (format directive)
@cindex Tilde Vertical-Bar (format directive)

This outputs a page separator character, if possible.
@f{@tild{}@j{n}|} does this @j{n} times.


@subsubsection Tilde Tilde: Tilde
@cindex Tilde (format directive)
@cindex Tilde Tilde (format directive)

This outputs a @term{tilde}.  @f{@tild{}@j{n}@tild{}} outputs @j{n} tildes.



@node FORMAT Radix Control
@subsection FORMAT Radix Control

@subsubsection Tilde R: Radix
@cindex R (format directive)
@cindex Tilde R (format directive)

@f{@tild{}@j{n}R} prints @j{arg} in radix @j{n}.
The modifier flags and any remaining parameters are used as for
the @f{@tild{}D} directive.
@f{@tild{}D} is the same as @f{@tild{}10R}.  
The full form is 
@f{@tild{}@j{radix},@j{mincol},@j{padchar},@j{commachar},@j{comma-interval}R}.

If no prefix parameters are given to @f{@tild{}R}, then a different
interpretation is given.  The argument should be an @term{integer}.
For example, if @j{arg} is 4:


@itemize @bullet{}
@item
@f{@tild{}R} prints @j{arg} as a cardinal English number: @f{four}.

@item
@f{@tild{}:R} prints @j{arg} as an ordinal English number: @f{fourth}.

@item   
@f{@tild{}@@R} prints @j{arg} as a Roman numeral: @f{IV}.

@item      
@f{@tild{}:@@R} prints @j{arg} as an old Roman numeral: @f{IIII}.
@end itemize


For example:

@lisp
 (format nil "~,,' ,4:B" 13) @EV{} "1101"
 (format nil "~,,' ,4:B" 17) @EV{} "1 0001"
 (format nil "~19,0,' ,4:B" 3333) @EV{} "0000 1101 0000 0101"
 (format nil "~3,,,' ,2:R" 17) @EV{} "1 22"
 (format nil "~,,'|,2:D" #xFFFF) @EV{}  "6|55|35"
@end lisp


If and only if the first parameter, @j{n}, is supplied,
@f{@tild{}R} binds
@code{*print-escape*} to @term{false},
@code{*print-radix*} to @term{false}, 
@code{*print-base*} to @j{n},
and @code{*print-readably*} to @term{false}.

If and only if no parameters are supplied,
@f{@tild{}R} binds @code{*print-base*} to @f{10}.


@subsubsection Tilde D: Decimal
@cindex D (format directive)
@cindex Tilde D (format directive)

An @j{arg}, which should be an @term{integer}, 
is printed in decimal radix.
@f{@tild{}D} will never put a decimal point after the number.

@f{@tild{}@j{mincol}D} uses 
a column width of @j{mincol}; spaces are inserted on
the left if the number requires fewer than @j{mincol} columns for its digits
and sign.  If the number doesn't fit in @j{mincol} columns, additional columns
are used as needed.

@f{@tild{}@j{mincol},@j{padchar}D} uses @j{padchar} as the pad character
instead of space.

If @j{arg} is not an @term{integer}, it is printed in @f{@tild{}A} format and decimal base.

The @f{@@} modifier causes the number's sign to be printed always; the default
is to print it only if the number is negative.
The @f{:} modifier causes commas to be printed between groups of digits;
@j{commachar} may be used to change the character used as the comma.
@j{comma-interval} 
must be an @term{integer} and defaults to 3.  When the @f{:} 
modifier is given to any of
these directives, the @j{commachar} 
is printed between groups of @j{comma-interval}
digits.

Thus the most general form of @f{@tild{}D} is
@f{@tild{}@j{mincol},@j{padchar},@j{commachar},@j{comma-interval}D}.

@f{@tild{}D} binds
@code{*print-escape*} to @term{false},
@code{*print-radix*} to @term{false},
@code{*print-base*} to @f{10},
and @code{*print-readably*} to @term{false}.


@subsubsection Tilde B: Binary
@cindex B (format directive)
@cindex Tilde B (format directive)

This is just like @f{@tild{}D} but prints in binary radix (radix 2)
instead of decimal.  The full form is therefore
@f{@tild{}@j{mincol},@j{padchar},@j{commachar},@j{comma-interval}B}.

@f{@tild{}B} binds
@code{*print-escape*} to @term{false},
@code{*print-radix*} to @term{false},
@code{*print-base*} to @f{2},
and @code{*print-readably*} to @term{false}.


@subsubsection Tilde O: Octal
@cindex O (format directive)
@cindex Tilde O (format directive)

This is just like @f{@tild{}D} but prints in octal radix (radix 8)
instead of decimal.  The full form is therefore
@f{@tild{}@j{mincol},@j{padchar},@j{commachar},@j{comma-interval}O}.

@f{@tild{}O} binds
@code{*print-escape*} to @term{false},
@code{*print-radix*} to @term{false},
@code{*print-base*} to @f{8},
and @code{*print-readably*} to @term{false}.


@subsubsection Tilde X: Hexadecimal
@cindex X (format directive)
@cindex Tilde X (format directive)

This is just like @f{@tild{}D} but prints in hexadecimal radix
(radix 16) instead of decimal.  The full form is therefore
@f{@tild{}@j{mincol},@j{padchar},@j{commachar},@j{comma-interval}X}.

@f{@tild{}X} binds
@code{*print-escape*} to @term{false},
@code{*print-radix*} to @term{false},
@code{*print-base*} to @f{16},
and @code{*print-readably*} to @term{false}.



@node FORMAT Floating-Point Printers
@subsection FORMAT Floating-Point Printers

@subsubsection Tilde F: Fixed-Format Floating-Point
@cindex F (format directive)
@cindex Tilde F (format directive)

The next @j{arg} is printed as a @term{float}.

The full form is @f{@tild{}@j{w},@j{d},@j{k},@j{overflowchar},@j{padchar}F}.
The parameter @j{w}
is the width of the field to be printed; @j{d} is the number
of digits to print after the decimal point; @j{k} is a scale factor
that defaults to zero.

Exactly @j{w} characters will
be output.  First, leading copies of the character @j{padchar}
(which defaults to a space) are printed, if necessary, to pad the
field on the left.
If the @j{arg} is negative, then a minus sign is printed;
if the @j{arg} is not negative, then a plus sign is printed
if and only if the @f{@@}
modifier was supplied.  Then a sequence
of digits, containing a single embedded decimal point, is printed;
this represents the magnitude of the value of @j{arg} times @mat{10^@j{k}},
rounded to @j{d} fractional digits.                         
When rounding up and rounding down would produce printed values
equidistant from the scaled value of @j{arg}, then the implementation
is free to use either one.  For example, printing the argument
@f{6.375} using the format @f{@tild{}4,2F} may correctly produce
either @f{6.37} or @f{6.38}.
Leading zeros are not permitted, except that a single
zero digit is output before the decimal point if the printed value
is less than one, and this single zero digit is not output
at all if @j{w}=@j{d}+1.

If it is impossible to print the value in the required format in a field
of width @j{w}, then one of two actions is taken.  If the
parameter @j{overflowchar} is supplied, then @j{w} copies of that
parameter are printed instead of the scaled value of @j{arg}.
If the @j{overflowchar} parameter is omitted, then the scaled value
is printed using more than @j{w} characters, as many more as may be
needed.

If the @j{w} parameter is omitted, then the field is of variable width.
In effect, a value is chosen
for @j{w} in such a way that no leading pad characters need to be printed
and exactly @j{d} characters will follow the decimal point.
For example, the directive @f{@tild{},2F} will print exactly
two digits after the decimal point and as many as necessary before the
decimal point.

If the parameter @j{d} is omitted, then there is no constraint
on the number of digits to appear after the decimal point.
A value is chosen for @j{d} in such a way that as many digits
as possible may be printed subject to the width constraint
imposed by the parameter @j{w} and the constraint that no trailing
zero digits may appear in the fraction, except that if the
fraction to be printed is zero, then a single zero digit should
appear after the decimal point if permitted by the width constraint.

If both @j{w} and @j{d} are omitted, then the effect is to print
the value using ordinary free-format output; @code{prin1} uses this format
for any number whose magnitude is either zero or between
@mat{10^-3} (inclusive) and @mat{10^7} (exclusive).

If @j{w} is omitted, then if the magnitude of @j{arg} is so large (or, if
@j{d} is also omitted, so small) that more than 100 digits would have to
be printed, then an implementation is free, at its discretion, to print
the number using exponential notation instead, as if by the directive
@f{@tild{}E} (with all parameters to @f{@tild{}E} defaulted, not
taking their values from the @f{@tild{}F} directive).

If @j{arg} is a @term{rational} 
number, then it is coerced to be a @term{single float}
and then printed.  Alternatively, an implementation is permitted to
process a @term{rational} 
number by any other method that has essentially the
same behavior but avoids loss of precision or overflow
because of the coercion.  If @j{w} and @j{d} are
not supplied and the number has no exact decimal representation,
for example @f{1/3}, some precision cutoff must be chosen
by the implementation since only a finite number of digits may be printed.

If @j{arg} is a @term{complex} number or some non-numeric
@term{object}, 
then it is printed using the format directive @f{@tild{}@j{w}D},
thereby printing it in decimal radix and a minimum field width of @j{w}.

@f{@tild{}F} binds
@code{*print-escape*} to @term{false}
and @code{*print-readably*} to @term{false}.


@subsubsection Tilde E: Exponential Floating-Point
@cindex E (format directive)
@cindex Tilde E (format directive)

The next @j{arg} is printed as a @term{float} in exponential notation.

The full form is
@f{@tild{}@j{w},@j{d},@j{e},@j{k},@j{overflowchar},@j{padchar},@j{exponentchar}E}.
The parameter @j{w}
is the width of the field to be printed; @j{d} is the number
of digits to print after the decimal point; @j{e} is the number
of digits to use when printing the exponent;
@j{k} is a scale factor that defaults to one (not zero).

Exactly @j{w} characters will
be output.  First, leading copies of the character @j{padchar}
(which defaults to a space) are printed, if necessary, to pad the
field on the left.
If the @j{arg} is negative, then a minus sign is printed;
if the @j{arg} is not negative, then a plus sign is printed
if and only if the @f{@@}
modifier was supplied.  Then a sequence
of digits containing a single embedded decimal point is printed.
The form of this sequence of digits depends on the scale factor @j{k}.
If @j{k} is zero, then @j{d} digits are printed after the decimal
point, and a single zero digit appears before the decimal point if
the total field width will permit it.  If @j{k} is positive,
then it must be strictly less than @j{d}+2;  @j{k} significant digits
are printed before the decimal point, and @j{d}@minussign{} @j{k}+1
digits are printed after the decimal point.  If @j{k} is negative,
then it must be strictly greater than @minussign{} @j{d};
a single zero digit appears before the decimal point if
the total field width will permit it, and after the decimal point
are printed first
@minussign{} @j{k} zeros and then @j{d}+@j{k} significant digits.
The printed fraction must be properly rounded.         
When rounding up and rounding down would produce printed values
equidistant from the scaled value of @j{arg}, then the implementation
is free to use either one.  For example, printing the argument
@f{637.5} using the format @f{@tild{}8,2E} may correctly produce
either @f{6.37E+2} or @f{6.38E+2}.

Following the digit sequence, the exponent is printed.
First the character parameter @j{exponentchar} is printed; if this
parameter is omitted, then the @term{exponent marker} that
@code{prin1} would use is printed, as determined from the
type of the @term{float} and the current value of
@code{*read-default-float-format*}.
Next, either a plus sign or a minus sign
is printed, followed by @j{e} digits representing the power of
ten by which the printed fraction must be multiplied
to properly represent the rounded value of @j{arg}.

If it is impossible to print the value in the required format in a field
of width @j{w}, possibly because @j{k} is too large or too small
or because the exponent cannot be printed in @j{e} character positions,
then one of two actions is taken.  If the
parameter @j{overflowchar} is supplied, then @j{w} copies of that
parameter are printed instead of the scaled value of @j{arg}.
If the @j{overflowchar} parameter is omitted, then the scaled value
is printed using more than @j{w} characters, as many more as may be
needed; if the problem is that @j{d} is too small for the supplied @j{k}
or that @j{e} is too small, then a larger value is used for @j{d} or @j{e}
as may be needed.

If the @j{w} parameter is omitted, then the field is of variable width.
In effect a value is chosen
for @j{w} in such a way that no leading pad characters need to be printed.

If the parameter @j{d} is omitted, then there is no constraint
on the number of digits to appear.
A value is chosen for @j{d} in such a way that as many digits
as possible may be printed subject to the width constraint
imposed by the parameter @j{w}, the constraint of the scale factor @j{k},
and the constraint that no trailing
zero digits may appear in the fraction, except that if the
fraction to be printed is zero then a single zero digit should
appear after the decimal point.

If the parameter @j{e} is omitted, then the exponent is printed
using the smallest number of digits necessary to represent its value.

If all of @j{w}, @j{d}, and @j{e} are omitted, then the effect is to print
the value using ordinary free-format exponential-notation output;
@code{prin1} uses 
a similar
format for any non-zero number whose magnitude
is less than @mat{10^-3} or greater than or equal to @mat{10^7}.
The only difference is that the @f{@tild{}E} 
directive always prints a plus or minus sign in front of the
exponent, while @code{prin1} omits the plus sign if the exponent is
non-negative.

If @j{arg} is a @term{rational} 
number, then it is coerced to be a @term{single float}
and then printed.  Alternatively, an implementation is permitted to
process a @term{rational} 
number by any other method that has essentially the
same behavior but avoids loss of precision or overflow
because of the coercion.  If @j{w} and @j{d} are
unsupplied and the number has no exact decimal representation,
for example @f{1/3}, some precision cutoff must be chosen
by the implementation since only a finite number of digits may be printed.

If @j{arg} is a @term{complex} number or some non-numeric
@term{object}, 
then it is printed using the format directive @f{@tild{}@j{w}D},
thereby printing it in decimal radix and a minimum field width of @j{w}.

@f{@tild{}E} binds
@code{*print-escape*} to @term{false}
and @code{*print-readably*} to @term{false}.


@subsubsection Tilde G: General Floating-Point
@cindex G (format directive)
@cindex Tilde G (format directive)

The next @j{arg} is printed as a @term{float} 
in either fixed-format or exponential notation as appropriate.

The full form is @f{@tild{}@j{w},@j{d},@j{e},@j{k},@j{overflowchar},@j{padchar},@j{exponentchar}G}.
The format in which to print @j{arg} depends on the magnitude (absolute
value) of the @j{arg}.  Let @j{n} be an integer such that
@mat{10^@j{n}-1} @mat{@le{}} |@j{arg}| < @mat{10^@j{n}}.
Let @j{ee} equal @j{e}+2, or 4 if @j{e} is omitted.
Let @j{ww} equal @j{w}@minussign{} @j{ee},
or @nil{}@spc{}if @j{w} is omitted.  If @j{d} is omitted, first let @j{q}
be the number of digits needed to print @j{arg} with no loss
of information and without leading or trailing zeros;
then let @j{d} equal @f{(max @j{q} (min @j{n} 7))}.
Let @j{dd} equal @j{d}@minussign{} @j{n}.

If 0 @mat{@le{}} @j{dd} @mat{@le{}} @j{d}, then @j{arg} is printed
as if by the format directives

@f{@tild{}@j{ww},@j{dd},,@j{overflowchar},@j{padchar}F@tild{}@j{ee}@@T}

Note that the scale factor @j{k} is not passed to the @f{@tild{}F}
directive.  For all other values of @j{dd}, @j{arg} is printed as if
by the format directive

@f{@tild{}@j{w},@j{d},@j{e},@j{k},@j{overflowchar},@j{padchar},@j{exponentchar}E}

In either case, an @f{@@}
modifier is supplied to the @f{@tild{}F}
or @f{@tild{}E} directive if and only if one was supplied to the
@f{@tild{}G} directive.

@f{@tild{}G} binds
@code{*print-escape*} to @term{false}
and @code{*print-readably*} to @term{false}.


@subsubsection Tilde Dollarsign: Monetary Floating-Point
@cindex Dollarsign (format directive)
@cindex Tilde Dollarsign (format directive)

The next @j{arg} is printed as a @term{float} in fixed-format notation.  

The full form is @f{@tild{}@j{d},@j{n},@j{w},@j{padchar}@dollar{}}.
The parameter @j{d} is the number
of digits to print after the decimal point (default value 2);
@j{n} is the minimum number of digits to print before the decimal
point (default value 1);
@j{w} is the minimum total width of the field to be printed (default
value 0).

First padding and the sign are output.
If the @j{arg} is negative, then a minus sign is printed;
if the @j{arg} is not negative, then a plus sign is printed
if and only if the @f{@@} modifier was supplied.  
If the @f{:} modifier is used, the sign appears before any padding,
and otherwise after the padding.
If @j{w} is supplied and the number of other characters to be output
is less than @j{w}, then copies of @j{padchar} (which defaults
to a space) are output to
make the total field width equal @j{w}.
Then @j{n} digits are printed for the integer part of @j{arg},
with leading zeros if necessary; then a decimal point;
then @j{d} digits of fraction, properly rounded.

If the magnitude of @j{arg} is so large that more than @j{m} digits would
have to be printed, where @j{m} is the larger of @j{w} and 100, then an
implementation is free, at its discretion, to print the number using
exponential notation instead, as if by the directive
@f{@tild{}@j{w},@j{q},,,,@j{padchar}E}, where @j{w} and @j{padchar} are
present or omitted according to whether they were present or omitted in
the @f{@tild{}@dollar{}} directive, and where @j{q}=@j{d}+@j{n}@minussign{} 1,
where @j{d} and @j{n} are the (possibly default) values given to the
@f{@tild{}@dollar{}} directive.

If @j{arg} is a @term{rational} 
number, then it is coerced to be a @term{single float}
and then printed.  Alternatively, an implementation is permitted to
process a @term{rational} number by any 
other method that has essentially the
same behavior but avoids loss of precision or overflow
because of the coercion.

If @j{arg} is a @term{complex} number or some non-numeric
@term{object},
then it is printed using the format directive @f{@tild{}@j{w}D},
thereby printing it in decimal radix and a minimum field width of @j{w}.

@f{@tild{}@dollar{}} binds @code{*print-escape*} to @term{false}
and @code{*print-readably*} to @term{false}.




@node FORMAT Printer Operations
@subsection FORMAT Printer Operations

@subsubsection Tilde A: Aesthetic
@cindex A (format directive)
@cindex Tilde A (format directive)

An @j{arg}, any @term{object}, 
is printed without escape characters
(as by @code{princ}).  If @j{arg} is a @term{string}, 
its @term{characters}
will be output verbatim.
If @j{arg} is @nil{}@spc{}it will be printed as @nil{};
the @term{colon} modifier (@f{@tild{}:A}) will cause an @j{arg} of @nil{}@spc{}to be printed as @empty{},
but if @j{arg} is a composite structure, such as a @term{list} or @term{vector},
any contained occurrences of @nil{}@spc{}will still be printed as @nil{}.

@f{@tild{}@j{mincol}A} inserts spaces on the right, if necessary, to make the
width at least @j{mincol} columns.  The @f{@@}
modifier causes the spaces
to be inserted on the left rather than the right.

@f{@tild{}@j{mincol},@j{colinc},@j{minpad},@j{padchar}A} 
is the full form of @f{@tild{}A},
which allows control of the padding.
The @term{string} is padded on the right (or on the left if the
@f{@@} modifier is used) with at least @j{minpad} copies
of @j{padchar}; padding characters are then inserted @j{colinc} characters
at a time until the total width is at least @j{mincol}.
The defaults are @f{0} for @j{mincol} and @j{minpad}, @f{1} for @j{colinc},
and the space character for @j{padchar}.

@f{@tild{}A} binds @code{*print-escape*} to @term{false},
and @code{*print-readably*} to @term{false}.


@subsubsection Tilde S: Standard
@cindex S (format directive)
@cindex Tilde S (format directive)

This is just like @f{@tild{}A}, but @j{arg} is printed with escape
characters (as by @code{prin1} rather than @f{princ}).  The output is
therefore suitable for input to @code{read}.  @f{@tild{}S} accepts
all the arguments and modifiers that @f{@tild{}A} does.

@f{@tild{}S} binds @code{*print-escape*} to @code{t}.


@subsubsection Tilde W: Write
@cindex W (format directive)
@cindex Tilde W (format directive)

An argument, any @term{object}, is printed obeying every printer control
variable (as by @code{write}).  In addition, @f{@tild{}W} interacts correctly with depth
abbreviation, by not resetting the depth counter to zero.  @f{@tild{}W} does not
accept parameters.  If given the @term{colon} modifier, @f{@tild{}W} binds @code{*print-pretty*}
to @term{true}.  If given the @term{at-sign} modifier, @f{@tild{}W} binds @code{*print-level*}
and @code{*print-length*} to @nil{}.

@f{@tild{}W} provides automatic support for the detection of circularity and
sharing.  If @thevalueof{*print-circle*} is not @nil{}@spc{}and @f{@tild{}W} is applied
to an argument that is a circular (or shared) reference, an appropriate 
@f{#@param{n}#} marker is inserted in the output instead of printing the argument.



@node FORMAT Pretty Printer Operations
@subsection FORMAT Pretty Printer Operations


The following constructs provide access to the @term{pretty printer}:

@subsubsection Tilde Underscore: Conditional Newline
@anchor{TildeUnderscore}
@cindex Underscore (format directive)
@cindex Tilde Underscore (format directive)

Without any modifiers, @f{@tild{}_} is the same as @f{(pprint-newline :linear)}.
@f{@tild{}@@_}  is the same as @f{(pprint-newline :miser)}.
@f{@tild{}:_}  is the same as @f{(pprint-newline :fill)}.
@f{@tild{}:@@_} is the same as @f{(pprint-newline :mandatory)}.


@subsubsection Tilde Less-Than-Sign: Logical Block
@anchor{TildeLessThanLogicalBlock}
@cindex Less-Than-Sign (format directive)
@cindex Tilde Less-Than-Sign (format directive)

@f{@tild{}<...@tild{}:>}

If @f{@tild{}:>} is used to terminate a @f{@tild{}<...@tild{}>},
the directive is equivalent to a call to @code{pprint-logical-block}.
The argument corresponding to the @f{@tild{}<...@tild{}:>} directive is treated in
the same way as the @term{list} argument to @code{pprint-logical-block},
thereby providing automatic support for non-@term{list} arguments and
the detection of circularity, sharing, and depth abbreviation.  
The portion of the @param{control-string} nested within the @f{@tild{}<...@tild{}:>}
specifies the @kwd{prefix} (or @kwd{per-line-prefix}), @kwd{suffix},
and body of the @code{pprint-logical-block}.

The @param{control-string} portion enclosed by @f{@tild{}<...@tild{}:>} can be divided
into segments @f{@tild{}<@param{prefix}@tild{};@param{body}@tild{};@param{suffix}@tild{}:>}
by @f{@tild{};} directives.  If the first section is terminated by @f{@tild{}@@;}, 
it specifies a per-line prefix rather than a simple prefix.  
The @param{prefix} and @param{suffix} cannot contain format directives.  
An error is signaled if either the prefix or suffix fails to be a
constant string or if the enclosed portion is divided into more than three segments.

If the enclosed portion is divided into only two segments, the @param{suffix}
defaults to the null string.  If the enclosed portion consists of only
a single segment, both the @param{prefix} and the @param{suffix} default to 
the null string.  If the @term{colon} modifier is used (@ie{} @f{@tild{}:<...@tild{}:>}),
the @param{prefix} and @param{suffix} default to @f{"("} and @f{")"}
(respectively) instead of the null string.

The body segment can be any arbitrary @term{format string}.
This @term{format string} is applied to the elements of the list
corresponding to the @f{@tild{}<...@tild{}:>} directive as a whole.
Elements are extracted from this list using @code{pprint-pop},
thereby providing automatic support for malformed lists, and the detection
of circularity, sharing, and length abbreviation.
Within the body segment, @f{@tild{}@hat{}} acts like @code{pprint-exit-if-list-exhausted}.

@f{@tild{}<...@tild{}:>} supports a feature not supported by @code{pprint-logical-block}.
If @f{@tild{}:@@>} is used to terminate the directive (@ie{} @f{@tild{}<...@tild{}:@@>}), 
then a fill-style conditional newline is automatically inserted after each
group of blanks immediately contained in the body (except for blanks
after a @tie{}@NewlineChar{}@spc{}directive).  This makes it easy to achieve the
equivalent of paragraph filling.

If the @term{at-sign} modifier is used with @f{@tild{}<...@tild{}:>}, the entire remaining argument
list is passed to the directive as its argument.  All of the remaining
arguments are always consumed by @f{@tild{}@@<...@tild{}:>}, even if they are not all used
by the @term{format string} nested in the directive.  Other than the difference in
its argument, @f{@tild{}@@<...@tild{}:>} is exactly the same as @f{@tild{}<...@tild{}:>} except that
circularity detection is not applied if @f{@tild{}@@<...@tild{}:>} is encountered at top
level in a @term{format string}.  This ensures that circularity detection is
applied only to data lists, not to @term{format argument} @term{lists}.

@f{" . #@param{n}#"} is printed if circularity or sharing has to be indicated
for its argument as a whole.

To a considerable extent, the basic form of the directive @f{@tild{}<...@tild{}>} is
incompatible with the dynamic control of the arrangement of output by
@f{@tild{}W}, @f{@tild{}_}, @f{@tild{}<...@tild{}:>}, @f{@tild{}I}, and @f{@tild{}:T}.  As a result, an error 
is signaled if any of these directives is nested within @f{@tild{}<...@tild{}>}.  
Beyond this, an error is also signaled if the @f{@tild{}<...@tild{}:;...@tild{}>} form of
@f{@tild{}<...@tild{}>} is used in the same @term{format string} with 
@f{@tild{}W}, @f{@tild{}_}, @f{@tild{}<...@tild{}:>}, @f{@tild{}I}, or @f{@tild{}:T}.

See also @ref{TildeLessThanJustification, Section 22.3.6.2 (Tilde Less-Than-Sign. Justification)}.


@subsubsection Tilde I: Indent
@anchor{TildeI}
@cindex I (format directive)
@cindex Tilde I (format directive)

@f{@tild{}@param{n}I}  is the same as @f{(pprint-indent :block n)}.

@f{@tild{}@param{n}:I} is the same as @f{(pprint-indent :current n)}.
In both cases, @param{n} defaults to zero, if it is omitted.


@subsubsection Tilde Slash: Call Function
@cindex Slash (format directive)
@cindex Tilde Slash (format directive)

@f{@tild{}/@param{name}/}

User defined functions can be called from within a format
string by using the directive @f{@tild{}/@param{name}/}.
The @term{colon} modifier, the @term{at-sign} modifier, and arbitrarily many parameters 
can be specified with the @f{@tild{}/@param{name}/} directive.
@param{name} can be any arbitrary string that does not contain a "/".
All of the characters in @param{name} are treated as if they were upper case.
If @param{name} contains a single @term{colon} (@f{:}) or double @term{colon} (@f{::}),
then everything up to but not including the first @f{":"} or @f{"::"}
is taken to be a @term{string} that names a @term{package}.
Everything after the first @f{":"} or @f{"::"} (if any) is taken to be a 
@term{string} that names a @f{symbol}.  The function corresponding to a 
@f{@tild{}/name/} directive is obtained by looking up the @term{symbol}
that has the indicated name in the indicated @term{package}.
If @param{name} does not contain a @f{":"} or @f{"::"},
then the whole @param{name} string is looked up in the @code{COMMON-LISP-USER} @term{package}. 

When a @f{@tild{}/name/} directive is encountered,
the indicated function is called with four or more arguments.
The first four arguments are:
the output stream,
the @term{format argument} corresponding to the directive,
a @term{generalized boolean} that is @term{true} if the @term{colon} modifier was used,
and a @term{generalized boolean} that is @term{true} if the @term{at-sign} modifier was used.
The remaining arguments consist of any parameters specified with the directive.
The function should print the argument appropriately.
Any values returned by the function are ignored.

The three @term{functions} 
@code{pprint-linear},
@code{pprint-fill},
and @code{pprint-tabular}
are specifically designed so that they can be called by @f{@tild{}/.../}
(@ie{} @f{@tild{}/pprint-linear/}, @f{@tild{}/pprint-fill/}, and @f{@tild{}/pprint-tabular/}).
In particular they take @term{colon} and @term{at-sign} arguments.




@node FORMAT Layout Control
@subsection FORMAT Layout Control

@subsubsection Tilde T: Tabulate
@cindex T (format directive)
@cindex Tilde T (format directive)

This spaces over to a given column.
@f{@tild{}@j{colnum},@j{colinc}T} will output
sufficient spaces to move the cursor to column @j{colnum}.  If the cursor
is already at or beyond column @j{colnum}, it will output spaces to move it to
column @j{colnum}+@j{k}*@j{colinc} for the smallest positive integer
@j{k} possible, unless @j{colinc} is zero, in which case no spaces
are output if the cursor is already at or beyond column @j{colnum}.
@j{colnum} and @j{colinc} default to @f{1}.

If for some reason the current absolute column position cannot be determined
by direct inquiry,
@code{format} 
may be able to deduce the current column position by noting         
that certain directives (such as @f{@tild{}@percent{}}, or @f{@tild{}@ampers{}},
or @f{@tild{}A} 
with the argument being a string containing a newline) cause
the column position to be reset to zero, and counting the number of characters
emitted since that point.  If that fails, @code{format} 
may attempt a
similar deduction on the riskier assumption that the destination was
at column zero when @code{format} 
was invoked.  If even this heuristic fails
or is implementationally inconvenient, at worst
the @f{@tild{}T} operation will simply output two spaces.

@f{@tild{}@@T} performs relative tabulation.
@f{@tild{}@j{colrel},@j{colinc}@@T} outputs @j{colrel} spaces
and then outputs the smallest non-negative
number of additional spaces necessary to move the cursor
to a column that is a multiple                                       
of @j{colinc}.  For example, the directive 
@f{@tild{}3,8@@T} outputs
three spaces and then moves the cursor to a ``standard multiple-of-eight
tab stop'' if not at one already.
If the current output column cannot be determined, however,
then @j{colinc} is ignored, and exactly @j{colrel} spaces are output.

If the @term{colon} modifier is used with the @f{@tild{}T} directive,
the tabbing computation is done relative to the horizontal position where the
section immediately containing the directive begins, rather than with
respect to a horizontal position of zero.  The numerical parameters are
both interpreted as being in units of @term{ems} and both default to @f{1}.
@f{@tild{}@param{n},@param{m}:T} is the same as 
@f{(pprint-tab :section @param{n} @param{m})}.
@f{@tild{}@param{n},@param{m}:@@T} is the same as
@f{(pprint-tab :section-relative @param{n} @param{m})}.


@subsubsection Tilde Less-Than-Sign: Justification
@anchor{TildeLessThanJustification}
@cindex Less-Than-Sign (format directive)
@cindex Tilde Less-Than-Sign (format directive)

@f{@tild{}@j{mincol},@j{colinc},@j{minpad},@j{padchar}<@j{str}@tild{}>}

This justifies the text produced by processing @j{str}
within a field at least @j{mincol} columns wide.  @j{str}
may be divided up into segments with @f{@tild{};}, in which case the
spacing is evenly divided between the text segments.

With no modifiers, the leftmost text segment is left justified in the
field, and the rightmost text segment is right justified.  If there is
only one text element, as a special case, it is right justified.
The @f{:} modifier causes                                            
spacing to be introduced before the first text segment;  the 
@f{@@} modifier causes spacing to be added after the last.
The @j{minpad} parameter (default @f{0}) is the minimum number of
padding characters to be output between each segment.
The padding character is supplied by @j{padchar},
which defaults to the space character.
If the total width needed to satisfy these constraints is greater
than @j{mincol}, then the width used is @j{mincol}+@j{k}*@j{colinc}
for the smallest possible non-negative integer value @j{k}.
@j{colinc} defaults to @f{1}, and @j{mincol} defaults to @f{0}.

Note that @j{str} may include @code{format} directives.
All the clauses in @j{str} are processed in order;
it is the resulting pieces of text that are justified.

The @f{@tild{}@hat{} } directive may be used to terminate processing of the
clauses prematurely, in which case only the completely processed clauses
are justified.

If the first clause of a @f{@tild{}<} 
is terminated with @f{@tild{}:;} instead of
@f{@tild{};}, then it is used in a special way.  All of the clauses are
processed (subject to @f{@tild{}@hat{} }, of course), but the 
first one is not used
in performing the spacing and padding.  When the padded result has been
determined, then if it will fit on the current line of output, it is
output, and the text for the first clause is discarded.  If, however, the
padded text will not fit on the current line, then the text segment for
the first clause is output before the padded text.  The first clause
ought to contain a newline (such as a @f{@tild{}@percent{}} directive).  The first
clause is always processed, and so any arguments it refers to will be
used; the decision is whether to use the resulting segment of text, not
whether to process the first clause.  If the @f{@tild{}:;} has a prefix
parameter @j{n}, then the padded text must fit on the current line with
@j{n} character positions to spare to avoid outputting the first clause's
text.  For example, the control string

@lisp
 "~%;; ~@lbr{}@spc{}~<~%;; ~1:; ~S~>~@hat{}@spc{},~@rbr{}@spc{}.~%"
@end lisp


can be used to print a list of items separated by commas without
breaking items over line boundaries, beginning each line with
@f{;; }.  The prefix parameter 
@f{1} in @f{@tild{}1:;} accounts for the width of the
comma that will follow the justified item if it is not the last
element in the list, or the period 
if it is.  If @f{@tild{}:;} has a second
prefix parameter, then it is used as the width of the line,
thus overriding the natural line width of the output stream.  To make
the preceding example use a line width of 50, one would write

@lisp
 "~%;; ~@lbr{}@spc{}~<~%;; ~1,50:; ~S~>~@hat{}@spc{},~@rbr{} @spc{}.~%"
@end lisp

If the second argument is not supplied, then @code{format} uses the
line width of the @param{destination} output stream.
If this cannot be determined (for example, when producing a 
@term{string} result), then @code{format} uses @f{72} as the line length.

See also @ref{TildeLessThanLogicalBlock, Section 22.3.5.2 (Tilde Less-Than-Sign. Logical Block)}.


@subsubsection Tilde Greater-Than-Sign: End of Justification
@cindex Greater-Than-Sign (format directive)
@cindex Tilde Greater-Than-Sign (format directive)

@f{@tild{}>} terminates a @f{@tild{}<}.
The consequences of using it elsewhere are undefined.



@node FORMAT Control-Flow Operations
@subsection FORMAT Control-Flow Operations

@subsubsection Tilde Asterisk: Go-To
@cindex Asterisk (format directive)
@cindex Tilde Asterisk (format directive)


The next @j{arg} is ignored.
@f{@tild{}@j{n}*} ignores the next @j{n} arguments.

@f{@tild{}:*} backs up in the list of
arguments so that the argument last processed will be processed again.
@f{@tild{}@j{n}:*} backs up @j{n} arguments.

When within a @f{@tild{}@lcurly{}} construct
(see below), the ignoring (in either direction) is relative to the list
of arguments being processed by the iteration.

@f{@tild{}@j{n}@@*} 
goes to the @j{n}th @j{arg}, where 0 means the first one;
@j{n} defaults to 0, so @f{@tild{}@@*} goes back to the first @j{arg}.      
Directives after a @f{@tild{}@j{n}@@*}
will take arguments in sequence beginning with the one gone to.
When within a @f{@tild{}@lcurly{}} construct, the ``goto''
is relative to the list of arguments being processed by the iteration.


@subsubsection Tilde Left-Bracket: Conditional Expression
@cindex Left-Bracket (format directive)
@cindex Tilde Left-Bracket (format directive)

@f{@tild{}[@j{str0}@tild{};@j{str1}@tild{};@j{...}@tild{};@j{strn}@tild{}]}

This is a set of control strings, called @j{clauses}, one of which is
chosen and used.  The clauses are separated by @f{@tild{};}
and the construct is terminated by @f{@tild{}]}.  For example,

@f{"@tild{}[Siamese@tild{};Manx@tild{};Persian@tild{}] Cat"}

The @j{arg}th
clause is selected, where the first clause is number 0.
If a prefix parameter is given (as @f{@tild{}@j{n}[}),
then the parameter is used instead of an argument.    
If @j{arg} is out of range then no clause is selected
and no error is signaled.
After the selected alternative has been processed, the control string
continues after the @f{@tild{}]}.

@f{@tild{}[@j{str0}@tild{};@j{str1}@tild{};@j{...}@tild{};@j{strn}@tild{}:;@j{default}@tild{}]}
has a default case.
If the @j{last} @f{@tild{};} used to separate clauses
is @f{@tild{}:;} instead, then the last clause is an else clause
that is performed if no other clause is selected.
For example:

@f{"@tild{}[Siamese@tild{};Manx@tild{};Persian@tild{}:;Alley@tild{}] Cat"}

@f{@tild{}:[@param{alternative}@tild{};@param{consequent}@tild{}]} 
selects the @param{alternative} control string if @j{arg} is @term{false},
and selects the @param{consequent} control string otherwise.

@f{@tild{}@@[@param{consequent}@tild{}]} 
tests the argument.  If it is @term{true},           
then the argument is not used up by the @f{@tild{}[} command
but remains as the next one to be processed,
and the one clause @param{consequent} is processed.
If the @j{arg} is @term{false}, then the argument is used up,
and the clause is not processed.
The clause therefore should normally use exactly one argument,
and may expect it to be @term{non-nil}.
For example:

@lisp
 (setq *print-level* nil *print-length* 5)
 (format nil
        "~@@[ print level = ~D~]~@@[ print length = ~D~]"
        *print-level* *print-length*)
@EV{}  " print length = 5"
@end lisp


Note also that

@lisp
 (format @param{stream} "...~@@[@param{str}~]..." ...)
@EQ{} (format @param{stream} "...~:[~;~:*@param{str}~]..." ...)
@end lisp


The combination of @f{@tild{}[} and @f{#} is useful, for
example, for dealing with English conventions for printing lists:

@lisp
 (setq foo "Items:~#[ none~; ~S~; ~S and ~S~
           ~:;~@@@lcurly{}~#[~; and~] ~S~@hat{}@spc{},~@rcurly{}~].")
 (format nil foo) @EV{}  "Items: none."
 (format nil foo 'foo) @EV{}  "Items: FOO."
 (format nil foo 'foo 'bar) @EV{}  "Items: FOO and BAR."
 (format nil foo 'foo 'bar 'baz) @EV{}  "Items: FOO, BAR, and BAZ."
 (format nil foo 'foo 'bar 'baz 'quux) @EV{}  "Items: FOO, BAR, BAZ, and QUUX."
@end lisp



@subsubsection Tilde Right-Bracket: End of Conditional Expression
@cindex Right-Bracket (format directive)
@cindex Tilde Right-Bracket (format directive)

@f{@tild{}]} terminates a @f{@tild{}[}.
The consequences of using it elsewhere are undefined.


@subsubsection Tilde Left-Brace: Iteration
@cindex Left-Brace (format directive)
@cindex Tilde Left-Brace (format directive)

@f{@tild{}@lcurly{}@j{str}@tild{}@rcurly{}}

This is an iteration construct.  The argument should be a @term{list},
which is used as a set of arguments 
as if for a recursive call to @code{format}.
The @term{string} @j{str} is used repeatedly as the control string.
Each iteration can absorb as many elements of the @term{list} as it likes
as arguments;
if @j{str} uses up two arguments by itself, then two elements of the
@term{list} will get used up each time around the loop.
If before any iteration step the @term{list} 
is empty, then the iteration is terminated.
Also, if a prefix parameter @j{n} is given, then there will be at most @j{n}
repetitions of processing of @j{str}.  
Finally, the @f{@tild{}@hat{} } directive can be
used to terminate the iteration prematurely.

For example:

@lisp
 (format nil "The winners are:~@lcurly{} ~S~@rcurly{}." 
         '(fred harry jill)) 
@EV{} "The winners are: FRED HARRY JILL."                           
 (format nil "Pairs:~@lcurly{} <~S,~S>~@rcurly{}." 
         '(a 1 b 2 c 3))
@EV{} "Pairs: <A,1> <B,2> <C,3>."
@end lisp


@f{@tild{}:@lbr{} @j{str}@tild{}@rbr{}  } is similar, 
but the argument should be a @term{list} of sublists.
At each repetition step, one sublist 
is used as the set of arguments for
processing @j{str}; on the next repetition, a new sublist 
is used, whether
or not all of the last sublist had been processed.  
For example:



@lisp
 (format nil "Pairs:~:@lbr{} <~S,~S>~@rbr{}@spc{}." 
                 '((a 1) (b 2) (c 3)))
@EV{} "Pairs: <A,1> <B,2> <C,3>."
@end lisp


@f{@tild{}@@@lbr{} @j{str}@tild{}@rbr{} }
is similar to @f{@tild{}@lbr{} @j{str}@tild{}@rbr{}  }, but instead of
using one argument that is a list, all the remaining arguments
are used as the list of arguments for the iteration.
Example:

@lisp
 (format nil "Pairs:~@@@lbr{} <~S,~S>~@rbr{}@spc{}." 'a 1 'b 2 'c 3)
@EV{} "Pairs: <A,1> <B,2> <C,3>."
@end lisp

If the iteration is terminated before all the remaining arguments are
consumed, then any arguments not processed by the iteration remain to be
processed by any directives following the iteration construct.

@f{@tild{}:@@@lbr{} @j{str}@tild{}@rbr{}  } 
combines the features                              
of @f{@tild{}:@lbr{} @j{str}@tild{}@rbr{}  }
and @f{@tild{}@@@lbr{} @j{str}@tild{}@rbr{}  }.
All the remaining arguments
are used, and each one must be a @term{list}.
On each iteration, the next argument is 
used as a @term{list} of arguments to @j{str}.
Example:

@lisp
 (format nil "Pairs:~:@@@lbr{} <~S,~S>~@rbr{}@spc{}." 
              '(a 1) '(b 2) '(c 3)) 
@EV{} "Pairs: <A,1> <B,2> <C,3>."
@end lisp

Terminating the repetition construct with @f{@tild{}:@rbr{} } 
instead of @f{@tild{}@rbr{}  }
forces @j{str} to be processed at least once, even if the initial
list of arguments is null. However, this will not override an explicit
prefix parameter of zero.

If @j{str} is empty, then an argument is used as @j{str}.  
It must be a @term{format control}
and precede any arguments processed by the iteration.  As an example,
the following are equivalent:

@lisp
    (apply #'format stream string arguments)
 @EQ{} (format stream "~1@lcurly{}~:@rcurly{}" string arguments)
@end lisp


This will use @f{string} as a formatting string.  
The @f{@tild{}1@lbr{} } says it will                 
be processed at most once, and the @f{@tild{}:@rbr{} } 
says it will be processed at least once.
Therefore it is processed exactly once, using @f{arguments} as the arguments.
This case may be handled more clearly by the @f{@tild{}?} directive,
but this general feature of @f{@tild{}@lbr{}  }
is more powerful than @f{@tild{}?}.


@subsubsection Tilde Right-Brace: End of Iteration
@cindex Right-Brace (format directive)
@cindex Tilde Right-Brace (format directive)


@f{@tild{}@rcurly{}} terminates a @f{@tild{}@lcurly{}}.
The consequences of using it elsewhere are undefined.


@subsubsection Tilde Question-Mark: Recursive Processing
@cindex Question-Mark (format directive)
@cindex Tilde Question-Mark (format directive)

The next @j{arg} must be a @term{format control}, and the one after it a @term{list};
both are consumed by the @f{@tild{}?} directive.
The two are processed as a @param{control-string}, with the elements of the @term{list} 
as the arguments.  Once the recursive processing
has been finished, the processing of the control
string containing the @f{@tild{}?} directive is resumed.
Example:

@lisp
 (format nil "~? ~D" "<~A ~D>" '("Foo" 5) 7) @EV{} "<Foo 5> 7"
 (format nil "~? ~D" "<~A ~D>" '("Foo" 5 14) 7) @EV{} "<Foo 5> 7"
@end lisp

Note that in the second example three arguments are supplied
to the @term{format string} @f{"<@tild{}A @tild{}D>"}, but only two are processed
and the third is therefore ignored.

With the @f{@@}
modifier, only one @j{arg} is directly consumed.
The @j{arg} must be a @term{string}; 
it is processed as part of the control
string as if it had appeared in place of the @f{@tild{}@@?} construct,
and any directives in the recursively processed control string may      
consume arguments of the control string containing the @f{@tild{}@@?}
directive.
Example:

@lisp
 (format nil "~@@? ~D" "<~A ~D>" "Foo" 5 7) @EV{} "<Foo 5> 7"
 (format nil "~@@? ~D" "<~A ~D>" "Foo" 5 14 7) @EV{} "<Foo 5> 14"
@end lisp




@node FORMAT Miscellaneous Operations
@subsection FORMAT Miscellaneous Operations

@subsubsection Tilde Left-Paren: Case Conversion
@cindex Left-Paren (format directive)
@cindex Tilde Left-Paren (format directive)

@f{@tild{}(@j{str}@tild{})}

The contained control string @j{str} is processed, and what it produces
is subject to case conversion.

With no flags, every @term{uppercase} @term{character}
is converted to the corresponding @term{lowercase} @term{character}.

@f{@tild{}:(} capitalizes all words, as if by @code{string-capitalize}.

@f{@tild{}@@(} 
capitalizes just the first word and forces the rest to lower
case.

@f{@tild{}:@@(} converts every lowercase character
to the corresponding uppercase character.

In this example @f{@tild{}@@(} is used to cause the first word
produced by @f{@tild{}@@R} to be capitalized:

@lisp
 (format nil "~@@R ~(~@@R~)" 14 14) 
@EV{} "XIV xiv"
 (defun f (n) (format nil "~@@(~R~) error~:P detected." n)) @EV{} F
 (f 0) @EV{} "Zero errors detected."
 (f 1) @EV{} "One error detected."
 (f 23) @EV{} "Twenty-three errors detected."
@end lisp


When case conversions appear nested, the outer conversion dominates,
as illustrated in the following example:

@lisp
 (format nil "~@@(how is ~:(BOB SMITH~)?~)")
 @EV{} "How is bob smith?"
 @NV{} "How is Bob Smith?"
@end lisp



@subsubsection Tilde Right-Paren: End of Case Conversion
@cindex Right-Paren (format directive)
@cindex Tilde Right-Paren (format directive)

@f{@tild{})} terminates a @f{@tild{}(}.
The consequences of using it elsewhere are undefined.


@subsubsection Tilde P: Plural
@cindex P (format directive)
@cindex Tilde P (format directive)

If @j{arg} is not @code{eql} 
to the integer @f{1}, a lowercase @f{s} is
printed; if @j{arg} is @code{eql} to @f{1}, nothing is printed.  
If @j{arg} is a floating-point @f{1.0}, the @f{s} is
printed.

@f{@tild{}:P} does the same thing, 
after doing a @f{@tild{}:*} to back up one argument;
that is, it prints a lowercase @f{s} if the previous argument was not
@f{1}.  

@f{@tild{}@@P} 
prints @f{y} if the argument is @f{1}, or @f{ies} if it is
not.  @f{@tild{}:@@P} does the same thing, but backs up first.

@lisp
 (format nil "~D tr~:@@P/~D win~:P" 7 1) @EV{} "7 tries/1 win"
 (format nil "~D tr~:@@P/~D win~:P" 1 0) @EV{} "1 try/0 wins"
 (format nil "~D tr~:@@P/~D win~:P" 1 3) @EV{} "1 try/3 wins"
@end lisp




@node FORMAT Miscellaneous Pseudo-Operations
@subsection FORMAT Miscellaneous Pseudo-Operations

@subsubsection Tilde Semicolon: Clause Separator
@cindex Semicolon (format directive)
@cindex Tilde Semicolon (format directive)

This separates clauses in @f{@tild{}[} and @f{@tild{}<} constructs.
The consequences of using it elsewhere are undefined.


@subsubsection Tilde Circumflex: Escape Upward
@cindex Circumflex (format directive)
@cindex Tilde Circumflex (format directive)

@f{@tild{}@hat{} }

This is an escape construct.  If there are no more arguments remaining to
be processed, then the immediately           
enclosing @f{@tild{}@lbr{}  } or @f{@tild{}<} construct
is terminated.  If there is no such enclosing construct, then the entire
formatting operation is terminated.  
In the @f{@tild{}<} case, the formatting
is performed, but no more segments are processed before doing the
justification.     
@f{@tild{}@hat{} } may appear anywhere in a @f{@tild{}@lbr{}  }
construct.

@lisp
 (setq donestr "Done.~@hat{} ~D warning~:P.~@hat{} ~D error~:P.")
@EV{} "Done.~@hat{} ~D warning~:P.~@hat{} ~D error~:P."
 (format nil donestr) @EV{} "Done."
 (format nil donestr 3) @EV{} "Done. 3 warnings."
 (format nil donestr 1 5) @EV{} "Done. 1 warning. 5 errors."
@end lisp


If a prefix parameter is given, then termination occurs if the parameter
is zero.  (Hence @f{@tild{}@hat{}} is equivalent to 
@f{@tild{}#@hat{}}.)  If two
parameters are given, termination occurs if they are equal.
@reviewer{Barmar: Which equality predicate?}  If three
parameters are given, termination occurs if the first is less than or
equal to the second and the second is less than or equal to the third.
Of course, this is useless if all the prefix parameters are constants; at
least one of them should be a @f{#} or a @f{V} parameter.

If @f{@tild{}@hat{}} is used within a @f{@tild{}:@lbr{}  } 
construct, then it terminates
the current iteration step because in the standard case it tests for
remaining arguments of the current step only; the next iteration step
commences immediately.  @f{@tild{}:@hat{}} is used to terminate
the iteration process.
@f{@tild{}:@hat{}} 
may be used only if the command it would terminate is 
@f{@tild{}:@lbr{}  } or @f{@tild{}:@@@lbr{}  }.
The entire iteration process is terminated if and only if the sublist that is
supplying the arguments for the current iteration step is the last sublist in
the case of @f{@tild{}:@lbr{} }, 
or the last @code{format}        
argument in the case of @f{@tild{}:@@@lbr{}  }. 
@f{@tild{}:@hat{}} is not
equivalent to @f{@tild{}#:@hat{}}; 
the latter terminates the entire iteration if and only if no
arguments remain for the current iteration step.
For example:

@lisp
 (format nil "~:@lbr{}@spc{}~@@?~:@hat{}@spc{}...~@rbr{}@spc{}" '(("a") ("b"))) @EV{} "a...b"
@end lisp


If @f{@tild{}@hat{}} appears within a control string being processed
under the control of a @f{@tild{}?} directive, but not within
any @f{@tild{}@lbr{}  } or @f{@tild{}<} construct within that string,
then the string being
processed will be terminated, thereby ending processing
of the @f{@tild{}?} directive.  Processing then
continues within the string   
containing the @f{@tild{}?} directive at the point following that directive.

If @f{@tild{}@hat{}}                                          
appears within a @f{@tild{}[} or @f{@tild{}(} construct,
then all the commands up to the @f{@tild{}@hat{}} are properly selected
or case-converted,                   
the @f{@tild{}[} or @f{@tild{}(} processing is terminated,
and the outward search continues         
for a @f{@tild{}@lbr{}  } or @f{@tild{}<} construct
to be terminated.  For example:

@lisp
 (setq tellstr "~@@(~@@[~R~]~@hat{} ~A!~)")
@EV{} "~@@(~@@[~R~]~@hat{} ~A!~)"
 (format nil tellstr 23) @EV{} "Twenty-three!"
 (format nil tellstr nil "losers") @EV{} " Losers!"
 (format nil tellstr 23 "losers") @EV{} "Twenty-three losers!"
@end lisp


Following are examples of the use of @f{@tild{}@hat{}} 
within a @f{@tild{}<} construct.

@lisp
 (format nil "~15<~S~;~@hat{}~S~;~@hat{}~S~>" 'foo)
@EV{}  "            FOO"
 (format nil "~15<~S~;~@hat{}~S~;~@hat{}~S~>" 'foo 'bar)
@EV{}  "FOO         BAR"
 (format nil "~15<~S~;~@hat{}~S~;~@hat{}~S~>" 'foo 'bar 'baz)
@EV{}  "FOO   BAR   BAZ"
@end lisp



@subsubsection Tilde Newline: Ignored Newline
@cindex Newline (format directive)
@cindex Tilde Newline (format directive)

@term{Tilde} immediately followed by a @term{newline} ignores the @term{newline}
and any following non-newline @term{whitespace}@sub1{} characters.
With a @f{:},
the @term{newline} is ignored, 
but any following @term{whitespace}@sub1{} is left in place.
With an @f{@@},
the @term{newline} is left in place,
but any following @term{whitespace}@sub1{} is ignored.
For example:

@lisp
 (defun type-clash-error (fn nargs argnum right-type wrong-type)
   (format *error-output*
           "~&~S requires its ~:[~:R~;~*~]~ 
           argument to be of type ~S,~%but it was called ~
           with an argument of type ~S.~%"
           fn (eql nargs 1) argnum right-type wrong-type))
 (type-clash-error 'aref nil 2 'integer 'vector)  prints:
AREF requires its second argument to be of type INTEGER,
but it was called with an argument of type VECTOR.
NIL
 (type-clash-error 'car 1 1 'list 'short-float)  prints:
CAR requires its argument to be of type LIST,
but it was called with an argument of type SHORT-FLOAT.
NIL
@end lisp

Note that in this example newlines appear in the output only as specified
by the @f{@tild{}@ampers{}} and @f{@tild{}@percent{}} directives; the 
actual newline characters
in the control string are suppressed because each is preceded by a tilde.



@node Additional Information about FORMAT Operations
@subsection Additional Information about FORMAT Operations

@subsubsection Nesting of FORMAT Operations

The case-conversion, conditional, iteration, and justification
constructs can contain other formatting constructs by bracketing them.
These constructs must nest properly with respect to each other.
For example, it is not legitimate to put the start of a case-conversion
construct in each arm of a conditional and the
end of the case-conversion construct outside the conditional:

@lisp
 (format nil "~:[abc~:@@(def~;ghi~
:@@(jkl~]mno~)" x) ;Invalid!
@end lisp

This notation is invalid because the @f{@tild{}[...@tild{};...@tild{}]}
and @f{@tild{}(...@tild{})} constructs are not properly nested.

The processing indirection caused by the @f{@tild{}?} directive
is also a kind of nesting for the purposes of this rule of proper nesting.
It is not permitted to
start a bracketing construct within a string processed
under control of a @f{@tild{}?}                                      
directive and end the construct at some point after the @f{@tild{}?} construct
in the string containing that construct, or vice versa.
For example, this situation is invalid:

@lisp
 (format nil "~@@?ghi~)" "abc~@@(def") ;Invalid!
@end lisp

This notation
is invalid because the @f{@tild{}?}
and @f{@tild{}(...@tild{})} constructs are not properly nested.


@subsubsection Missing and Additional FORMAT Arguments

The consequences are undefined if no @param{arg} remains for a directive 
requiring an argument.  However, it is permissible for one or more @param{args} 
to remain unprocessed by a directive; such @param{args} are ignored.


@subsubsection Additional FORMAT Parameters

The consequences are undefined if a format directive is given more parameters 
than it is described here as accepting.


@subsubsection Undefined FORMAT Modifier Combinations

The consequences are undefined if @term{colon} or @term{at-sign} modifiers
are given to a directive in a combination not specifically described
here as being meaningful.



@node Examples of FORMAT
@subsection Examples of FORMAT

@lisp
 (format nil "foo") @EV{} "foo"
 (setq x 5) @EV{} 5
 (format nil "The answer is ~D." x) @EV{} "The answer is 5."
 (format nil "The answer is ~3D." x) @EV{} "The answer is   5."
 (format nil "The answer is ~3,'0D." x) @EV{} "The answer is 005."
 (format nil "The answer is ~:D." (expt 47 x))
@EV{} "The answer is 229,345,007."
 (setq y "elephant") @EV{} "elephant"
 (format nil "Look at the ~A!" y) @EV{} "Look at the elephant!"
 (setq n 3) @EV{} 3
 (format nil "~D item~:P found." n) @EV{} "3 items found."
 (format nil "~R dog~:[s are~; is~] here." n (= n 1))
@EV{} "three dogs are here."
 (format nil "~R dog~:*~[s are~; is~:;s are~] here." n)
@EV{} "three dogs are here."
 (format nil "Here ~[are~;is~:;are~] ~:*~R pupp~:@@P." n)
@EV{} "Here are three puppies."
@end lisp

@lisp
 (defun foo (x)
   (format nil "~6,2F|~6,2,1,'*F|~6,2,,'?F|~6F|~,2F|~F"
           x x x x x x)) @EV{} FOO
 (foo 3.14159)  @EV{} "  3.14| 31.42|  3.14|3.1416|3.14|3.14159"
 (foo -3.14159) @EV{} " -3.14|-31.42| -3.14|-3.142|-3.14|-3.14159"
 (foo 100.0)    @EV{} "100.00|******|100.00| 100.0|100.00|100.0"
 (foo 1234.0)   @EV{} "1234.00|******|??????|1234.0|1234.00|1234.0"
 (foo 0.006)    @EV{} "  0.01|  0.06|  0.01| 0.006|0.01|0.006"
@end lisp

@lisp
 (defun foo (x)  
    (format nil
           "~9,2,1,,'*E|~10,3,2,2,'?,,'@dollar{}E|~
            ~9,3,2,-2,'%@@E|~9,2E"
           x x x x))
 (foo 3.14159)  @EV{} "  3.14E+0| 31.42@dollar{}-01|+.003E+03|  3.14E+0"
 (foo -3.14159) @EV{} " -3.14E+0|-31.42@dollar{}-01|-.003E+03| -3.14E+0"
 (foo 1100.0)   @EV{} "  1.10E+3| 11.00@dollar{}+02|+.001E+06|  1.10E+3"
 (foo 1100.0L0) @EV{} "  1.10L+3| 11.00@dollar{}+02|+.001L+06|  1.10L+3"
 (foo 1.1E13)   @EV{} "*********| 11.00@dollar{}+12|+.001E+16| 1.10E+13"
 (foo 1.1L120)  @EV{} "*********|??????????|%%%%%%%%%|1.10L+120"
 (foo 1.1L1200) @EV{} "*********|??????????|%%%%%%%%%|1.10L+1200"
@end lisp

As an example of the effects of varying the scale factor, the code

@lisp
 (dotimes (k 13)
   (format t "~%Scale factor ~2D: |~13,6,2,VE|"
           (- k 5) (- k 5) 3.14159))
@end lisp

produces the following output:

@lisp
Scale factor -5: | 0.000003E+06|
Scale factor -4: | 0.000031E+05|
Scale factor -3: | 0.000314E+04|
Scale factor -2: | 0.003142E+03|
Scale factor -1: | 0.031416E+02|
Scale factor  0: | 0.314159E+01|
Scale factor  1: | 3.141590E+00|
Scale factor  2: | 31.41590E-01|
Scale factor  3: | 314.1590E-02|
Scale factor  4: | 3141.590E-03|
Scale factor  5: | 31415.90E-04|
Scale factor  6: | 314159.0E-05|
Scale factor  7: | 3141590.E-06|
@end lisp


@lisp
 (defun foo (x)
   (format nil "~9,2,1,,'*G|~9,3,2,3,'?,,'@dollar{}G|~9,3,2,0,'%G|~9,2G"
          x x x x))                                     
 (foo 0.0314159) @EV{} "  3.14E-2|314.2@dollar{}-04|0.314E-01|  3.14E-2"
 (foo 0.314159)  @EV{} "  0.31   |0.314    |0.314    | 0.31    "
 (foo 3.14159)   @EV{} "   3.1   | 3.14    | 3.14    |  3.1    "
 (foo 31.4159)   @EV{} "   31.   | 31.4    | 31.4    |  31.    "
 (foo 314.159)   @EV{} "  3.14E+2| 314.    | 314.    |  3.14E+2"
 (foo 3141.59)   @EV{} "  3.14E+3|314.2@dollar{}+01|0.314E+04|  3.14E+3"
 (foo 3141.59L0) @EV{} "  3.14L+3|314.2@dollar{}+01|0.314L+04|  3.14L+3"
 (foo 3.14E12)   @EV{} "*********|314.0@dollar{}+10|0.314E+13| 3.14E+12"
 (foo 3.14L120)  @EV{} "*********|?????????|%%%%%%%%%|3.14L+120"
 (foo 3.14L1200) @EV{} "*********|?????????|%%%%%%%%%|3.14L+1200"
@end lisp


@lisp
 (format nil "~10<foo~;bar~>")   @EV{} "foo    bar"
 (format nil "~10:<foo~;bar~>")  @EV{} "  foo  bar"
 (format nil "~10<foobar~>")     @EV{} "    foobar"
 (format nil "~10:<foobar~>")    @EV{} "    foobar"
 (format nil "~10:@@<foo~;bar~>") @EV{} "  foo bar "
 (format nil "~10@@<foobar~>")    @EV{} "foobar    "
 (format nil "~10:@@<foobar~>")   @EV{} "  foobar  "
@end lisp


@lisp
  (FORMAT NIL "Written to ~A." #P"foo.bin")
  @EV{} "Written to foo.bin."
@end lisp



@node Notes about FORMAT
@subsection Notes about FORMAT

Formatted output is performed not only by @code{format},
but by certain other functions that accept a @term{format control}
the way @code{format} does.  For example, error-signaling functions
such as @code{cerror} accept @term{format controls}.

Note that the meaning of @nil{}@spc{}and @code{t}@spc{}as destinations to @code{format} 
are different than those of @nil{}@spc{}and @code{t}@spc{}as @term{stream designators}.

The @f{@tild{}@hat{}} should appear only at the beginning of a @f{@tild{}<} clause,
because it aborts the entire clause in which it appears (as well as
all following clauses).                                     


@node copy-pprint-dispatch
@heading copy-pprint-dispatch (Function)
@syindex copy-pprint-dispatch
@cindex copy-pprint-dispatch



@subsubheading Syntax:

@DefunWithValues{copy-pprint-dispatch, @opt{} table, new-table}

@subsubheading Arguments and Values:

@param{table}---a @term{pprint dispatch table}, or @nil{}.

@param{new-table}---a @term{fresh} @term{pprint dispatch table}.

@subsubheading Description:

Creates and returns a copy of the specified @param{table}, 
or of @thevalueof{*print-pprint-dispatch*} if no @param{table} is specified,
or of the initial @term{value} of @code{*print-pprint-dispatch*} if @nil{}@spc{}is specified.

@subsubheading Exceptional Situations:

Should signal an error @oftype{type-error} if @param{table} 
is not a @term{pprint dispatch table}.



@node formatter
@heading formatter (Macro)
@syindex formatter
@cindex formatter



@subsubheading Syntax:

@DefmacWithValues{formatter, control-string, function}

@subsubheading Arguments and Values:

@param{control-string}---a @term{format string}; @noeval{}.

@param{function}---a @term{function}.

@subsubheading Description:

Returns a @term{function} which has behavior equivalent to:

@lisp
  #'(lambda (*standard-output* &rest arguments)
      (apply #'format t @i{control-string} arguments)
      @i{arguments-tail})
@end lisp


where @i{arguments-tail} is either the tail of @i{arguments} 
which has as its @term{car} the argument that would be processed next 
if there were more format directives in the @param{control-string}, 
or else @nil{}@spc{}if no more @i{arguments} follow the most recently
processed argument.

@subsubheading Examples:

@lisp
(funcall (formatter "~&~A~A") *standard-output* 'a 'b 'c)
@OUT{} AB
@EV{} (C)

(format t (formatter "~&~A~A") 'a 'b 'c)
@OUT{} AB
@EV{} NIL
@end lisp


@subsubheading Exceptional Situations:

Might signal an error (at macro expansion time or at run time) if the argument
is not a valid @term{format string}.

@subsubheading See Also:

@ref{format}



@node pprint-dispatch
@heading pprint-dispatch (Function)
@syindex pprint-dispatch
@cindex pprint-dispatch



@subsubheading Syntax:

@DefunWithValues{pprint-dispatch, object @opt{} table, function\, found-p}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{table}---a @term{pprint dispatch table}, or @nil{}.
@Default{@thevalueof{*print-pprint-dispatch*}}

@param{function}---a @term{function designator}.

@param{found-p}---a @term{generalized boolean}.

@subsubheading Description:

Retrieves the highest priority function in @param{table} that is
associated with a @term{type specifier} that matches @param{object}.
The function is chosen by finding all of the @term{type specifiers} in @param{table}
that match the @param{object} and 
selecting the highest priority function associated with any of these
@term{type specifiers}.  If there is more than one highest priority function,
an arbitrary choice is made.  If no @term{type specifiers} match the 
@param{object}, a function is returned that prints @param{object} 
using @code{print-object}.

The @term{secondary value}, @param{found-p}, is @term{true} if a matching
@term{type specifier} was found in @param{table}, or @term{false} otherwise.

If @param{table} is @nil{},
retrieval is done in the
@term{initial pprint dispatch table}.

@subsubheading Affected By:

The state of the @param{table}.

@subsubheading Exceptional Situations:

Should signal an error @oftype{type-error} if @term{table} is neither a
@term{pprint-dispatch-table} nor @nil{}.

@subsubheading Notes:

@lisp
(let ((*print-pretty* t))
  (write object :stream s))
@EQ{} (funcall (pprint-dispatch object) s object)
@end lisp




@node pprint-exit-if-list-exhausted
@heading pprint-exit-if-list-exhausted (Local Macro)
@syindex pprint-exit-if-list-exhausted
@cindex pprint-exit-if-list-exhausted



@subsubheading Syntax:

@DefmacWithValues{pprint-exit-if-list-exhausted, @noargs{}, @nil{}}

@subsubheading Description:

Tests whether or not the @param{list} passed to 
the @term{lexically current logical block}
has been exhausted; see @ref{DynamicControlofOutput, Section 22.2.1.1 (Dynamic Control of the Arrangement of Output)}.
If this @param{list} has been
reduced to @nil{}, @code{pprint-exit-if-list-exhausted} terminates the execution
of the @term{lexically current logical block} except for the printing
of the suffix.  Otherwise @code{pprint-exit-if-list-exhausted} returns @nil{}. 

Whether or not @code{pprint-exit-if-list-exhausted} is @term{fbound} in the
@term{global environment} is @term{implementation-dependent};
however, the restrictions on redefinition and @term{shadowing} of
@code{pprint-exit-if-list-exhausted} are the same as for @term{symbols} in the @code{COMMON-LISP} @term{package}
which are @term{fbound} in the @term{global environment}.
The consequences of attempting to use @code{pprint-exit-if-list-exhausted} outside
of @code{pprint-logical-block} are undefined.

@subsubheading Exceptional Situations:

An error is signaled (at macro expansion time or at run time) if
@code{pprint-exit-if-list-exhausted} is used anywhere other than
lexically within a call on @code{pprint-logical-block}.  
Also, the consequences of executing @code{pprint-if-list-exhausted} outside
of the dynamic extent of the @code{pprint-logical-block} which lexically
contains it are undefined.

@subsubheading See Also:

@ref{pprint-logical-block}, @ref{pprint-pop}.



@node pprint-fill; pprint-linear; pprint-tabular
@heading pprint-fill, pprint-linear, pprint-tabular (Function)
@syindex pprint-fill
@cindex pprint-fill
@syindex pprint-linear
@cindex pprint-linear
@syindex pprint-tabular
@cindex pprint-tabular
@anchor{pprint-fill}



@subsubheading Syntax:

@DefunWithValues{pprint-fill, stream object @opt{} colon-p at-sign-p, @nil{}}
@DefunWithValues{pprint-linear, stream object @opt{} colon-p at-sign-p, @nil{}}
@DefunWithValues{pprint-tabular, stream object @opt{} colon-p at-sign-p tabsize, @nil{}}

@subsubheading Arguments and Values:

@param{stream}---an @term{output} @term{stream designator}.

@param{object}---an @term{object}.

@param{colon-p}---a @term{generalized boolean}.
@Default{@term{true}}

@param{at-sign-p}---a @term{generalized boolean}.
@Default{@term{implementation-dependent}}

@param{tabsize}---a non-negative @term{integer}.
@Default{@f{16}}

@subsubheading Description:

The functions @code{pprint-fill}, @code{pprint-linear}, and
@code{pprint-tabular} specify particular ways of @term{pretty printing}
a @term{list} to @param{stream}. 
Each function prints parentheses around the output if and only
if @param{colon-p} is @term{true}.
Each function ignores its @param{at-sign-p} argument.
(Both arguments are included even though only one is needed
so that these functions can be used via @formatOp{/.../}
and as @code{set-pprint-dispatch} functions, as well as directly.)
Each function handles abbreviation and the detection of circularity
and sharing correctly, and uses @code{write} to print @param{object}
when it is a @term{non-list}.

If @param{object} is a @term{list} and 
if @thevalueof{*print-pretty*} is @term{false},
each of these functions prints @param{object}
using a minimum of @term{whitespace},
as described in @ref{PrintingListsAndConses, Section 22.1.3.5 (Printing Lists and Conses)}.
Otherwise (if @param{object} is a @term{list} and 
if @thevalueof{*print-pretty*} is @term{true}):


@itemize @bullet{}

@item
@Thefunction{pprint-linear} prints a @term{list} either all on one line, 
or with each @term{element} on a separate line.  

@item
@Thefunction{pprint-fill} prints a @term{list} with as many @term{elements}
as possible on each line.

@item
@Thefunction{pprint-tabular} is the same as @code{pprint-fill}
except that it prints the @term{elements} so that they line up in columns.
The @param{tabsize} specifies the column spacing in @term{ems},
which is the total spacing from the leading edge of one column to
the leading edge of the next.
@end itemize



@subsubheading Examples:

Evaluating the following with a line length of @f{25} produces the output shown.

@lisp
(progn (princ "Roads ") 
       (pprint-tabular *standard-output* '(elm main maple center) nil nil 8))
Roads ELM     MAIN
      MAPLE   CENTER
@end lisp


@subsubheading Side Effects:

Performs output to the indicated @term{stream}.

@subsubheading Affected By:

The cursor position on the indicated @term{stream}, if it can be determined.

@subsubheading Notes:

@Thefunction{pprint-tabular} could be defined as follows:

@lisp
(defun pprint-tabular (s list &optional (colon-p t) at-sign-p (tabsize nil))
  (declare (ignore at-sign-p))
  (when (null tabsize) (setq tabsize 16))
  (pprint-logical-block (s list :prefix (if colon-p "(" "")
                                :suffix (if colon-p ")" ""))
    (pprint-exit-if-list-exhausted)
    (loop (write (pprint-pop) :stream s)
          (pprint-exit-if-list-exhausted)
          (write-char #@bsl{}Space s)
          (pprint-tab :section-relative 0 tabsize s)
          (pprint-newline :fill s))))
@end lisp


Note that it would have been inconvenient to specify this function
using @code{format}, because of the need to pass its @param{tabsize} argument
through to a @formatdirective{:T} nested within an iteration over a list.



@node pprint-indent
@heading pprint-indent (Function)
@syindex pprint-indent
@cindex pprint-indent



@subsubheading Syntax:

@DefunWithValues{pprint-indent, relative-to n @opt{} stream, @nil{}}

@subsubheading Arguments and Values:

@param{relative-to}---either @kwd{block} or @kwd{current}.

@param{n}---a @term{real}.

@param{stream}---an @term{output} @term{stream designator}.
@Default{@term{standard output}}

@subsubheading Description:

@code{pprint-indent} specifies the indentation to use in a logical block on @term{stream}.
If @param{stream} is a @term{pretty printing stream}
and @thevalueof{*print-pretty*} is @term{true},
@code{pprint-indent} sets the indentation in the innermost 
dynamically enclosing logical block;
otherwise, @code{pprint-indent} has no effect.

@param{N} specifies the indentation in
@term{ems}.  If @param{relative-to} is @kwd{block}, the indentation is set
to the horizontal position of the first character in the @term{dynamically current logical block} plus @param{n} 
@term{ems}. If @param{relative-to} is @kwd{current}, the indentation is set
to the current output position plus @param{n} @term{ems}. (For robustness
in the face of variable-width fonts, it is advisable to use @kwd{current}
with an @param{n} of zero whenever possible.)

@param{N} can be negative;
however, the total indentation cannot be moved 
left of the beginning of the line 
or left of the end of the rightmost per-line prefix---an attempt to move beyond
one of these limits is treated
the same as an attempt to move to that limit.
Changes in indentation caused by @param{pprint-indent}
do not take effect until after the next line break.  In addition, in 
miser mode all calls to @code{pprint-indent} are ignored, forcing the lines 
corresponding to the logical block to line up under the first character in
the block.

@subsubheading Exceptional Situations:

An error is signaled if @param{relative-to} is any @term{object} other
than @kwd{block} or @kwd{current}.

@subsubheading See Also:

@ref{TildeI, Section 22.3.5.3 (Tilde I. Indent)}



@node pprint-logical-block
@heading pprint-logical-block (Macro)
@syindex pprint-logical-block
@cindex pprint-logical-block




@subsubheading Syntax:

@DefmacWithValuesNewline{pprint-logical-block, @vtop{@hbox{@paren{stream-symbol object  @key{} prefix per-line-prefix suffix}} @hbox{@starparam{declaration} @starparam{form}}}, @nil{}}

@subsubheading Arguments and Values:

@param{stream-symbol}---a @term{stream variable designator}.

@param{object}---an @term{object}; @eval{}.

@kwd{prefix}---a @term{string}; @eval{}.
@HairyDefault{}.

@kwd{per-line-prefix}---a @term{string}; @eval{}.
@HairyDefault{}.

@kwd{suffix}---a @term{string}; @eval{}.
@Default{the @term{null} @term{string}}

@param{declaration}---a @t{declare} @term{expression}; @noeval{}.

@param{forms}---an @term{implicit progn}.

@subsubheading Description:

Causes printing to be grouped into a logical block.

The logical block is printed to the @term{stream} that is the @term{value}
of the @term{variable} denoted by @param{stream-symbol}.
During the execution of the @term{forms},
that @term{variable} is @term{bound} to a @term{pretty printing stream}
that supports decisions about the arrangement of output
and then forwards the output to the destination stream.
All the standard printing functions 
(@eg{} @code{write},
@code{princ},
and @code{terpri})
can be used to print output to the @term{pretty printing stream}.
All and only the output sent to this @term{pretty printing stream}
is treated as being in the logical block.

The @param{prefix} specifies a prefix to be printed before the beginning of
the logical block.
The @param{per-line-prefix} specifies a prefix that is printed before the block
and at the beginning of each new line in the block.
The @kwd{prefix} and @kwd{pre-line-prefix} @term{arguments} are mutually exclusive.
If neither @kwd{prefix} nor @kwd{per-line-prefix} is specified,
a @param{prefix} of the @term{null} @term{string} is assumed.

The @param{suffix} specifies a suffix that is printed just after the logical block.

The @param{object} is 
normally 
a @term{list} that the body @param{forms} are responsible for printing.
If @param{object} is not a @term{list},
it is printed using @code{write}.
(This makes it easier to write printing functions that are robust
in the face of malformed arguments.)
If @code{*print-circle*}
is @term{non-nil} and @param{object} is a circular (or shared) reference to a @term{cons},
then an appropriate ``@f{#@i{n}#}'' marker is printed.  (This
makes it easy to write printing functions that provide full support
for circularity and sharing abbreviation.)  If @code{*print-level*} is not
@nil{}@spc{}and the logical block is at a dynamic nesting depth of greater
than @code{*print-level*} in logical blocks, ``@f{#}'' is printed.
(This makes easy to write printing functions that provide full support for depth
abbreviation.)

If either of the three conditions above occurs, the indicated output is
printed on @param{stream-symbol} and the body @param{forms} are skipped 
along with the printing of the @kwd{prefix} and @kwd{suffix}.
(If the body @param{forms} are not to be responsible for printing a list,
then the first two tests above can be turned off by supplying @nil{}@spc{}for
the @param{object} argument.)

In addition to the @param{object} argument of @code{pprint-logical-block},
the arguments of the standard printing functions (such as @code{write}, 
@code{print}, @code{prin1}, and @code{pprint}, as well as the arguments
of the standard @term{format directives} such as @formatOp{A}, @formatOp{S},
(and @formatOp{W}) are all checked (when necessary) for circularity and sharing.
However, such checking is not applied to the arguments of the
functions @code{write-line}, @code{write-string}, and @code{write-char}
or to the literal text output by @code{format}.  A consequence of this is
that you must use one of the latter functions if you want to print some 
literal text in the output that is not supposed to be checked for circularity
or sharing.

The body @param{forms} of a @code{pprint-logical-block} @term{form}
must not perform any side-effects on the surrounding environment; for 
example, no @term{variables} must be assigned which have not been
@term{bound} within its scope.  

@Themacro{pprint-logical-block} may be used regardless of @thevalueof{*print-pretty*}.

@subsubheading Affected By:

@code{*print-circle*}, @code{*print-level*}.

@subsubheading Exceptional Situations:

An error @oftype{type-error} is signaled if any of the @kwd{suffix}, 
@kwd{prefix}, or @kwd{per-line-prefix} is supplied but does not evaluate 
to a @term{string}.

An error is signaled if @kwd{prefix} and @kwd{pre-line-prefix} are both used.

@code{pprint-logical-block} and the @term{pretty printing stream} it creates 
have @term{dynamic extent}.  The consequences are undefined if, outside
of this extent, output is attempted to the @term{pretty printing stream} it creates.

It is also unspecified what happens if, within this extent, any output is 
sent directly to the underlying destination stream.

@subsubheading See Also:

@ref{pprint-pop},
@ref{pprint-exit-if-list-exhausted},
@ref{TildeLessThanLogicalBlock, Section 22.3.5.2 (Tilde Less-Than-Sign. Logical Block)}

@subsubheading Notes:

One reason for using @themacro{pprint-logical-block} when @thevalueof{*print-pretty*}
is @nil{}@spc{}would be to allow it to perform checking for @term{dotted lists}, 
as well as (in conjunction with @code{pprint-pop}) 
checking for @code{*print-level*} or @code{*print-length*} being exceeded.

Detection of circularity and sharing is supported by the @term{pretty printer}
by in essence performing requested output twice.  On the first pass,
circularities and sharing are detected and the actual outputting of characters
is suppressed.  On the second pass, the appropriate ``@f{#@param{n}=}'' 
and ``@f{#@param{n}#}'' markers are inserted and characters are output.
This is why the restriction on side-effects is necessary.
Obeying this restriction is facilitated by using @code{pprint-pop},
instead of an ordinary @code{pop} when traversing a list being printed by 
the body @param{forms} of the @code{pprint-logical-block} @term{form}.)




@node pprint-newline
@heading pprint-newline (Function)
@syindex pprint-newline
@cindex pprint-newline



@subsubheading Syntax:

@DefunWithValues{pprint-newline, kind @opt{} stream, @nil{}}

@subsubheading Arguments and Values:

@param{kind}---one of @kwd{linear}, @kwd{fill}, @kwd{miser}, or @kwd{mandatory}.

@param{stream}---a @term{stream designator}.
@Default{@term{standard output}}

@subsubheading Description:

If @param{stream} is a @term{pretty printing stream}
and @thevalueof{*print-pretty*} is @term{true},
a line break is inserted in the output 
when the appropriate condition below is satisfied;
otherwise, @code{pprint-newline} has no effect.

@param{Kind} specifies the style of conditional newline.
This @term{parameter} is treated as follows:


@table @asis

@item @id{@kwd{linear}}


This specifies a
``linear-style'' @term{conditional newline}.
@cindex linear-style conditional newline
A line break is inserted 
if and only if the immediately containing @term{section}
cannot be printed on one line.
The effect of this is that line breaks are
either inserted at every linear-style conditional newline in a logical block
or at none of them.

@item @id{@kwd{miser}}


This specifies a 
``miser-style'' @term{conditional newline}.
@cindex miser-style conditional newline
A line break is inserted
if and only if the immediately containing @term{section}
cannot be printed on one line
and miser style is in effect in the immediately containing logical block.
The effect of this is that miser-style conditional newlines
act like linear-style conditional newlines,
but only when miser style is in effect.
Miser style is in effect for a logical block if and only if 
the starting position of the logical block
is less than or equal to
@code{*print-miser-width*} @term{ems} from the right margin.

@item @id{@kwd{fill}}


This specifies a
``fill-style'' @term{conditional newline}.
@cindex fill-style conditional newline
A line break is inserted if and only if
either (a) the following @term{section} cannot be printed 
on the end of the current line,
(b) the preceding @term{section} was not printed on a single line,
or (c) the immediately containing @term{section} cannot
be printed on one line and miser style is in effect
in the immediately containing logical block.
If a logical block is broken up into a number of subsections
by fill-style conditional newlines,
the basic effect is that the logical block
is printed with as many subsections as possible on each line.
However, if miser style is in effect,
fill-style conditional newlines act like linear-style conditional newlines.

@item @id{@kwd{mandatory}}


This specifies a
``mandatory-style'' @term{conditional newline}.
@cindex mandatory-style conditional newline
A line break is always inserted.
This implies that  none of the containing @term{sections}
can be printed on a single line and 
will therefore trigger the insertion of line breaks 
at linear-style conditional newlines in these @term{sections}.
@end table


When a line break is inserted by any type of conditional newline, 
any blanks that immediately precede the conditional newline are omitted 
from the output and indentation is introduced at the beginning of the next line.
By default, the indentation causes the following line to begin 
in the same horizontal position 
as the first character in the immediately containing logical block.
(The indentation can be changed via @code{pprint-indent}.)

There are a variety of ways unconditional newlines can be introduced into
the output (@ie{} via @code{terpri} or by printing a string containing a newline
character).  As with mandatory conditional newlines, this prevents any of
the containing @term{sections} from being printed on one line.  In general, when
an unconditional newline is encountered, it is printed out without
suppression of the preceding blanks and without any indentation following
it.  However, if a per-line prefix has been specified (see
@code{pprint-logical-block}), this prefix will always be printed no matter 
how a newline originates.

@subsubheading Examples:

See @ref{Examples of using the Pretty Printer, Section 22.2.2 (Examples of using the Pretty Printer)}.

@subsubheading Side Effects:

Output to @param{stream}.

@subsubheading Affected By:

@code{*print-pretty*}, @code{*print-miser*}.
The presence of containing logical blocks.
The placement of newlines and conditional newlines.

@subsubheading Exceptional Situations:

An error @oftype{type-error} is signaled if @param{kind} 
is not one of @kwd{linear}, @kwd{fill}, @kwd{miser}, or @kwd{mandatory}.

@subsubheading See Also:

@ref{TildeUnderscore, Section 22.3.5.1 (Tilde Underscore. Conditional Newline)},
@ref{Examples of using the Pretty Printer, Section 22.2.2 (Examples of using the Pretty Printer)}



@node pprint-pop
@heading pprint-pop (Local Macro)
@syindex pprint-pop
@cindex pprint-pop



@subsubheading Syntax:

@DefmacWithValues{pprint-pop, @noargs{}, object}

@subsubheading Arguments and Values:

@param{object}---an @term{element} of the @term{list} 
being printed in the @term{lexically current logical block},
or @nil{}.

@subsubheading Description:

Pops one @term{element} from the @term{list} being printed
in the @term{lexically current logical block}, obeying @code{*print-length*}
and @code{*print-circle*} as described below.

Each time @code{pprint-pop} is called, it pops the next value off the
@term{list} passed to the @term{lexically current logical block} and returns it.
However, before doing this, it performs three tests:


@itemize @bullet{}
@item
If the remaining `list' is not a @term{list}, 
``@f{. }''
@cindex dot 
is printed followed by the remaining `list.' 
(This makes it easier to write printing functions that 
are robust in the face of malformed arguments.)

@item
If @code{*print-length*} is @term{non-nil},
and @code{pprint-pop} has already been called @code{*print-length*} times 
within the immediately containing logical block,
``@f{...}''
@cindex Dot Dot Dot
@cindex ... 
is printed.
(This makes it easy to write printing functions that properly handle
@code{*print-length*}.)

@item
If @code{*print-circle*} is
@term{non-nil}, and the remaining list is a circular (or shared) reference,
then ``@f{. }'' is printed followed by an appropriate
``@f{#@i{n}#}''
@cindex Sharpsign Sharpsign (reader macro) 
marker.
(This catches instances of @term{cdr} circularity and sharing in lists.)
@end itemize


If either of the three conditions above occurs, the indicated output is
printed on the @term{pretty printing stream} created by the immediately containing
@code{pprint-logical-block} and the execution of the immediately containing
@code{pprint-logical-block} is terminated except for the printing of the suffix.

If @code{pprint-logical-block} is given a `list' argument of @nil{}---because
it is not processing a list---@code{pprint-pop} can still be used to obtain 
support for @code{*print-length*}.  
In this situation, the first and third tests above are disabled and
@code{pprint-pop} always returns @nil{}.
See @ref{Examples of using the Pretty Printer, Section 22.2.2 (Examples of using the Pretty Printer)}---specifically, the @code{pprint-vector} example.

Whether or not @code{pprint-pop} is @term{fbound} in the
@term{global environment} is @term{implementation-dependent};
however, the restrictions on redefinition and @term{shadowing} of
@code{pprint-pop} are the same as for @term{symbols} in the @code{COMMON-LISP} @term{package}
which are @term{fbound} in the @term{global environment}.
The consequences of attempting to use @code{pprint-pop} outside
of @code{pprint-logical-block} are undefined.

@subsubheading Side Effects:

Might cause output
to the @term{pretty printing stream} associated with the lexically current logical block.

@subsubheading Affected By:

@code{*print-length*}, @code{*print-circle*}.

@subsubheading Exceptional Situations:

An error is signaled (either at macro expansion time or at run time)
if a usage of @code{pprint-pop} occurs where there is no lexically
containing @code{pprint-logical-block} @term{form}.

The consequences are undefined if @code{pprint-pop} is executed outside
of the @term{dynamic extent} of this @code{pprint-logical-block}.

@subsubheading See Also:

@ref{pprint-exit-if-list-exhausted}, @ref{pprint-logical-block}.

@subsubheading Notes:

It is frequently a good idea to call @code{pprint-exit-if-list-exhausted} 
before calling @code{pprint-pop}.



@node pprint-tab
@heading pprint-tab (Function)
@syindex pprint-tab
@cindex pprint-tab



@subsubheading Syntax:

@DefunWithValues{pprint-tab, kind colnum colinc @opt{} stream, @nil{}}

@subsubheading Arguments and Values:

@param{kind}---one of @kwd{line}, @kwd{section}, @kwd{line-relative},
or @kwd{section-relative}.

@param{colnum}---a non-negative @term{integer}.

@param{colinc}---a non-negative @term{integer}.

@param{stream}---an @term{output} @term{stream designator}.

@subsubheading Description:

Specifies tabbing to @param{stream} as performed by the standard @formatdirective{T}.
If @param{stream} is a @term{pretty printing stream} and
@thevalueof{*print-pretty*} is @term{true},
tabbing is performed;
otherwise, @code{pprint-tab} has no effect.

The arguments @param{colnum} and @param{colinc} correspond to the two 
@param{parameters} to @formatOp{T} and are in terms of @term{ems}.
The @param{kind} argument specifies the style of tabbing.  It must be one of
@kwd{line} (tab as by @formatOp{T}),
@kwd{section} (tab as by @formatOp{:T}, 
but measuring horizontal positions relative to 
the start of the dynamically enclosing section),
@kwd{line-relative} (tab as by @formatOp{@@T}), or
@kwd{section-relative} (tab as by @formatOp{:@@T}, 
but measuring horizontal positions relative to
the start of the dynamically enclosing section).

@subsubheading Exceptional Situations:

An error is signaled if @param{kind} is not one of @kwd{line},
@kwd{section}, @kwd{line-relative}, or @kwd{section-relative}.

@subsubheading See Also:

@ref{pprint-logical-block}



@node print-object
@heading print-object (Standard Generic Function)
@syindex print-object
@cindex print-object


@subsubheading Syntax:

@DefgenWithValues{print-object, object stream, object}

@subsubheading Method Signatures:

 print-object @paren{@param{object} standard-object} @param{stream}
 print-object @paren{@param{object} structure-object} @param{stream}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{stream}---a @term{stream}.

@subsubheading Description:

@TheGF{print-object} writes the printed representation of @param{object}
to @param{stream}.
@Thefunction{print-object} is called by the @term{Lisp printer}; 
it should not be called by the user.

Each implementation is required to provide a @term{method} on
@theclass{standard-object} and on @theclass{structure-object}.
In addition, each @term{implementation} must provide 
@term{methods} on enough other @term{classes} 
so as to ensure that there is always an applicable @term{method}.
Implementations are free to add @term{methods} for other @term{classes}.
Users may write @term{methods} for @code{print-object} for their own
@term{classes} if they do not wish to inherit an 
@term{implementation-dependent} @term{method}.

The @term{method} on @theclass{structure-object} prints the object in the
default @f{#S} notation; see @ref{PrintingStructures, Section 22.1.3.12 (Printing Structures)}.

@term{Methods} on @code{print-object} are responsible for implementing
their part of the semantics of the @term{printer control variables}, as follows:


@table @asis


@item @id{@code{*print-readably*}}


All methods for @code{print-object} must obey @code{*print-readably*}.
This includes both user-defined methods and @term{implementation-defined} methods.
Readable printing of @term{structures} and @term{standard objects} 
is controlled by their @code{print-object} method, 
not by their @code{make-load-form} @term{method}.
@term{Similarity} for these @term{objects} is application dependent
and hence is defined to be whatever these @term{methods} do; 
see @ref{Similarity, Section 3.2.4.2 (Similarity of Literal Objects)}.


@item @id{@code{*print-escape*}}


Each @term{method} must implement @code{*print-escape*}. 

@item @id{@code{*print-pretty*}}
 

The @term{method} may wish to perform specialized line breaking
or other output conditional on @thevalueof{*print-pretty*}.
For further information,
see (for example) the @term{macro} @code{pprint-fill}.
See also @ref{PPrintDispatchTables, Section 22.2.1.4 (Pretty Print Dispatch Tables)}@spc{}and @ref{Examples of using the Pretty Printer, Section 22.2.2 (Examples of using the Pretty Printer)}.

@item @id{@code{*print-length*}}


@term{Methods} that produce output of indefinite length must obey
@code{*print-length*}.
For further information,
see (for example) the @term{macros} @code{pprint-logical-block}
and @code{pprint-pop}.
See also @ref{PPrintDispatchTables, Section 22.2.1.4 (Pretty Print Dispatch Tables)}@spc{}and @ref{Examples of using the Pretty Printer, Section 22.2.2 (Examples of using the Pretty Printer)}.

@item @id{@code{*print-level*}}


The printer takes care of @code{*print-level*} automatically,
provided that each @term{method} handles exactly one level of structure and
calls @code{write} (or an equivalent @term{function}) recursively if
there are more structural levels.  The printer's decision of whether an
@term{object} has components (and therefore should not be printed when the
printing depth is not less than @code{*print-level*}) is
@term{implementation-dependent}.  In some implementations its 
@code{print-object} @term{method} is not called; 
in others the @term{method} is called, 
and the determination that the @term{object} has components is based on what
it tries to write to the @param{stream}.

@item @id{@code{*print-circle*}}


When @thevalueof{*print-circle*} is @term{true},
a user-defined 
@code{print-object} @term{method}
can print @term{objects} to the supplied @term{stream} 
using @code{write},
@code{prin1},
@code{princ},
or @code{format}
and expect circularities to be detected 
and printed using the @f{#@i{n}#} syntax.
If a user-defined
@code{print-object} @term{method}
prints to a @term{stream} other than the one
that was supplied, then circularity detection starts over for that
@term{stream}.  See @code{*print-circle*}.

@item @id{@code{*print-base*}, @code{*print-radix*}, @code{*print-case*},  @code{*print-gensym*}, and @code{*print-array*}}


These @term{printer control variables} apply to specific types of @term{objects}
and are handled by the @term{methods} for those @term{objects}.
@end table


If these rules are not obeyed, the results are undefined.

In general, the printer and the @code{print-object} methods should not
rebind the print control variables as they operate recursively through the
structure, but this is @term{implementation-dependent}.

In some implementations the @param{stream} argument passed to a 
@code{print-object} @term{method} is not the original @term{stream}, 
but is an intermediate @term{stream} that implements part of the printer.
@term{methods} should therefore not depend on the identity of this @term{stream}.


@subsubheading See Also:

@ref{pprint-fill},
@ref{pprint-logical-block},
@ref{pprint-pop},
@ref{write},
@ref{*print-readably*},
@ref{*print-escape*},
@ref{*print-pretty*},
@ref{*print-length*},
@ref{Default Print-Object Methods, Section 22.1.3 (Default Print-Object Methods)},
@ref{PrintingStructures, Section 22.1.3.12 (Printing Structures)},
@ref{PPrintDispatchTables, Section 22.2.1.4 (Pretty Print Dispatch Tables)},
@ref{Examples of using the Pretty Printer, Section 22.2.2 (Examples of using the Pretty Printer)}


@node print-unreadable-object
@heading print-unreadable-object (Macro)
@syindex print-unreadable-object
@cindex print-unreadable-object


@subsubheading Syntax:

@DefmacWithValues{print-unreadable-object, @paren{object stream @key{} type identity} @starparam{form}, @nil{}}

@subsubheading Arguments and Values:

@param{object}---an @term{object}; @eval{}.

@param{stream}---
a @term{stream designator}; @eval{}.

@param{type}---a @term{generalized boolean}; @eval{}.

@param{identity}---a @term{generalized boolean}; @eval{}.

@param{forms}---an @term{implicit progn}.

@subsubheading Description:

Outputs a printed representation of @param{object} on @param{stream},
beginning with ``@f{#<}'' and ending with ``@f{>}''.  
Everything output to @param{stream} by the body @param{forms}
is enclosed in the the angle brackets.
If @param{type} is @term{true}, the output from @param{forms}
is preceded by a brief description of the @param{object}'s
@term{type} and a space character.
If @param{identity} is @term{true},
the output from @param{forms} is followed by a space character
and a representation of the @param{object}'s identity, 
typically a storage address.

If either @param{type} or @param{identity} is not supplied, 
its value is @term{false}.  It is valid to omit the body @param{forms}.  
If @param{type} and @param{identity} are both true and there are no
body @param{forms}, only one space character separates the type 
and the identity.

@subsubheading Examples:

;; Note that in this example, the precise form of the output
;; is @term{implementation-dependent}.

@lisp
 (defmethod print-object ((obj airplane) stream)
   (print-unreadable-object (obj stream :type t :identity t)
     (princ (tail-number obj) stream)))

 (prin1-to-string my-airplane)
@EV{} "#<Airplane NW0773 36000123135>"
@OV{} "#<FAA:AIRPLANE NW0773 17>"
@end lisp


@subsubheading Exceptional Situations:

If @code{*print-readably*} is @term{true}, @code{print-unreadable-object}
signals an error @oftype{print-not-readable} without printing anything.



@node set-pprint-dispatch
@heading set-pprint-dispatch (Function)
@syindex set-pprint-dispatch
@cindex set-pprint-dispatch



@subsubheading Syntax:

@DefunWithValues{set-pprint-dispatch, type-specifier function @opt{} priority table, @nil{}}

@subsubheading Arguments and Values:

@param{type-specifier}---a @term{type specifier}.

@param{function}---a @term{function}, a @term{function name}, or @nil{}.

@param{priority}---a @term{real}.
@Default{@f{0}}

@param{table}---a @term{pprint dispatch table}.
@Default{@thevalueof{*print-pprint-dispatch*}}

@subsubheading Description:

Installs an entry into the @term{pprint dispatch table} which is @param{table}.

@param{Type-specifier} 
is the @term{key}
of the entry.  The first action of @code{set-pprint-dispatch} is to remove any
pre-existing entry associated with @param{type-specifier}.  This guarantees that
there will never be two entries associated with the same @term{type specifier} 
in a given @term{pprint dispatch table}.  Equality of @term{type specifiers} is
tested by @code{equal}.

Two values are associated with each @term{type specifier} in a 
@term{pprint dispatch table}: a @param{function} and a @param{priority}.
The @param{function} must accept two arguments: the @term{stream} to which output
is sent and the @term{object} to be printed.  The @param{function} should
@term{pretty print} the @term{object} to the @param{stream}.  The @param{function}
can assume that object satisfies the @term{type} given by @term{type-specifier}.
The @param{function} must obey @code{*print-readably*}.
Any values returned by the @param{function} are ignored.

@param{Priority} is a priority to resolve conflicts
when an object matches more than one entry.

It is permissible for @param{function} to be @nil{}.  In this situation, 
there will be no @param{type-specifier} entry in @param{table} after
@code{set-pprint-dispatch} returns.

@subsubheading Exceptional Situations:

An error is signaled if @param{priority} is not a @term{real}.

@subsubheading Notes:

Since @term{pprint dispatch tables} are often used to control the pretty
printing of Lisp code, it is common for the @param{type-specifier} to be
an @term{expression} of the form 

@lisp
 (cons @param{car-type} @param{cdr-type})
@end lisp


This signifies that the corresponding object must be a cons cell 
whose @term{car} matches the @term{type specifier} @param{car-type} 
and whose @term{cdr} matches the @term{type specifier} @param{cdr-type}.
The @param{cdr-type} can be omitted in which case it defaults to @t{t}.



@node write; prin1; print; pprint; princ
@heading write, prin1, print, pprint, princ (Function)
@syindex write
@cindex write
@syindex prin1
@cindex prin1
@syindex print
@cindex print
@syindex pprint
@cindex pprint
@syindex princ
@cindex princ
@anchor{write}


@subsubheading Syntax:

@DefunWithValuesNewline{write, @param{object} @key{} @writekeys{stream}, object}

@DefunWithValues{prin1, object @opt{} output-stream, object}
@DefunWithValues{princ, object @opt{} output-stream, object}
@DefunWithValues{print, object @opt{} output-stream, object}
@DefunWithValues{pprint, object @opt{} output-stream, @novalues{}}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{output-stream}---an @term{output} @term{stream designator}.
@Default{@term{standard output}}

@writekeydescriptions{@param{stream}---an @term{output} @term{stream designator}.
@Default{@term{standard output}}}

@subsubheading Description:

@code{write}, @code{prin1}, @code{princ}, @code{print}, and @code{pprint}
write the printed representation of @param{object} to @param{output-stream}.

@code{write} is the general entry point to the @term{Lisp printer}.
For each explicitly supplied @term{keyword parameter} named in @thenextfigure{},
the corresponding @term{printer control variable} is dynamically bound to its @term{value}
while printing goes on;
for each @term{keyword parameter} in @thenextfigure{}@spc{}that is not explicitly supplied,
the value of the corresponding @term{printer control variable} is the same as it was
at the time @code{write} was invoked.
Once the appropriate @term{bindings} are @term{established},
the @term{object} is output by the @term{Lisp printer}.


@float Figure,fig22.7
@cartouche
@multitable{@param{pprint-dispatch}}{@code{*print-pprint-dispatch*}}
@headitem Parameter @tab Corresponding Dynamic Variable
@item @param{array} @tab @code{*print-array*}
@item @param{base} @tab @code{*print-base*}
@item @param{case} @tab @code{*print-case*}
@item @param{circle} @tab @code{*print-circle*}
@item @param{escape} @tab @code{*print-escape*}
@item @param{gensym} @tab @code{*print-gensym*}
@item @param{length} @tab @code{*print-length*}
@item @param{level} @tab @code{*print-level*}
@item @param{lines} @tab @code{*print-lines*}
@item @param{miser-width} @tab @code{*print-miser-width*}
@item @param{pprint-dispatch} @tab @code{*print-pprint-dispatch*}
@item @param{pretty} @tab @code{*print-pretty*}
@item @param{radix} @tab @code{*print-radix*}
@item @param{readably} @tab @code{*print-readably*}
@item @param{right-margin} @tab @code{*print-right-margin*}
@end multitable
@end cartouche
@caption{Argument correspondences for the WRITE function.}
@end float


@code{prin1}, @code{princ}, @code{print}, and @code{pprint} implicitly 
@term{bind} certain print parameters to particular values.  The remaining parameter
values are taken from 
@code{*print-array*},
@code{*print-base*},
@code{*print-case*}, 
@code{*print-circle*},
@code{*print-escape*},
@code{*print-gensym*},
@code{*print-length*},
@code{*print-level*},
@code{*print-lines*},
@code{*print-miser-width*},
@code{*print-pprint-dispatch*},
@code{*print-pretty*}, 
@code{*print-radix*}, 
and @code{*print-right-margin*}.

@code{prin1} produces output suitable for input to @code{read}.  
It binds @code{*print-escape*} to @term{true}.

@code{princ} is just like @code{prin1} except that the
output has no @term{escape} @term{characters}.
It binds @code{*print-escape*}   to @term{false}
and @code{*print-readably*} to @term{false}.
The general rule is that output from @code{princ} is intended to look
good to people, while output from @code{prin1} is intended to
be acceptable to @code{read}.

@code{print} is just like @code{prin1} 
except that the printed representation
of @param{object} is preceded by a newline 
and followed by a space.

@code{pprint} is just like @code{print} except that the trailing
space is omitted and 
@param{object} is printed with the @code{*print-pretty*} flag @term{non-nil} 
to produce pretty output.

@param{Output-stream} specifies the @term{stream} to which 
output is to be sent.  

@subsubheading Affected By:

@code{*standard-output*},
@code{*terminal-io*},
@code{*print-escape*},
@code{*print-radix*},
@code{*print-base*},
@code{*print-circle*},
@code{*print-pretty*},
@code{*print-level*},
@code{*print-length*},
@code{*print-case*},
@code{*print-gensym*},
@code{*print-array*},
@code{*read-default-float-format*}.

@subsubheading See Also:

@ref{readtable-case},
@ref{FORMAT Printer Operations, Section 22.3.4 (FORMAT Printer Operations)}

@subsubheading Notes:

@Thefunctions{prin1} and @code{print} do not bind @code{*print-readably*}.

@lisp
 (prin1 object output-stream)
@EQ{} (write object :stream output-stream :escape t)
@end lisp


@lisp
 (princ object output-stream)
@EQ{} (write object stream output-stream :escape nil :readably nil)
@end lisp


@lisp
 (print object output-stream)
@EQ{} (progn (terpri output-stream)
           (write object :stream output-stream
                         :escape t)
           (write-char #@bsl{}space output-stream))
@end lisp


@lisp
 (pprint object output-stream)
@EQ{} (write object :stream output-stream :escape t :pretty t)
@end lisp


@node write-to-string; prin1-to-string; princ-to-string
@heading write-to-string, prin1-to-string, princ-to-string (Function)
@syindex write-to-string
@cindex write-to-string
@syindex prin1-to-string
@cindex prin1-to-string
@syindex princ-to-string
@cindex princ-to-string
@anchor{write-to-string}


@subsubheading Syntax:

@DefunWithValuesNewline{write-to-string, object @key{} @writekeys{}, string}

@DefunWithValues{prin1-to-string, object, string}

@DefunWithValues{princ-to-string, object, string}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@writekeydescriptions{}

@param{string}---a @term{string}.

@subsubheading Description:

@code{write-to-string}, @code{prin1-to-string}, and @code{princ-to-string}
are used to create a @term{string} consisting of the printed representation 
of @param{object}.
@param{Object} is effectively printed as if by @code{write},
@code{prin1}, or @code{princ}, respectively,
and the @term{characters} that would be output are made 
into a @term{string}.

@code{write-to-string} is the general output function.
It has the ability to specify all the parameters applicable 
to the printing of @param{object}.

@code{prin1-to-string} acts like @code{write-to-string} with 
@f{:escape t}, that is, escape characters are written where appropriate.

@code{princ-to-string} acts like @code{write-to-string} with 
@f{:escape nil :readably nil}.  
Thus no @term{escape} @term{characters} are written.

All other keywords that would be specified to @code{write-to-string} 
are default values when @code{prin1-to-string}
or @code{princ-to-string} is invoked.

The meanings and defaults for the keyword arguments to @code{write-to-string}
are the same as those for @code{write}.

@subsubheading Examples:

@lisp
 (prin1-to-string "abc") @EV{} "@bsl{}"abc@bsl{}""
 (princ-to-string "abc") @EV{} "abc"
@end lisp


@subsubheading Affected By:

@code{*print-escape*},
@code{*print-radix*},
@code{*print-base*},
@code{*print-circle*},
@code{*print-pretty*},
@code{*print-level*},
@code{*print-length*},
@code{*print-case*},
@code{*print-gensym*},
@code{*print-array*},
@code{*read-default-float-format*}.

@subsubheading See Also:

@ref{write}

@subsubheading Notes:

@lisp
 (write-to-string @param{object} @star{@curly{@param{key} @param{argument}}})
@EQ{} (with-output-to-string (#1=#:string-stream) 
     (write object :stream #1# @star{@curly{@param{key} @param{argument}}}))

 (princ-to-string @param{object})
@EQ{} (with-output-to-string (string-stream)
     (princ @param{object} string-stream))

 (prin1-to-string @param{object})
@EQ{} (with-output-to-string (string-stream)
     (prin1 @param{object} string-stream))
@end lisp


@node *print-array*
@heading *print-array* (Variable)
@syindex *print-array*
@cindex *print-array*


@subsubheading Value Type:

a @term{generalized boolean}.

@subsubheading Initial Value:

@term{implementation-dependent}.

@subsubheading Description:

Controls the format in which @term{arrays} are printed.  
If it is @term{false}, the contents of @term{arrays} other than @term{strings}
are never printed.  Instead, @term{arrays} are printed in a concise form using
@f{#<} that gives enough information for the user to be able to identify the
@term{array}, but does not include the entire @term{array} contents.
If it is @term{true}, non-@term{string} @term{arrays} are printed using
@f{#(...)}, @f{#*}, or @f{#nA} syntax.

@subsubheading Affected By:

The @term{implementation}.

@subsubheading See Also:

@ref{SharpsignLeftParen, Section 2.4.8.3 (Sharpsign Left-Parenthesis)},
@ref{SharpsignLeftAngle, Section 2.4.8.20 (Sharpsign Less-Than-Sign)}


@node *print-base*; *print-radix*
@heading *print-base*, *print-radix* (Variable)
@syindex *print-base*
@cindex *print-base*
@syindex *print-radix*
@cindex *print-radix*


@subsubheading Value Type:

@code{*print-base*}---a @term{radix}.
@code{*print-radix*}---a @term{generalized boolean}.

@subsubheading Initial Value:

The initial @term{value} of @code{*print-base*} is @f{10}.
The initial @term{value} of @code{*print-radix*} is @term{false}.

@subsubheading Description:

@code{*print-base*} and @code{*print-radix*} control the printing
of @term{rationals}.
@Thevalueof{*print-base*} is called the @newterm{current output base}.

@Thevalueof{*print-base*} is the @term{radix} in which the printer 
will print @term{rationals}.   For radices above @f{10}, letters of
the alphabet are used to represent digits above @f{9}.

If @thevalueof{*print-radix*} is @term{true},
the printer will print a radix specifier to indicate the @term{radix}
in which it is printing a @term{rational} number.  The radix specifier
is always printed using lowercase letters.  If @code{*print-base*}
is @f{2}, @f{8}, or @f{16}, then the radix specifier used is @f{#b},
@f{#o}, or @f{#x}, respectively.  For @term{integers}, base ten is
indicated by a trailing decimal point instead of a leading radix
specifier; for @term{ratios}, @f{#10r} is used.  

@subsubheading Examples:

@lisp
 (let ((*print-base* 24.) (*print-radix* t)) 
   (print 23.))
@OUT{} #24rN
@EV{} 23
 (setq *print-base* 10) @EV{} 10
 (setq *print-radix* nil) @EV{} NIL                                          
 (dotimes (i 35)
    (let ((*print-base* (+ i 2)))           ;print the decimal number 40 
      (write 40)                            ;in each base from 2 to 36
      (if (zerop (mod i 10)) (terpri) (format t " "))))
@OUT{} 101000
@OUT{} 1111 220 130 104 55 50 44 40 37 34
@OUT{} 31 2C 2A 28 26 24 22 20 1J 1I
@OUT{} 1H 1G 1F 1E 1D 1C 1B 1A 19 18
@OUT{} 17 16 15 14 
@EV{} NIL
 (dolist (pb '(2 3 8 10 16))               
    (let ((*print-radix* t)                 ;print the integer 10 and 
          (*print-base* pb))                ;the ratio 1/10 in bases 2, 
     (format t "~&~S  ~S~%" 10 1/10)))        ;3, 8, 10, 16
@OUT{} #b1010  #b1/1010
@OUT{} #3r101  #3r1/101
@OUT{} #o12  #o1/12
@OUT{} 10.  #10r1/10
@OUT{} #xA  #x1/A
@EV{} NIL
@end lisp


@subsubheading Affected By:

Might be @term{bound} by @code{format}, and @code{write}, @code{write-to-string}.

@subsubheading See Also:

@ref{format},
@ref{write},
@ref{write-to-string}


@node *print-case*
@heading *print-case* (Variable)
@syindex *print-case*
@cindex *print-case*


@subsubheading Value Type:

One of the @term{symbols} @kwd{upcase}, @kwd{downcase}, or @kwd{capitalize}.

@subsubheading Initial Value:

The @term{symbol} @kwd{upcase}.

@subsubheading Description:

@Thevalueof{*print-case*} controls the case (upper, lower, or mixed) in 
which to print any uppercase characters in the names of @term{symbols}
when vertical-bar syntax is not used.

@code{*print-case*} has an effect at all times when @thevalueof{*print-escape*}
is @term{false}. @code{*print-case*} also has an effect when
@thevalueof{*print-escape*} is @term{true} unless inside an escape context
(@ie{} unless between @term{vertical-bars} or after a @term{slash}).

@subsubheading Examples:

@lisp
 (defun test-print-case ()
   (dolist (*print-case* '(:upcase :downcase :capitalize))
     (format t "~&~S ~S~%" 'this-and-that '|And-something-elSE|)))
@EV{} TEST-PC
;; Although the choice of which characters to escape is specified by
;; *PRINT-CASE*, the choice of how to escape those characters 
;; (i.e., whether single escapes or multiple escapes are used)
;; is implementation-dependent.  The examples here show two of the
;; many valid ways in which escaping might appear.
 (test-print-case) ;Implementation A
@OUT{} THIS-AND-THAT |And-something-elSE|
@OUT{} this-and-that a@bsl{}n@bsl{}d-@bsl{}s@bsl{}o@bsl{}m@bsl{}e@bsl{}t@bsl{}h@bsl{}i@bsl{}n@bsl{}g-@bsl{}e@bsl{}lse
@OUT{} This-And-That A@bsl{}n@bsl{}d-@bsl{}s@bsl{}o@bsl{}m@bsl{}e@bsl{}t@bsl{}h@bsl{}i@bsl{}n@bsl{}g-@bsl{}e@bsl{}lse
@EV{} NIL
 (test-print-case) ;Implementation B
@OUT{} THIS-AND-THAT |And-something-elSE|
@OUT{} this-and-that a|nd-something-el|se
@OUT{} This-And-That A|nd-something-el|se
@EV{} NIL
@end lisp


@subsubheading See Also:

@ref{write}

@subsubheading Notes:

@code{read} normally converts lowercase characters appearing 
in @term{symbols} to corresponding uppercase characters,
so that internally print names normally contain only uppercase characters.

If @code{*print-escape*} is @term{true},
lowercase characters in the @term{name} of a @term{symbol}
are always printed in lowercase, and
are preceded by a single escape character 
or enclosed by multiple escape characters;
uppercase characters in the @term{name} of a @term{symbol}
are printed in upper case, in lower case, or in mixed case
so as to capitalize words, according to the value of
@code{*print-case*}.  The convention for what constitutes
a ``word'' is the same as for @code{string-capitalize}.

@node *print-circle*
@heading *print-circle* (Variable)
@syindex *print-circle*
@cindex *print-circle*



@subsubheading Value Type:

a @term{generalized boolean}.

@subsubheading Initial Value:

@term{false}.

@subsubheading Description:

Controls the attempt to detect circularity and sharing in an @term{object} 
being printed.

If @term{false},
the printing process merely proceeds by recursive descent without attempting 
to detect circularity and sharing.

If @term{true},
the printer will endeavor to detect cycles and sharing
in the structure to be printed, 
and to use @f{#@i{n}=} and @f{#@i{n}#}
syntax to indicate the circularities or shared components.

If @term{true}, a user-defined 
@code{print-object} @term{method}
can print
@term{objects} to the supplied @term{stream} using @code{write}, @code{prin1}, 
@code{princ}, or @code{format} and expect circularities and sharing
to be detected and printed using the @f{#@i{n}#} syntax.
If a user-defined 
@code{print-object} @term{method}
prints to a @term{stream} other than the one
that was supplied, then circularity detection starts over for that @term{stream}. 

Note that implementations should not use @f{#@i{n}#} notation 
when the @term{Lisp reader} would automatically assure sharing without it
(@eg{} as happens with @term{interned} @term{symbols}).

@subsubheading Examples:

@lisp
 (let ((a (list 1 2 3)))
   (setf (cdddr a) a)
   (let ((*print-circle* t))
     (write a)
     :done))
@OUT{} #1=(1 2 3 . #1#)
@EV{} :DONE
@end lisp


@subsubheading See Also:

@ref{write}

@subsubheading Notes:

An attempt to print a circular structure with @code{*print-circle*} 
set to @nil{}@spc{}may lead to looping behavior and failure to terminate.



@node *print-escape*
@heading *print-escape* (Variable)
@syindex *print-escape*
@cindex *print-escape*


@subsubheading Value Type:

a @term{generalized boolean}.

@subsubheading Initial Value:

@term{true}.

@subsubheading Description:

If @term{false},
escape characters and @term{package prefixes} are not output
when an expression is printed.

If @term{true}, an attempt is made to print an @term{expression}
in such a way that it can be read again to produce an @code{equal} @term{expression}.
(This is only a guideline; not a requirement.  See @code{*print-readably*}.)

For more specific details of how @thevalueof{*print-escape*}
affects the printing of certain @term{types},
see @ref{Default Print-Object Methods, Section 22.1.3 (Default Print-Object Methods)}.

@subsubheading Examples:
@lisp
 (let ((*print-escape* t)) (write #@bsl{}a))
@OUT{} #@bsl{}a
@EV{} #@bsl{}a
 (let ((*print-escape* nil)) (write #@bsl{}a))
@OUT{} a
@EV{} #@bsl{}a
@end lisp


@subsubheading Affected By:

@code{princ}, @code{prin1}, @code{format}

@subsubheading See Also:

@ref{write}, @ref{readtable-case}

@subsubheading Notes:

@code{princ} effectively binds @code{*print-escape*} to @term{false}.
@code{prin1} effectively binds @code{*print-escape*} to @term{true}.


@node *print-gensym*
@heading *print-gensym* (Variable)
@syindex *print-gensym*
@cindex *print-gensym*


@subsubheading Value Type:

a @term{generalized boolean}.

@subsubheading Initial Value:

@term{true}.

@subsubheading Description:

Controls whether the prefix ``@f{#:}'' is printed before 
@term{apparently uninterned} @term{symbols}.  
The prefix is printed before such @term{symbols} 
if and only if @thevalueof{*print-gensym*} is @term{true}.

@subsubheading Examples:

@lisp
 (let ((*print-gensym* nil))
   (print (gensym)))
@OUT{} G6040 
@EV{} #:G6040
@end lisp


@subsubheading See Also:

@ref{write}, @ref{*print-escape*}


@node *print-level*; *print-length*
@heading *print-level*, *print-length* (Variable)
@syindex *print-level*
@cindex *print-level*
@syindex *print-length*
@cindex *print-length*
@anchor{*print-length*}


@subsubheading Value Type:

a non-negative @term{integer}, or @nil{}.

@subsubheading Initial Value:

@nil{}.

@subsubheading Description:

@code{*print-level*} controls how many levels deep a nested @term{object} will print.
If it is @term{false}, then no control is exercised.
Otherwise, it is an @term{integer} indicating the maximum level to be printed.
An @term{object} to be printed is at level @f{0};
its components (as of a @term{list} or @term{vector}) are at level @f{1};
and so on.
If an @term{object} to be recursively printed has components 
and is at a level equal to or greater than @thevalueof{*print-level*}, 
then the @term{object} is printed as ``@f{#}''.

@code{*print-length*} controls how many elements at a given level are printed.
If it is @term{false}, there is no limit to the number of components printed.
Otherwise, it is an @term{integer} indicating the maximum number of @term{elements} 
of an @term{object} to be printed.  If exceeded, the printer will print 
``@f{...}'' in place of the other @term{elements}.  In the case of a @term{dotted list},
if the @term{list} contains exactly as many @term{elements} as @thevalueof{*print-length*},
the terminating @term{atom} is printed rather than printing ``@f{...}''

@code{*print-level*} and @code{*print-length*} affect the printing 
of an any @term{object} printed with a list-like syntax.  They do not affect
the printing of @term{symbols}, @term{strings}, and @term{bit vectors}.

@subsubheading Examples:

@medbreak{}
@lisp
 (setq a '(1 (2 (3 (4 (5 (6))))))) @EV{} (1 (2 (3 (4 (5 (6))))))
 (dotimes (i 8) 
   (let ((*print-level* i)) 
     (format t "~&~D -- ~S~%" i a)))
@OUT{} 0 -- #
@OUT{} 1 -- (1 #)
@OUT{} 2 -- (1 (2 #))
@OUT{} 3 -- (1 (2 (3 #)))
@OUT{} 4 -- (1 (2 (3 (4 #))))
@OUT{} 5 -- (1 (2 (3 (4 (5 #)))))
@OUT{} 6 -- (1 (2 (3 (4 (5 (6))))))
@OUT{} 7 -- (1 (2 (3 (4 (5 (6))))))
@EV{} NIL
@medbreak{}
 (setq a '(1 2 3 4 5 6)) @EV{} (1 2 3 4 5 6)
 (dotimes (i 7) 
   (let ((*print-length* i)) 
     (format t "~&~D -- ~S~%" i a))) 
@OUT{} 0 -- (...)
@OUT{} 1 -- (1 ...)
@OUT{} 2 -- (1 2 ...)
@OUT{} 3 -- (1 2 3 ...)
@OUT{} 4 -- (1 2 3 4 ...)
@OUT{} 5 -- (1 2 3 4 5 6)
@OUT{} 6 -- (1 2 3 4 5 6)
@EV{} NIL
@medbreak{}
(dolist (level-length '((0 1) (1 1) (1 2) (1 3) (1 4) 
                        (2 1) (2 2) (2 3) (3 2) (3 3) (3 4)))
 (let ((*print-level*  (first  level-length))
       (*print-length* (second level-length)))
   (format t "~&~D ~D -- ~S~%"
           *print-level* *print-length* 
           '(if (member x y) (+ (car x) 3) '(foo . #(a b c d "Baz"))))))
@OUT{} 0 1 -- #
@OUT{} 1 1 -- (IF ...)
@OUT{} 1 2 -- (IF # ...)
@OUT{} 1 3 -- (IF # # ...)
@OUT{} 1 4 -- (IF # # #)
@OUT{} 2 1 -- (IF ...)
@OUT{} 2 2 -- (IF (MEMBER X ...) ...)
@OUT{} 2 3 -- (IF (MEMBER X Y) (+ # 3) ...)
@OUT{} 3 2 -- (IF (MEMBER X ...) ...)
@OUT{} 3 3 -- (IF (MEMBER X Y) (+ (CAR X) 3) ...)
@OUT{} 3 4 -- (IF (MEMBER X Y) (+ (CAR X) 3) '(FOO . #(A B C D ...)))
@EV{} NIL
@end lisp


@subsubheading See Also:

@ref{write}


@node *print-lines*
@heading *print-lines* (Variable)
@syindex *print-lines*
@cindex *print-lines*


@subsubheading Value Type:

a non-negative @term{integer}, or @nil{}.

@subsubheading Initial Value:

@nil{}.

@subsubheading Description:

When @thevalueof{*print-lines*} is other than @nil{},
it is a limit on the number of output lines produced when something is pretty
printed.  If an attempt is made to go beyond that many lines,
``@f{..}''
@cindex Dot Dot
@cindex ..
is printed at the end of the last line followed by all of the
suffixes (closing delimiters) that are pending to be printed.

@subsubheading Examples:

@lisp
 (let ((*print-right-margin* 25) (*print-lines* 3))
   (pprint '(progn (setq a 1 b 2 c 3 d 4))))
@OUT{} (PROGN (SETQ A 1
@OUT{}              B 2
@OUT{}              C 3 ..))
@EV{} @novalues{}
@end lisp


@subsubheading Notes:

The ``@f{..}'' notation is intentionally different than
the ``@f{...}'' notation used for level abbreviation, so that the two
different situations can be visually distinguished.

This notation is used to increase the likelihood that the @term{Lisp reader}
will signal an error if an attempt is later made to read the abbreviated output.
Note however that if the truncation occurs in a @term{string}, 
as in @f{"This string has been trunc.."}, the problem situation cannot be
detected later and no such error will be signaled.


@node *print-miser-width*
@heading *print-miser-width* (Variable)
@syindex *print-miser-width*
@cindex *print-miser-width*



@subsubheading Value Type:

a non-negative @term{integer}, or @nil{}.

@subsubheading Initial Value:

@term{implementation-dependent}

@subsubheading Description:

If it is not @nil{}, the @term{pretty printer} switches to a compact
style of output (called miser style) whenever the width available for
printing a substructure is less than or equal to this many @term{ems}.



@node *print-pprint-dispatch*
@heading *print-pprint-dispatch* (Variable)
@syindex *print-pprint-dispatch*
@cindex *print-pprint-dispatch*



@subsubheading Value Type:

a @term{pprint dispatch table}.

@subsubheading Initial Value:

@term{implementation-dependent}, but the initial entries all use a 
special class of priorities that have the property that they are less
than every priority that can be specified using @code{set-pprint-dispatch},
so that the initial contents of any entry can be overridden.

@subsubheading Description:

The @term{pprint dispatch table} which currently controls the @term{pretty printer}.

@subsubheading See Also:

@ref{*print-pretty*},
@ref{PPrintDispatchTables, Section 22.2.1.4 (Pretty Print Dispatch Tables)}

@subsubheading Notes:

The intent is that the initial @term{value} of this @term{variable} should
cause `traditional' @term{pretty printing} of @term{code}.
In general, however, you can put a value in @code{*print-pprint-dispatch*}
that makes pretty-printed output look exactly like non-pretty-printed output.
Setting @code{*print-pretty*} to @term{true} 
just causes the functions contained in the @term{current pprint dispatch table} 
to have priority over normal @code{print-object} methods;
it has no magic way of enforcing that those functions actually produce pretty
output.  For details, see @ref{PPrintDispatchTables, Section 22.2.1.4 (Pretty Print Dispatch Tables)}.


@node *print-pretty*
@heading *print-pretty* (Variable)
@syindex *print-pretty*
@cindex *print-pretty*


@subsubheading Value Type:

a @term{generalized boolean}.

@subsubheading Initial Value:

@term{implementation-dependent}.

@subsubheading Description:

Controls whether the @term{Lisp printer} calls the @term{pretty printer}.

If it is @term{false},
the @term{pretty printer} is not used and 
a minimum
of @term{whitespace}@sub1{}
is output when printing an expression.

If it is @term{true},
the @term{pretty printer} is used, and the @term{Lisp printer} will endeavor
to insert extra @term{whitespace}@sub1{} where appropriate to make @term{expressions} 
more readable.

@code{*print-pretty*} has an effect even when @thevalueof{*print-escape*}
is @term{false}.

@subsubheading Examples:

@lisp
 (setq *print-pretty* 'nil) @EV{} NIL
 (progn (write '(let ((a 1) (b 2) (c 3)) (+ a b c))) nil)
@OUT{} (LET ((A 1) (B 2) (C 3)) (+ A B C))
@EV{} NIL
 (let ((*print-pretty* t))
   (progn (write '(let ((a 1) (b 2) (c 3)) (+ a b c))) nil))
@OUT{} (LET ((A 1)
@OUT{}       (B 2)
@OUT{}       (C 3))
@OUT{}   (+ A B C))
@EV{} NIL
;; Note that the first two expressions printed by this next form
;; differ from the second two only in whether escape characters are printed.
;; In all four cases, extra whitespace is inserted by the pretty printer.
 (flet ((test (x)
          (let ((*print-pretty* t))
            (print x)
            (format t "~%~S " x)
            (terpri) (princ x) (princ " ")
            (format t "~%~A " x))))
  (test '#'(lambda () (list "a" #@backslash{}b 'c #'d))))
@OUT{} #'(LAMBDA ()
@OUT{}     (LIST "a" #@backslash{}b 'C #'D))
@OUT{} #'(LAMBDA ()
@OUT{}     (LIST "a" #@backslash{}b 'C #'D))
@OUT{} #'(LAMBDA ()
@OUT{}     (LIST a b 'C #'D)) 
@OUT{} #'(LAMBDA ()
@OUT{}     (LIST a b 'C #'D))
@EV{} NIL
@end lisp


@subsubheading See Also:

@ref{write}


@node *print-readably*
@heading *print-readably* (Variable)
@syindex *print-readably*
@cindex *print-readably*


@subsubheading Value Type:

a @term{generalized boolean}.

@subsubheading Initial Value:

@term{false}.

@subsubheading Description:

If @code{*print-readably*} is @term{true},
some special rules for printing @term{objects} go into effect.
Specifically, printing any @term{object} @mat{O@sub1{}} produces a printed 
representation that, when seen by the @term{Lisp reader} 
while the @term{standard readtable} is in effect,
will produce 
an @term{object} @mat{O@sub2{}} that is @term{similar} to @mat{O@sub1{}}.
The printed representation produced might or might not be the same as
the printed representation produced when @code{*print-readably*} is @term{false}.
If printing an @term{object} @term{readably} is not possible,
an error @oftype{print-not-readable} is signaled rather than 
using a syntax (@eg{} the ``@f{#<}'' syntax) that would not be readable by
the same @term{implementation}.
If the @term{value} of some other @term{printer control variable} is such
that these requirements would be violated, the @term{value} of that other
@term{variable} is ignored.

Specifically, if @code{*print-readably*} is @term{true},
printing proceeds as if
@code{*print-escape*},
@code{*print-array*},
and @code{*print-gensym*} were also @term{true},
and as if 
@code{*print-length*},
@code{*print-level*},
and @code{*print-lines*} were @term{false}.

If @code{*print-readably*} is @term{false},
the normal rules for printing and the normal interpretations
of other @term{printer control variables} are in effect.

Individual @term{methods} for @code{print-object}, including user-defined
@term{methods}, are responsible for implementing these requirements.

If @code{*read-eval*} is @term{false} and @code{*print-readably*} is @term{true},
any such method that would output a reference to the ``@f{#.}'' @term{reader macro}
will either output something else or will signal an error (as described above).

@subsubheading Examples:

@lisp
 (let ((x (list "a" '@bsl{}a (gensym) '((a (b (c))) d e f g)))
       (*print-escape* nil)
       (*print-gensym* nil)
       (*print-level* 3)
       (*print-length* 3))
   (write x)
   (let ((*print-readably* t))
     (terpri)
     (write x)
     :done))
@OUT{} (a a G4581 ((A #) D E ...))
@OUT{} ("a" |a| #:G4581 ((A (B (C))) D E F G))
@EV{} :DONE

;; This is setup code is shared between the examples
;; of three hypothetical implementations which follow.
 (setq table (make-hash-table)) @EV{} #<HASH-TABLE EQL 0/120 32005763> 
 (setf (gethash table 1) 'one) @EV{} ONE
 (setf (gethash table 2) 'two) @EV{} TWO

;; Implementation A
 (let ((*print-readably* t)) (print table))
 Error: Can't print #<HASH-TABLE EQL 0/120 32005763> readably.

;; Implementation B
;; No standardized #S notation for hash tables is defined, 
;; but there might be an implementation-defined notation.
 (let ((*print-readably* t)) (print table))
@OUT{} #S(HASH-TABLE :TEST EQL :SIZE 120 :CONTENTS (1 ONE 2 TWO))
@EV{} #<HASH-TABLE EQL 0/120 32005763>

;; Implementation C
;; Note that #. notation can only be used if *READ-EVAL* is true.
;; If *READ-EVAL* were false, this same implementation might have to
;; signal an error unless it had yet another printing strategy to fall
;; back on.
 (let ((*print-readably* t)) (print table))
@OUT{} #.(LET ((HASH-TABLE (MAKE-HASH-TABLE)))
@OUT{}     (SETF (GETHASH 1 HASH-TABLE) ONE)
@OUT{}     (SETF (GETHASH 2 HASH-TABLE) TWO)
@OUT{}     HASH-TABLE)
@EV{} #<HASH-TABLE EQL 0/120 32005763>
@end lisp


@subsubheading See Also:

@ref{write}, @ref{print-unreadable-object}

@subsubheading Notes:

The rules for ``@term{similarity}'' imply that 
@f{#A} or @f{#(} 
syntax cannot be used for @term{arrays} of @term{element type}
other than @code{t}.  
An implementation will have to use another syntax 
or signal an error @oftype{print-not-readable}.  




@node *print-right-margin*
@heading *print-right-margin* (Variable)
@syindex *print-right-margin*
@cindex *print-right-margin*



@subsubheading Value Type:

a non-negative @term{integer}, or @nil{}.

@subsubheading Initial Value:

@nil{}.

@subsubheading Description:

If it is @term{non-nil}, it specifies the right margin (as @term{integer}
number of @term{ems}) to use when the @term{pretty printer} is making
layout decisions.

If it is @nil{}, the right margin is taken to be the maximum line length 
such that output can be displayed without wraparound or truncation.
If this cannot be determined, an @term{implementation-dependent} value is used.

@subsubheading Notes:

This measure is in units of @term{ems} in order to be compatible with
@term{implementation-defined} variable-width fonts while still not 
requiring the language to provide support for fonts.



@node print-not-readable
@heading print-not-readable (Condition Type)
@syindex print-not-readable
@cindex print-not-readable


@subsubheading Class Precedence List:
@code{print-not-readable},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{print-not-readable} consists of error conditions that occur during
output while @code{*print-readably*} is @term{true}, as a result of attempting
to write a printed representation with the @term{Lisp printer}
that would not be correctly read back with the @term{Lisp reader}.
The object which could not be printed is initialized by 
@theinitkeyarg{object} to @code{make-condition}, and is @term{accessed} by 
@thefunction{print-not-readable-object}.

@subsubheading See Also:

@ref{print-not-readable-object}


@node print-not-readable-object
@heading print-not-readable-object (Function)
@syindex print-not-readable-object
@cindex print-not-readable-object

@subsubheading Syntax:

@DefunWithValues{print-not-readable-object, condition, object}

@subsubheading Arguments and Values:

@param{condition}---a @term{condition} @oftype{print-not-readable}.

@param{object}---an @term{object}.

@subsubheading Description:

Returns the @term{object} that could not be printed readably 
in the situation represented by @param{condition}.

@subsubheading See Also:

@ref{print-not-readable},
@ref{Conditions, Chapter 9 (Conditions)}


@node format
@heading format (Function)
@syindex format
@cindex format


@subsubheading Syntax:

@DefunWithValues{format, destination control-string @rest{} args, result}

@subsubheading Arguments and Values:

@param{destination}---@nil{},
@code{t},
a @term{stream},
or a @term{string} with a @term{fill pointer}.

@param{control-string}---a @term{format control}.

@param{args}---@term{format arguments} for @param{control-string}.

@param{result}---if @param{destination} is @term{non-nil}, then @nil{};
otherwise, a @term{string}.

@subsubheading Description:

@code{format} produces formatted output by outputting the characters
of @param{control-string} and observing that a @term{tilde}
introduces a directive.  The character after the tilde, possibly preceded 
by prefix parameters and modifiers, specifies what kind of formatting 
is desired.  Most directives use one or more elements of @param{args} to
create their output.

If @param{destination} is a @term{string}, a @term{stream}, or @code{t}, 
then the @param{result} is @nil{}.  Otherwise, the @param{result} is
a @term{string} containing the `output.'

@code{format} is useful for producing nicely formatted text, producing
good-looking messages, and so on.  @code{format} can generate and return
a @term{string} or output to @param{destination}.

For details on how the @param{control-string} is interpreted,
see @ref{Formatted Output, Section 22.3 (Formatted Output)}.

@subsubheading Affected By:

@code{*standard-output*},
@code{*print-escape*},
@code{*print-radix*},
@code{*print-base*},
@code{*print-circle*},
@code{*print-pretty*},
@code{*print-level*},
@code{*print-length*},
@code{*print-case*},
@code{*print-gensym*},
@code{*print-array*}.

@subsubheading Exceptional Situations:

If @param{destination} is a @term{string} with a @term{fill pointer},
the consequences are undefined if destructive modifications are performed
directly on the @term{string} during the @term{dynamic extent} of the call.

@subsubheading See Also:

@ref{write},
@ref{Documentation of Implementation-Defined Scripts, Section 13.1.10 (Documentation of Implementation-Defined Scripts)}




@node Reader
@chapter Reader
@menu
* Reader Concepts::

Dictionary

* readtable::
* copy-readtable::
* make-dispatch-macro-character::
* read; read-preserving-whitespace::
* read-delimited-list::
* read-from-string::
* readtable-case::
* readtablep::
* set-dispatch-macro-character; get-dispatch-macro-character::
* set-macro-character; get-macro-character::
* set-syntax-from-char::
* with-standard-io-syntax::
* *read-base*::
* *read-default-float-format*::
* *read-eval*::
* *read-suppress*::
* *readtable*::
* reader-error::
@end menu

@node Reader Concepts
@section Reader Concepts

@menu
* Dynamic Control of the Lisp Reader::
* Effect of Readtable Case on the Lisp Reader::
* Argument Conventions of Some Reader Functions::
@end menu
@node Dynamic Control of the Lisp Reader
@subsection Dynamic Control of the Lisp Reader

Various aspects of the @term{Lisp reader} can be controlled dynamically.
See @ref{Readtables, Section 2.1.1 (Readtables)}@spc{}and @ref{Variables that affect the Lisp Reader, Section 2.1.2 (Variables that affect the Lisp Reader)}.


@node Effect of Readtable Case on the Lisp Reader
@subsection Effect of Readtable Case on the Lisp Reader

The @term{readtable case} of the @term{current readtable} affects the @term{Lisp reader}
in the following ways:


@table @asis
@item @id{@kwd{upcase}}


When the @term{readtable case} is @kwd{upcase},
unescaped constituent @term{characters} are converted to @term{uppercase},
as specified in @ref{Reader Algorithm, Section 2.2 (Reader Algorithm)}.

@item @id{@kwd{downcase}}


When the @term{readtable case} is @kwd{downcase},
unescaped constituent @term{characters} are converted to @term{lowercase}.

@item @id{@kwd{preserve}}


When the @term{readtable case} is @kwd{preserve},
the case of all @term{characters} remains unchanged.

@item @id{@kwd{invert}}


When the @term{readtable case} is @kwd{invert},
then if all of the unescaped letters in the extended token are of the same @term{case}, 
those (unescaped) letters are converted to the opposite @term{case}.
@end table


@subsubsection Examples of Effect of Readtable Case on the Lisp Reader
@anchor{ReadtableCaseReadExamples}

@lisp
 (defun test-readtable-case-reading ()
   (let ((*readtable* (copy-readtable nil)))
     (format t "READTABLE-CASE  Input   Symbol-name~
              ~%-----------------------------------~
              ~%")
     (dolist (readtable-case '(:upcase :downcase :preserve :invert))
       (setf (readtable-case *readtable*) readtable-case)
       (dolist (input '("ZEBRA" "Zebra" "zebra"))
         (format t "~&:~A~16T~A~24T~A"
                 (string-upcase readtable-case)
                 input
                 (symbol-name (read-from-string input)))))))
@end lisp


The output from @f{(test-readtable-case-reading)} should be as follows:

@lisp
 READTABLE-CASE     Input Symbol-name
 -------------------------------------
    :UPCASE         ZEBRA   ZEBRA
    :UPCASE         Zebra   ZEBRA
    :UPCASE         zebra   ZEBRA
    :DOWNCASE       ZEBRA   zebra
    :DOWNCASE       Zebra   zebra
    :DOWNCASE       zebra   zebra
    :PRESERVE       ZEBRA   ZEBRA
    :PRESERVE       Zebra   Zebra
    :PRESERVE       zebra   zebra
    :INVERT         ZEBRA   zebra
    :INVERT         Zebra   Zebra
    :INVERT         zebra   ZEBRA
@end lisp




@node Argument Conventions of Some Reader Functions
@subsection Argument Conventions of Some Reader Functions

@subsubsection The EOF-ERROR-P argument

@param{Eof-error-p} in input function calls
controls what happens if input is from a file (or any other
input source that has a definite end) and the end of the file is reached.
If @param{eof-error-p} is @term{true} (the default), 
an error @oftype{end-of-file} is signaled
at end of file.  If it is @term{false}, then no error is signaled, and instead
the function returns @param{eof-value}.

Functions such as @code{read} that read the representation
of an @term{object} rather than a single
character always signals an error, regardless of @param{eof-error-p}, if
the file ends in the middle of an object representation.
For example, if a file does
not contain enough right parentheses to balance the left parentheses in
it, @code{read} signals an error.  If a file ends in a 
@term{symbol} or a @term{number}
immediately followed by end-of-file, @code{read} reads the 
@term{symbol} or
@term{number} 
successfully and when called again will
act according to @param{eof-error-p}.
Similarly, @thefunction{read-line}
successfully reads the last line of a file even if that line
is terminated by end-of-file rather than the newline character.
Ignorable text, such as lines containing only @term{whitespace}@sub2{} or comments,
are not considered to begin an @term{object}; 
if @code{read} begins to read an @term{expression} but sees only such
ignorable text, it does not consider the file to end in the middle of an @term{object}.
Thus an @param{eof-error-p} argument controls what happens
when the file ends between @term{objects}.


@subsubsection The RECURSIVE-P argument

If @param{recursive-p} is supplied and not @nil{}, it specifies that
this function call is not an outermost call to @code{read} but an 
embedded call, typically from a @term{reader macro function}.
It is important to distinguish such recursive calls for three reasons.


@enumerate 1
@item
An outermost call establishes the context within which the
@f{#@param{n}=} and @f{#@param{n}#} syntax is scoped.  Consider, for example,
the expression

@lisp
 (cons '#3=(p q r) '(x y . #3#))
@end lisp

If the @term{single-quote} @term{reader macro} were defined in this way:

@lisp
 (set-macro-character #@bsl{}'       ;incorrect
    #'(lambda (stream char)
         (declare (ignore char))
         (list 'quote (read stream))))
@end lisp


then each call to the @term{single-quote} @term{reader macro function} would establish
independent contexts for the scope of @code{read} information, including the scope of
identifications between markers like ``@f{#3=}'' and ``@f{#3#}''.  However, for
this expression, the scope was clearly intended to be determined by the outer set 
of parentheses, so such a definition would be incorrect.
The correct way to define the @term{single-quote}
@term{reader macro} uses @param{recursive-p}: 

@lisp
 (set-macro-character #@bsl{}'       ;correct
    #'(lambda (stream char)
         (declare (ignore char))
         (list 'quote (read stream t nil t))))
@end lisp


@item
A recursive call does not alter whether the reading process
is to preserve @term{whitespace}@sub2{} or not (as determined by whether the
outermost call was to @code{read} or @code{read-preserving-whitespace}).
Suppose again that @term{single-quote} 
were to be defined as shown above in the incorrect definition.
Then a call to @code{read-preserving-whitespace}
that read the expression @f{'foo@SpaceChar{}} would fail to preserve the space
character following the symbol @f{foo} because the @term{single-quote}
@term{reader macro function} calls @code{read}, 
not @code{read-preserving-whitespace},
to read the following expression (in this case @f{foo}).
The correct definition, which passes the value @term{true} for @param{recursive-p}
to @code{read}, allows the outermost call to determine
whether @term{whitespace}@sub2{} is preserved.

@item
When end-of-file is encountered and the @param{eof-error-p} argument
is not @nil{}, the kind of error that is signaled may depend on the value
of @param{recursive-p}.  If @param{recursive-p} 
is @term{true}, then the end-of-file
is deemed to have occurred within the middle of a printed representation;
if @param{recursive-p} is @term{false}, then the end-of-file may be deemed to have
occurred between @term{objects} rather than within the middle of one.
@end enumerate




@node readtable
@heading readtable (System Class)
@syindex readtable
@cindex readtable


@subsubheading Class Precedence List:
@code{readtable},
@code{t}

@subsubheading Description:

A @term{readtable} maps @term{characters} into @term{syntax types} for 
the @term{Lisp reader}; see @ref{Syntax, Chapter 2 (Syntax)}.
A @term{readtable} also 
contains associations between @term{macro characters} 
and their @term{reader macro functions},
and records information about the case conversion rules 
to be used by the @term{Lisp reader} when parsing @term{symbols}.

Each @term{simple} @term{character} must be representable in the @term{readtable}.
It is @term{implementation-defined} whether @term{non-simple} @term{characters}
can have syntax descriptions in the @term{readtable}.

@subsubheading See Also:

@ref{Readtables, Section 2.1.1 (Readtables)},
@ref{PrintingOtherObjects, Section 22.1.3.13 (Printing Other Objects)}


@node copy-readtable
@heading copy-readtable (Function)
@syindex copy-readtable
@cindex copy-readtable


@subsubheading Syntax:

@DefunWithValues{copy-readtable, @opt{} from-readtable to-readtable, readtable}

@subsubheading Arguments and Values:

@param{from-readtable}---a @term{readtable designator}.
@Default{the @term{current readtable}}

@param{to-readtable}---a @term{readtable} or @nil{}.
@Default{@nil{}}

@param{readtable}---the @param{to-readtable} if it is @term{non-nil},
or else a @term{fresh} @term{readtable}.

@subsubheading Description:

@code{copy-readtable} copies @param{from-readtable}.

If @param{to-readtable} is @nil{}, a new @term{readtable} is created and returned.  
Otherwise the @term{readtable} specified by @param{to-readtable} is modified and returned.

@code{copy-readtable} copies the setting of @code{readtable-case}.

@subsubheading Examples:

@lisp
 (setq zvar 123) @EV{} 123
 (set-syntax-from-char #@bsl{}z #@bsl{}' (setq table2 (copy-readtable))) @EV{} T
 zvar @EV{} 123
 (copy-readtable table2 *readtable*) @EV{} #<READTABLE 614000277>
 zvar @EV{} VAR
 (setq *readtable* (copy-readtable)) @EV{} #<READTABLE 46210223>
 zvar @EV{} VAR
 (setq *readtable* (copy-readtable nil)) @EV{} #<READTABLE 46302670>
 zvar @EV{} 123
@end lisp


@subsubheading See Also:

@ref{readtable},
@ref{*readtable*}

@subsubheading Notes:

@lisp
(setq *readtable* (copy-readtable nil))
@end lisp

restores the input syntax to standard @clisp{}@spc{}syntax, even if
the @term{initial readtable} has been clobbered 
(assuming it is not so badly clobbered that you cannot type in the above expression).

On the other hand,

@lisp
(setq *readtable* (copy-readtable))
@end lisp

replaces the current @term{readtable} with a copy of itself.
This is useful if you want to save a copy of a readtable for later use,
protected from alteration in the meantime.  It is also useful if you want to
locally bind the readtable to a copy of itself, as in:

@lisp
(let ((*readtable* (copy-readtable))) ...)
@end lisp



@node make-dispatch-macro-character
@heading make-dispatch-macro-character (Function)
@syindex make-dispatch-macro-character
@cindex make-dispatch-macro-character


@subsubheading Syntax:

@DefunWithValues{make-dispatch-macro-character, char @opt{} non-terminating-p readtable, @code{t}}

@subsubheading Arguments and Values:

@param{char}---a @term{character}.

@param{non-terminating-p}---a @term{generalized boolean}.
@Default{@term{false}}

@param{readtable}---a @term{readtable}.
@Default{the @term{current readtable}}

@subsubheading Description:

@code{make-dispatch-macro-character} makes @param{char} 
be a @term{dispatching macro character} in @param{readtable}.

Initially, every @term{character} in the dispatch table
associated with the @param{char} has an associated function 
that signals an error @oftype{reader-error}.

If @param{non-terminating-p} is @term{true}, 
the @term{dispatching macro character} 
is made a @term{non-terminating} @term{macro character};
if @param{non-terminating-p} is @term{false},
the @term{dispatching macro character} 
is made a @term{terminating} @term{macro character}.

@subsubheading Examples:

@lisp
 (get-macro-character #@bsl{}@lbr{}) @EV{} NIL, @term{false}
 (make-dispatch-macro-character #@bsl{}@lbr{}) @EV{} T
 (not (get-macro-character #@bsl{}@lbr{})) @EV{} @term{false}
@end lisp


The @param{readtable} is altered.

@subsubheading See Also:

@ref{*readtable*}, @ref{set-dispatch-macro-character}


@node read; read-preserving-whitespace
@heading read, read-preserving-whitespace (Function)
@syindex read
@cindex read
@syindex read-preserving-whitespace
@cindex read-preserving-whitespace
@anchor{read}
@anchor{read-preserving-whitespace}


@subsubheading Syntax:

@DefunWithValues{read, @opt{} input-stream eof-error-p eof-value recursive-p, object}

@DefunWithValuesNewline{read-preserving-whitespace, @opt{} @vtop{@hbox{input-stream eof-error-p} @hbox{eof-value recursive-p}}, object}

@subsubheading Arguments and Values:

@param{input-stream}---an @term{input} @term{stream designator}.

@param{eof-error-p}---a @term{generalized boolean}.
@Default{@term{true}}

@param{eof-value}---an @term{object}.
@Default{@nil{}}

@param{recursive-p}---a @term{generalized boolean}.
@Default{@term{false}}

@param{object}---an @term{object} (parsed by the @term{Lisp reader})
or the @param{eof-value}.

@subsubheading Description:

@code{read} parses the printed representation of an @term{object}
from @param{input-stream} and builds such an @term{object}.

@code{read-preserving-whitespace} is like @code{read} but preserves
any @term{whitespace}@sub2{} @term{character}
that delimits the printed representation of the @term{object}.
@code{read-preserving-whitespace} is exactly like @code{read}
when the @param{recursive-p} @term{argument} to @code{read-preserving-whitespace}
is @term{true}.

When @code{*read-suppress*} is @term{false},
@code{read} throws away the delimiting @term{character} required by
certain printed representations if it is a
@term{whitespace}@sub2{} @term{character};
but @code{read} preserves the character 
(using @code{unread-char}) if it is
syntactically meaningful, because it could be the start of the next expression.

If a file ends in a @term{symbol} or a @term{number}
immediately followed by an @term{end of file}@sub1{},
@code{read} reads the @term{symbol} or @term{number} successfully;
when called again, it sees the @term{end of file}@sub1{} and
only then acts according to @param{eof-error-p}.
If a file contains ignorable text at the end, such
as blank lines and comments, @code{read} 
does not consider it to end in the
middle of an @term{object}.

If @param{recursive-p} is @term{true}, the call to @code{read} is 
expected to be made
from within some function that itself
has been called from @code{read} or from a similar input function, rather
than from the top level.  


Both functions return the @term{object} read from @param{input-stream}.
@param{Eof-value} is returned if @param{eof-error-p} is @term{false} and end of file
is reached before the beginning of an @term{object}.

@subsubheading Examples:

@lisp
 (read)
@OUT{} @IN{'a}
@EV{} (QUOTE A)
 (with-input-from-string (is " ") (read is nil 'the-end)) @EV{} THE-END
 (defun skip-then-read-char (s c n)
    (if (char= c #@bsl{}@lcurly{}) (read s t nil t) (read-preserving-whitespace s))
    (read-char-no-hang s)) @EV{} SKIP-THEN-READ-CHAR
 (let ((*readtable* (copy-readtable nil)))
    (set-dispatch-macro-character #@bsl{}# #@bsl{}@lcurly{} #'skip-then-read-char)
    (set-dispatch-macro-character #@bsl{}# #@bsl{}@rcurly{} #'skip-then-read-char)
    (with-input-from-string (is "#@lcurly{}123 x #@rcurly{}123 y")
      (format t "~S ~S" (read is) (read is)))) @EV{} #@bsl{}x, #@bsl{}Space, NIL
@end lisp


As an example, consider this @term{reader macro} definition:

@lisp
 (defun slash-reader (stream char)
   (declare (ignore char))
   `(path . ,(loop for dir = (read-preserving-whitespace stream t nil t)
                   then (progn (read-char stream t nil t)
                               (read-preserving-whitespace stream t nil t))
                   collect dir
                   while (eql (peek-char nil stream nil nil t) #@bsl{}/))))
 (set-macro-character #@bsl{}/ #'slash-reader)
@end lisp


Consider now calling @code{read} on this expression:

@lisp
 (zyedh /usr/games/zork /usr/games/boggle)
@end lisp

The @f{/} macro reads objects separated by more @f{/} characters;
thus @f{/usr/games/zork} is intended to read as @f{(path usr games zork)}.
The entire example expression should therefore be read as

@lisp
 (zyedh (path usr games zork) (path usr games boggle))
@end lisp

However, if @code{read} had been used instead of
@code{read-preserving-whitespace}, then after the reading of the symbol
@f{zork}, the following space would be discarded; the next call
to @code{peek-char} would see the following @f{/}, and the loop would
continue, producing this interpretation:

@lisp
 (zyedh (path usr games zork usr games boggle))
@end lisp

There are times when @term{whitespace}@sub2{} should be discarded.
If a command interpreter takes single-character commands,
but occasionally reads an @term{object} then if the @term{whitespace}@sub2{}
after a @term{symbol} 
is not discarded it might be interpreted as a command
some time later after the @term{symbol} had been read.

@subsubheading Affected By:

@code{*standard-input*},
@code{*terminal-io*},
@code{*readtable*},
@code{*read-default-float-format*},
@code{*read-base*},
@code{*read-suppress*},
@code{*package*},
@code{*read-eval*}.

@subsubheading Exceptional Situations:

@code{read} signals an error @oftype{end-of-file}, 
regardless of @param{eof-error-p}, if
the file ends in the middle of an @term{object} representation.
For example, if a file does
not contain enough right parentheses to balance the left parentheses in
it, @code{read} signals an error.
This is detected when @code{read} or @code{read-preserving-whitespace}
is called with @param{recursive-p} and @param{eof-error-p} @term{non-nil}, 
and end-of-file is reached before the beginning of an @term{object}.

If @param{eof-error-p} is @term{true}, an error @oftype{end-of-file}
is signaled at the end of file.

@subsubheading See Also:

@ref{peek-char},
@ref{read-char},
@ref{unread-char},
@ref{read-from-string},
@ref{read-delimited-list}, 
@ref{parse-integer}, 
@ref{Syntax, Chapter 2 (Syntax)},
@ref{Reader Concepts, Section 23.1 (Reader Concepts)}


@node read-delimited-list
@heading read-delimited-list (Function)
@syindex read-delimited-list
@cindex read-delimited-list


@subsubheading Syntax:

@DefunWithValues{read-delimited-list, char @opt{} input-stream recursive-p, list}

@subsubheading Arguments and Values:

@param{char}---a @term{character}.

@param{input-stream}---an @term{input} @term{stream designator}.
@Default{@term{standard input}}

@param{recursive-p}---a @term{generalized boolean}.
@Default{@term{false}}

@param{list}---a @term{list} of the @term{objects} read.

@subsubheading Description:

@code{read-delimited-list} reads @term{objects} from @param{input-stream} 
until the next character after an @term{object}'s
representation (ignoring @term{whitespace}@sub2{} characters and comments) is @param{char}.

@code{read-delimited-list} looks ahead at each step
for the next non-@term{whitespace}@sub2{} @term{character}
and peeks at it as if with @code{peek-char}.
If it is @param{char}, 
then the @term{character} is consumed and the @term{list} of @term{objects} is returned.
If it is a @term{constituent} or @term{escape} @term{character},
then @code{read} is used to read an @term{object},
which is added to the end of the @term{list}.
If it is a @term{macro character},
its @term{reader macro function} is called;
if the function returns a @term{value},
that @term{value} is added to the @term{list}.
The peek-ahead process is then repeated.

If @param{recursive-p} is @term{true},
this call is expected to be embedded in a higher-level call to @code{read} 
or a similar function.

It is an error to reach end-of-file during the operation of
@code{read-delimited-list}.

The consequences are undefined
if @param{char} has a @term{syntax type} of @term{whitespace}@sub2{}
in the @term{current readtable}.

@subsubheading Examples:
@lisp
 (read-delimited-list #@bsl{}@rbracket{}) 1 2 3 4 5 6 @rbracket{}
@EV{} (1 2 3 4 5 6)
@end lisp

Suppose you wanted @f{#@lcurly{}@i{a} @i{b} @i{c} @mat{@ldots{}} @i{z}@rcurly{}}
to read as a list of all pairs of the elements @i{a}, @i{b}, @i{c}, 
@mat{@ldots{}}, @i{z}, for example.

@lisp
 #@lcurly{}p q z a@rcurly{}  reads as  ((p q) (p z) (p a) (q z) (q a) (z a))
@end lisp

This can be done by specifying a macro-character definition for @f{#@lcurly{}}
that does two things: reads in all the items up to the @f{@rcurly{}},
and constructs the pairs.  @code{read-delimited-list} performs
the first task.

@lisp
 (defun |#@lcurly{}-reader| (stream char arg)
   (declare (ignore char arg))
   (mapcon #'(lambda (x)
              (mapcar #'(lambda (y) (list (car x) y)) (cdr x)))
          (read-delimited-list #@bsl{}@rcurly{} stream t))) @EV{} |#@lcurly{}-reader|

 (set-dispatch-macro-character #@bsl{}# #@bsl{}@lcurly{} #'|#@lcurly{}-reader|) @EV{} T 
 (set-macro-character #@bsl{}@rcurly{} (get-macro-character #@bsl{}) @nil{}))
@end lisp

Note that @term{true} is supplied for the @param{recursive-p} argument.

It is necessary here to give a definition to the character @f{@rcurly{}} as
well to prevent it from being a constituent.
If the line

@lisp
 (set-macro-character #@bsl{}@rcurly{} (get-macro-character #@bsl{}) @nil{}))
@end lisp

shown above were not included, then the @f{@rcurly{}} in

@lisp
 #@lcurly{} p q z a@rcurly{}
@end lisp

would be considered a constituent character, part of the symbol named
@f{a@rcurly{}}.  This could be corrected by putting a space before
the @f{@rcurly{}}, but it is better to call
@code{set-macro-character}.

Giving @f{@rcurly{}} the same      
definition as the standard definition of the character @f{)} has the
twin benefit of making it terminate tokens for use with 
@code{read-delimited-list} and also making it invalid for use in any
other context. Attempting to read a stray @f{@rcurly{}} will signal an error.

@subsubheading Affected By:

@code{*standard-input*},
@code{*readtable*},
@code{*terminal-io*}.

@subsubheading See Also:

@ref{read},
@ref{peek-char},
@ref{read-char},
@ref{unread-char}.

@subsubheading Notes:

@code{read-delimited-list} is intended for use in implementing @term{reader macros}.
Usually it is desirable for @param{char} to be a @term{terminating} @term{macro character}
so that it can be used to delimit tokens; however, @code{read-delimited-list}
makes no attempt to alter the syntax specified for @param{char} by the current
readtable.  The caller must make any necessary changes to the readtable syntax 
explicitly.


@node read-from-string
@heading read-from-string (Function)
@syindex read-from-string
@cindex read-from-string


@subsubheading Syntax:

@DefunWithValuesNewline{read-from-string, string @vtop{@hbox{@opt{} eof-error-p eof-value} @hbox{@key{} start end preserve-whitespace}}, object\, position}

@subsubheading Arguments and Values:

@param{string}---a @term{string}.

@param{eof-error-p}---a @term{generalized boolean}.
@Default{@term{true}}

@param{eof-value}---an @term{object}.
@Default{@nil{}}

@param{start}, @param{end}---@term{bounding index designators} of @param{string}.
@Defaults{@param{start} and @param{end}, @f{0} and @nil{}}

@param{preserve-whitespace}---a @term{generalized boolean}.
@Default{@term{false}}

@param{object}---an @term{object} (parsed by the @term{Lisp reader})
or the @param{eof-value}.

@param{position}---an @term{integer} greater than or equal to zero,
and less than or equal to 
one more than the @term{length} of the @param{string}. 

@subsubheading Description:

Parses the printed representation of an @term{object}
from the subsequence of @param{string} @term{bounded} by @param{start} and @param{end},
as if @code{read} had been called on an @term{input} @term{stream} 
containing those same @term{characters}.

If @param{preserve-whitespace} is @term{true},
the operation will preserve @term{whitespace}@sub2{}
as @code{read-preserving-whitespace} would do.

If an @term{object} is successfully parsed, the @term{primary value}, @param{object},
is the @term{object} that was parsed.
If @param{eof-error-p} is @term{false} and if the end of the @param{substring} is reached,
@param{eof-value} is returned.

The @term{secondary value}, @param{position}, is the index of the first @term{character}
in the @term{bounded} @param{string} that was not read.
The @param{position} may depend upon the value of @param{preserve-whitespace}.
If the entire @param{string} was read, 
the @param{position} returned is either the @param{length} of the @param{string} 
or one greater than the @param{length} of the @param{string}.

@subsubheading Examples:

@lisp
 (read-from-string " 1 3 5" t nil :start 2) @EV{} 3, 5
 (read-from-string "(a b c)") @EV{} (A B C), 7
@end lisp


@subsubheading Exceptional Situations:

If the end of the supplied substring
occurs before an @term{object} can be read, an
error is signaled if @param{eof-error-p} is @term{true}.
An error is signaled if the end of the @param{substring} occurs
in the middle of an incomplete @term{object}.

@subsubheading See Also:

@ref{read},
@ref{read-preserving-whitespace}

@subsubheading Notes:

The reason that @param{position} is allowed to be beyond the
@term{length} of the @param{string} is to permit (but not require)
the @term{implementation} to work by simulating the effect of a 
trailing delimiter at the end of the @term{bounded} @param{string}.
When @param{preserve-whitespace} is @term{true},
the @param{position} might count the simulated delimiter.


@node readtable-case
@heading readtable-case (Accessor)
@syindex readtable-case
@cindex readtable-case


@subsubheading Syntax:

@DefunWithValues{readtable-case, readtable, mode}

@Defsetf{readtable-case, readtable, mode}

@subsubheading Arguments and Values:

@param{readtable}---a @term{readtable}.

@param{mode}---a @term{case sensitivity mode}.

@subsubheading Description:

@term{Accesses} the @term{readtable case} of @param{readtable},
which affects the way in which the @term{Lisp Reader}  reads  @term{symbols}
and the way in which the @term{Lisp Printer} writes @term{symbols}.

@subsubheading Examples:

See @ref{ReadtableCaseReadExamples, Section 23.1.2.1 (Examples of Effect of Readtable Case on the Lisp Reader)}@spc{}and @ref{ReadtableCasePrintExamples, Section 22.1.3.3.2.1 (Examples of Effect of Readtable Case on the Lisp Printer)}.

@subsubheading Exceptional Situations:

@Shouldchecktype{readtable, a @term{readtable}}
@Shouldchecktype{mode, a @term{case sensitivity mode}}

@subsubheading See Also:

@ref{*readtable*},
@ref{*print-escape*},
@ref{Reader Algorithm, Section 2.2 (Reader Algorithm)},
@ref{Effect of Readtable Case on the Lisp Reader, Section 23.1.2 (Effect of Readtable Case on the Lisp Reader)},
@ref{ReadtableCasePrintEffect, Section 22.1.3.3.2 (Effect of Readtable Case on the Lisp Printer)}

@subsubheading Notes:

@code{copy-readtable} copies the @term{readtable case} of the @param{readtable}.


@node readtablep
@heading readtablep (Function)
@syindex readtablep
@cindex readtablep


@subsubheading Syntax:

@DefunWithValues{readtablep, object, generalized-boolean}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@TypePredicate{object, readtable}

@subsubheading Examples:

@lisp
 (readtablep *readtable*) @EV{} @term{true}
 (readtablep (copy-readtable)) @EV{} @term{true}
 (readtablep '*readtable*) @EV{} @term{false}
@end lisp


@subsubheading Notes:

@lisp
 (readtablep @param{object}) @EQ{} (typep @param{object} 'readtable) 
@end lisp



@node set-dispatch-macro-character; get-dispatch-macro-character
@heading set-dispatch-macro-character, get-dispatch-macro-character (Function)
@syindex set-dispatch-macro-character
@cindex set-dispatch-macro-character
@syindex get-dispatch-macro-character
@cindex get-dispatch-macro-character
@anchor{set-dispatch-macro-character}


@subsubheading Syntax:

@DefunWithValues{get-dispatch-macro-character, disp-char sub-char @opt{} readtable, function}

@DefunWithValues{set-dispatch-macro-character, disp-char sub-char new-function @opt{} readtable, @code{t}}

@subsubheading Arguments and Values:

@param{disp-char}---a @term{character}.

@param{sub-char}---a @term{character}.

@param{readtable}---a @term{readtable designator}.
@Default{the @term{current readtable}}

@param{function}---a @term{function designator} or @nil{}.

@param{new-function}---a @term{function designator}.

@subsubheading Description:

@code{set-dispatch-macro-character} causes @param{new-function} to be called
when @param{disp-char} followed by @param{sub-char} is read.  
If @param{sub-char} is a lowercase letter, 
it is converted to its uppercase equivalent.
It is an error if @param{sub-char} is one of the ten decimal digits.

@code{set-dispatch-macro-character} installs a @param{new-function} to be called
when a particular @term{dispatching macro character} pair is read.
@param{New-function} is installed as the dispatch function to be
called  when @param{readtable} is in use and when @param{disp-char} is followed by 
@param{sub-char}.

For more information about how the @param{new-function} is invoked,
see @ref{MacroChars, Section 2.1.4.4 (Macro Characters)}.

@code{get-dispatch-macro-character} retrieves
the dispatch function associated with @param{disp-char} and @param{sub-char}
in @param{readtable}.

@code{get-dispatch-macro-character} returns the macro-character function
for @param{sub-char} under @param{disp-char}, or @nil{}@spc{}if there is no
function associated with @param{sub-char}.
If @param{sub-char} is a decimal digit, @code{get-dispatch-macro-character}
returns @nil{}.

@subsubheading Examples:

@lisp
 (get-dispatch-macro-character #@bsl{}# #@bsl{}@lcurly{}) @EV{} NIL
 (set-dispatch-macro-character #@bsl{}# #@bsl{}@lcurly{}        ;dispatch on #@lcurly{}
    #'(lambda(s c n)
        (let ((list (read s nil (values) t)))  ;list is object after #n@lcurly{}
          (when (consp list)                   ;return nth element of list
            (unless (and n (< 0 n (length list))) (setq n 0))
            (setq list (nth n list)))
         list))) @EV{} T
 #@lcurly{}(1 2 3 4) @EV{} 1
 #3@lcurly{}(0 1 2 3) @EV{} 3
 #@lcurly{}123 @EV{} 123
@end lisp

If it is desired that @f{#@dollar{}@i{foo}} :
as if it were @f{(dollars @i{foo})}.

@lisp
(defun |#$-reader| (stream subchar arg)
   (declare (ignore subchar arg))
   (list 'dollars (read stream t nil t))) @EV{} |#$-reader|
 (set-dispatch-macro-character #@bsl{}# #@bsl{}@dollar{} #'|#@dollar{}-reader|) @EV{} T
@end lisp


@subsubheading See Also:

@ref{MacroChars, Section 2.1.4.4 (Macro Characters)}

@subsubheading Side Effects:

The @param{readtable} is modified.

@subsubheading Affected By:

@code{*readtable*}.

@subsubheading Exceptional Situations:

For either function, an error is signaled if @param{disp-char} is not 
a @term{dispatching macro character} in @param{readtable}.  

@subsubheading See Also:

@ref{*readtable*}

@subsubheading Notes:
It is necessary
to use @code{make-dispatch-macro-character} to set up the
dispatch character before specifying its sub-characters.

@node set-macro-character; get-macro-character
@heading set-macro-character, get-macro-character (Function)
@syindex set-macro-character
@cindex set-macro-character
@syindex get-macro-character
@cindex get-macro-character
@anchor{set-macro-character}


@subsubheading Syntax:

@DefunWithValues{get-macro-character, char @opt{} readtable, function\, non-terminating-p}

@DefunWithValues{set-macro-character, char new-function @opt{} non-terminating-p readtable, @code{t}}

@subsubheading Arguments and Values:

@param{char}---a @term{character}.

@param{non-terminating-p}---a @term{generalized boolean}.
@Default{@term{false}}

@param{readtable}---a @term{readtable designator}.
@Default{the @term{current readtable}}

@param{function}---@nil{}, 
or a @term{designator} for a @term{function} of two @term{arguments}.

@param{new-function}---a @term{function designator}.

@subsubheading Description:

@code{get-macro-character} returns as its @term{primary value}, @param{function},
the @term{reader macro function} associated with @param{char} in @param{readtable} (if any),
or else @nil{}@spc{}if @param{char} is not a @term{macro character} in @param{readtable}.
The @term{secondary value}, @param{non-terminating-p}, is @term{true} 
if @param{char} is a @term{non-terminating} @term{macro character};
otherwise, it is @term{false}.

@code{set-macro-character} causes @param{char} to be a @term{macro character}
associated with the @term{reader macro function} @param{new-function} 
(or the @term{designator} for @param{new-function}) in @param{readtable}.
If @param{non-terminating-p} is @term{true},
@param{char} becomes a @term{non-terminating} @term{macro character};
otherwise it becomes a     @term{terminating} @term{macro character}.

@subsubheading Examples:

@lisp
 (get-macro-character #@bsl{}@lbr{}) @EV{} NIL, @term{false}
 (not (get-macro-character #@bsl{};)) @EV{} @term{false}
@end lisp


The following is a possible definition for the @term{single-quote} @term{reader macro} 
in @term{standard syntax}:

@lisp
 (defun single-quote-reader (stream char)
   (declare (ignore char))
   (list 'quote (read stream t nil t))) @EV{} SINGLE-QUOTE-READER
 (set-macro-character #@bsl{}' #'single-quote-reader) @EV{} T
@end lisp


Here @f{single-quote-reader} reads an @term{object} following the @term{single-quote}
and returns a @term{list} of @code{quote} and that @term{object}.
The @param{char} argument is ignored.

The following is a possible definition for the @term{semicolon} @term{reader macro}
in @term{standard syntax}:

@lisp
 (defun semicolon-reader (stream char)
   (declare (ignore char))
   ;; First swallow the rest of the current input line.
   ;; End-of-file is acceptable for terminating the comment.
   (do () ((char= (read-char stream nil #@bsl{}Newline t) #@bsl{}Newline)))
   ;; Return zero values.
   (values)) @EV{} SEMICOLON-READER
 (set-macro-character #@bsl{}; #'semicolon-reader) @EV{} T
@end lisp


@subsubheading Side Effects:

The @param{readtable} is modified.

@subsubheading See Also:

@ref{*readtable*}


@node set-syntax-from-char
@heading set-syntax-from-char (Function)
@syindex set-syntax-from-char
@cindex set-syntax-from-char


@subsubheading Syntax:

@DefunWithValues{set-syntax-from-char, to-char from-char @opt{} to-readtable from-readtable, @code{t}}

@subsubheading Arguments and Values:

@param{to-char}---a @term{character}.

@param{from-char}---a @term{character}.

@param{to-readtable}---a @term{readtable}. 
@Default{the @term{current readtable}}

@param{from-readtable}---a @term{readtable designator}.
@Default{the @term{standard readtable}}

@subsubheading Description:

@code{set-syntax-from-char} makes
the syntax of @param{to-char}   in @param{to-readtable}    be the same as
the syntax of @param{from-char} in @param{from-readtable}.

@code{set-syntax-from-char} copies the @term{syntax types} of @param{from-char}.
If @param{from-char} is a @term{macro character},
its @term{reader macro function} is copied also.
If the character is a @term{dispatching macro character}, 
its entire dispatch table of @term{reader macro functions} is copied.  
The @term{constituent traits} of @param{from-char} are not copied.

A macro definition from a character such as
@f{"} can be copied to another character; the standard definition for @f{"}
looks for another character that is the same as the character that
invoked it.  The definition of @f{(} can not be meaningfully copied
to @f{@lcurly{}}, on the other hand. 
The result is that @term{lists} are of the form
@f{@lcurly{}a b c)}, not @f{@lcurly{}a b c@rcurly{}},
because the definition
always looks for a closing parenthesis, not a closing brace.  

@subsubheading Examples:
@lisp
 (set-syntax-from-char #@bsl{}7 #@bsl{};) @EV{} T
 123579 @EV{} 1235
@end lisp


@subsubheading Side Effects:

The @param{to-readtable} is modified.

@subsubheading Affected By:

The existing values in the @param{from-readtable}.

@subsubheading See Also:

@ref{set-macro-character},
@ref{make-dispatch-macro-character},
@ref{Character Syntax Types, Section 2.1.4 (Character Syntax Types)}

@subsubheading Notes:

The @term{constituent traits} of a @term{character} are ``hard wired'' 
into the parser for extended @term{tokens}.  For example, if the definition
of @f{S} is copied to @f{*}, then @f{*} will become a @term{constituent} 
that is @term{alphabetic}@sub2{} but that cannot be used as a
@term{short float} @term{exponent marker}.
For further information, see @ref{ConstituentTraits, Section 2.1.4.2 (Constituent Traits)}.


@node with-standard-io-syntax
@heading with-standard-io-syntax (Macro)
@syindex with-standard-io-syntax
@cindex with-standard-io-syntax


@subsubheading Syntax:

@DefmacWithValues{with-standard-io-syntax, @starparam{form}, @starparam{result}}

@subsubheading Arguments and Values:

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @term{forms}.

@subsubheading Description:

Within the dynamic extent of the body of @param{forms}, all reader/printer control
variables, including any @term{implementation-defined} ones not specified by
this standard, are bound to values that produce standard read/print
behavior.  The values for the variables specified by this standard are listed in 
@thenextfigure{}.

@reviewer{Barrett: *print-pprint-dispatch* should probably be mentioned here, too.}


@float Figure,fig23.1
@cartouche
@multitable{@code{*read-default-float-format*}}{The @term{standard pprint dispatch table}}
@headitem Variable @tab Value
@item @code{*package*} @tab The @code{CL-USER} @term{package}
@item @code{*print-array*} @tab @code{t}
@item @code{*print-base*} @tab @f{10}
@item @code{*print-case*} @tab @kwd{upcase}
@item @code{*print-circle*} @tab @nil{}
@item @code{*print-escape*} @tab @code{t}
@item @code{*print-gensym*} @tab @code{t}
@item @code{*print-length*} @tab @nil{}
@item @code{*print-level*} @tab @nil{}
@item @code{*print-lines*} @tab @nil{}
@item @code{*print-miser-width*} @tab @nil{}
@item @code{*print-pprint-dispatch*} @tab The @term{standard pprint dispatch table}
@item @code{*print-pretty*} @tab @nil{}
@item @code{*print-radix*} @tab @nil{}
@item @code{*print-readably*} @tab @code{t}
@item @code{*print-right-margin*} @tab @nil{}
@item @code{*read-base*} @tab @f{10}
@item @code{*read-default-float-format*} @tab @code{single-float}
@item @code{*read-eval*} @tab @code{t}
@item @code{*read-suppress*} @tab @nil{}
@item @code{*readtable*} @tab The @term{standard readtable}
@end multitable
@end cartouche
@caption{Values of standard control variables}
@end float


@subsubheading Examples:

@lisp
 (with-open-file (file pathname :direction :output)
   (with-standard-io-syntax
     (print data file)))

;;; ... Later, in another Lisp:

 (with-open-file (file pathname :direction :input)
   (with-standard-io-syntax
     (setq data (read file))))
@end lisp



@node *read-base*
@heading *read-base* (Variable)
@syindex *read-base*
@cindex *read-base*


@subsubheading Value Type:

a @term{radix}.

@subsubheading Initial Value:

@f{10}.

@subsubheading Description:

Controls the interpretation of tokens by @code{read} as being
@term{integers} or @term{ratios}.  

@Thevalueof{*read-base*}, called the @newterm{current input base},
is the radix in which @term{integers} and
@term{ratios} are to be read by the @term{Lisp reader}.
The parsing of other numeric @term{types} (@eg{} @term{floats}) is 
not affected by this option.

The effect of @code{*read-base*} on the reading of any particular
@term{rational} number can be locally overridden by explicit use of the
@f{#O}, @f{#X}, @f{#B}, or @tt{#@i{n}R} syntax
or by a trailing decimal point.

@subsubheading Examples:

@lisp
 (dotimes (i 6)
   (let ((*read-base* (+ 10. i)))
     (let ((object (read-from-string "(@bsl{}@bsl{}DAD DAD |BEE| BEE 123. 123)")))
       (print (list *read-base* object)))))
@OUT{} (10 (DAD DAD BEE BEE 123 123))
@OUT{} (11 (DAD DAD BEE BEE 123 146))
@OUT{} (12 (DAD DAD BEE BEE 123 171))
@OUT{} (13 (DAD DAD BEE BEE 123 198))
@OUT{} (14 (DAD 2701 BEE BEE 123 227))
@OUT{} (15 (DAD 3088 BEE 2699 123 258))
@EV{} NIL
@end lisp


@subsubheading Notes:

Altering the input radix can be useful when reading data files in special formats.


@node *read-default-float-format*
@heading *read-default-float-format* (Variable)
@syindex *read-default-float-format*
@cindex *read-default-float-format*


@subsubheading Value Type:

one of the @term{atomic type specifiers} 
@code{short-float},
@code{single-float},
@code{double-float},
or @code{long-float}, 
or else some other @term{type specifier} defined 
by the @term{implementation} to be acceptable.

@subsubheading Initial Value:

The @term{symbol} @code{single-float}.

@subsubheading Description:

Controls the floating-point format that is to be used when reading a
floating-point number that has no @term{exponent marker} or that has
@f{e} or @f{E} for an @term{exponent marker}.  Other @term{exponent markers}
explicitly prescribe the floating-point format to be used.

The printer uses @code{*read-default-float-format*} to guide the
choice of @term{exponent markers} when printing floating-point numbers.

@subsubheading Examples:

@lisp
 (let ((*read-default-float-format* 'double-float))
   (read-from-string "(1.0 1.0e0 1.0s0 1.0f0 1.0d0 1.0L0)"))
@EV{} (1.0   1.0   1.0   1.0 1.0   1.0)   ;Implementation has float format F.
@EV{} (1.0   1.0   1.0s0 1.0 1.0   1.0)   ;Implementation has float formats S and F.
@EV{} (1.0d0 1.0d0 1.0   1.0 1.0d0 1.0d0) ;Implementation has float formats F and D.
@EV{} (1.0d0 1.0d0 1.0s0 1.0 1.0d0 1.0d0) ;Implementation has float formats S, F, D.
@EV{} (1.0d0 1.0d0 1.0   1.0 1.0d0 1.0L0) ;Implementation has float formats F, D, L.
@EV{} (1.0d0 1.0d0 1.0s0 1.0 1.0d0 1.0L0) ;Implementation has formats S, F, D, L.
@end lisp



@node *read-eval*
@heading *read-eval* (Variable)
@syindex *read-eval*
@cindex *read-eval*



@subsubheading Value Type:

a @term{generalized boolean}.

@subsubheading Initial Value:

@term{true}.

@subsubheading Description:

If it is @term{true}, the @f{#.} @term{reader macro} has its normal effect.
Otherwise, that @term{reader macro} signals an error @oftype{reader-error}.

@subsubheading See Also:

@ref{*print-readably*}

@subsubheading Notes:

If @code{*read-eval*} is @term{false} and @code{*print-readably*} is @term{true}, 
any @term{method} for @code{print-object} that would output a reference
to the @f{#.} @term{reader macro} either outputs something different
or signals an error @oftype{print-not-readable}.



@node *read-suppress*
@heading *read-suppress* (Variable)
@syindex *read-suppress*
@cindex *read-suppress*


@subsubheading Value Type:

a @term{generalized boolean}.

@subsubheading Initial Value:

@term{false}.

@subsubheading Description:

This variable is intended primarily to support the operation of the
read-time conditional notations @f{#+} and @f{#-}. It is important for the
@term{reader macros} which implement these notations
to be able to skip over the printed representation of an
@term{expression} despite the possibility that the syntax of the skipped
@term{expression} may not be entirely valid for the current implementation,
since @f{#+} and @f{#-} exist in order to allow the same program to be
shared among several @Lisp{}@spc{}implementations (including dialects other than @clisp{})
despite small incompatibilities of syntax.

If it is @term{false}, the @term{Lisp reader} operates normally.


If @thevalueof{*read-suppress*} is @term{true},
@code{read},
@code{read-preserving-whitespace},
@code{read-delimited-list},
and @code{read-from-string}
all return a @term{primary value} of @nil{}@spc{}when they complete successfully;
however, they continue to parse the representation of an @term{object}
in the normal way, in order to skip over the @term{object},
and continue to indicate @term{end of file} in the normal way.
Except as noted below,
any @term{standardized} @term{reader macro}@sub2{}
that is defined to @term{read}@sub2{} 
a following @term{object} or @term{token} 
will do so,
but not signal an error if the @term{object}
read is not of an appropriate type or syntax.
The @term{standard syntax} and its associated @term{reader macros}
will not construct any new @term{objects} 
(@eg{} when reading the representation of a @term{symbol},
no @term{symbol} will be constructed or interned).


@table @asis

@item @id{Extended tokens}


All extended tokens are completely uninterpreted.
Errors such as those that might otherwise be signaled due to
detection of invalid @term{potential numbers},
invalid patterns of @term{package markers},
and invalid uses of the @term{dot} character are suppressed.

@item @id{Dispatching macro characters (including @term{sharpsign})}


@term{Dispatching macro characters} continue to parse an infix numerical
argument, and invoke the dispatch function.  The @term{standardized}
@term{sharpsign} @term{reader macros} do not enforce any constraints
on either the presence of or the value of the numerical argument.


@item @id{@tt{#=}}


The @f{#=} notation is totally ignored.  It does not read
a following @term{object}. It produces no @term{object},
but is treated as @term{whitespace}@sub2{}.

@item @id{@tt{##}}


The @f{##} notation always produces @nil{}.
@end table


No matter what @thevalueof{*read-suppress*},
parentheses still continue to delimit and construct @term{lists};
the @f{#(} notation continues to delimit @term{vectors};
and comments, @term{strings}, 
and the @term{single-quote} and @term{backquote} notations continue to be
interpreted properly.  Such situations as
@f{')},@f{#<}, 
@f{#)}, and @f{#@SpaceChar{}} continue to signal errors.

@subsubheading Examples:

@lisp
 (let ((*read-suppress* t))
   (mapcar #'read-from-string
           '("#(foo bar baz)" "#P(:type :lisp)" "#c1.2"
             "#.(PRINT 'FOO)" "#3AHELLO" "#S(INTEGER)"
             "#*ABC" "#@bsl{}GARBAGE" "#RALPHA" "#3R444")))
@EV{} (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL)
@end lisp


@subsubheading See Also:

@ref{read},
@ref{Syntax, Chapter 2 (Syntax)}

@subsubheading Notes:

@term{Programmers} and @term{implementations} that define additional
@term{macro characters} are strongly encouraged to make them respect
@code{*read-suppress*} just as @term{standardized} @term{macro characters} do.
That is, when @thevalueof{*read-suppress*} is @term{true},
they should ignore type errors when reading a following @term{object}
and the @term{functions} that implement @term{dispatching macro characters}
should tolerate @nil{}@spc{}as their infix @term{parameter} value even if a numeric
value would ordinarily be required.


@node *readtable*
@heading *readtable* (Variable)
@syindex *readtable*
@cindex *readtable*


@subsubheading Value Type:

a @term{readtable}.

@subsubheading Initial Value:

A @term{readtable} that conforms to the description of @clisp{}@spc{}syntax in @ref{Syntax, Chapter 2 (Syntax)}.

@subsubheading Description:

@Thevalueof{*readtable*} is called the @term{current readtable}.
It controls the parsing behavior of the @term{Lisp reader},
and can also influence the @term{Lisp printer} (@eg{} see the @term{function} @ref{readtable-case}).

@subsubheading Examples:

@lisp
 (readtablep *readtable*) @EV{} @term{true}
 (setq zvar 123) @EV{} 123
 (set-syntax-from-char #@bsl{}z #@bsl{}' (setq table2 (copy-readtable))) @EV{} T
 zvar @EV{} 123
 (setq *readtable* table2) @EV{} #<READTABLE>
 zvar @EV{} VAR
 (setq *readtable* (copy-readtable nil)) @EV{} #<READTABLE>
 zvar @EV{} 123
@end lisp


@subsubheading Affected By:

@code{compile-file},
@code{load}

@subsubheading See Also:

@ref{compile-file},
@ref{load},
@ref{readtable},
@ref{CurrentReadtable, Section 2.1.1.1 (The Current Readtable)}


@node reader-error
@heading reader-error (Condition Type)
@syindex reader-error
@cindex reader-error



@subsubheading Class Precedence List:
@code{reader-error},
@code{parse-error},
@code{stream-error},
@code{error},
@code{serious-condition},
@code{condition},
@code{t}

@subsubheading Description:

@Thetype{reader-error} consists of
error conditions that are related to tokenization and parsing
done by the @term{Lisp reader}.

@subsubheading See Also:

@ref{read},
@ref{stream-error-stream},
@ref{Reader Concepts, Section 23.1 (Reader Concepts)}





@node System Construction
@chapter System Construction
@menu
* System Construction Concepts::

Dictionary

* compile-file::
* compile-file-pathname::
* load::
* with-compilation-unit::
* *features*::
* *compile-file-pathname*; *compile-file-truename*::
* *load-pathname*; *load-truename*::
* *compile-print*; *compile-verbose*::
* *load-print*; *load-verbose*::
* *modules*::
* provide; require::
@end menu

@node System Construction Concepts
@section System Construction Concepts

@menu
* Loading::
* Features::
@end menu
@node Loading
@subsection Loading

To @code{load} a @term{file} is to treat its contents as @term{code}
and @term{execute} that @term{code}.
The @term{file} may contain @newterm{source code} or @newterm{compiled code}.

A @term{file} containing @term{source code} is called a @newterm{source file}.
@term{Loading} a @term{source file} is accomplished essentially 
by sequentially @term{reading}@sub2{} the @term{forms} in the file,
@term{evaluating} each immediately after it is @term{read}.

A @term{file} containing @term{compiled code} is called a @newterm{compiled file}.
@term{Loading} a @term{compiled file} is similar to @term{loading} a @term{source file},
except that the @term{file} does not contain text but rather an
@term{implementation-dependent} representation of pre-digested @term{expressions}
created by the @term{compiler}.  Often, a @term{compiled file} can be @term{loaded}
more quickly than a @term{source file}.
See @ref{Compilation, Section 3.2 (Compilation)}.

The way in which a @term{source file} is distinguished from a @term{compiled file} 
is @term{implementation-dependent}.


@node Features
@subsection Features

A @newterm{feature} is an aspect or attribute
of @clisp{}, 
of the @term{implementation},
or of the @term{environment}.
A @term{feature} is identified by a @term{symbol}.

A @term{feature} is said to be @newterm{present} in a @term{Lisp image}
if and only if the @term{symbol} naming it is an @term{element} of the
@term{list} held by @thevariable{*features*}, 
which is called the @newterm{features list}.

@subsubsection Feature Expressions
@anchor{FeatureExpressions}

Boolean combinations of @term{features}, called 
@cindex feature expression
@dfn{feature expressions},
are used by the @f{#+} and @f{#-} @term{reader macros} in order to
direct conditional @term{reading} of @term{expressions} by the @term{Lisp reader}.

The rules for interpreting a @term{feature expression} are as follows:


@table @asis

@item @id{@term{feature}}


If a @term{symbol} naming a @term{feature} is used as a @term{feature expression},
the @term{feature expression} succeeds if that @term{feature} is @term{present};
otherwise it fails.

@item @id{@f{(not @param{feature-conditional})}}


A @t{not} @term{feature expression} succeeds 
if its argument @param{feature-conditional} fails;
otherwise, it succeeds.

@item @id{@f{(and @starparam{feature-conditional})}}


An @t{and} @term{feature expression} succeeds 
if all of its argument @param{feature-conditionals} succeed;
otherwise, it fails.

@item @id{@f{(or @starparam{feature-conditional})}}


An @t{or} @term{feature expression} succeeds 
if any of its argument @param{feature-conditionals} succeed;
otherwise, it fails.
@end table


@unnumberedsubsubsec 24.1.2.1.1 Examples of Feature Expressions

@anchor{FeatureExpExamples}
For example, suppose that
in @term{implementation} A, the @term{features} @f{spice} and @f{perq} are @term{present},
but the @term{feature} @f{lispm} is not @term{present};
in @term{implementation} B, the feature @f{lispm} is @term{present},
but the @term{features} @f{spice} and @f{perq} are
not @term{present};
and 
in @term{implementation} C, none of the features @f{spice}, @term{lispm}, or @f{perq} are
@term{present}.
@Thenextfigure{}@spc{}shows some sample @term{expressions}, and how they would be 
@term{read}@sub2{} in these @term{implementations}.


@float Figure,fig24.1
@cartouche
@multitable{xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx}{xxxxxxxxxxxxxxxxxxxxxxxxxxxxx}

@item @f{(cons #+spice "Spice" #-spice "Lispm" x)} @tab 
@item @quad{} in @term{implementation} A @mat{@ldots{}} @tab @f{(CONS "Spice" X)}
@item @quad{} in @term{implementation} B @mat{@ldots{}} @tab @f{(CONS "Lispm" X)}
@item @quad{} in @term{implementation} C @mat{@ldots{}} @tab @f{(CONS "Lispm" X)}
@item @f{(cons #+spice "Spice" #+LispM "Lispm" x)} @tab 
@item @quad{} in @term{implementation} A @mat{@ldots{}} @tab @f{(CONS "Spice" X)}
@item @quad{} in @term{implementation} B @mat{@ldots{}} @tab @f{(CONS "Lispm" X)}
@item @quad{} in @term{implementation} C @mat{@ldots{}} @tab @f{(CONS X)}
@item @f{(setq a '(1 2 #+perq 43 #+(not perq) 27))} @tab 
@item @quad{} in @term{implementation} A @mat{@ldots{}} @tab @f{(SETQ A '(1 2 43))}
@item @quad{} in @term{implementation} B @mat{@ldots{}} @tab @f{(SETQ A '(1 2 27))}
@item @quad{} in @term{implementation} C @mat{@ldots{}} @tab @f{(SETQ A '(1 2 27))}
@item @f{(let ((a 3) #+(or spice lispm) (b 3)) (foo a))} @tab 
@item @quad{} in @term{implementation} A @mat{@ldots{}} @tab @f{(LET ((A 3) (B 3)) (FOO A))}
@item @quad{} in @term{implementation} B @mat{@ldots{}} @tab @f{(LET ((A 3) (B 3)) (FOO A))}
@item @quad{} in @term{implementation} C @mat{@ldots{}} @tab @f{(LET ((A 3)) (FOO A))}
@item @f{(cons #+Lispm "#+Spice" #+Spice "foo" #-(or Lispm Spice) 7 x)} @tab 
@item @quad{} in @term{implementation} A @mat{@ldots{}} @tab @f{(CONS "foo" X)}
@item @quad{} in @term{implementation} B @mat{@ldots{}} @tab @f{(CONS "#+Spice" X)}
@item @quad{} in @term{implementation} C @mat{@ldots{}} @tab @f{(CONS 7 X)}
@end multitable
@end cartouche
@caption{Features examples}
@end float




@node compile-file
@heading compile-file (Function)
@syindex compile-file
@cindex compile-file


@subsubheading Syntax:

@DefunWithValuesNewline{compile-file, input-file @key{} @vtop{@hbox{output-file verbose} @hbox{print external-format}}, output-truename\, warnings-p\, failure-p}

@subsubheading Arguments and Values:

@param{input-file}---a @term{pathname designator}.
(Default fillers for unspecified components are taken from
@code{*default-pathname-defaults*}.)

@param{output-file}---a @term{pathname designator}.
@Default{@term{implementation-defined}}

@param{verbose}---a @term{generalized boolean}.
@Default{@thevalueof{*compile-verbose*}}

@param{print}---a @term{generalized boolean}.
@Default{@thevalueof{*compile-print*}}


@param{external-format}---an @term{external file format designator}.
@Default{@kwd{default}}

@param{output-truename}---a @term{pathname} (the @code{truename} of the output @term{file}),
or @nil{}.

@param{warnings-p}---a @term{generalized boolean}.

@param{failure-p}---a @term{generalized boolean}.



@subsubheading Description:

@code{compile-file} transforms the contents of the file specified 
by @param{input-file} into @term{implementation-dependent} binary data 
which are placed in the file specified by @param{output-file}.

The @term{file} to which @param{input-file} refers should be a @term{source file}.
@param{output-file} can be used to specify an output @term{pathname};
the actual @term{pathname} of the @term{compiled file} 
to which @term{compiled code} will be output 
is computed as if by calling @code{compile-file-pathname}.

If @param{input-file} or @param{output-file} is a @term{logical pathname},
it is translated into a @term{physical pathname} as if by calling
@code{translate-logical-pathname}.

If @param{verbose} is @term{true},
@code{compile-file} prints a message in the form of a comment
(@ie{} with a leading @term{semicolon})
to @term{standard output} indicating what @term{file} is being @term{compiled}
and other useful information.
If @param{verbose} is @term{false},
@code{compile-file} does not print 
this information.

If @param{print} is @term{true},
information about @term{top level forms} in the file being
compiled is printed to @term{standard output}.
Exactly what is printed is @term{implementation-dependent}, 
but nevertheless some information is printed.
If @param{print} is @nil{}, no information is printed.

The @param{external-format} specifies the @term{external file format} 
to be used when opening the @term{file}; see the @term{function} @ref{open}.
@code{compile-file} and @code{load} must cooperate in such a way that
the resulting @term{compiled file} can be @term{loaded}
without specifying an @term{external file format} anew; see the @term{function} @ref{load}.

@code{compile-file} binds @code{*readtable*} and @code{*package*}
to the values they held before processing the file.

@code{*compile-file-truename*} is bound by @code{compile-file} 
to hold the @term{truename} of the @term{pathname} of the file being compiled.

@code{*compile-file-pathname*} is bound by @code{compile-file}
to hold a @term{pathname} denoted by the first argument to @code{compile-file},
merged against the defaults;
that is, @f{(pathname (merge-pathnames @param{input-file}))}.

The compiled @term{functions} contained in the @term{compiled file} become available
for use when the @term{compiled file} is @term{loaded} into Lisp.
Any function definition that is processed by the
compiler, including @f{#'(lambda ...)} forms and local function
definitions made by @code{flet}, @code{labels} and @code{defun} forms, 
result in an @term{object} @oftype{compiled-function}.  

The @term{primary value} returned by @code{compile-file}, @param{output-truename},
is the @code{truename} of the output file, or @nil{}@spc{}if the file could not be created.  

The @term{secondary value}, @param{warnings-p}, is @term{false}
if no @term{conditions} @oftype{error} or @code{warning}
were detected by the compiler, and @term{true} otherwise.

The @term{tertiary value}, @param{failure-p}, is @term{false}
if no @term{conditions} @oftype{error} or @code{warning}
(other than @code{style-warning})
were detected by the compiler, and @term{true} otherwise.

For general information about how @term{files} are processed by the @term{file compiler},
see @ref{File Compilation, Section 3.2.3 (File Compilation)}.


@term{Programs} to be compiled by the @term{file compiler} must only contain
@term{externalizable objects}; for details on such @term{objects},
see @ref{Literal Objects in Compiled Files, Section 3.2.4 (Literal Objects in Compiled Files)}.
For information on how to extend the set of @term{externalizable objects},
see the @term{function} @ref{make-load-form} and @ref{CallingMakeLoadForm, Section 3.2.4.4 (Additional Constraints on Externalizable Objects)}.

@subsubheading Affected By:
@code{*error-output*},
@code{*standard-output*}, @code{*compile-verbose*}, @code{*compile-print*}

The computer's file system.
@subsubheading Exceptional Situations:

For information about errors detected during the compilation process, 
see @ref{Exceptional Situations in the Compiler, Section 3.2.5 (Exceptional Situations in the Compiler)}.

An error @oftype{file-error} might be signaled if
@tt{(wild-pathname-p @param{input-file})} returns true.

If either the attempt to open the @term{source file} for input
or the attempt to open the @term{compiled file} for output
fails,
an error @oftype{file-error} is signaled.

@subsubheading See Also:

@ref{compile},
@ref{declare},
@ref{eval-when},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}



@node compile-file-pathname
@heading compile-file-pathname (Function)
@syindex compile-file-pathname
@cindex compile-file-pathname



@subsubheading Syntax:

@DefunWithValues{compile-file-pathname, input-file @key{} output-file @allowotherkeys{}, pathname}

@subsubheading Arguments and Values:

@param{input-file}---a @term{pathname designator}.
(Default fillers for unspecified components are taken from
@code{*default-pathname-defaults*}.)

@param{output-file}---a @term{pathname designator}.
@Default{@term{implementation-defined}}

@param{pathname}---a @term{pathname}.

@subsubheading Description:

Returns the @term{pathname} that @code{compile-file} would write into,
if given the same arguments.

The defaults for the @param{output-file} 
are taken from the @term{pathname} 
that results from merging the @param{input-file} 
with @thevalueof{*default-pathname-defaults*},
except that the type component 
should default to the appropriate
@term{implementation-defined} default type for @term{compiled files}.

If @param{input-file} is a @term{logical pathname} and @param{output-file} 
is unsupplied, the result is a @term{logical pathname}.
If @param{input-file} is a @term{logical pathname}, 
it is translated into a physical pathname as if by calling 
@code{translate-logical-pathname}.
If @param{input-file} is a @term{stream}, 
the @term{stream} can be either open or closed.
@code{compile-file-pathname} returns the same @term{pathname} after a
file is closed as it did when the file was open.
It is an error if @param{input-file} is a @term{stream} that is 
created with @code{make-two-way-stream}, @code{make-echo-stream},             
@code{make-broadcast-stream}, @code{make-concatenated-stream},
@code{make-string-input-stream}, @code{make-string-output-stream}.

If an implementation supports additional keyword arguments to @code{compile-file}, 
@code{compile-file-pathname} must accept the same arguments.

@subsubheading Examples:

See @code{logical-pathname-translations}.

@subsubheading Exceptional Situations:

An error @oftype{file-error} might be signaled if either @param{input-file} or
@param{output-file} is @term{wild}.

@subsubheading See Also:

@ref{compile-file},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}




@node load
@heading load (Function)
@syindex load
@cindex load


@subsubheading Syntax:

@DefunWithValuesNewline{load, filespec @key{} @vtop{@hbox{verbose print} @hbox{if-does-not-exist external-format}}, generalized-boolean}

@subsubheading Arguments and Values:

@param{filespec}---a @term{stream}, or a @term{pathname designator}.
@Default{taken from @code{*default-pathname-defaults*}}

@param{verbose}---a @term{generalized boolean}.
@Default{@thevalueof{*load-verbose*}}

@param{print}---a @term{generalized boolean}.
@Default{@thevalueof{*load-print*}}

@param{if-does-not-exist}---a @term{generalized boolean}.
@Default{@term{true}}

@param{external-format}---an @term{external file format designator}.
@Default{@kwd{default}}

@param{generalized-boolean}---a @term{generalized boolean}.

@subsubheading Description:

@code{load} @term{loads} the @term{file} named by @param{filespec}
into the @Lisp{}@spc{}environment.

The manner in which a @term{source file}
is distinguished from a @term{compiled file} is @term{implementation-dependent}.
If the file specification is not complete and both a @term{source file} and a 
@term{compiled file} exist which might match,
then which of those files @code{load} selects is @term{implementation-dependent}.

If @param{filespec} is a @term{stream},
@code{load} determines what kind of @term{stream} it is 
and loads directly from the @term{stream}.
If @param{filespec} is a @term{logical pathname},
it is translated into a @term{physical pathname}
as if by calling @code{translate-logical-pathname}.

@code{load} sequentially executes each @term{form} it encounters
in the @term{file} named by @param{filespec}.
If the @term{file} is a @term{source file}
and the @term{implementation} chooses to perform @term{implicit compilation},
@code{load} must recognize @term{top level forms} 
as described in @ref{TopLevelForms, Section 3.2.3.1 (Processing of Top Level Forms)}
and arrange for each @term{top level form} to be executed 
before beginning @term{implicit compilation} of the next.
(Note, however, that processing of @code{eval-when} @term{forms}
by @code{load} is controlled by the @kwd{execute} situation.)

If @param{verbose} is @term{true},
@code{load} prints a message in the form of a comment
(@ie{} with a leading @term{semicolon})
to @term{standard output} indicating what @term{file} is being @term{loaded}
and other useful information.
If @param{verbose} is @term{false}, 
@code{load} does not print this information.

If @param{print} is @term{true},
@code{load} incrementally prints information to @term{standard output}
showing the progress of the @term{loading} process.
For a @term{source file},
this information might mean printing the @term{values} 
@term{yielded} by each @term{form} in the @term{file}
as soon as those @term{values} are returned.
For a @term{compiled file}, 
what is printed might not reflect precisely the contents of the @term{source file},
but some information is generally printed.
If @param{print} is @term{false},
@code{load} does not print this information.

If the file named by @param{filespec} is successfully loaded,
@code{load} returns @term{true}.

@reviewer{Loosemore: What happens if the file cannot be loaded for some reason other
than that it doesn't exist?} @editornote{KMP: i.e., can it return NIL? must it?}

If the file does not exist, 
the specific action taken depends on @param{if-does-not-exist}:
if it is @nil{}, @code{load} returns @nil{};
otherwise, @code{load} signals an error.

The @param{external-format} specifies the @term{external file format} 
to be used when opening the @term{file} (see the @term{function} @ref{open}),
except that when the @term{file} named by @param{filespec} is a @term{compiled file},
the @param{external-format} is ignored.
@code{compile-file} and @code{load} cooperate 
in an @term{implementation-dependent} way to assure 
the preservation of the @term{similarity} of @term{characters} 
referred to in the @term{source file} 
at the time the @term{source file} was processed by the @term{file compiler} 
under a given @term{external file format},
regardless of the value of @param{external-format} 
at the time the @term{compiled file} is @term{loaded}.

@code{load} binds @code{*readtable*} and @code{*package*}
to the values they held before @term{loading} the file.

@code{*load-truename*} is @term{bound} by @code{load} to hold 
the @term{truename} of the @term{pathname} of the file being @term{loaded}.

@code{*load-pathname*} is @term{bound} by @code{load} to hold 
a @term{pathname} that represents @param{filespec} merged against the defaults.
That is, @tt{(pathname (merge-pathnames @param{filespec}))}.

@subsubheading Examples:

@lisp
;Establish a data file...
 (with-open-file (str "data.in" :direction :output :if-exists :error)
   (print 1 str) (print '(setq a 888) str) t)
@EV{} T
 (load "data.in") @EV{} @term{true}
 a @EV{} 888
 (load (setq p (merge-pathnames "data.in")) :verbose t)
; Loading contents of file /fred/data.in
; Finished loading /fred/data.in
@EV{} @term{true}
 (load p :print t) 
; Loading contents of file /fred/data.in
;  1
;  888
; Finished loading /fred/data.in
@EV{} @term{true}
@end lisp


@medbreak{}
@lisp
 ;----[Begin file SETUP]----
 (in-package "MY-STUFF")
 (defmacro compile-truename () `',*compile-file-truename*)
 (defvar *my-compile-truename* (compile-truename) "Just for debugging.")
 (defvar *my-load-pathname* *load-pathname*)
 (defun load-my-system ()
   (dolist (module-name '("FOO" "BAR" "BAZ"))
     (load (merge-pathnames module-name *my-load-pathname*))))
 ;----[End of file SETUP]----

 
 (load "SETUP")
 (load-my-system)
@end lisp


@subsubheading Affected By:

The implementation, and the host computer's file system.

@subsubheading Exceptional Situations:

If @kwd{if-does-not-exist} is supplied and is @term{true}, or is not supplied,
@code{load} signals an error @oftype{file-error} if the file named by
@param{filespec} does not exist,
or if the @term{file system} cannot perform the requested operation.

An error @oftype{file-error} might be signaled if
@f{(wild-pathname-p @param{filespec})} returns @term{true}.

@subsubheading See Also:

@ref{error (Function)},
@ref{merge-pathnames},
@ref{*load-verbose*},
@ref{*default-pathname-defaults*},
@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{File System Concepts, Section 20.1 (File System Concepts)},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}



@node with-compilation-unit
@heading with-compilation-unit (Macro)
@syindex with-compilation-unit
@cindex with-compilation-unit



@subsubheading Syntax:

@DefmacWithValues{with-compilation-unit, @paren{@interleave{@down{option}}} @starparam{form}, @starparam{result}}

@auxbnf{option, @kwd{override} override}

@subsubheading Arguments and Values:

@param{override}---a @term{generalized boolean}; @eval{}.
@Default{@nil{}}

@param{forms}---an @term{implicit progn}.

@param{results}---the @term{values} returned by the @term{forms}.

@subsubheading Description:

Executes @param{forms} from left to right.
Within the @term{dynamic environment} of @code{with-compilation-unit},
actions deferred by the compiler until the end of compilation will be
deferred until the end of the outermost call to @code{with-compilation-unit}.

The set of @term{options} permitted may be extended by the implementation,
but the only @term{standardized} keyword is @kwd{override}.

If nested dynamically only the outer call to 
@code{with-compilation-unit} has any effect unless the value
associated with @kwd{override} is @term{true}, in which case warnings are
deferred only to the end of the innermost call for which @param{override} is @term{true}.

The function @code{compile-file} 
provides the effect of 

@lisp
 (with-compilation-unit (:override nil) ...)
@end lisp

around its @term{code}.

Any @term{implementation-dependent} extensions can only be provided as the
result of an explicit programmer request by use of an
@term{implementation-dependent} keyword.  @term{Implementations} are forbidden
from attaching additional meaning to a use of this macro which involves either
no keywords or just the keyword @kwd{override}.

@subsubheading Examples:

If an @term{implementation} would normally defer certain kinds of warnings,
such as warnings about undefined functions, to the end of a compilation
unit (such as a @term{file}), the following example shows how to cause those
warnings to be deferred to the end of the compilation of several files.

@lisp
 (defun compile-files (&rest files)
   (with-compilation-unit ()
     (mapcar #'(lambda (file) (compile-file file)) files)))

 (compile-files "A" "B" "C")
@end lisp


Note however that if the implementation does not normally defer any warnings,
use of @term{with-compilation-unit} might not have any effect.

@subsubheading See Also:

@ref{compile}, @ref{compile-file}



@node *features*
@heading *features* (Variable)
@syindex *features*
@cindex *features*


@subsubheading Value Type:

a @term{proper list}.

@subsubheading Initial Value:

@term{implementation-dependent}.

@subsubheading Description:

@Thevalueof{*features*} is called the @term{features list}.  
It is a @term{list} of @term{symbols}, called @term{features}, 
that correspond to some aspect of the @term{implementation} or @term{environment}.

Most @term{features} have @term{implementation-dependent} meanings;
The following meanings have been assigned to feature names:


@table @asis

@item @id{@kwd{cltl1}}


If present, indicates that the @code{LISP} @term{package} @term{purports to conform}
to the 1984 specification @CLtL{}.  
It is possible, but not required, for a @term{conforming implementation} 
to have this feature because this specification specifies that 
its @term{symbols} are to be in the @code{COMMON-LISP} @term{package}, 
not the @code{LISP} package.

@item @id{@kwd{cltl2}}


If present, indicates that the implementation @term{purports to conform}
to @CLtLTwo{}.
This feature must not be present in any @term{conforming implementation},
since conformance to that document is not compatible with conformance
to this specification.
The name, however, is reserved by this specification in order to help
programs distinguish implementations which conform to that document
from implementations which conform to this specification.

@item @id{@kwd{ieee-floating-point}}


If present, indicates that the implementation @term{purports to conform}
to the requirements of @IEEEFloatingPoint{}.

@item @id{@kwd{x3j13}}


If present, indicates that the implementation conforms to some
particular working draft of this specification, 
or to some subset of features that approximates a belief about
what this specification might turn out to contain.
A @term{conforming implementation} might or might not contain
such a feature.
(This feature is intended primarily as a stopgap in order to 
provide implementors something to use prior to the availability
of a draft standard, in order to discourage them from introducing
the @kwd{draft-ansi-cl} and @kwd{ansi-cl} @term{features} prematurely.)

@item @id{@kwd{draft-ansi-cl}}


If present, indicates that the @term{implementation} 
@term{purports to conform} to the first full draft of this specification,
which went to public review in 1992.
A @term{conforming implementation}
which has the @kwd{draft-ansi-cl-2} or @kwd{ansi-cl} @term{feature}
is not permitted to retain the @kwd{draft-ansi-cl} @term{feature}
since incompatible changes were made subsequent to the first draft.

@item @id{@kwd{draft-ansi-cl-2}}


If present, indicates that a second full draft of this specification
has gone to public review, and that the @term{implementation} 
@term{purports to conform} to that specification.
(If additional public review drafts are produced, this keyword
will continue to refer to the second draft, and additional keywords
will be added to identify conformance with such later drafts.
As such, the meaning of this keyword can be relied upon not to
change over time.)
A @term{conforming implementation} which has the @kwd{ansi-cl}
@term{feature} is only permitted to retain the @kwd{draft-ansi-cl} 
@term{feature} if the finally approved standard is not incompatible
with the draft standard.

@item @id{@kwd{ansi-cl}}


If present, indicates that this specification has been adopted by ANSI
as an official standard, and that the @term{implementation} 
@term{purports to conform}.

@item @id{@kwd{common-lisp}}


This feature must appear in @code{*features*} for any implementation that
has one or more of the features @kwd{x3j13}, @kwd{draft-ansi-cl},
or @kwd{ansi-cl}.  It is intended that it should also appear in
implementations which have the features @kwd{cltl1} or @kwd{cltl2},
but this specification cannot force such behavior.  The intent is 
that this feature should identify the language family named ``Common Lisp,''
rather than some specific dialect within that family.
@end table


@subsubheading See Also:

@ref{ReadTimeConditionals, Section 1.5.2.1.1 (Use of Read-Time Conditionals)},
@ref{Standard Macro Characters, Section 2.4 (Standard Macro Characters)}

@subsubheading Notes:

@Thevalueof{*features*} is used by the @f{#+} and @f{#-} reader syntax.

@term{Symbols} in the @term{features list} may be in any @term{package},
but in practice they are generally in the @code{KEYWORD} @term{package}.
This is because @code{KEYWORD} is the @term{package} used by default
when @term{reading}@sub2{} @term{feature expressions} 
in the @f{#+} and @f{#-} @term{reader macros}.
@term{Code} that needs to name a @term{feature}@sub2{} in a
@term{package} @mat{P} (other than @code{KEYWORD}) can do so
by making explicit use of a @term{package prefix} for @mat{P},
but note that such @term{code} must also assure that the @term{package} @mat{P} 
exists in order for the @term{feature expression} to be @term{read}@sub2{}---even
in cases where the @term{feature expression} is expected to fail.

It is generally considered wise for an @term{implementation} to include 
one or more @term{features} identifying the specific @term{implementation},
so that conditional expressions can be written which distinguish 
idiosyncrasies of one @term{implementation} from those of another.  
Since features are normally @term{symbols} in the @code{KEYWORD} @term{package}
where name collisions might easily result, and since no uniquely defined mechanism
is designated for deciding who has the right to use which @term{symbol} for
what reason, a conservative strategy is to prefer names derived from 
one's own company or product name, since those names are often trademarked
and are hence less likely to be used unwittingly by another @term{implementation}.


@node *compile-file-pathname*; *compile-file-truename*
@heading *compile-file-pathname*, *compile-file-truename* (Variable)
@syindex *compile-file-pathname*
@cindex *compile-file-pathname*
@syindex *compile-file-truename*
@cindex *compile-file-truename*



@subsubheading Value Type:

@Thevalueof{*compile-file-pathname*} must always be a @term{pathname}          or @nil{}.
@Thevalueof{*compile-file-truename*} must always be a @term{physical pathname} or @nil{}.

@subsubheading Initial Value:

@nil{}.

@subsubheading Description:

During a call to @code{compile-file},
@code{*compile-file-pathname*} is @term{bound} to 
the @term{pathname} denoted by the first argument to @code{compile-file},
merged against the defaults;
that is, it is @term{bound} to @f{(pathname (merge-pathnames @param{input-file}))}.
During the same time interval,
@code{*compile-file-truename*} is @term{bound} to
the @term{truename} of the @term{file} being @term{compiled}.

At other times, the @term{value} of these @term{variables} is @nil{}.

If a @term{break loop} is entered while @code{compile-file} is ongoing,
it is @term{implementation-dependent} whether these @term{variables} retain 
the @term{values} they had just prior to entering the @term{break loop} 
or whether they are @term{bound} to @nil{}.

The consequences are unspecified if 
an attempt is made to @term{assign} or @term{bind} either of these @term{variables}.

@subsubheading Affected By:

The @term{file system}.

@subsubheading See Also:

@ref{compile-file}



@node *load-pathname*; *load-truename*
@heading *load-pathname*, *load-truename* (Variable)
@syindex *load-pathname*
@cindex *load-pathname*
@syindex *load-truename*
@cindex *load-truename*


@subsubheading Value Type:

@Thevalueof{*load-pathname*} must always be a @term{pathname}          or @nil{}.
@Thevalueof{*load-truename*} must always be a @term{physical pathname} or @nil{}.

@subsubheading Initial Value:

@nil{}.

@subsubheading Description:

During a call to @code{load},
@code{*load-pathname*} is @term{bound} to 
the @term{pathname} denoted by the the first argument to @code{load},
merged against the defaults; 
that is, it is @term{bound} to @f{(pathname (merge-pathnames @param{filespec}))}.
During the same time interval,
@code{*load-truename*} is @term{bound} to
the @term{truename} of the @term{file} being loaded.

At other times, the @term{value} of these @term{variables} is @nil{}.

If a @term{break loop} is entered while @code{load} is ongoing,
it is @term{implementation-dependent} whether these @term{variables} retain 
the @term{values} they had just prior to entering the @term{break loop} 
or whether they are @term{bound} to @nil{}.

The consequences are unspecified if 
an attempt is made to @term{assign} or @term{bind} either of these @term{variables}.

@subsubheading Affected By:

The @term{file system}.

@subsubheading See Also:

@ref{load}



@node *compile-print*; *compile-verbose*
@heading *compile-print*, *compile-verbose* (Variable)
@syindex *compile-print*
@cindex *compile-print*
@syindex *compile-verbose*
@cindex *compile-verbose*



@subsubheading Value Type:

a @term{generalized boolean}.

@subsubheading Initial Value:

@term{implementation-dependent}.

@subsubheading Description:

@Thevalueof{*compile-print*}   is the default value of @thekeyarg{print}
to @code{compile-file}.
@Thevalueof{*compile-verbose*} is the default value of @thekeyarg{verbose}
to @code{compile-file}.

@subsubheading See Also:

@ref{compile-file}



@node *load-print*; *load-verbose*
@heading *load-print*, *load-verbose* (Variable)
@syindex *load-print*
@cindex *load-print*
@syindex *load-verbose*
@cindex *load-verbose*
@anchor{*load-verbose*}


@subsubheading Value Type:

a @term{generalized boolean}.

@subsubheading Initial Value:

The initial @term{value} of @code{*load-print*}   is @term{false}.
The initial @term{value} of @code{*load-verbose*} is @term{implementation-dependent}.

@subsubheading Description:

@Thevalueof{*load-print*}   is the default value of @thekeyarg{print}   to @code{load}.
@Thevalueof{*load-verbose*} is the default value of @thekeyarg{verbose} to @code{load}.

@subsubheading See Also:

@ref{load}



@node *modules*
@heading *modules* (Variable)
@syindex *modules*
@cindex *modules*



@subsubheading Value Type:

a @term{list} of @term{strings}.

@subsubheading Initial Value:

@term{implementation-dependent}.

@subsubheading Description:

@Thevalueof{*modules*} is a list of names of the modules
that have been loaded into the current @term{Lisp image}.

@subsubheading Affected By:

@code{provide}

@subsubheading See Also:

@ref{provide},
@ref{require}

@subsubheading Notes:

The variable @code{*modules*} is deprecated.



@node provide; require
@heading provide, require (Function)
@syindex provide
@cindex provide
@syindex require
@cindex require
@anchor{provide}
@anchor{require}



@subsubheading Syntax:

@DefunWithValues{provide, module-name, @term{implementation-dependent}}
@DefunWithValues{require, module-name @opt{} pathname-list, @term{implementation-dependent}}

@subsubheading Arguments and Values:

@param{module-name}---a @term{@symbolnamedesignator{}}.

@param{pathname-list}---@nil{}, or
a @term{designator} 
for a @term{non-empty} @term{list} of @term{pathname designators}.
@Default{@nil{}}

@subsubheading Description:

@code{provide} adds the @param{module-name} to the @term{list} held by
@code{*modules*}, if such a name is not already present.

@code{require} tests for the presence of the @param{module-name} in the
@term{list} held by @code{*modules*}.
If it is present, @code{require} immediately returns.
Otherwise, an attempt is made to load an appropriate set of @term{files} as follows:
The @param{pathname-list} argument, if @term{non-nil}, 
specifies a list of @term{pathnames} to be loaded in order, from left to right.
If the @param{pathname-list} is @nil{},
an @term{implementation-dependent} mechanism will be invoked in an attempt
to load the module named @param{module-name};
if no such module can be loaded, an error @oftype{error} is signaled.

Both functions use @code{string=} to test for the presence of a @param{module-name}.

@subsubheading Examples:


@lisp
;;; This illustrates a nonportable use of REQUIRE, because it
;;; depends on the implementation-dependent file-loading mechanism.

(require "CALCULUS")

;;; This use of REQUIRE is nonportable because of the literal 
;;; physical pathname.  

(require "CALCULUS" "/usr/lib/lisp/calculus")

;;; One form of portable usage involves supplying a logical pathname,
;;; with appropriate translations defined elsewhere.

(require "CALCULUS" "lib:calculus")

;;; Another form of portable usage involves using a variable or
;;; table lookup function to determine the pathname, which again
;;; must be initialized elsewhere.

(require "CALCULUS" *calculus-module-pathname*)
@end lisp


@subsubheading Side Effects:

@code{provide} modifies @code{*modules*}.

@subsubheading Affected By:

The specific action taken by @code{require} is affected by calls to @code{provide}
(or, in general, any changes to @thevalueof{*modules*}).

@subsubheading Exceptional Situations:

@Shouldchecktype{module-name, a @term{@symbolnamedesignator{}}}

If @code{require} fails to perform the requested operation 
due to a problem while interacting with the @term{file system},
an error @oftype{file-error} is signaled.

An error @oftype{file-error} might be signaled if any @term{pathname} 
in @param{pathname-list} is a @term{designator} for a @term{wild} @term{pathname}.

@subsubheading See Also:

@ref{*modules*},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}

@subsubheading Notes:

The functions @code{provide} and @code{require} are deprecated.

If a module consists of a single @term{package},
it is customary for the package and module names to be the same.





@node Environment
@chapter Environment
@menu
* The External Environment::

Dictionary

* decode-universal-time::
* encode-universal-time::
* get-universal-time; get-decoded-time::
* sleep::
* apropos; apropos-list::
* describe::
* describe-object::
* trace; untrace::
* step::
* time (Macro)::
* internal-time-units-per-second::
* get-internal-real-time::
* get-internal-run-time::
* disassemble::
* documentation; setf documentation::
* room::
* ed::
* inspect::
* dribble::
* - (Variable)::
* +; ++; +++::
* *; **; ***::
* /; //; ///::
* lisp-implementation-type; lisp-implementation-version::
* short-site-name; long-site-name::
* machine-instance::
* machine-type::
* machine-version::
* software-type; software-version::
* user-homedir-pathname::
@end menu

@node The External Environment
@section The External Environment

@menu
* Top level loop::
* Debugging Utilities::
* Environment Inquiry::
* Time::
@end menu
@node Top level loop
@subsection Top level loop
The top level loop is the @clisp{}@spc{}mechanism by which the user normally
interacts with the @clisp{}@spc{}system. This loop is sometimes referred to 
as the @term{Lisp read-eval-print loop}
because it typically consists of an endless loop that reads an expression,
evaluates it and prints the results.

The top level loop is not completely specified; thus the user
interface is @term{implementation-defined}.
The top level loop 
prints all values resulting from the evaluation of a 
@term{form}.
@Thenextfigure{}@spc{}lists variables that are maintained by the @term{Lisp read-eval-print loop}.


@float Figure,fig25.1
@cartouche
@multitable{***}{+++}{///}{-}

@item * @tab + @tab / @tab -
@item ** @tab ++ @tab // @tab 
@item *** @tab +++ @tab /// @tab 
@end multitable
@end cartouche
@caption{Variables maintained by the Read-Eval-Print Loop}
@end float



@node Debugging Utilities
@subsection Debugging Utilities

@Thenextfigure{}@spc{}shows @term{defined names} relating to
debugging.


@float Figure,fig25.2
@cartouche
@multitable{*debugger-hook*}{invoke-debugger}{untrace}

@item *debugger-hook* @tab documentation @tab step
@item apropos @tab dribble @tab time
@item apropos-list @tab ed @tab trace
@item break @tab inspect @tab untrace
@item describe @tab invoke-debugger @tab 
@end multitable
@end cartouche
@caption{Defined names relating to debugging}
@end float



@node Environment Inquiry
@subsection Environment Inquiry
Environment inquiry @term{defined names} provide information about
the hardware and software configuration on which a @clisp{}@spc{}program is
being executed.

@Thenextfigure{}@spc{}shows @term{defined names} relating to environment inquiry.


@float Figure,fig25.3
@cartouche
@multitable{lisp-implementation-version}{machine-instance}{software-version}

@item *features* @tab machine-instance @tab short-site-name
@item lisp-implementation-type @tab machine-type @tab software-type
@item lisp-implementation-version @tab machine-version @tab software-version
@item long-site-name @tab room @tab 
@end multitable
@end cartouche
@caption{Defined names relating to environment inquiry.}
@end float



@node Time
@subsection Time

Time is represented in four different ways in @clisp{}:
@term{decoded time},
@term{universal time},
@term{internal time},
and seconds.
@term{Decoded time} and @term{universal time} are used primarily to represent calendar time,
and are precise only to one second.
@term{Internal time} is used primarily to represent measurements of computer
time (such as run time) and is precise to some @term{implementation-dependent}
fraction of a second called an @term{internal time unit},
as specified by @code{internal-time-units-per-second}.
An @term{internal time} can be used 
for either @term{absolute} and @term{relative} @term{time} measurements.
Both a @term{universal time} and a @term{decoded time} can be used 
only for @term{absolute} @term{time} measurements.
In the case of one function, @code{sleep},
time intervals are represented as a non-negative @term{real} number of seconds.

@Thenextfigure{}@spc{}shows @term{defined names} relating to @term{time}.


@float Figure,fig25.4
@cartouche
@multitable{get-internal-real-time}{internal-time-units-per-second}

@item decode-universal-time @tab get-internal-run-time
@item encode-universal-time @tab get-universal-time
@item get-decoded-time @tab internal-time-units-per-second
@item get-internal-real-time @tab sleep
@end multitable
@end cartouche
@caption{Defined names involving Time.}
@end float


@subsubsection Decoded Time
@anchor{DecodedTime}

A @newterm{decoded time} is an ordered series of nine values that, taken together,
represent a point in calendar time (ignoring @term{leap seconds}):


@table @asis
@item @id{@b{Second}}


An @term{integer} between 0 and@tie{}59, inclusive.

@item @id{@b{Minute}}


An @term{integer} between 0 and@tie{}59, inclusive.

@item @id{@b{Hour}}


An @term{integer} between 0 and@tie{}23, inclusive.

@item @id{@b{Date}}


An @term{integer} between 1 and@tie{}31, inclusive (the upper limit actually
depends on the month and year, of course).

@item @id{@b{Month}}


An @term{integer} between 1 and 12, inclusive;
1@tie{}means January, 2@tie{}means February, and so on; 12@tie{}means December.

@item @id{@b{Year}}


An @term{integer} indicating the year A.D.  However, if this 
@term{integer}
is between 0 and 99, the ``obvious'' year is used; more precisely,
that year is assumed that is equal to the 
@term{integer} modulo 100 and
within fifty years of the current year (inclusive backwards
and exclusive forwards).  
Thus, in the year 1978, year 28 is 1928
but year 27 is 2027.  (Functions that return time in this format always return
a full year number.) 

@item @id{@b{Day of week}}


An @term{integer} between@tie{}0 and@tie{}6, inclusive;
0@tie{}means Monday, 1@tie{}means Tuesday, and so on; 6@tie{}means Sunday.

@item @id{@b{Daylight saving time flag}}


A @term{generalized boolean} that,
if @term{true}, indicates that daylight saving time is in effect.

@item @id{@b{Time zone}}


A @term{time zone}.
@end table


@Thenextfigure{}@spc{}shows @term{defined names} relating to @term{decoded time}.


@float Figure,fig25.5
@cartouche
@multitable{decode-universal-time}{get-decoded-time}

@item decode-universal-time @tab get-decoded-time
@end multitable
@end cartouche
@caption{Defined names involving time in Decoded Time.}
@end float



@subsubsection Universal Time
@anchor{UniversalTime}

@cindex universal time
@dfn{Universal time} is an @term{absolute} @term{time} represented as a
single non-negative @term{integer}---the number of seconds since
midnight, January 1, 1900 GMT (ignoring @term{leap seconds}).
Thus the time 1 is 00:00:01 (that is, 12:00:01 a.m.) on January 1, 1900 GMT.
Similarly, the time 2398291201 corresponds to time 00:00:01 on January 1,
1976 GMT.
Recall that the year 1900 was not a leap year; for the purposes of
@clisp{}, a year is a leap year if and only if its number is divisible by 4,
except that years divisible by 100 are not leap years, except that years
divisible by 400 are leap years.  Therefore the year 2000 will
be a leap year.
Because @term{universal time} must be a non-negative @term{integer},
times before the base time of midnight, January 1, 1900 GMT cannot be processed by @clisp{}.


@float Figure,fig25.6
@cartouche
@multitable{decode-universal-time}{get-universal-time}

@item decode-universal-time @tab get-universal-time
@item encode-universal-time @tab 
@end multitable
@end cartouche
@caption{Defined names involving time in Universal Time.}
@end float



@subsubsection Internal Time
@anchor{InternalTime}

@cindex internal time
@dfn{Internal time} represents time as a single @term{integer},
in terms of an @term{implementation-dependent} unit called an @term{internal time unit}.
Relative time is measured as a number of these units.
Absolute time is relative to an arbitrary time base.

@Thenextfigure{}@spc{}shows @term{defined names} related to @term{internal time}.


@float Figure,fig25.7
@cartouche
@multitable{get-internal-real-time}{internal-time-units-per-second}

@item get-internal-real-time @tab internal-time-units-per-second
@item get-internal-run-time @tab 
@end multitable
@end cartouche
@caption{Defined names involving time in Internal Time.}
@end float



@subsubsection Seconds

One function, @code{sleep}, takes its argument as a non-negative @term{real} number
of seconds.  Informally, it may be useful to think of this as 
a @term{relative} @term{universal time}, but it differs in one important way:
@term{universal times} are always non-negative @term{integers}, whereas the argument to
@code{sleep} can be any kind of non-negative @term{real}, in order to allow for
the possibility of fractional seconds.


@float Figure,fig25.8
@cartouche
@multitable{sleep}{}

@item sleep @tab 
@end multitable
@end cartouche
@caption{Defined names involving time in Seconds.}
@end float





@node decode-universal-time
@heading decode-universal-time (Function)
@syindex decode-universal-time
@cindex decode-universal-time


@subsubheading Syntax:

@DefunWithValuesNewline{decode-universal-time, universal-time @opt{} time-zone, second\, minute\, hour\, date\, month\, year\, day\, daylight-p\, zone}

@subsubheading Arguments and Values:

@param{universal-time}---a @term{universal time}.

@param{time-zone}---a @term{time zone}.

@param{second}, @param{minute}, @param{hour}, @param{date}, @param{month},
@param{year}, @param{day}, @param{daylight-p}, @param{zone}---a @term{decoded time}.

@subsubheading Description:

Returns the @term{decoded time} represented by the given @term{universal time}.

If @param{time-zone} is not supplied,
it defaults to the current time zone adjusted for daylight saving time.  
If @param{time-zone} is supplied, daylight saving time information is ignored.
The daylight saving time flag is @nil{}@spc{}if @param{time-zone} is supplied.

@subsubheading Examples:

@lisp
 (decode-universal-time 0 0) @EV{} 0, 0, 0, 1, 1, 1900, 0, @term{false}, 0

;; The next two examples assume Eastern Daylight Time.
 (decode-universal-time 2414296800 5) @EV{} 0, 0, 1, 4, 7, 1976, 6, @term{false}, 5
 (decode-universal-time 2414293200) @EV{} 0, 0, 1, 4, 7, 1976, 6, @term{true}, 5

;; This example assumes that the time zone is Eastern Daylight Time
;; (and that the time zone is constant throughout the example).
 (let* ((here (nth 8 (multiple-value-list (get-decoded-time)))) ;Time zone
        (recently (get-universal-time))
        (a (nthcdr 7 (multiple-value-list (decode-universal-time recently))))
        (b (nthcdr 7 (multiple-value-list (decode-universal-time recently here)))))
   (list a b (equal a b))) @EV{} ((T 5) (NIL 5) NIL)
@end lisp


@subsubheading Affected By:

@term{Implementation-dependent} mechanisms for calculating when or if daylight
savings time is in effect for any given session.

@subsubheading See Also:

@ref{encode-universal-time}, @ref{get-universal-time}, 
@ref{Time, Section 25.1.4 (Time)}


@node encode-universal-time
@heading encode-universal-time (function)
@syindex encode-universal-time
@cindex encode-universal-time


@subsubheading Syntax:

@DefunWithValuesNewline{encode-universal-time, @vtop{@hbox{second minute hour date month year} @hbox{@opt{} time-zone}}, universal-time}

@subsubheading Arguments and Values:

@param{second}, @param{minute}, @param{hour}, 
@param{date}, @param{month}, @param{year}, 
@param{time-zone}---the corresponding parts of a @term{decoded time}.
(Note that some of the nine values in a full @term{decoded time} are redundant,
and so are not used as inputs to this function.)

@param{universal-time}---a @term{universal time}.

@subsubheading Description:

@code{encode-universal-time} converts a time from Decoded Time format
to a @term{universal time}.

If @param{time-zone} is supplied, no adjustment for daylight savings time is performed.

@subsubheading Examples:

@lisp
 (encode-universal-time 0 0 0 1 1 1900 0) @EV{} 0
 (encode-universal-time 0 0 1 4 7 1976 5) @EV{} 2414296800
;; The next example assumes Eastern Daylight Time.
 (encode-universal-time 0 0 1 4 7 1976) @EV{} 2414293200
@end lisp


@subsubheading See Also:

@ref{decode-universal-time}, @ref{get-decoded-time}


@node get-universal-time; get-decoded-time
@heading get-universal-time, get-decoded-time (Function)
@syindex get-universal-time
@cindex get-universal-time
@syindex get-decoded-time
@cindex get-decoded-time
@anchor{get-universal-time}
@anchor{get-decoded-time}


@subsubheading Syntax:

@DefunWithValues{get-universal-time, @noargs{}, universal-time}

@DefunWithValuesNewline{get-decoded-time, @noargs{}, second\, minute\, hour\, date\, month\, year\, day\, daylight-p\, zone}

@subsubheading Arguments and Values:

@param{universal-time}---a @term{universal time}.

@param{second}, @param{minute}, @param{hour},
@param{date}, @param{month}, @param{year},
@param{day}, @param{daylight-p}, @param{zone}---a @term{decoded time}.

@subsubheading Description:

@code{get-universal-time} returns the current time, represented as a @term{universal time}.

@code{get-decoded-time} returns the current time, represented as a @term{decoded time}.

@subsubheading Examples:

@lisp
;; At noon on July 4, 1976 in Eastern Daylight Time.
 (get-decoded-time) @EV{} 0, 0, 12, 4, 7, 1976, 6, @term{true}, 5
;; At exactly the same instant.
 (get-universal-time) @EV{} 2414332800
;; Exactly five minutes later.
 (get-universal-time) @EV{} 2414333100
;; The difference is 300 seconds (five minutes)
 (- * **) @EV{} 300
@end lisp


@subsubheading Affected By:

The time of day (@ie{} the passage of time),
the system clock's ability to keep accurate time,
and the accuracy of the system clock's initial setting.

@subsubheading Exceptional Situations:

An error @oftype{error} might be signaled if the current time cannot be determined.

@subsubheading See Also:

@ref{decode-universal-time},
@ref{encode-universal-time},
@ref{Time, Section 25.1.4 (Time)}

@subsubheading Notes:

@lisp
 (get-decoded-time) @EQ{} (decode-universal-time (get-universal-time))
@end lisp


No @term{implementation} is required to have a way to verify that the
time returned is correct.  However, if an @term{implementation} provides
a validity check (@eg{} the failure to have properly initialized the system
clock can be reliably detected) and that validity check fails, 
the @term{implementation} is strongly encouraged (but not required)
to signal an error @oftype{error} (rather than, for example, returning a
known-to-be-wrong value) that is @term{correctable} by allowing the user
to interactively set the correct time.


@node sleep
@heading sleep (Function)
@syindex sleep
@cindex sleep


@subsubheading Syntax:

@DefunWithValues{sleep, seconds, @nil{}}

@subsubheading Arguments and Values:

@param{seconds}---a non-negative @term{real}.

@subsubheading Description:

Causes execution to cease and become dormant for approximately the
seconds of real time indicated by @param{seconds}, 
whereupon execution is resumed.

@subsubheading Examples:

@lisp
 (sleep 1) @EV{} NIL 

;; Actually, since SLEEP is permitted to use approximate timing, 
;; this might not always yield true, but it will often enough that
;; we felt it to be a productive example of the intent.
 (let ((then (get-universal-time))
       (now  (progn (sleep 10) (get-universal-time))))
   (>= (- now then) 10))
@EV{} @term{true}
@end lisp


@subsubheading Side Effects:

Causes processing to pause.

@subsubheading Affected By:

The granularity of the scheduler.

@subsubheading Exceptional Situations:

@Shouldchecktype{seconds, a non-negative @term{real}}


@node apropos; apropos-list
@heading apropos, apropos-list (Function)
@syindex apropos
@cindex apropos
@syindex apropos-list
@cindex apropos-list


@subsubheading Syntax:

@DefunWithValues{apropos, string @opt{} package, @novalues{}}

@DefunWithValues{apropos-list, string @opt{} package, symbols}

@subsubheading Arguments and Values:

@param{string}---a @term{@symbolnamedesignator{}}.

@param{package}---a @term{package designator} or @nil{}.
@Default{@nil{}}

@param{symbols}---a @term{list} of @term{symbols}.

@subsubheading Description:

These functions search for @term{interned} @term{symbols} 
whose @term{names} contain the substring @param{string}.

For @code{apropos}, as each such @term{symbol} is found,
its name is printed on @term{standard output}.
In addition,
if such a @term{symbol} is defined as a @term{function} or @term{dynamic variable},
information about those definitions might also be printed.

For @code{apropos-list},
no output occurs as the search proceeds;
instead a list of the matching @term{symbols} is returned when the search is complete.

If @param{package} is @term{non-nil},
only the @term{symbols} @term{accessible} in that @param{package} are searched;
otherwise all @term{symbols} @term{accessible} in any @term{package} are searched.

Because a @term{symbol} might be available 
by way of more than one inheritance path,
@code{apropos} might print information about the @term{same} @term{symbol} more than once,
or @code{apropos-list} might return a @term{list} containing duplicate @term{symbols}.

Whether or not the search is case-sensitive is @term{implementation-defined}.

@subsubheading Affected By:

The set of @term{symbols} which are currently @term{interned}
in any @term{packages} being searched.

@code{apropos} is also affected by @code{*standard-output*}.


@node describe
@heading describe (Function)
@syindex describe
@cindex describe


@subsubheading Syntax:

@DefunWithValues{describe, object @opt{} stream, @novalues{}}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{stream}---an @term{output} @term{stream designator}.
@Default{@term{standard output}}

@subsubheading Description:

@code{describe} displays information about @param{object}
to @param{stream}.

For example, @code{describe} of a @term{symbol} might show the
@term{symbol}'s value, its definition, and each of its properties. 
@code{describe} of a @term{float} might show the number's
internal representation in a way that is useful for tracking
down round-off errors.  In all cases, however, the nature and format of the
output of @code{describe} is @term{implementation-dependent}.

@code{describe} can describe something that it finds inside the @param{object};
in such cases, a notational device such as increased indentation or positioning in a
table is typically used in order to visually distinguish such recursive descriptions 
from descriptions of the argument @param{object}.

The actual act of describing the object is implemented by @code{describe-object}.
@code{describe} exists as an interface primarily to manage argument defaulting (including
conversion of arguments @code{t}@spc{}and @nil{}@spc{}into @term{stream} @term{objects}) and to inhibit
any return values from @code{describe-object}.

@code{describe} is not intended to be an interactive function.  In a 
@term{conforming implementation}, @code{describe} must not, by default, 
prompt for user input.  User-defined methods for @code{describe-object}
are likewise restricted.  

@subsubheading Side Effects:

Output to @term{standard output} or @term{terminal I/O}.

@subsubheading Affected By:

@code{*standard-output*} and @code{*terminal-io*},
methods on @code{describe-object} and @code{print-object}
for @term{objects} having user-defined @term{classes}.

@subsubheading See Also:

@ref{inspect}, @ref{describe-object}


@node describe-object
@heading describe-object (Standard Generic Function)
@syindex describe-object
@cindex describe-object



@subsubheading Syntax:

@DefgenWithValues{describe-object, object stream, @term{implementation-dependent}}

@subsubheading Method Signatures:

 describe-object (@param{object} standard-object) @param{stream}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@param{stream}---a @term{stream}.

@subsubheading Description:

The generic function @code{describe-object} prints a description of
@param{object} to a @param{stream}.  @code{describe-object} is called 
by @code{describe}; it must not be called by the user.

Each implementation is required to provide a @term{method} on 
@theclass{standard-object} and @term{methods} on enough other
@term{classes} so as to ensure that there is always an applicable @term{method}.  
Implementations are free to add @term{methods} for other @term{classes}.
Users can write @term{methods} for @code{describe-object} for their
own @term{classes} if they do not wish to inherit an implementation-supplied
@term{method}.

@term{Methods} on @code{describe-object} can recursively call
@code{describe}.  Indentation, depth limits, and circularity detection
are all taken care of automatically, provided that each @term{method} 
handles exactly one level of structure and calls @code{describe} 
recursively if there are more structural levels.  The consequences are 
undefined if this rule is not obeyed.

In some implementations the @param{stream} argument passed to a
@code{describe-object} method is not the original @param{stream}, but is
an intermediate @term{stream} that implements parts of @code{describe}.
@term{Methods} should therefore not depend on the identity of this
@term{stream}.


@subsubheading Examples:

@lisp
 (defclass spaceship ()
   ((captain :initarg :captain :accessor spaceship-captain)
    (serial# :initarg :serial-number :accessor spaceship-serial-number)))

 (defclass federation-starship (spaceship) ())

 (defmethod describe-object ((s spaceship) stream)
   (with-slots (captain serial#) s
     (format stream "~&~S is a spaceship of type ~S,~
                     ~%with ~A at the helm ~
                       and with serial number ~D.~%"
             s (type-of s) captain serial#)))

 (make-instance 'federation-starship
                :captain "Rachel Garrett"
                :serial-number "NCC-1701-C")
@EV{} #<FEDERATION-STARSHIP 26312465>

 (describe *)
@OUT{} #<FEDERATION-STARSHIP 26312465> is a spaceship of type FEDERATION-STARSHIP,
@OUT{} with Rachel Garrett at the helm and with serial number NCC-1701-C.
@EV{} @novalues{}
@end lisp


@subsubheading See Also:

@ref{describe}

@subsubheading Notes:

The same implementation techniques that are applicable to @code{print-object} are
applicable to @code{describe-object}.

The reason for making the return values for @code{describe-object}
unspecified is to  avoid forcing users to include explicit @f{(values)}
in all of their @term{methods}.  @code{describe} takes care of that.



@node trace; untrace
@heading trace, untrace (Macro)
@syindex trace
@cindex trace
@syindex untrace
@cindex untrace
@anchor{trace}


@subsubheading Syntax:

@DefmacWithValues{trace, @starparam{function-name}, trace-result}
@DefmacWithValues{untrace, @starparam{function-name}, untrace-result}

@subsubheading Arguments and Values:

@param{function-name}---a @term{function name}.

@param{trace-result}---@term{implementation-dependent},
unless no @term{function-names} are supplied, 
in which case @param{trace-result} is a @term{list} of @term{function names}.

@param{untrace-result}---@term{implementation-dependent}.

@subsubheading Description:

@code{trace} and @code{untrace} control the invocation of the trace facility.  

Invoking @code{trace} with one or more @param{function-names} causes
the denoted @term{functions} to be ``traced.''
Whenever a traced @term{function} is invoked, information
about the call,
about the arguments passed,
and about any eventually returned values
is printed to @term{trace output}.
If @code{trace} is used with no @param{function-names},
no tracing action is performed; 
instead, a list of the @term{functions} currently being traced is returned.

Invoking @code{untrace} with one or more function names causes those
functions to be ``untraced'' (@ie{} no longer traced).
If @code{untrace} is used with no @param{function-names},
all @term{functions} currently being traced are untraced.

If a @term{function} to be traced has been open-coded
(@eg{} because it was declared @code{inline}),
a call to that @term{function} might not produce trace output.

@subsubheading Examples:

@lisp
 (defun fact (n) (if (zerop n) 1 (* n (fact (- n 1)))))
@EV{} FACT
 (trace fact)
@EV{} (FACT)
;; Of course, the format of traced output is implementation-dependent.
 (fact 3)
@OUT{} 1 Enter FACT 3
@OUT{} | 2 Enter FACT 2
@OUT{} |   3 Enter FACT 1
@OUT{} |   | 4 Enter FACT 0
@OUT{} |   | 4 Exit FACT 1
@OUT{} |   3 Exit FACT 1
@OUT{} | 2 Exit FACT 2
@OUT{} 1 Exit FACT 6
@EV{} 6
@end lisp


@subsubheading Side Effects:

Might change the definitions of the @term{functions} named by @param{function-names}.

@subsubheading Affected By:

Whether the functions named are defined or already being traced.

@subsubheading Exceptional Situations:

Tracing an already traced function,
or untracing a function not currently being traced,
should produce no harmful effects, but might signal a warning.

@subsubheading See Also:

@ref{*trace-output*},
@ref{step}

@subsubheading Notes:

@code{trace} and @code{untrace} may also accept additional
@term{implementation-dependent} argument formats.  The format of the trace
output is @term{implementation-dependent}.

Although @code{trace} can be extended to permit non-standard options,
@term{implementations} are nevertheless encouraged (but not required)
to warn about the use of syntax or options 
that are neither specified by this standard 
nor added as an extension by the @term{implementation},
since they could be symptomatic of typographical errors
or of reliance on features supported in @term{implementations} 
other than the current @term{implementation}.


@node step
@heading step (Macro)
@syindex step
@cindex step


@subsubheading Syntax:

@DefmacWithValues{step, form, @starparam{result}}

@subsubheading Arguments and Values:

@param{form}---a @term{form}; @evalspecial{}.

@param{results}---the @term{values} returned by the @param{form}.

@subsubheading Description:

@code{step} implements a debugging paradigm wherein the programmer
is allowed to @term{step} through the @term{evaluation} of a @term{form}.
The specific nature of the interaction,
including which I/O streams are used and
whether the stepping has lexical or dynamic scope,
is @term{implementation-defined}.

@code{step} evaluates @param{form} in the current @term{environment}.
A call to @code{step} can be compiled, but it is acceptable for an
implementation to interactively step through only those parts of the computation
that are interpreted.

It is technically permissible for a @term{conforming implementation} 
to take no action at all other than normal @term{execution} of the @param{form}.
In such a situation, 
@f{(step @i{form})}
is equivalent to, for example,
@f{(let () @i{form})}. 
In implementations where this is the case, the associated documentation
should mention that fact.

@subsubheading See Also:

@ref{trace}


@subsubheading Notes:

@term{Implementations} are encouraged to respond to the typing of @f{?} 
or the pressing of a ``help key'' by providing help including a list of
commands.



@node time (Macro)
@heading time (Macro)
@syindex time
@cindex time


@subsubheading Syntax:

@DefmacWithValues{time, form, @starparam{result}}

@subsubheading Arguments and Values:

@param{form}---a @term{form}; @evalspecial{}.

@param{results}---the @term{values} returned by the @param{form}.

@subsubheading Description:

@code{time} evaluates @param{form} in the current @term{environment} (lexical and dynamic).
A call to @code{time} can be compiled.

@code{time} prints various timing data and other information to @term{trace output}.
The nature and format of the printed information is @term{implementation-defined}.
Implementations are encouraged to provide such information as 
elapsed real time,
machine run time,
and storage management statistics.

@subsubheading Affected By:

The accuracy of the results depends, among other things, on the accuracy
of the corresponding functions provided by the underlying operating system.

The magnitude of the results may depend on 
the hardware,
the operating system,
the lisp implementation,
and the state of the global environment.
Some specific issues which frequently affect the outcome are
hardware speed,
nature of the scheduler (if any),
number of competing processes (if any),
system paging,
whether the call is interpreted or compiled,
whether functions called are compiled,
the kind of garbage collector involved and whether it runs,
whether internal data structures (e.g., hash tables) are implicitly reorganized,
@etc{}.

@subsubheading See Also:

@ref{get-internal-real-time},
@ref{get-internal-run-time}

@subsubheading Notes:

In general, these timings are not guaranteed to be reliable enough for
marketing comparisons. Their value is primarily heuristic, for tuning
purposes.

For useful background information on the complicated issues involved in
interpreting timing results, see @GabrielBenchmarks{}.


@node internal-time-units-per-second
@heading internal-time-units-per-second (Constant Variable)
@syindex internal-time-units-per-second
@cindex internal-time-units-per-second


@subsubheading Constant Value:

A positive @term{integer}, the magnitude of which is @term{implementation-dependent}.

@subsubheading Description:

The number of @term{internal time units} in one second.

@subsubheading See Also:

@ref{get-internal-run-time}, @ref{get-internal-real-time}

@subsubheading Notes:

These units form the basis of the Internal Time format representation.


@node get-internal-real-time
@heading get-internal-real-time (Function)
@syindex get-internal-real-time
@cindex get-internal-real-time


@subsubheading Syntax:

@DefunWithValues{get-internal-real-time, @noargs{}, internal-time}

@subsubheading Arguments and Values:

@param{internal-time}---a non-negative @term{integer}.

@subsubheading Description:

@code{get-internal-real-time} returns as an @term{integer} the 
current time in @term{internal time units}, relative to an arbitrary 
time base.  The difference between the values of two calls to this
function is the amount of elapsed real time (@ie{} clock time) between the two calls. 

@subsubheading Affected By:

Time of day (@ie{} the passage of time).
The time base affects the result magnitude.

@subsubheading See Also:

@ref{internal-time-units-per-second}


@node get-internal-run-time
@heading get-internal-run-time (Function)
@syindex get-internal-run-time
@cindex get-internal-run-time


@subsubheading Syntax:

@DefunWithValues{get-internal-run-time, @noargs{}, internal-time}

@subsubheading Arguments and Values:

@param{internal-time}---a non-negative @term{integer}.

@subsubheading Description:

Returns as an @term{integer} the current 
run time in @term{internal time units}.  The precise meaning of this quantity is
@term{implementation-defined};  it may measure real time, run time, CPU cycles, or some
other quantity.  The intent is that the difference between the values of two calls
to this function be the amount of time between the two calls during which 
computational effort was expended on behalf of the executing program.

@subsubheading Affected By:

The @term{implementation},
the time of day (@ie{} the passage of time).

@subsubheading See Also:

@ref{internal-time-units-per-second}

@subsubheading Notes:

Depending on the @term{implementation}, paging time and garbage
collection time might be included in this measurement.  Also, in a
multitasking environment, it might not be possible to show the time for
just the running process, so in some @term{implementations}, time taken
by other processes during the same time interval might be included in
this measurement as well.


@node disassemble
@heading disassemble (Function)
@syindex disassemble
@cindex disassemble


@subsubheading Syntax:

@DefunWithValues{disassemble, fn, @nil{}}

@subsubheading Arguments and Values:

@param{fn}---an @term{extended function designator}
or a @term{lambda expression}.

@subsubheading Description:

@Thefunction{disassemble} is a debugging aid that composes symbolic 
instructions or expressions in some @term{implementation-dependent} 
language which represent the code used to produce the @term{function}
which is or is named by the argument @param{fn}.  The result is displayed
to @term{standard output} in an @term{implementation-dependent} format.

If @param{fn} is a @term{lambda expression} or @term{interpreted function},
it is compiled first and the result is disassembled.

If the @param{fn} @term{designator} is a @term{function name},
the @term{function} that it @term{names} is disassembled.
(If that @term{function} is an @term{interpreted function},
it is first compiled but the result of this implicit compilation is not installed.)

@subsubheading Examples:
@lisp
 (defun f (a) (1+ a)) @EV{} F
 (eq (symbol-function 'f)
     (progn (disassemble 'f)
            (symbol-function 'f))) @EV{} @term{true}
@end lisp


@subsubheading Affected By:

@code{*standard-output*}.

@subsubheading Exceptional Situations:

@Shouldchecktype{fn, an @term{extended function designator} or a @term{lambda expression}}



@node documentation; setf documentation
@heading documentation, (setf documentation) (Standard Generic Function)
@syindex documentation
@cindex documentation
@syindex (setf documentation)
@cindex (setf documentation)
@anchor{documentation}



@subsubheading Syntax:

@DefgenWithValues{documentation, x doc-type, documentation}

@DefgenWithValues{(setf documentation), new-value x doc-type, new-value}

@subsubheading Argument Precedence Order:

@param{doc-type}, @param{object}

@subsubheading Method Signatures:



Functions, Macros, and Special Forms

documentation (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

documentation (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

documentation (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

documentation (@var{x} @code{list}) (@var{doc-type} @f{(eql 'list)}) list

documentation (@var{x} @code{list}) (@var{doc-type} @f{(eql 'list)}) list

documentation (@var{x} @code{function}) (@var{doc-type} @f{(eql 'function)}) function

documentation (@var{x} @code{function}) (@var{doc-type} @f{(eql 'function)}) function

(setf documentation) @var{new-value} (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

(setf documentation) @var{new-value} (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

(setf documentation) @var{new-value} (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

(setf documentation) @var{new-value} (@var{x} @code{list}) (@var{doc-type} @f{(eql 'list)}) list

(setf documentation) @var{new-value} (@var{x} @code{list}) (@var{doc-type} @f{(eql 'list)}) list

(setf documentation) @var{new-value} (@var{x} @code{function}) (@var{doc-type} @f{(eql 'function)}) function

(setf documentation) @var{new-value} (@var{x} @code{function}) (@var{doc-type} @f{(eql 'function)}) function



Method Combinations

documentation (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

documentation (@var{x} @code{method-combination}) (@var{doc-type} @f{(eql 'method-combination)}) method-combination

documentation (@var{x} @code{method-combination}) (@var{doc-type} @f{(eql 'method-combination)}) method-combination

(setf documentation) @var{new-value} (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

(setf documentation) @var{new-value} (@var{x} @code{method-combination}) (@var{doc-type} @f{(eql 'method-combination)}) method-combination

(setf documentation) @var{new-value} (@var{x} @code{method-combination}) (@var{doc-type} @f{(eql 'method-combination)}) method-combination



Methods

documentation (@var{x} @code{standard-method}) (@var{doc-type} @f{(eql 'standard-method)}) standard-method

(setf documentation) @var{new-value} (@var{x} @code{standard-method}) (@var{doc-type} @f{(eql 'standard-method)}) standard-method



Packages

documentation (@var{x} @code{package}) (@var{doc-type} @f{(eql 'package)}) package

(setf documentation) @var{new-value} (@var{x} @code{package}) (@var{doc-type} @f{(eql 'package)}) package



Types, Classes, and Structure Names

documentation (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

documentation (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

documentation (@var{x} @code{structure-class}) (@var{doc-type} @f{(eql 'structure-class)}) structure-class

documentation (@var{x} @code{structure-class}) (@var{doc-type} @f{(eql 'structure-class)}) structure-class

documentation (@var{x} @code{standard-class}) (@var{doc-type} @f{(eql 'standard-class)}) standard-class

documentation (@var{x} @code{standard-class}) (@var{doc-type} @f{(eql 'standard-class)}) standard-class

(setf documentation) @var{new-value} (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

(setf documentation) @var{new-value} (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

(setf documentation) @var{new-value} (@var{x} @code{structure-class}) (@var{doc-type} @f{(eql 'structure-class)}) structure-class

(setf documentation) @var{new-value} (@var{x} @code{structure-class}) (@var{doc-type} @f{(eql 'structure-class)}) structure-class

(setf documentation) @var{new-value} (@var{x} @code{standard-class}) (@var{doc-type} @f{(eql 'standard-class)}) standard-class

(setf documentation) @var{new-value} (@var{x} @code{standard-class}) (@var{doc-type} @f{(eql 'standard-class)}) standard-class



Variables

documentation (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol

(setf documentation) @var{new-value} (@var{x} @code{symbol}) (@var{doc-type} @f{(eql 'symbol)}) symbol




@subsubheading Arguments and Values:

@param{x}---an @term{object}.

@param{doc-type}---a @term{symbol}.

@param{documentation}---a @term{string}, or @nil{}.

@param{new-value}---a @term{string}.

@subsubheading Description:

@TheGF{documentation} returns the @term{documentation string}
associated with the given @term{object} if it is available;
otherwise it returns @nil{}.

The @term{generic function} @f{(setf documentation)} updates the 
@term{documentation string} associated with @param{x} to @param{new-value}.
If @param{x} is a @term{list},
it must be of the form @f{(setf @param{symbol})}.

@term{Documentation strings} are made available for debugging purposes.
@term{Conforming programs} are permitted to use @term{documentation strings}
when they are present, but should not depend for their correct behavior on 
the presence of those @term{documentation strings}.
An @term{implementation} is permitted to discard @term{documentation strings} 
at any time for @term{implementation-defined} reasons.

The nature of the @term{documentation string} returned depends on the
@param{doc-type}, as follows:


@table @asis

@item @id{@t{compiler-macro}}


Returns the @term{documentation string} of the @term{compiler macro}
whose @term{name} is the @term{function name} @param{x}.

@item @id{@t{function}}


If @param{x} is a @term{function name},
returns the @term{documentation string} of 
the @term{function}, @term{macro}, or @term{special operator} 
whose @term{name} is @param{x}.

If @param{x} is a @term{function},
returns the @term{documentation string} associated with @param{x}.

@item @id{@t{method-combination}}


If @param{x} is a @term{symbol},
returns the @term{documentation string} of
the @term{method combination}
whose @term{name} is @param{x}.

If @param{x} is a @term{method combination},
returns the @term{documentation string} associated with @param{x}.

@item @id{@t{setf}}


Returns the @term{documentation string} of 
the @term{setf expander}
whose @term{name} is the @term{symbol} @param{x}.

@item @id{@t{structure}}


Returns the @term{documentation string} 
associated with the @term{structure name} @param{x}.

@item @id{@t{t}}


Returns a @term{documentation string} specialized on the @term{class} of
the argument @param{x} itself.
For example, if @param{x} is a @term{function},
the @term{documentation string} associated with the @term{function} @param{x} is returned.

@item @id{@t{type}}


If @param{x} is a @term{symbol},
returns the @term{documentation string} of the @term{class}
whose @term{name} is the @term{symbol} @param{x},
if there is such a @term{class}.
Otherwise, it returns the @term{documentation string} of the @term{type} 
which is the @term{type specifier} @term{symbol} @param{x}.

If @param{x} is a @term{structure class} or @term{standard class},
returns the @term{documentation string} associated with
the @term{class} @param{x}.

@item @id{@t{variable}}


Returns the @term{documentation string} of
the @term{dynamic variable} or @term{constant variable}
whose @term{name} is the @term{symbol} @param{x}.
@end table


A @term{conforming implementation} or a @term{conforming program}
may extend the set of @term{symbols} that are acceptable as the @param{doc-type}.

@subsubheading Notes:

This standard prescribes no means to retrieve the @term{documentation strings}
for individual slots specified in a @code{defclass} form, but 
@term{implementations} might still provide debugging tools and/or
programming language extensions which manipulate this information.
Implementors wishing to provide such support are encouraged to consult the
@term{Metaobject Protocol} for suggestions about how this might be done.



@node room
@heading room (Function)
@syindex room
@cindex room


@subsubheading Syntax:

@DefunWithValues{room, @opt{} x, @term{implementation-dependent}}

@subsubheading Arguments and Values:

@param{x}---one of @code{t}, @nil{}, or @kwd{default}.

@subsubheading Description:

@code{room} prints, to @term{standard output},
information about the state of internal storage and its management.
This might include descriptions of the amount of memory in use and 
the degree of memory compaction, possibly broken down by internal data type if that
is appropriate.  The nature and format of the printed information is
@term{implementation-dependent}.
The intent is to provide information that a @term{programmer}
might use to tune a @term{program} for a particular @term{implementation}.

@f{(room nil)} prints out a minimal amount of information.
@f{(room t)} prints out a maximal amount of information.
@f{(room)} or @f{(room :default)} prints out an intermediate amount
of information that is likely to be useful.

@subsubheading Side Effects:

Output to @term{standard output}.

@subsubheading Affected By:

@code{*standard-output*}.


@node ed
@heading ed (Function)
@syindex ed
@cindex ed


@subsubheading Syntax:

@DefunWithValues{ed, @opt{} x, @term{implementation-dependent}}

@subsubheading Arguments and Values:

@param{x}---@nil{}, a @term{pathname}, a @term{string}, or a @term{function name}.
@Default{@nil{}}

@subsubheading Description:

@code{ed} invokes the editor if the @term{implementation} provides a resident editor.

If @param{x} is @nil{}, the editor is entered.
If the editor had been previously entered, its prior state is resumed, if possible.

If @param{x} is a @term{pathname} or @term{string}, 
it is taken as the @term{pathname designator} for a @term{file} to be edited.

If @param{x} is a @term{function name}, the text of its definition is edited.
The means by which the function text is obtained is @term{implementation-defined}.

@subsubheading Exceptional Situations:

The consequences are undefined if the @term{implementation} does not provide a resident editor.

Might signal @code{type-error} if its argument is supplied but is not
a @term{symbol}, a @term{pathname}, or @nil{}. 

If a failure occurs when performing some operation on the @term{file system}
while attempting to edit a @term{file},
an error @oftype{file-error} is signaled.

An error @oftype{file-error} might be signaled if @param{x}
is a @term{designator} for a @term{wild} @term{pathname}.

@term{Implementation-dependent} additional conditions might be signaled as well.

@subsubheading See Also:

@ref{pathname (System Class)},
@ref{logical-pathname (System Class)},
@ref{compile-file},
@ref{load},
@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}



@node inspect
@heading inspect (Function)
@syindex inspect
@cindex inspect


@subsubheading Syntax:

@DefunWithValues{inspect, object, @term{implementation-dependent}}

@subsubheading Arguments and Values:

@param{object}---an @term{object}.

@subsubheading Description:

@code{inspect} is an interactive version of @code{describe}.
The nature of the interaction is @term{implementation-dependent},
but the purpose of @code{inspect} is to make it easy to wander
through a data structure, examining and modifying parts of it.

@subsubheading Side Effects:

@term{implementation-dependent}.

@subsubheading Affected By:

@term{implementation-dependent}.

@subsubheading Exceptional Situations:

@term{implementation-dependent}.

@subsubheading See Also:

@ref{describe}

@subsubheading Notes:

Implementations are encouraged to respond to the typing
of @f{?} or a ``help key'' by providing help, including a list
of commands.


@node dribble
@heading dribble (Function)
@syindex dribble
@cindex dribble


@subsubheading Syntax:

@DefunWithValues{dribble, @opt{} pathname, @term{implementation-dependent}}

@subsubheading Arguments and Values:

@param{pathname}---a @term{pathname designator}.

@subsubheading Description:

Either @term{binds} @code{*standard-input*} and @code{*standard-output*} 
or takes other appropriate action, 
so as to send a record of the input/output interaction to a file 
named by @param{pathname}.  @code{dribble} is intended to create
a readable record of an interactive session.

If @param{pathname} is a @term{logical pathname}, it is translated
into a physical pathname as if by calling @code{translate-logical-pathname}.

@f{(dribble)} terminates the recording of input and output 
and closes the dribble file.

If @code{dribble} is @term{called} while a @term{stream} to a ``dribble file'' 
is still open from a previous @term{call} to @code{dribble},
the effect is @term{implementation-defined}.  For example, 
the already-@term{open} @term{stream} might be @term{closed}, 
or dribbling might occur both to the old @term{stream} and to a new one,
or the old @term{stream} might stay open but not receive any further output,
or the new request might be ignored,
or some other action might be taken.

@subsubheading Affected By:

The @term{implementation}.

@subsubheading Exceptional Situations:

If a failure occurs when performing some operation on the @term{file system}
while creating the dribble file, 
an error @oftype{file-error} is signaled.

An error @oftype{file-error} might be signaled if @param{pathname}
is a @term{designator} for a @term{wild} @term{pathname}.

@subsubheading See Also:

@ref{Pathnames as Filenames, Section 19.1.2 (Pathnames as Filenames)}

@subsubheading Notes:


@code{dribble} can return before subsequent 
@term{forms} are executed. It also
can enter a recursive interaction loop, 
returning only when @f{(dribble)} is done.

@code{dribble} is intended primarily for interactive debugging;
its effect cannot be relied upon when used in a program.

@node - (Variable)
@heading - (Variable)
@syindex -
@cindex -


@subsubheading Value Type:

a @term{form}.

@subsubheading Initial Value:

@term{implementation-dependent}.

@subsubheading Description:

@Thevalueof{-} is the @term{form} that is currently being evaluated by
the @term{Lisp read-eval-print loop}.

@subsubheading Examples:

@lisp
(format t "~&Evaluating ~S~%" -)
@OUT{} Evaluating (FORMAT T "~&Evaluating ~S~%" -)
@EV{} NIL
@end lisp


@subsubheading Affected By:

@term{Lisp read-eval-print loop}.

@subsubheading See Also:

@ref{+ (Function)} (@term{variable}),
@ref{* (Function)} (@term{variable}),
@ref{/ (Function)} (@term{variable}), 
@ref{Top level loop, Section 25.1.1 (Top level loop)}


@node +; ++; +++
@heading +, ++, +++ (Variable)
@syindex +
@cindex +
@syindex ++
@cindex ++
@syindex +++
@cindex +++


@subsubheading Value Type:

an @term{object}.

@subsubheading Initial Value:

@term{implementation-dependent}.

@subsubheading Description:

@Thevariables{+}, @t{++}, and @t{+++} are maintained by the
@term{Lisp read-eval-print loop} to save @term{forms} that were
recently @term{evaluated}.

@Thevalueof{+}   is the last @term{form} that was @term{evaluated},
@thevalueof{++}  is the previous value of @t{+}, and
@thevalueof{+++} is the previous value of @t{++}.

@subsubheading Examples:
@lisp
(+ 0 1) @EV{} 1
(- 4 2) @EV{} 2
(/ 9 3) @EV{} 3
(list + ++ +++) @EV{} ((/ 9 3) (- 4 2) (+ 0 1))
(setq a 1 b 2 c 3 d (list a b c)) @EV{} (1 2 3)
(setq a 4 b 5 c 6 d (list a b c)) @EV{} (4 5 6)
(list a b c) @EV{} (4 5 6)
(eval +++) @EV{} (1 2 3)
#.`(,@@++ d) @EV{} (1 2 3 (1 2 3))
@end lisp


@subsubheading Affected By:

@term{Lisp read-eval-print loop}.

@subsubheading See Also:

@ref{- (Function)} (@term{variable}),
@ref{* (Function)} (@term{variable}),
@ref{/ (Function)} (@term{variable}), 
@ref{Top level loop, Section 25.1.1 (Top level loop)}


@node *; **; ***
@heading *, **, *** (Variable)
@syindex *
@cindex *
@syindex **
@cindex **
@syindex ***
@cindex ***


@subsubheading Value Type:

an @term{object}.

@subsubheading Initial Value:

@term{implementation-dependent}.

@subsubheading Description:

@Thevariables{*}, @t{**}, and @t{***} are 
maintained by the @term{Lisp read-eval-print loop} to save the 
values of results that are printed each time through the loop.

@Thevalueof{*}   is the most recent @term{primary value} that was printed,
@thevalueof{**}  is the previous value of @t{*}, and 
@thevalueof{***} is the previous value of @t{**}.

If several values are produced, @t{*} contains the first value only;
@t{*} contains @nil{}@spc{}if zero values are produced.

The @term{values} of @t{*}, @t{**}, and @t{***} are updated immediately
prior to printing the @term{return value} of a top-level @term{form} by the
@term{Lisp read-eval-print loop}.  If the @term{evaluation} of such a @term{form}
is aborted prior to its normal return, the values of @t{*}, @t{**}, and @t{***} 
are not updated.

@subsubheading Examples:
@lisp
(values 'a1 'a2) @EV{} A1, A2
'b @EV{} B
(values 'c1 'c2 'c3) @EV{} C1, C2, C3
(list * ** ***) @EV{} (C1 B A1)

(defun cube-root (x) (expt x 1/3)) @EV{} CUBE-ROOT
(compile *) @EV{} CUBE-ROOT
(setq a (cube-root 27.0)) @EV{} 3.0
(* * 9.0) @EV{} 27.0
@end lisp


@subsubheading Affected By:

@term{Lisp read-eval-print loop}.

@subsubheading See Also:

@ref{- (Function)} (@term{variable}),
@ref{+ (Function)} (@term{variable}),
@ref{/ (Function)} (@term{variable}), 
@ref{Top level loop, Section 25.1.1 (Top level loop)}

@subsubheading Notes:

@lisp
 *   @EQ{} (car /)
 **  @EQ{} (car //)
 *** @EQ{} (car ///)
@end lisp



@node /; //; ///
@heading /, //, /// (Variable)
@syindex /
@cindex /
@syindex //
@cindex //
@syindex ///
@cindex ///


@subsubheading Value Type:

a @term{proper list}.

@subsubheading Initial Value:

@term{implementation-dependent}.

@subsubheading Description:

@Thevariables{/}, @t{//}, and @t{///} are maintained by
the @term{Lisp read-eval-print loop} to save the values of results that
were printed at the end of the loop.

@Thevalueof{/}   is a @term{list} of the most recent @term{values} that were printed,
@thevalueof{//}  is the previous value of @t{/}, and
@thevalueof{///} is the previous value of @t{//}.

The @term{values} of @t{/}, @t{//}, and @t{///} are updated immediately
prior to printing the @term{return value} of a top-level @term{form} by the
@term{Lisp read-eval-print loop}.  If the @term{evaluation} of such a @term{form}
is aborted prior to its normal return, the values of @t{/}, @t{//}, and @t{///} 
are not updated.

@subsubheading Examples:
@lisp
 (floor 22 7) @EV{} 3, 1
 (+ (* (car /) 7) (cadr /)) @EV{} 22
@end lisp


@subsubheading Affected By:

@term{Lisp read-eval-print loop}.

@subsubheading See Also:

@ref{- (Function)} (@term{variable}),
@ref{+ (Function)} (@term{variable}),
@ref{* (Function)} (@term{variable}),
@ref{Top level loop, Section 25.1.1 (Top level loop)}


@node lisp-implementation-type; lisp-implementation-version
@heading lisp-implementation-type, lisp-implementation-version (Function)
@syindex lisp-implementation-type
@cindex lisp-implementation-type
@syindex lisp-implementation-version
@cindex lisp-implementation-version


@subsubheading Syntax:

@DefunWithValues{lisp-implementation-type, @noargs{}, description}

@DefunWithValues{lisp-implementation-version, @noargs{}, description}

@subsubheading Arguments and Values:

@param{description}---a @term{string} or @nil{}.

@subsubheading Description:

@code{lisp-implementation-type} and @code{lisp-implementation-version} 
identify the current implementation of @clisp{}.

@code{lisp-implementation-type} returns a @term{string} 
that identifies the generic name of
the particular @clisp{}@spc{}implementation.

@code{lisp-implementation-version} 
returns a @term{string} that identifies the version of
the particular @clisp{}@spc{}implementation.

If no appropriate
and relevant result can be produced, @nil{}@spc{}is returned instead
of a @term{string}.

@subsubheading Examples:

@lisp
 (lisp-implementation-type)
@EV{} "ACME Lisp"
@OV{} "Joe's Common Lisp"
 (lisp-implementation-version)
@EV{} "1.3a"
@EV{} "V2"
@OV{} "Release 17.3, ECO #6"
@end lisp



@node short-site-name; long-site-name
@heading short-site-name, long-site-name (Function)
@syindex short-site-name
@cindex short-site-name
@syindex long-site-name
@cindex long-site-name


@subsubheading Syntax:

@DefunWithValues{short-site-name, @noargs{}, description}

@DefunWithValues{long-site-name, @noargs{}, description}

@subsubheading Arguments and Values:

@param{description}---a @term{string} or @nil{}.

@subsubheading Description:

@code{short-site-name} and @code{long-site-name} return
a @term{string} that identifies the physical location 
of the computer hardware, 
or @nil{}@spc{}if no appropriate @param{description} can be produced.

@subsubheading Examples:

@lisp
 (short-site-name)
@EV{} "MIT AI Lab"
@OV{} "CMU-CSD"
 (long-site-name)
@EV{} "MIT Artificial Intelligence Laboratory"
@OV{} "CMU Computer Science Department"
@end lisp


@subsubheading Affected By:

The implementation,
the location of the computer hardware,
and the installation/configuration process.


@node machine-instance
@heading machine-instance (Function)
@syindex machine-instance
@cindex machine-instance


@subsubheading Syntax:

@DefunWithValues{machine-instance, @noargs{}, description}

@subsubheading Arguments and Values:

@param{description}---a @term{string} or @nil{}.

@subsubheading Description:

Returns a @term{string} that identifies the particular instance of
the computer hardware on which @clisp{}@spc{}is running, 
or @nil{}@spc{}if no such @term{string} can be computed.

@subsubheading Examples:

@lisp
 (machine-instance)
@EV{} "ACME.COM"
@OV{} "S/N 123231"
@OV{} "18.26.0.179"
@OV{} "AA-00-04-00-A7-A4"
@end lisp


@subsubheading Affected By:

The machine instance,
and the @term{implementation}.

@subsubheading See Also:

@ref{machine-type}, @ref{machine-version}


@node machine-type
@heading machine-type (Function)
@syindex machine-type
@cindex machine-type


@subsubheading Syntax:

@DefunWithValues{machine-type, @noargs{}, description}

@subsubheading Arguments and Values:

@param{description}---a @term{string} or @nil{}.

@subsubheading Description:

Returns a @term{string} that identifies the generic name of
the computer hardware on which @clisp{}@spc{}is running.

@subsubheading Examples:

@lisp
 (machine-type)
@EV{} "DEC PDP-10"
@OV{} "Symbolics LM-2"
@end lisp


@subsubheading Affected By:

The machine type.
The implementation.

@subsubheading See Also:

@ref{machine-version}


@node machine-version
@heading machine-version (Function)
@syindex machine-version
@cindex machine-version


@subsubheading Syntax:

@DefunWithValues{machine-version, @noargs{}, description}

@subsubheading Arguments and Values:

@param{description}---a @term{string} or @nil{}.

@subsubheading Description:

Returns a @term{string} that identifies the version of the computer hardware
on which @clisp{}@spc{}is running, or @nil{}@spc{}if no such value can be computed.

@subsubheading Examples:

@lisp
 (machine-version) @EV{} "KL-10, microcode 9"
@end lisp


@subsubheading Affected By:

The machine version, 
and the @term{implementation}.

@subsubheading See Also:

@ref{machine-type}, @ref{machine-instance}


@node software-type; software-version
@heading software-type, software-version (Function)
@syindex software-type
@cindex software-type
@syindex software-version
@cindex software-version


@subsubheading Syntax:

@DefunWithValues{software-type, @noargs{}, description}
@DefunWithValues{software-version, @noargs{}, description}

@subsubheading Arguments and Values:

@param{description}---a @term{string} or @nil{}.

@subsubheading Description:

@code{software-type} returns a @term{string} that identifies the
generic name of any relevant supporting software, or @nil{}@spc{}if no
appropriate or relevant result can be produced.          

@code{software-version} returns a @term{string} that identifies 
the version of any relevant supporting software, or @nil{}@spc{}if no 
appropriate or relevant result can be produced.          

@subsubheading Examples:

@lisp
 (software-type) @EV{} "Multics"
 (software-version) @EV{} "1.3x"
@end lisp


@subsubheading Affected By:

Operating system environment.

@subsubheading Notes:

This information should be of use to maintainers of the @term{implementation}.


@node user-homedir-pathname
@heading user-homedir-pathname (Function)
@syindex user-homedir-pathname
@cindex user-homedir-pathname


@subsubheading Syntax:

@DefunWithValues{user-homedir-pathname, @opt{} host, pathname}

@subsubheading Arguments and Values:

@param{host}---a @term{string}, a @term{list} of @term{strings}, or @kwd{unspecific}.

@param{pathname}---a @term{pathname}, or @nil{}.

@subsubheading Description:

@code{user-homedir-pathname} determines the @term{pathname} that corresponds
to the user's home directory on @param{host}.  
If @param{host} is not supplied, its value is @term{implementation-dependent}.
For a description of @kwd{unspecific}, see @ref{Pathname Components, Section 19.2.1 (Pathname Components)}.

The definition of home directory is @term{implementation-dependent}, 
but defined in @clisp{}@spc{}to mean the directory where the user
keeps personal files such as initialization files and mail.  

@code{user-homedir-pathname} returns a @term{pathname} without any name, 
type, or version component (those components are all @nil{})
for the user's home directory on @param{host}.

If it is impossible to determine the user's home directory on @param{host},
then @nil{}@spc{}is returned.
@code{user-homedir-pathname} never returns @nil{}@spc{}if @param{host} is not supplied.

@subsubheading Examples:

@lisp
 (pathnamep (user-homedir-pathname)) @EV{} @term{true}
@end lisp


@subsubheading Affected By:

The host computer's file system,
and the @term{implementation}.




@node Glossary
@chapter Glossary
@menu
* Glossary Notation::
* Non-alphabetic::
* A::
* B::
* C::
* D::
* E::
* F::
* G::
* H::
* I::
* K::
* L::
* M::
* N::
* O::
* P::
* Q::
* R::
* S::
* T::
* U::
* V::
* W::
* Y::
@end menu

@node Glossary Notation
@section Glossary Notation


Each entry in this glossary has the following parts:


@itemize @bullet{}

@item the term being defined, set in boldface.

@item optional pronunciation, enclosed in square brackets and
set in boldface, as in the following example:
@pronounced{@Stress{a}@stress{list}}.  The pronunciation key follows
@WebstersDictionary{}@TypographyCaveats{}.

@item the part or parts of speech, set in italics.  If a term
can be used as several parts of speech, there is a separate definition
for each part of speech.

@item one or more definitions, organized as follows:


@itemize --

@item an optional number, present if there are several
definitions. Lowercase letters might also be used in cases where subdefinitions of
a numbered definition are necessary.

@item an optional part of speech, set in italics, present if the
term is one of several parts of speech.

@item an optional discipline, set in italics, present if the term
has a standard definition being repeated. For example, ``@Mathematics{}''

@item an optional context, present if this definition is
meaningful only in that context. For example, ``(of a @term{symbol})''.

@item the definition.

@item an optional example sentence. For example,
@gexample{This is an example of an example.}

@item optional cross references.
@end itemize
@end itemize


In addition, some terms have idiomatic usage in the Common Lisp
community which is not shared by other communities, or which is not
technically correct.  Definitions labeled ``@Idiomatic{}'' represent
such idiomatic usage; these definitions are sometimes followed by an
explanatory note.

Words in @term{this font} are words with entries in the glossary.
Words in example sentences do not follow this convention.

When an ambiguity arises, the longest matching substring has precedence.
For example, ``@term{complex float}'' refers to a single glossary entry 
for ``@term{complex float}'' rather than the combined meaning of the 
glossary terms ``@term{complex}'' and ``@term{float}.''

Subscript notation, as in ``@term{something}[n]'' means that
the @i{n}th definition of ``@term{something}'' is intended.  This
notation is used only in situations where the context might be insufficient
to disambiguate.

The following are abbreviations used in the glossary:


@multitable @columnfractions 0.25 0.7

@headitem Abbreviation@tab Meaning

@item @Adjective{} @tab adjective
@item @Adverb{} @tab adverb
@item @ANSI{} @tab compatible with one or more ANSI standards
@item @Computers{} @tab computers
@item @Idiomatic{} @tab idiomatic
@item @IEEE{} @tab compatible with one or more IEEE standards
@item @ISO{} @tab compatible with one or more ISO standards
@item @Mathematics{} @tab mathematics
@item @Traditional{} @tab traditional
@item @Noun{} @tab noun
@item @Verb{} @tab verb
@item @TransitiveVerb{} @tab transitive verb
@end multitable



@node Non-alphabetic
@unnumberedsec Non-alphabetic
@table @asis

@item @b{()} @anchor{glos-()}
 @pronounced{@Stress{nil}}, @Noun{}
an alternative notation for writing the symbol@tie{}@nil{}, used to emphasize
the use of @term{nil} as an @term{empty list}.


@end table
@node A
@unnumberedsec A
@table @asis

@item @b{absolute} @anchor{glos-absolute}
 @Adjective{}
1. (of a @term{time})
representing a specific point in time.
2. (of a @term{pathname})
representing a specific position in a directory hierarchy.
See @ref{glos-relative, relative}.

@item @b{access}  @Noun{}, @TransitiveVerb{}
1. @TransitiveVerb{}@spc{}(a @term{place}, or @term{array})
to @term{read}@sub1{} or @term{write}@sub1{} the @term{value} of
the @term{place}
or an @term{element} of the @term{array}.
2. @Noun{}@spc{}(of a @term{place})
an attempt to @term{access}@sub1{} the @term{value} of the @term{place}.

@item @b{accessibility}  @Noun{}
the state of being @term{accessible}.

@item @b{accessible}  @Adjective{}@spc{}
1. (of an @term{object}) capable of being @term{referenced}.
2. (of @term{shared slots} or @term{local slots} in an @term{instance} of 
a @term{class}) having been defined by the @term{class} 
of the @term{instance} or @term{inherited} from a
@term{superclass} of that @term{class}.
3. (of a @term{symbol} in a @term{package})
capable of being @term{referenced} without a @term{package prefix} 
when that @term{package} is current, regardless of whether the
@term{symbol} is @term{present} in that @term{package} or is @term{inherited}.

@item @b{accessor}  @Noun{}
an @term{operator} that performs an @term{access}.
See @ref{glos-reader, reader} and @term{writer}.

@item @b{active}  @Adjective{}@spc{}
1. (of a @term{handler}, a @term{restart}, or a @term{catch tag})
having been @term{established} but not yet @term{disestablished}.
2. (of an @term{element} of an @term{array})
having an index that is greater than or equal to zero,
but less than the @term{fill pointer} (if any).
For an @term{array} that has no @term{fill pointer},
all @term{elements} are considered @term{active}.

@item @b{actual adjustability} @anchor{glos-actual adjustability}
 @Noun{}@spc{}(of an @term{array})
a @term{generalized boolean} that is associated with the @term{array}, 
representing whether the @term{array} is @term{actually adjustable}.
See also @ref{glos-expressed adjustability, expressed adjustability} and @code{adjustable-array-p}.

@item @b{actual argument}  @Noun{}@spc{}@Traditional{}@spc{}
an @term{argument}.

@item @b{actual array element type}  @Noun{}@spc{}(of an @term{array})
the @term{type} for which the @term{array} is actually specialized,
which is the @term{upgraded array element type} of 
the @term{expressed array element type} of the @term{array}.
See the @term{function} @ref{array-element-type}.

@item @b{actual complex part type}  @Noun{}@spc{}(of a @term{complex})
the @term{type} in which the real and imaginary parts of the @term{complex}
are actually represented, which is the @term{upgraded complex part type} of the
@term{expressed complex part type} of the @term{complex}.

@item @b{actual parameter}  @Noun{}@spc{}@Traditional{}@spc{}
an @term{argument}.

@item @b{actually adjustable}  @Adjective{}@spc{}(of an @term{array})
such that @code{adjust-array} can adjust its characteristics
by direct modification.
A @term{conforming program} may depend on
an @term{array} being @term{actually adjustable}
only if either that @term{array} is known to have been @term{expressly adjustable}
or if that @term{array} has been explicitly tested by @code{adjustable-array-p}.

@item @b{adjustability}  @Noun{}@spc{}(of an @term{array})
1. @term{expressed adjustability}.
2. @term{actual adjustability}.

@item @b{adjustable}  @Adjective{}@spc{}(of an @term{array})
1. @term{expressly adjustable}.
2. @term{actually adjustable}.

@item @b{after method}  @Noun{}
a @term{method} having the @term{qualifier} @kwd{after}.

@item @b{alist}  @pronounced{@Stress{@harda{}}@stress{list}}, @Noun{}@spc{}
an @term{association list}.

@item @b{alphabetic}  @Noun{}, @Adjective{}
1. @Adjective{}@spc{}(of a @term{character})
being one of the @term{standard characters} @f{A} through @f{Z} 
or @f{a} through @f{z},
or being any @term{implementation-defined} character that has @term{case},
or being some other @term{graphic} @term{character}
defined by the @term{implementation} to be @term{alphabetic}@sub1{}.
2. a. @Noun{}
one of several possible @term{constituent traits} of a @term{character}.
For details, see @ref{ConstituentChars, Section 2.1.4.1 (Constituent Characters)}@spc{}and @ref{Reader Algorithm, Section 2.2 (Reader Algorithm)}.
b. @Adjective{}@spc{}(of a @term{character})
being a @term{character} 
that has @term{syntax type} @term{constituent} in the @term{current readtable} 
and that has the @term{constituent trait} @term{alphabetic}[2a].
See @ref{ConstituentTraitsOfStdChars, Figure 2.8}.

@item @b{alphanumeric}  @Adjective{}@spc{}(of a @term{character})
being either an @term{alphabetic}@sub1{} @term{character}
or a @term{numeric} character.

@item @b{ampersand}  @Noun{}
the @term{standard character} that is called ``ampersand'' (@f{@ampers{}}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{anonymous}  @Adjective{}@spc{}
1. (of a @term{class} or @term{function}) having no @term{name}
2. (of a @term{restart}) having a @term{name} of @nil{}.

@item @b{apparently uninterned}  @Adjective{}@spc{}
having a @term{home package} of @nil{}.  (An @term{apparently uninterned} @term{symbol} 
might or might not be an @term{uninterned} @term{symbol}.  @term{Uninterned symbols}
have a @term{home package} of @nil{}, but @term{symbols} which have been @term{uninterned}
from their @term{home package} also have a @term{home package} of @nil{},
even though they might still be @term{interned} in some other @term{package}.)

@item @b{applicable}  @Adjective{}
1. (of a @term{handler}) being an @term{applicable handler}.
2. (of a @term{method}) being an @term{applicable method}.
3. (of a @term{restart}) being an @term{applicable restart}.

@item @b{applicable handler}  @Noun{}@spc{}(for a @term{condition} being @term{signaled})
an @term{active} @term{handler} for which the associated type contains the
@term{condition}.

@item @b{applicable method}  @Noun{}@spc{}(of a @term{generic function}
called with @term{arguments})
a @term{method} of the @term{generic function} for which the
@term{arguments} satisfy the @term{parameter specializers} 
of that @term{method}.
See @ref{SelApplMeth, Section 7.6.6.1.1 (Selecting the Applicable Methods)}.

@item @b{applicable restart}  @Noun{}
1. (for a @term{condition})
an @term{active} @term{handler} for which the associated test returns 
@term{true} when given the @term{condition} as an argument.
2. (for no particular @term{condition})
an @term{active} @term{handler} for which the associated test returns 
@term{true} when given @nil{}@spc{}as an argument.

@item @b{apply}  @TransitiveVerb{}@spc{}(a @term{function} to a @term{list})
to @term{call} the @term{function} with arguments that are the @term{elements}
of the @term{list}.
@gexample{Applying the function @code{+} to a list of integers returns
the sum of the elements of that list.} 

@item @b{argument}  @Noun{}
1. (of a @term{function}) an @term{object} which is offered as data
to the @term{function} when it is @term{called}.
2. (of a @term{format control}) a @term{format argument}.

@item @b{argument evaluation order}  @Noun{}@spc{}
the order in which @term{arguments} are evaluated in a function call.
@gexample{The argument evaluation order for Common Lisp is left to right.}
See @ref{Evaluation, Section 3.1 (Evaluation)}.

@item @b{argument precedence order}  @Noun{}
the order in which the @term{arguments} to a @term{generic function} are
considered when sorting the @term{applicable methods} into precedence order.

@item @b{around method}  @Noun{}
a @term{method} having the @term{qualifier} @kwd{around}.

@item @b{array}  @Noun{}
an @term{object} @oftype{array}, which serves as a container for other
@term{objects} arranged in a Cartesian coordinate system.

@item @b{array element type}  @Noun{}@spc{}(of an @term{array})
1. a @term{type} associated with the @term{array}, 
and of which all @term{elements} of the @term{array} are 
constrained to be members.
2. the @term{actual array element type} of the @term{array}.
3. the @term{expressed array element type} of the @term{array}.

@item @b{array total size}  @Noun{}@spc{}
the total number of @term{elements} in an @term{array}, computed by taking 
the product of the @term{dimensions} of the @term{array}.
(The size of a zero-dimensional @term{array} is therefore one.)

@item @b{assign}  @TransitiveVerb{}@spc{}(a @term{variable})
to change the @term{value} of the @term{variable} in a @term{binding}
that has already been @term{established}.
See the @term{special operator} @ref{setq}.

@item @b{association list} @anchor{glos-association list}
 @Noun{}@spc{}
a @term{list} of @term{conses} representing an association 
of @term{keys} with @term{values}, where the @term{car} of each
@term{cons} is the @term{key} and the @term{cdr} is the
@term{value} associated with that @term{key}.

@item @b{asterisk}  @Noun{}
the @term{standard character} that is variously called
``asterisk''
or ``star'' (@f{*}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{at-sign}  @Noun{}
the @term{standard character} that is variously called
``commercial at''
or ``at sign'' (@f{@@}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{atom}  @Noun{}
any @term{object} that is not a @term{cons}.
@gexample{A vector is an atom.}

@item @b{atomic}  @Adjective{}@spc{}
being an @term{atom}.
@gexample{The number 3, the symbol @f{foo}, and @nil{}@spc{}are atomic.}

@item @b{atomic type specifier}  @Noun{}
a @term{type specifier} that is @term{atomic}.
For every @term{atomic type specifier}, @i{x}, there is an equivalent
@term{compound type specifier} with no arguments supplied, @f{(@i{x})}.

@item @b{attribute}  @Noun{}@spc{}(of a @term{character})
a program-visible aspect of the @term{character}.
The only @term{standardized} @term{attribute} of a @term{character}
is its @term{code}@sub2{}, but @term{implementations} are permitted to have
additional @term{implementation-defined} @term{attributes}.
See @ref{Character Attributes, Section 13.1.3 (Character Attributes)}.
@gexample{An implementation that support fonts
might make font information an attribute of a character,
while others might represent font information separately from characters.}

@item @b{aux variable}  @Noun{}
a @term{variable} that occurs in the part of a @term{lambda list}
that was introduced by @keyref{aux}.  Unlike all other @term{variables}
introduced by a @term{lambda-list}, @term{aux variables} are not 
@term{parameters}.

@item @b{auxiliary method}  @Noun{}
a member of one of two sets of @term{methods} 
(the set of @term{primary methods} is the other)
that form an exhaustive partition of the set of @term{methods}
on the @term{method}'s @term{generic function}.
How these sets are determined is dependent on the @term{method combination} type;
see @ref{Introduction to Methods, Section 7.6.2 (Introduction to Methods)}.


@end table
@node B
@unnumberedsec B
@table @asis

@item @b{backquote}  @Noun{}
the @term{standard character} that is variously called
``grave accent'' 
or ``backquote'' (@f{`}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{backslash}  @Noun{}
the @term{standard character} that is variously called
``reverse solidus'' 
or ``backslash'' (@f{@bsl{}}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{base character}  @Noun{}
a @term{character}
@oftype{base-char}.

@item @b{base string}  @Noun{}
a @term{string} @oftype{base-string}.

@item @b{before method}  @Noun{}
a @term{method} having the @term{qualifier} @kwd{before}.

@item @b{bidirectional}  @Adjective{}@spc{}(of a @term{stream})
being both an @term{input} @term{stream} and an @term{output} @term{stream}.

@item @b{binary} @anchor{glos-binary}
 @Adjective{}@spc{}
1. (of a @term{stream})
being a @term{stream} that has an @term{element type} that is a @subtypeof{integer}.
The most fundamental operation on a @term{binary} @term{input} @term{stream} 
is @code{read-byte} and on a @term{binary} @term{output} @term{stream} 
is @code{write-byte}.
See @ref{glos-character, character}.
2. (of a @term{file})
having been created by opening a @term{binary} @term{stream}.
(It is @term{implementation-dependent} whether this is an detectable aspect 
of the @term{file}, or whether any given @term{character} @term{file} can be
treated as a @term{binary} @term{file}.)

@item @b{bind}  @TransitiveVerb{}@spc{}(a @term{variable})
to establish a @term{binding} for the @term{variable}.

@item @b{binding}  @Noun{}@spc{}
an association between a @term{name} and that which the @term{name} 
denotes.  
@gexample{A lexical binding is a lexical association between a 
name and its value.}
When the term @term{binding} is qualified by the name of a @term{namespace},
such as ``variable'' or ``function,'' 
it restricts the binding to the indicated namespace, as in:
@gexample{@code{let} establishes variable bindings.}
or 
@gexample{@code{let} establishes bindings of variables.}

@item @b{bit}  @Noun{}@spc{}
an @term{object} @oftype{bit}; 
that is, the @term{integer} @f{0} or the @term{integer} @f{1}.

@item @b{bit array}  @Noun{}
a specialized @term{array} that is of @term{type} @f{(array bit)},
and whose elements are @oftype{bit}.

@item @b{bit vector}  @Noun{}@spc{}
a specialized @term{vector} that is @oftype{bit-vector},
and whose elements are @oftype{bit}.

@item @b{bit-wise logical operation specifier}  @Noun{}@spc{}
an @term{object} which names one of the sixteen possible bit-wise logical
operations that can be performed by the @code{boole} function,
and which is the @term{value} of exactly one of the
@term{constant variables} 
@code{boole-clr},     @code{boole-set},
@code{boole-1},       @code{boole-2},
@code{boole-c1},      @code{boole-c2},
@code{boole-and},     @code{boole-ior},
@code{boole-xor},     @code{boole-eqv},
@code{boole-nand},    @code{boole-nor},
@code{boole-andc1},   @code{boole-andc2},
@code{boole-orc1}, or @code{boole-orc2}.

@item @b{block}  @Noun{}
a named lexical @term{exit point}, 
@term{established} explicitly by @code{block}
or implicitly by @term{operators} 
such as @code{loop}, @code{do} and @code{prog},
to which control and values may be transfered by 
using a @code{return-from} @term{form} with the name of the @term{block}.

@item @b{block tag}  @Noun{}@spc{}
the @term{symbol} that, within the @term{lexical scope} 
of a @code{block} @term{form}, names the @term{block}
@term{established} by that @code{block} @term{form}.
See @code{return} or @code{return-from}.

@item @b{boa lambda list}  @Noun{}
a @term{lambda list} that is syntactically like an @term{ordinary lambda list},
but that is processed in ``@b{b}y @b{o}rder of @b{a}rgument'' style.
See @ref{Boa Lambda Lists, Section 3.4.6 (Boa Lambda Lists)}.

@item @b{body parameter}  @Noun{}
a @term{parameter} available in certain @term{lambda lists}
which from the point of view of @term{conforming programs}
is like a @term{rest parameter} in every way except that it is introduced
by @keyref{body} instead of @keyref{rest}.  (@term{Implementations} are 
permitted to provide extensions which distinguish @term{body parameters}
and @term{rest parameters}---@eg{} the @term{forms} for @term{operators}
which were defined using a @term{body parameter} might be pretty printed
slightly differently than @term{forms} for @term{operators} which were 
defined using @term{rest parameters}.)

@item @b{boolean} @anchor{glos-boolean}
 @Noun{}@spc{}
an @term{object} @oftype{boolean};
that is, one of the following @term{objects}: 
the symbol@tie{}@code{t}@spc{}  (representing @term{true}),
or the symbol@tie{}@nil{}@spc{}(representing @term{false}).
See @ref{glos-generalized boolean, generalized boolean}.

@item @b{boolean equivalent}  @Noun{}@spc{}(of an @term{object} @mat{O@sub1{}})
any @term{object} @mat{O@sub2{}} that has the same truth value as @mat{O@sub1{}}
when both @mat{O@sub1{}} and @mat{O@sub2{}} are viewed as @term{generalized booleans}.

@item @b{bound} @anchor{glos-bound}
 @Adjective{}, @TransitiveVerb{}@spc{}
1. @Adjective{}@spc{}having an associated denotation in a @term{binding}.
@gexample{The variables named by a @code{let} are bound within
its body.}
See @ref{glos-unbound, unbound}.
2. @Adjective{}@spc{}having a local @term{binding} which 
@term{shadows}@sub2{} another. 
@gexample{The variable @code{*print-escape*} is bound while in
the @code{princ} function.}
3. @TransitiveVerb{}@spc{}the past tense of @term{bind}.

@item @b{bound declaration}  @Noun{}@spc{}
a @term{declaration} that refers to or is associated with a @term{variable}
or @term{function} and that appears within the @term{special form} 
that @term{establishes} the @term{variable} or @term{function},
but before the body of that @term{special form}
(specifically, at the head of that @term{form}'s body).
(If a @term{bound declaration} refers to a @term{function} @term{binding} or
a @term{lexical variable} @term{binding}, the @term{scope} of
the @term{declaration} is exactly the @term{scope} of that
@term{binding}.  If the @term{declaration} refers to a
@term{dynamic variable} @term{binding}, the @term{scope} of
the @term{declaration} is what the @term{scope} of the 
@term{binding} would have been if it were lexical rather than dynamic.)

@item @b{bounded}  @Adjective{}@spc{}(of a @term{sequence} @mat{S},
by an ordered pair
of @term{bounding indices} @mat{i@subs{start}} and @mat{i@subs{end}})
restricted to a subrange of the @term{elements} of @mat{S} that includes each @term{element}
beginning with (and including) the one indexed by @mat{i@subs{start}} and
continuing up to (but not including) the one indexed by @mat{i@subs{end}}.

@item @b{bounding index}  @Noun{}@spc{}(of a @term{sequence} with @term{length} @mat{n})
either of a conceptual pair of @term{integers}, @mat{i@subs{start}} and @mat{i@subs{end}},
respectively called the ``lower bounding index'' and ``upper bounding index'',
such that @mat{0 @leq{} i@subs{start} @leq{} i@subs{end} @leq{} n}, and which therefore delimit
a subrange of the @term{sequence} @term{bounded} by @mat{i@subs{start}} and @mat{i@subs{end}}.

@item @b{bounding index designator}  (for a @term{sequence})
one of two @term{objects} that, taken together as an ordered pair, 
behave as a @term{designator} for @term{bounding indices} of the @term{sequence}; 
that is, they denote @term{bounding indices} of the @term{sequence},
and are either:
an @term{integer} (denoting itself) and @nil{}@spc{}
(denoting the @term{length} of the @term{sequence}),
or two @term{integers} (each denoting themselves).

@item @b{break loop}  @Noun{}
A variant of the normal @term{Lisp read-eval-print loop} that is recursively
entered, usually because the ongoing @term{evaluation} of some other @term{form}
has been suspended for the purpose of debugging.  Often, a @term{break loop}
provides the ability to exit in such a way as to continue the suspended computation.
See the @term{function} @ref{break}.

@item @b{broadcast stream}  @Noun{}
an @term{output} @term{stream} @oftype{broadcast-stream}.

@item @b{built-in class}  @Noun{}
a @term{class} that is a @term{generalized instance} @ofclass{built-in-class}.

@item @b{built-in type}  @Noun{}
one of the @term{types} in @ref{StandardizedAtomicTypeSpecs, Figure 4.2}.

@item @b{byte}  @Noun{}
1. adjacent bits within an @term{integer}.
(The specific number of bits can vary from point to point in the program;
see the @term{function} @ref{byte}.)
2. an integer in a specified range.
(The specific range can vary from point to point in the program;
see the @term{functions} @ref{open} and @code{write-byte}.)

@item @b{byte specifier}  @Noun{}
An @term{object} of @term{implementation-dependent} nature 
that is returned by @thefunction{byte} and
that specifies the range of bits in an @term{integer} to be used
as a @term{byte} by @term{functions} such as @code{ldb}.


@end table
@node C
@unnumberedsec C
@table @asis

@item @b{cadr}  @pronounced{@Stress{ka}@stress{d@schwa{} r}}, @Noun{}@spc{}(of an @term{object})
the @term{car} of the @term{cdr} of that @term{object}.

@item @b{call}  @TransitiveVerb{}, @Noun{}@spc{}
1. @TransitiveVerb{}@spc{}(a @term{function} with @term{arguments})
to cause the @term{code} represented by that @term{function} to be 
@term{executed} in an @term{environment} where @term{bindings} for
the @term{values} of its @term{parameters} have been @term{established}
based on the @term{arguments}.
@gexample{Calling the function @code{+} with the arguments 
@f{5} and @f{1} yields a value of @f{6}.}
2. @Noun{}@spc{}a @term{situation} in which a @term{function} is called.

@item @b{captured initialization form}  @Noun{}
an @term{initialization form} along with the @term{lexical environment}
in which the @term{form} that defined the @term{initialization form}
was @term{evaluated}.
@gexample{Each newly added shared slot is set to the result of evaluating
the captured initialization form for the slot that was specified
in the @code{defclass} form for the new class.}

@item @b{car}  @Noun{}
1. a. (of a @term{cons}) 
the component of a @term{cons} corresponding to the first
@term{argument} to @code{cons}; the other component is the
@term{cdr}.
@gexample{The function @code{rplaca} modifies the car of a cons.}
b. (of a @term{list})
the first @term{element} of the @term{list}, or @nil{}@spc{}if the
@term{list} is the @term{empty list}.
2. the @term{object} that is held in the @term{car}@sub1{}.
@gexample{The function @code{car} returns the car of a cons.}

@item @b{case}  @Noun{}@spc{}(of a @term{character})
the property of being either @term{uppercase} or @term{lowercase}.
Not all @term{characters} have @term{case}.
@gexample{The characters @f{#@bsl{}A} and @f{#@bsl{}a} have case,
but the character @f{#@bsl{}@dollar{}} has no case.}
See @ref{CharactersWithCase, Section 13.1.4.3 (Characters With Case)}@spc{}and @thefunction{both-case-p}.

@item @b{case sensitivity mode}  @Noun{}
one of the @term{symbols}
@kwd{upcase}, @kwd{downcase}, @kwd{preserve}, or @kwd{invert}.

@item @b{catch}  @Noun{}
an @term{exit point} which is @term{established} by a @code{catch}
@term{form} within the @term{dynamic scope} of its body,
which is named by a @term{catch tag},
and to which control and @term{values} may be @term{thrown}.

@item @b{catch tag}  @Noun{}
an @term{object} which names an @term{active} @term{catch}.
(If more than one @term{catch} is active with the same @term{catch tag},
it is only possible to @term{throw} to the innermost such @term{catch}
because the outer one is @term{shadowed}@sub2{}.)

@item @b{cddr}  @pronounced{@Stress{k\.ud}@schwa{} @stress{d@schwa{} r}} or
@pronounced{@Stress{k@schwa{}}@stress{d\.ud@schwa{} r}}, @Noun{}@spc{}
(of an @term{object})
the @term{cdr} of the @term{cdr} of that @term{object}.

@item @b{cdr}  @pronounced{@Stress{k\.u}@stress{d@schwa{} r}}, @Noun{}@spc{}
1. a. (of a @term{cons}) 
the component of a @term{cons} corresponding to the second @term{argument}
to @code{cons}; the other component is the @term{car}.
@gexample{The function @code{rplacd} modifies the cdr of a cons.}
b. (of a @term{list} @mat{L@sub1{}})
either the @term{list} @mat{L@sub2{}} that contains 
the @term{elements} of @mat{L@sub1{}} that follow after the first, 
or else @nil{}@spc{}if @mat{L@sub1{}} is the @term{empty list}.
2. the @term{object} that is held in the @term{cdr}@sub1{}.
@gexample{The function @code{cdr} returns the cdr of a cons.}

@item @b{cell} @anchor{glos-cell}
 @Noun{}@spc{}@Traditional{}@spc{}(of an @term{object})
a conceptual @term{slot} of that @term{object}.
The @term{dynamic variable} and global @term{function} @term{bindings}
of a @term{symbol} are sometimes referred to as its @term{value cell}
and @term{function cell}, respectively.

@item @b{character} @anchor{glos-character}
 @Noun{}, @Adjective{}
1. @Noun{}@spc{}an @term{object} @oftype{character}; that is,
an @term{object} that represents a unitary token in an aggregate quantity of text;
see @ref{Character Concepts, Section 13.1 (Character Concepts)}.
2. @Adjective{}@spc{}
a. (of a @term{stream})
having an @term{element type} that is a @subtypeof{character}.
The most fundamental operation on a @term{character} @term{input} @term{stream} 
is @code{read-char} and on a @term{character} @term{output} @term{stream} 
is @code{write-char}. See @ref{glos-binary, binary}.
b. (of a @term{file})
having been created by opening a @term{character} @term{stream}.
(It is @term{implementation-dependent} whether this is an inspectable aspect 
of the @term{file}, or whether any given @term{binary} @term{file} can be
treated as a @term{character} @term{file}.)

@item @b{character code}  @Noun{}
1. one of possibly several @term{attributes} of a @term{character}.
2. a non-negative @term{integer} less than @thevalueof{char-code-limit}
that is suitable for use as a @term{character code}@sub1{}.

@item @b{character designator}  @Noun{}
a @term{designator} for a @term{character}; that is,
an @term{object} that denotes a @term{character} 
and that is one of:
a @term{designator} for a @term{string} of @term{length} one
(denoting the @term{character} that is its only @term{element}),
or a @term{character} (denoting itself).

@item @b{circular}  @Adjective{}
1. (of a @term{list}) a @term{circular list}.
2. (of an arbitrary @term{object})
having a @term{component}, @term{element}, @term{constituent}@sub2{}, 
or @term{subexpression} (as appropriate to the context) 
that is the @term{object} itself.

@item @b{circular list}  @Noun{}@spc{}
a chain of @term{conses} that has no termination because some
@term{cons} in the chain is the @term{cdr} of a later @term{cons}.

@item @b{class}  @Noun{}
1. an @term{object} that uniquely determines the structure and behavior of 
a set of other @term{objects} called its @term{direct instances}, 
that contributes structure and behavior to a set of
other @term{objects} called its @term{indirect instances},
and that acts as a @term{type specifier} for a set of objects
called its @term{generalized instances}.
@gexample{The class @code{integer} is a subclass of the class @code{number}.}
(Note that the phrase ``the @term{class} @f{foo}'' is often substituted for
the more precise phrase ``the @term{class} named @f{foo}''---in both
cases, a @term{class} @term{object} (not a @term{symbol}) is denoted.)
2. (of an @term{object})
the uniquely determined @term{class} of which the @term{object} is
a @term{direct instance}.
See the @term{function} @ref{class-of}.
@gexample{The class of the object returned by @code{gensym} 
is @code{symbol}.}
(Note that with this usage a phrase such as ``its @term{class} is @f{foo}'' 
is often substituted for the more precise phrase
``its @term{class} is the @term{class} named @f{foo}''---in both
cases, a @term{class} @term{object} (not a @term{symbol}) is denoted.)

@item @b{class designator}  @Noun{}
a @term{designator} for a @term{class}; that is,
an @term{object} that denotes a @term{class} 
and that is one of:
a @term{symbol} (denoting the @term{class} named by that @term{symbol};
see the @term{function} @ref{find-class})
or a @term{class} (denoting itself).

@item @b{class precedence list}  @Noun{}
a unique total ordering on a @term{class}
and its @term{superclasses} that is consistent with the
@term{local precedence orders} for the @term{class} and its
@term{superclasses}.
For detailed information, see @ref{Determining the Class Precedence List, Section 4.3.5 (Determining the Class Precedence List)}.

@item @b{close} @anchor{glos-close}
 @TransitiveVerb{}@spc{}(a @term{stream})
to terminate usage of the @term{stream} as a source or sink of data,
permitting the @term{implementation} to reclaim its internal data structures,
and to free any external resources which might have been locked by the
@term{stream} when it was opened.

@item @b{closed}  @Adjective{}@spc{}(of a @term{stream})
having been @term{closed} (see @ref{glos-close, close}).
Some (but not all) operations that are valid on @term{open} @term{streams} 
are not valid on @term{closed} @term{streams}.
See @ref{File Operations on Open and Closed Streams, Section 21.1.1.1.2 (Open and Closed Streams)}.

@item @b{closure}  @Noun{}
a @term{lexical closure}.

@item @b{coalesce}  @TransitiveVerb{}@spc{}(@term{literal objects} that are @term{similar})
to consolidate the identity of those @term{objects},
such that they become the @term{same} 
@term{object}.
See @ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)}.

@item @b{code}  @Noun{}
1. @Traditional{}@spc{}
any representation of actions to be performed, whether conceptual
or as an actual @term{object}, such as
@term{forms},
@term{lambda expressions},
@term{objects} of @term{type} @term{function}, 
text in a @term{source file},
or instruction sequences in a @term{compiled file}.
This is a generic term;
the specific nature of the representation depends on its context.
2. (of a @term{character})
a @term{character code}.

@item @b{coerce}  @TransitiveVerb{}@spc{}(an @term{object} to a @term{type})
to produce an @term{object} from the given @term{object},
without modifying that @term{object},
by following some set of coercion rules that must be specifically 
stated for any context in which this term is used.
The resulting @term{object} is necessarily of the indicated @term{type}, 
except when that type is a @subtypeof{complex}; in that case,
if a @term{complex rational} with an imaginary part of zero would result,
the result is a @term{rational} 
rather than a @term{complex}---see @ref{RuleOfCanonRepForComplexRationals, Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals)}.

@item @b{colon}  @Noun{}
the @term{standard character} that is called ``colon'' (@f{:}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{comma}  @Noun{}
the @term{standard character} that is called ``comma'' (@f{,}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{compilation}  @Noun{}
the process of @term{compiling} @term{code} by the @term{compiler}.

@item @b{compilation environment}  @Noun{}@spc{}
1. An @term{environment} that represents information known by the
@term{compiler} about a @term{form} that is being @term{compiled}.
See @ref{Compiler Terminology, Section 3.2.1 (Compiler Terminology)}.
2. An @term{object} that represents the
@term{compilation environment}@sub1{} 
and that is used as a second argument to a @term{macro function}
(which supplies a @term{value} for any @keyref{environment} @term{parameter}
in the @term{macro function}'s definition).

@item @b{compilation unit}  @Noun{}
an interval during which a single unit of compilation is occurring.
See the @term{macro} @ref{with-compilation-unit}.

@item @b{compile}  @TransitiveVerb{}@spc{}
1. (@term{code})
to perform semantic preprocessing of the @term{code}, usually optimizing
one or more qualities of the code, such as run-time speed of @term{execution}
or run-time storage usage.  The minimum semantic requirements of compilation are
that it must remove all macro calls and arrange for all @term{load time values}
to be resolved prior to run time.
2. (a @term{function})
to produce a new @term{object} @oftype{compiled-function}
which represents the result of @term{compiling} the @term{code} 
represented by the @term{function}.  See the @term{function} @ref{compile}.
3. (a @term{source file})
to produce a @term{compiled file} from a @term{source file}.
See the @term{function} @ref{compile-file}.

@item @b{compile time}  @Noun{}@spc{}
the duration of time that the @term{compiler} is processing @term{source code}.

@item @b{compile-time definition}  @Noun{}
a definition in the @term{compilation environment}.

@item @b{compiled code}  @Noun{}
1. @term{compiled functions}.
2. @term{code} that represents @term{compiled functions},
such as the contents of a @term{compiled file}.

@item @b{compiled file}  @Noun{}
a @term{file} which represents the results of @term{compiling} the 
@term{forms} which appeared in a corresponding @term{source file},
and which can be @term{loaded}.  See the @term{function} @ref{compile-file}.

@item @b{compiled function}  @Noun{}
an @term{object} @oftype{compiled-function}, which is a @term{function}
that has been @term{compiled}, which contains no references to @term{macros} that
must be expanded at run time, and which contains no unresolved references 
to @term{load time values}.

@item @b{compiler}  @Noun{}
a facility that is part of Lisp and that translates @term{code}
into an @term{implementation-dependent} form
that might be represented or @term{executed} efficiently.
The functions @code{compile} and @code{compile-file}
permit programs to invoke the @term{compiler}.

@item @b{compiler macro}  @Noun{}
an auxiliary macro definition for a globally defined @term{function}
or @term{macro} which might or might not be called by any given
@term{conforming implementation} and which must preserve the semantics
of the globally defined @term{function} or @term{macro} but which might
perform some additional optimizations.  (Unlike a @term{macro}, 
a @term{compiler macro} does not extend the syntax of @clisp{}; rather, it
provides an alternate implementation strategy for some existing syntax
or functionality.)

@item @b{compiler macro expansion}  @Noun{}
1. the process of translating a @term{form} into another @term{form}
by a @term{compiler macro}.
2. the @term{form} resulting from this process.

@item @b{compiler macro form}  @Noun{}
a @term{function form} or @term{macro form} whose @term{operator}
has a definition as a @term{compiler macro}, 
or a @code{funcall} @term{form} whose first @term{argument} is a
@code{function} @term{form} whose @term{argument} is the @term{name}
of a @term{function} that has a definition as a @term{compiler macro}.

@item @b{compiler macro function}  @Noun{}@spc{}
a @term{function} of two arguments, a @term{form} and an 
@term{environment}, that implements @term{compiler macro expansion} by
producing either a @term{form} to be used in place of the original
argument @term{form} or else @nil{}, indicating that the original @term{form}
should not be replaced.  See @ref{CompilerMacros, Section 3.2.2.1 (Compiler Macros)}.

@item @b{complex}  @Noun{}
an @term{object} @oftype{complex}.

@item @b{complex float}  @Noun{}
an @term{object} @oftype{complex} which has a @term{complex part type}
that is a @term{subtype} of @code{float}.
A @term{complex float} is a @term{complex},
but it is not a @term{float}.

@item @b{complex part type}  @Noun{}@spc{}(of a @term{complex})
1. the @term{type} which is used to represent both the real part 
and the imaginary part of the @term{complex}.
2. the @term{actual complex part type} of the @term{complex}.
3. the @term{expressed complex part type} of the @term{complex}.

@item @b{complex rational}  @Noun{}
an @term{object} @oftype{complex} which has a @term{complex part type}
that is a @term{subtype} of @code{rational}.
A @term{complex rational} is a @term{complex}, but it is not a @term{rational}.  
No @term{complex rational} has an imaginary part of zero because such a
number is always represented by @clisp{}@spc{}as an @term{object} @oftype{rational};
see @ref{RuleOfCanonRepForComplexRationals, Section 12.1.5.3 (Rule of Canonical Representation for Complex Rationals)}.

@item @b{complex single float}  @Noun{}
an @term{object} @oftype{complex} which has a @term{complex part type}
that is a @term{subtype} of @code{single-float}.
A @term{complex single float} is a @term{complex},
but it is not a @term{single float}.

@item @b{composite stream}  @Noun{}
a @term{stream} that is composed of one or more other @term{streams}.
@gexample{@code{make-synonym-stream} creates a composite stream.}

@item @b{compound form}  @Noun{}
a @term{non-empty} @term{list} which is a @term{form}:
a @term{special form},
a @term{lambda form},
a @term{macro form}, 
or a @term{function form}.

@item @b{compound type specifier}  @Noun{}
a @term{type specifier} that is a @term{cons};
@ie{} a @term{type specifier} that is not an @term{atomic type specifier}.
@gexample{@f{(vector single-float)} is a compound type specifier.}

@item @b{concatenated stream}  @Noun{}
an @term{input} @term{stream} @oftype{concatenated-stream}.

@item @b{condition}  @Noun{}
1. an @term{object} which represents a @term{situation}---usually,
but not necessarily, during @term{signaling}.
2. an @term{object} @oftype{condition}.

@item @b{condition designator}  @Noun{}
one or more @term{objects} that, taken together, 
denote either an existing @term{condition} @term{object} 
or a @term{condition} @term{object} to be implicitly created.
For details, see @ref{ConditionDesignators, Section 9.1.2.1 (Condition Designators)}.

@item @b{condition handler}  @Noun{}
a @term{function} that might be invoked by the act of @term{signaling},
that receives the @term{condition} being signaled as its only argument,
and that is permitted to @term{handle} the @term{condition} 
or to @term{decline}.  See @ref{Signaling, Section 9.1.4.1 (Signaling)}.

@item @b{condition reporter}  @Noun{}
a @term{function} that describes how a @term{condition} is to be printed
when the @term{Lisp printer} is invoked while @code{*print-escape*} 
is @term{false}.  See @ref{Printing Conditions, Section 9.1.3 (Printing Conditions)}.

@item @b{conditional newline}  @Noun{}
a point in output where a @term{newline} might be inserted at the
discretion of the @term{pretty printer}.
There are four kinds of @term{conditional newlines},
called ``linear-style,''
``fill-style,''
``miser-style,''
and ``mandatory-style.''
See the @term{function} @ref{pprint-newline} and @ref{DynamicControlofOutput, Section 22.2.1.1 (Dynamic Control of the Arrangement of Output)}.

@item @b{conformance}  @Noun{}
a state achieved by proper and complete adherence to the requirements
of this specification.  See @ref{Conformance, Section 1.5 (Conformance)}.

@item @b{conforming code}  @Noun{}
@term{code} that is all of part of a @term{conforming program}.

@item @b{conforming implementation}  @Noun{}
an @term{implementation}, used to emphasize complete and correct
adherance to all conformance criteria.
A @term{conforming implementation} is capable of 
accepting a @term{conforming program} as input,
preparing that @term{program} for @term{execution},
and executing the prepared @term{program} in accordance with this specification.
An @term{implementation} which
has been extended may still be a @term{conforming implementation} 
provided that no extension interferes with the correct function of any
@term{conforming program}.

@item @b{conforming processor}  @Noun{}@spc{}@ANSI{}@spc{}
a @term{conforming implementation}.

@item @b{conforming program}  @Noun{}
a @term{program}, used to emphasize the fact that the @term{program}
depends for its correctness only upon documented aspects of @clisp{}, and
can therefore be expected to run correctly in any @term{conforming implementation}.

@item @b{congruent}  @Noun{}@spc{}
conforming to the rules of @term{lambda list} congruency, as detailed in 
@ref{Congruent Lambda-lists for all Methods of a Generic Function, Section 7.6.4 (Congruent Lambda-lists for all Methods of a Generic Function)}.

@item @b{cons}  @Noun{}@Verb{}@spc{}
1. @Noun{}@spc{}a compound data @term{object} having two components called the
@term{car} and the @term{cdr}.
2. @Verb{}@spc{}to create such an @term{object}.
3. @Verb{}@spc{}@Idiomatic{}@spc{}to create any @term{object}, or to allocate storage.

@item @b{constant}  @Noun{}
1. a @term{constant form}.
2. a @term{constant variable}.
3. a @term{constant object}.
4. a @term{self-evaluating object}.

@item @b{constant form}  @Noun{}
any @term{form}
for which @term{evaluation} always @term{yields} the same @term{value},
that neither affects nor is affected by the @term{environment}
in which it is @term{evaluated} (except that it is permitted to
refer to the names of @term{constant variables} 
defined in the @term{environment}),
and
that neither affects nor is affected by the state of any @term{object}
except those @term{objects} that are @term{otherwise inaccessible parts}
of @term{objects} created by the @term{form} itself.
@gexample{A @code{car} form in which the argument is a
@code{quote} form is a constant form.}

@item @b{constant object}  @Noun{}
an @term{object} that is constrained (@eg{} by its context in a @term{program}
or by the source from which it was obtained) to be @term{immutable}.
@gexample{A literal object that has been processed by @code{compile-file}
is a constant object.}

@item @b{constant variable}  @Noun{}
a @term{variable}, the @term{value} of which can never change;
that is, a @term{keyword}@sub1{} or a @term{named constant}.
@gexample{The symbols @code{t}, @nil{}, @kwd{direction}, and
@code{most-positive-fixnum}@spc{}are constant variables.}

@item @b{constituent}  @Noun{}, @Adjective{}
1. a. @Noun{}@spc{}the @term{syntax type} of a @term{character} that is part of a @term{token}.
For details, see @ref{ConstituentChars, Section 2.1.4.1 (Constituent Characters)}.
b. @Adjective{}@spc{}(of a @term{character})
having the @term{constituent}[1a] @term{syntax type}@sub2{}.
c. @Noun{}@spc{}a @term{constituent}[1b] @term{character}.
2. @Noun{}@spc{}(of a @term{composite stream})
one of possibly several @term{objects} that collectively comprise
the source or sink of that @term{stream}.

@item @b{constituent trait}  @Noun{}@spc{}(of a @term{character})
one of several classifications of a @term{constituent} @term{character}
in a @term{readtable}.  See @ref{ConstituentChars, Section 2.1.4.1 (Constituent Characters)}.

@item @b{constructed stream}  @Noun{}@spc{}
a @term{stream} whose source or sink is a Lisp @term{object}.
Note that since a @term{stream} is another Lisp @term{object},
@term{composite streams} are considered @term{constructed streams}.
@gexample{A string stream is a constructed stream.}

@item @b{contagion}  @Noun{}
a process whereby operations on @term{objects} of differing @term{types}
(@eg{} arithmetic on mixed @term{types} of @term{numbers}) produce a result
whose @term{type} is controlled by the dominance of one @term{argument}'s
@term{type} over the @term{types} of the other @term{arguments}.
See @ref{NumericContagionRules, Section 12.1.1.2 (Contagion in Numeric Operations)}.

@item @b{continuable}  @Noun{}@spc{}(of an @term{error})
an @term{error} that is @term{correctable} by the @f{continue} restart.

@item @b{control form}  @Noun{}
1. a @term{form} that establishes one or more places to which control
can be transferred.
2. a @term{form} that transfers control.

@item @b{copy}  @Noun{}
1. (of a @term{cons} @mat{C})
a @term{fresh} @term{cons} with the @term{same} @term{car} and @term{cdr} as @mat{C}.
2. (of a @term{list} @mat{L})
a @term{fresh} @term{list} with the @term{same} @term{elements} as @mat{L}.  
(Only the @term{list structure} is @term{fresh};
the @term{elements} are the @term{same}.)
See the @term{function} @ref{copy-list}.
3. (of an @term{association list} @mat{A} with @term{elements} @mat{A@subs1{i}})
a @term{fresh} @term{list} @mat{B} with @term{elements} @mat{B@subs1{i}}, each of which is
@nil{}@spc{}if @mat{A@subs1{i}} is @nil{}, or else a @term{copy} of the @term{cons} @mat{A@subs1{i}}.
See the @term{function} @ref{copy-alist}.
4. (of a @term{tree} @mat{T})
a @term{fresh} @term{tree} with the @term{same} @term{leaves} as @mat{T}.
See the @term{function} @ref{copy-tree}.
5. (of a @term{random state} @mat{R})
a @term{fresh} @term{random state} that, if used as an argument to
to @thefunction{random} would produce the same series of ``random''
values as @mat{R} would produce.
6. (of a @term{structure} @mat{S})
a @term{fresh} @term{structure} that has the same @term{type} as @mat{S},
and that has slot values, each of which is the @term{same} as the 
corresponding slot value of @mat{S}.
(Note that since the difference between a @term{cons}, a @term{list}, 
and a @term{tree} is a matter of ``view'' or ``intention,''  there can
be no general-purpose @term{function} which, based solely on the @term{type}
of an @term{object}, can determine which of these distinct meanings is 
intended.  The distinction rests solely on the basis of the text description
within this document.  For example, phrases like ``a @term{copy} of the
given @term{list}'' or ``copy of the @term{list} @param{x}'' imply the
second definition.)

@item @b{correctable}  @Adjective{}@spc{}(of an @term{error})
1. (by a @term{restart} other than @t{abort} 
that has been associated with the @term{error})
capable of being corrected by invoking that @term{restart}.
@gexample{The function @code{cerror} signals an error 
that is correctable by the @t{continue} @term{restart}.}
(Note that correctability is not a property of an
@term{error} @term{object}, but rather a property of the 
@term{dynamic environment} that is in effect when the
@term{error} is @term{signaled}.
Specifically, the @term{restart} is ``associated with'' 
the @term{error} @term{condition} @term{object}.
See @ref{AssocRestartWithCond, Section 9.1.4.2.4 (Associating a Restart with a Condition)}.)
2. (when no specific @term{restart} is mentioned)
@term{correctable}@sub1{} by at least one @term{restart}.
@gexample{@code{import} signals a correctable error @oftype{package-error}
if any of the imported symbols has the same name as
some distinct symbol already accessible in the package.}

@item @b{current input base}  @Noun{}@spc{}(in a @term{dynamic environment})
the @term{radix} that is @thevalueof{*read-base*} in that @term{environment}, 
and that is the default @term{radix} employed by the @term{Lisp reader}
and its related @term{functions}.

@item @b{current logical block}  @Noun{}
the context of the innermost lexically enclosing use of @code{pprint-logical-block}.

@item @b{current output base}  @Noun{}@spc{}(in a @term{dynamic environment})
the @term{radix} that is @thevalueof{*print-base*} in that @term{environment}, 
and that is the default @term{radix} employed by the @term{Lisp printer}
and its related @term{functions}.

@item @b{current package}  @Noun{}@spc{}(in a @term{dynamic environment})
the @term{package} that is @thevalueof{*package*} in that @term{environment}, 
and that is the default @term{package} employed by the @term{Lisp reader} 
and @term{Lisp printer}, and their related @term{functions}.

@item @b{current pprint dispatch table}  @Noun{}@spc{}(in a @term{dynamic environment})
the @term{pprint dispatch table} that is @thevalueof{*print-pprint-dispatch*}
in that @term{environment}, and that is the default @term{pprint dispatch table}
employed by the @term{pretty printer}.

@item @b{current random state}  @Noun{}@spc{}(in a @term{dynamic environment})
the @term{random state} that is @thevalueof{*random-state*} in that @term{environment}, 
and that is the default @term{random state} employed by @code{random}.

@item @b{current readtable}  @Noun{}@spc{}(in a @term{dynamic environment})
the @term{readtable} that is @thevalueof{*readtable*} in that @term{environment}, 
and that affects the way in which @term{expressions}@sub2{} are parsed 
into @term{objects} by the @term{Lisp reader}.


@end table
@node D
@unnumberedsec D
@table @asis

@item @b{data type}  @Noun{}@spc{}@Traditional{}@spc{}
a @term{type}.

@item @b{debug I/O}  @Noun{}@spc{}
the @term{bidirectional} @term{stream} 
that is the @term{value} of @thevariable{*debug-io*}.

@item @b{debugger}  @Noun{}
a facility that allows the @term{user} to handle a @term{condition} interactively.
For example, the @term{debugger} might permit interactive
selection of a @term{restart} from among the @term{active} @term{restarts},
and it might perform additional @term{implementation-defined} services
for the purposes of debugging.

@item @b{declaration}  @Noun{}
a @term{global declaration} or @term{local declaration}.

@item @b{declaration identifier}  @Noun{}
one of the @term{symbols}
@code{declaration},
@code{dynamic-extent},
@code{ftype},
@code{function},
@code{ignore}, 
@code{inline},  
@code{notinline},
@code{optimize}, 
@code{special}, 
or @code{type};
or a @term{symbol} which is the @term{name} of a @term{type};
or a @term{symbol} which has been @term{declared}
to be a @term{declaration identifier} by using a @code{declaration}
@term{declaration}.

@item @b{declaration specifier}  @Noun{}
an @term{expression} that can appear at top level of a @t{declare} 
expression or a @code{declaim} form, or as the argument to @code{proclaim},
and which has a @term{car} which is a @term{declaration identifier},
and which has a @term{cdr} that is data interpreted according to rules
specific to the @term{declaration identifier}.

@item @b{declare}  @Verb{}@spc{}
to @term{establish} a @term{declaration}.
See @ref{declare}, @code{declaim}, or @code{proclaim}.

@item @b{decline}  @Verb{}@spc{}(of a @term{handler})
to return normally without having @term{handled} the @term{condition}
being @term{signaled}, permitting the signaling process to continue
as if the @term{handler} had not been present.

@item @b{decoded time} @anchor{glos-decoded time}
 @Noun{}
@term{absolute} @term{time}, represented as an ordered series of
nine @term{objects} which, taken together, form a description of
a point in calendar time, accurate to the nearest second (except
that @term{leap seconds} are ignored).
See @ref{DecodedTime, Section 25.1.4.1 (Decoded Time)}.

@item @b{default method}  @Noun{}
a @term{method} having no @term{parameter specializers} other than
@theclass{t}.  Such a @term{method} is always an @term{applicable method}
but might be @term{shadowed}@sub2{} by a more specific @term{method}.

@item @b{defaulted initialization argument list}  @Noun{}
a @term{list} of alternating initialization argument @term{names} and
@term{values} in which unsupplied initialization arguments are
defaulted, used in the protocol for initializing and reinitializing 
@term{instances} of @term{classes}.

@item @b{define-method-combination arguments lambda list}  @Noun{}
a @term{lambda list} used by the @kwd{arguments} option 
to @code{define-method-combination}.
See @ref{Define-method-combination Arguments Lambda Lists, Section 3.4.10 (Define-method-combination Arguments Lambda Lists)}.

@item @b{define-modify-macro lambda list}  @Noun{}
a @term{lambda list} used by @code{define-modify-macro}.
See @ref{Define-modify-macro Lambda Lists, Section 3.4.9 (Define-modify-macro Lambda Lists)}.

@item @b{defined name}  @Noun{}
a @term{symbol} the meaning of which is defined by @clisp{}.

@item @b{defining form}  @Noun{}
a @term{form} that has the side-effect of @term{establishing} a definition.
@gexample{@code{defun} and @code{defparameter} are defining forms.}

@item @b{defsetf lambda list}  @Noun{}
a @term{lambda list} that is like an @term{ordinary lambda list} 
except that it does not permit @keyref{aux}
and that it permits use of @keyref{environment}.
See @ref{Defsetf Lambda Lists, Section 3.4.7 (Defsetf Lambda Lists)}.

@item @b{deftype lambda list}  @Noun{}
a @term{lambda list} that is like a @term{macro lambda list}
except that the default @term{value} for unsupplied @term{optional parameters}
and @term{keyword parameters} is the @term{symbol} @t{*} (rather than @nil{}).
See @ref{Deftype Lambda Lists, Section 3.4.8 (Deftype Lambda Lists)}.

@item @b{denormalized} @anchor{glos-denormalized}
 @Adjective{}, @ANSI{}, @IEEE{}@spc{}(of a @term{float})
conforming to the description of ``denormalized'' as described by 
@IEEEFloatingPoint{}.
For example, in an @term{implementation} where the minimum possible exponent 
was @f{-7} but where @f{0.001} was a valid mantissa, the number @f{1.0e-10}
might be representable as @f{0.001e-7} internally even if the @term{normalized}
representation would call for it to be represented instead as @f{1.0e-10} 
or @f{0.1e-9}.  By their nature, @term{denormalized} @term{floats} generally
have less precision than @term{normalized} @term{floats}.

@item @b{derived type}  @Noun{}
a @term{type specifier} which is defined in terms of an expansion into another
@term{type specifier}.  @code{deftype} defines @term{derived types}, 
and there may be other @term{implementation-defined} @term{operators}
which do so as well.

@item @b{derived type specifier}  @Noun{}
a @term{type specifier} for a @term{derived type}.

@item @b{designator}  @Noun{}@spc{}
an @term{object} that denotes another @term{object}.
In the dictionary entry for an @term{operator}
if a @term{parameter} is described as a @term{designator} for a @term{type},
the description of the @term{operator} is written in a way
that assumes that appropriate coercion to that @term{type} has already occurred;
that is, that the @term{parameter} is already of the denoted @term{type}.
For more detailed information, see @ref{Designators, Section 1.4.1.5 (Designators)}.

@item @b{destructive}  @Adjective{}@spc{}(of an @term{operator})
capable of modifying some program-visible aspect of one or more
@term{objects} that are either explicit @term{arguments} to the
@term{operator} or that can be obtained directly or indirectly 
from the @term{global environment} by the @term{operator}.

@item @b{destructuring lambda list}  @Noun{}
an @term{extended lambda list} used in @code{destructuring-bind} and
nested within @term{macro lambda lists}.  
See @ref{Destructuring Lambda Lists, Section 3.4.5 (Destructuring Lambda Lists)}.

@item @b{different}  @Adjective{}@spc{}
not the @term{same}
@gexample{The strings @f{"FOO"} and @f{"foo"} are different under
@code{equal} but not under @code{equalp}.}

@item @b{digit}  @Noun{}@spc{}(in a @term{radix})
a @term{character} that is among the possible digits (@f{0} to @f{9},
@f{A} to @f{Z}, and @f{a} to @f{z}) and that is defined to have an 
associated numeric weight as a digit in that @term{radix}.
See @ref{Digits, Section 13.1.4.6 (Digits in a Radix)}.

@item @b{dimension}  @Noun{}
1. a non-negative @term{integer} indicating the number of
@term{objects} an @term{array} can hold along one axis.
If the @term{array} is a @term{vector} with a @term{fill pointer},
the @term{fill pointer} is ignored.
@gexample{The second dimension of that array is 7.}
2. an axis of an array.
@gexample{This array has six dimensions.}

@item @b{direct instance}  @Noun{}@spc{}(of a @term{class} @mat{C})
an @term{object} whose @term{class} is @mat{C} itself,
rather than some @term{subclass} of @mat{C}.
@gexample{The function @code{make-instance} always returns a 
direct instance of the class which is (or is named by)
its first argument.}

@item @b{direct subclass}  @Noun{}@spc{}(of a @term{class} @mat{C@sub1{}})
a @term{class} @mat{C@sub2{}},
such that @mat{C@sub1{}} is a @term{direct superclass} of @mat{C@sub2{}}.

@item @b{direct superclass}  @Noun{}@spc{}(of a @term{class} @mat{C@sub1{}})
a @term{class} @mat{C@sub2{}} which was explicitly designated as 
a @term{superclass} of @mat{C@sub1{}} in the definition of @mat{C@sub1{}}.

@item @b{disestablish}  @TransitiveVerb{}@spc{}
to withdraw the @term{establishment} of 
an @term{object},
a  @term{binding},
an @term{exit point}, 
a  @term{tag},
a  @term{handler},
a  @term{restart}, 
or an @term{environment}.

@item @b{disjoint}  @Noun{}@spc{}(of @term{types})
having no @term{elements} in common.

@item @b{dispatching macro character}  @Noun{}@spc{}
a @term{macro character} that has an associated table that specifies 
the @term{function} to be called for each @term{character} that is
seen following the @term{dispatching macro character}.
See the @term{function} @ref{make-dispatch-macro-character}.

@item @b{displaced array}  @Noun{}
an @term{array} which has no storage of its own, but which is instead
indirected to the storage of another @term{array}, called its
@term{target}, at a specified offset, in such a way that any attempt
to @term{access} the @term{displaced array} implicitly references the 
@term{target} @term{array}.

@item @b{distinct}  @Adjective{}
not @term{identical}.

@item @b{documentation string}  @Noun{}@spc{}(in a defining @term{form}) 
A @term{literal} @term{string} which because of the context in which
it appears (rather than because of some intrinsically observable 
aspect of the @term{string}) is taken as documentation.
In some cases, the @term{documentation string} is saved in such a
way that it can later be obtained by supplying either an @term{object}, 
or by supplying a @term{name} and a ``kind'' to @thefunction{documentation}.
@gexample{The body of code in a @code{defmacro} form can be preceded 
by a documentation string of kind @t{function}.}

@item @b{dot}  @Noun{}
the @term{standard character} that is variously called
``full stop,''
``period,''
or ``dot'' (@f{.}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{dotted list}  @Noun{}
a @term{list} which has a terminating @term{atom} that is not @nil{}.
(An @term{atom} by itself is not a @term{dotted list}, however.)

@item @b{dotted pair}  @Noun{}
1. a @term{cons} whose @term{cdr} is a @term{non-list}.
2. any @term{cons}, used to emphasize the use of the @term{cons}
as a symmetric data pair.

@item @b{double float}  @Noun{}
an @term{object} @oftype{double-float}.

@item @b{double-quote}  @Noun{}
the @term{standard character} that is variously called
``quotation mark''
or ``double quote'' (@f{"}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{dynamic binding}  @Noun{}@spc{}
a @term{binding} in a @term{dynamic environment}.

@item @b{dynamic environment}  @Noun{}
that part of an @term{environment} that contains @term{bindings} 
with @term{dynamic extent}.  A @term{dynamic environment} contains,
among other things:
@term{exit points} established by @code{unwind-protect},
and 
@term{bindings} of
@term{dynamic variables},
@term{exit points} established by @code{catch},
@term{condition handlers},
and
@term{restarts}.  

@item @b{dynamic extent}  @Noun{}
an @term{extent} whose duration is bounded by points of 
@term{establishment} and @term{disestablishment} within the execution
of a particular @term{form}.  See @ref{glos-indefinite extent, indefinite extent}.
@gexample{Dynamic variable bindings have dynamic extent.}

@item @b{dynamic scope}  @Noun{}
@term{indefinite scope} along with @term{dynamic extent}.

@item @b{dynamic variable}  @Noun{}
a @term{variable} the @term{binding} for which is in the @term{dynamic environment}.
See @ref{special}.


@end table
@node E
@unnumberedsec E
@table @asis

@item @b{echo stream}  @Noun{}
a @term{stream} @oftype{echo-stream}.

@item @b{effective method}  @Noun{}
the combination of @term{applicable methods} that are executed
when a @term{generic function} is invoked with a particular sequence
of @term{arguments}.

@item @b{element}  @Noun{}
1. (of a @term{list}) 
an @term{object} that is the @term{car} of one of the @term{conses}
that comprise the @term{list}.
2. (of an @term{array})
an @term{object} that is stored in the @term{array}.
3. (of a @term{sequence})
an @term{object} that is an @term{element} of the @term{list} or @term{array}
that is the @term{sequence}.
4. (of a @term{type})
an @term{object} that is a member of the set of @term{objects}
designated by the @term{type}.
5. (of an @term{input} @term{stream})
a @term{character} or @term{number} (as appropriate to the
@term{element type} of the @term{stream})
that is among the ordered series of @term{objects} that can be 
read from the @term{stream} (using @code{read-char} or @code{read-byte},
as appropriate to the @term{stream}).
6. (of an @term{output} @term{stream})
a @term{character} or @term{number} (as appropriate to the
@term{element type} of the @term{stream})
that is among the ordered series of @term{objects} that has been
or will be written to the @term{stream} (using @code{write-char} 
or @code{write-byte}, as appropriate to the @term{stream}).
7. (of a @term{class}) a @term{generalized instance} of the @term{class}.

@item @b{element type}  @Noun{}@spc{}
1. (of an @term{array}) the @term{array element type} of the @term{array}.
2. (of a @term{stream}) the @term{stream element type} of the @term{stream}.

@item @b{em}  @Noun{}@spc{}@Traditional{}@spc{}
a context-dependent unit of measure commonly used in typesetting,
equal to the displayed width of of a letter ``M'' in the current font.
(The letter ``M'' is traditionally chosen because it is typically 
represented by the widest @term{glyph} in the font, and other characters' 
widths are typically fractions of an @term{em}.  In implementations providing 
non-Roman characters with wider characters than ``M,'' it is permissible 
for another character to be the @term{implementation-defined} reference character
for this measure, and for ``M'' to be only a fraction of an @term{em}
wide.)  
In a fixed width font, a line with @i{n} characters is @i{n} 
@term{ems} wide; in a variable width font, @i{n} @term{ems} is the
expected upper bound on the width of such a line.

@item @b{empty list} @anchor{glos-empty list}
 @Noun{}
the @term{list} containing no @term{elements}. See @ref{glos-(), ()}.

@item @b{empty type}  @Noun{}
the @term{type} that contains no @term{elements}, and that is
a @term{subtype} of all @term{types} (including itself).
See @ref{glos-nil, nil}.

@item @b{end of file}  @Noun{}
1. the point in an @term{input} @term{stream} beyond which there is
no further data.
Whether or not there is such a point on an @term{interactive stream} 
is @term{implementation-defined}.
2. a @term{situation} that occurs upon an attempt to obtain data from an
@term{input stream} that is at the @term{end of file}@sub1{}.

@item @b{environment}  @Noun{}
1. a set of @term{bindings}. See @ref{Introduction to Environments, Section 3.1.1 (Introduction to Environments)}.
2. an @term{environment object}.
@gexample{@code{macroexpand} takes an optional environment argument.}

@item @b{environment object}  @Noun{}
an @term{object} representing a set of @term{lexical bindings},
used in the processing of a @term{form} to provide meanings for
@term{names} within that @term{form}.
@gexample{@code{macroexpand} takes an optional environment argument.}
(The @term{object} @nil{}@spc{}when used as an @term{environment object}
denotes the @term{null lexical environment};
the @term{values} of @term{environment parameters} 
to @term{macro functions} are @term{objects}
of @term{implementation-dependent} nature which represent the 
@term{environment}@sub1{} in which the corresponding @term{macro form}
is to be expanded.)
See @ref{EnvObjs, Section 3.1.1.4 (Environment Objects)}.

@item @b{environment parameter}  @Noun{}
A @term{parameter} in a @term{defining form} @mat{f} for which there is no corresponding
@term{argument}; instead, this @term{parameter} receives as its value an
@term{environment} @term{object} which corresponds to the
@term{lexical environment} in which the @term{defining form} @mat{f} appeared.

@item @b{error}  @Noun{}
1. (only in the phrase ``is an error'')
a @term{situation} in which the semantics of a program are not specified, 
and in which the consequences are undefined.
2. a @term{condition} which represents an @term{error} @term{situation}.
See @ref{Error Terminology, Section 1.4.2 (Error Terminology)}.
3. an @term{object} @oftype{error}.

@item @b{error output}  @Noun{}@spc{}
the @term{output} @term{stream} which is the @term{value} of the @term{dynamic variable}
@code{*error-output*}.

@item @b{escape}  @Noun{}, @Adjective{}
1. @Noun{}@spc{}a @term{single escape} or a @term{multiple escape}.
2. @Adjective{}@spc{}@term{single escape} or @term{multiple escape}.

@item @b{establish}  @TransitiveVerb{}@spc{}
to build or bring into being 
a  @term{binding},
a  @term{declaration},
an @term{exit point},
a  @term{tag},
a  @term{handler}, 
a @term{restart},
or an @term{environment}. 
@gexample{@code{let} establishes lexical bindings.}

@item @b{evaluate}  @TransitiveVerb{}@spc{}(a @term{form} or an @term{implicit progn})
to @term{execute} the @term{code} represented by the @term{form}
(or the series of @term{forms} making up the @term{implicit progn})
by applying the rules of @term{evaluation},
returning zero or more values.

@item @b{evaluation}  @Noun{}
a model whereby @term{forms} are @term{executed}, returning zero or more values.
Such execution might be implemented directly in one step by an interpreter
or in two steps by first @term{compiling} the @term{form} and then
@term{executing} the @term{compiled} @term{code}; this choice is 
dependent both on context and the nature of the @term{implementation}, 
but in any case is not in general detectable by any program.  The evaluation
model is designed in such a way that a @term{conforming implementation} 
might legitimately have only a compiler and no interpreter, or vice versa.
See @ref{The Evaluation Model, Section 3.1.2 (The Evaluation Model)}.

@item @b{evaluation environment}  @Noun{}
a @term{run-time environment} in which macro expanders 
and code specified by @code{eval-when} to be evaluated
are evaluated.  All evaluations initiated by the @term{compiler} 
take place in the @term{evaluation environment}.

@item @b{execute}  @TransitiveVerb{}@spc{}@Traditional{}@spc{}(@term{code})
to perform the imperative actions represented by the @term{code}.

@item @b{execution time}  @Noun{}
the duration of time that @term{compiled code} is being @term{executed}.

@item @b{exhaustive partition}  @Noun{}@spc{}(of a @term{type})
a set of @term{pairwise} @term{disjoint} @term{types} that form an 
@term{exhaustive union}.

@item @b{exhaustive union}  @Noun{}@spc{}(of a @term{type})
a set of @term{subtypes} of the @term{type},
whose union contains all @term{elements} of that @term{type}.

@item @b{exit point}  @Noun{}
a point in a @term{control form}
from which (@eg{} @code{block}),
through which (@eg{} @code{unwind-protect}),
or to which (@eg{} @code{tagbody})
control and possibly @term{values} can be transferred both actively by using 
another @term{control form} and passively through the normal control and
data flow of @term{evaluation}.
@gexample{@code{catch} and @code{block} establish bindings for
exit points to which @code{throw} and @code{return-from},
respectively, can transfer control and values;
@code{tagbody} establishes a binding for an exit point
with lexical extent to which @code{go} can transfer control;
and @code{unwind-protect} establishes an exit point 
through which control might be transferred by 
operators such as @code{throw}, @code{return-from},
and @code{go}.}

@item @b{explicit return}  @Noun{}@spc{}
the act of transferring control (and possibly @term{values}) 
to a @term{block} by using @code{return-from} (or @code{return}).

@item @b{explicit use}  @Noun{}@spc{}(of a @term{variable} @mat{V} in a @term{form} @mat{F})
a reference to @mat{V} that is directly apparent in the normal semantics of @mat{F};
@ie{} that does not expose any undocumented details of the
@term{macro expansion} of the @term{form} itself.
References to @mat{V} exposed by expanding @term{subforms} of @mat{F} are, however,
considered to be @term{explicit uses} of @mat{V}.

@item @b{exponent marker}  @Noun{}
a character that is used in the textual notation for a @term{float}
to separate the mantissa from the exponent.
The characters defined as @term{exponent markers} in the @term{standard readtable}
are shown in @thenextfigure{}.
For more information, see @ref{Character Syntax, Section 2.1 (Character Syntax)}.
@gexample{The exponent marker `d' in `3.0d7' indicates
that this number is to be represented as a double float.}


@float Figure,fig26.1
@cartouche
@multitable{@f{D} or @f{d}}{@code{float} (see @code{*read-default-float-format*})}
@headitem Marker @tab Meaning
@item @f{D} or @f{d} @tab @code{double-float}
@item @f{E} or @f{e} @tab @code{float} (see @code{*read-default-float-format*})
@item @f{F} or @f{f} @tab @code{single-float}
@item @f{L} or @f{l} @tab @code{long-float}
@item @f{S} or @f{s} @tab @code{short-float}
@end multitable
@end cartouche
@caption{Exponent Markers}
@end float


@item @b{export}  @TransitiveVerb{}@spc{}(a @term{symbol} in a @term{package})
to add the @term{symbol} to the list of @term{external symbols} of the
@term{package}.

@item @b{exported}  @Adjective{}@spc{}(of a @term{symbol} in a @term{package})
being an @term{external symbol} of the @term{package}.

@item @b{expressed adjustability} @anchor{glos-expressed adjustability}
 @Noun{}@spc{}(of an @term{array})
a @term{generalized boolean} that is conceptually (but not necessarily actually)
associated with the @term{array}, representing whether the @term{array}
is @term{expressly adjustable}.
See also @ref{glos-actual adjustability, actual adjustability}.

@item @b{expressed array element type}  @Noun{}@spc{}(of an @term{array})
the @term{type} which is the @term{array element type}
implied by a @term{type declaration} for the @term{array}, 
or which is the requested @term{array element type} at its time 
of creation, prior to any selection of an @term{upgraded array element type}.
(@clisp{}@spc{}does not provide a way of detecting this @term{type}
directly at run time, but an @term{implementation} is permitted 
to make assumptions about the @term{array}'s contents and
the operations which may be performed on the @term{array} when
this @term{type} is noted during code analysis, even if those 
assumptions would not be valid in general for the
@term{upgraded array element type} of the
@term{expressed array element type}.)

@item @b{expressed complex part type}  @Noun{}@spc{}(of a @term{complex})
the @term{type} which is implied as the @term{complex part type}
by a @term{type declaration} for the @term{complex}, 
or which is the requested @term{complex part type} at its time of
creation, prior to any selection of an @term{upgraded complex part type}.
(@clisp{}@spc{}does not provide a way of detecting this @term{type}
directly at run time, but an @term{implementation} is permitted 
to make assumptions about the operations which may be performed on
the @term{complex} when this @term{type} is noted during code
analysis, even if those assumptions would not be valid in general for 
the @term{upgraded complex part type} of the
@term{expressed complex part type}.)

@item @b{expression}  @Noun{}
1. an @term{object}, often used to emphasize the use 
of the @term{object} to encode or represent information in a specialized
format, such as program text.
@gexample{The second expression in a @code{let} form is a list
of bindings.}
2. the textual notation used to notate an @term{object} in a source file.
@gexample{The expression @f{'sample} is equivalent to @f{(quote sample)}.}

@item @b{expressly adjustable}  @Adjective{}@spc{}(of an @term{array})
being @term{actually adjustable} by virtue of an explicit request for this
characteristic having been made at the time of its creation.
All @term{arrays} that are @term{expressly adjustable} 
are @term{actually adjustable},
but not necessarily vice versa.

@item @b{extended character}  @Noun{}
a @term{character} 
@oftype{extended-char}:
a @term{character} that is not a @term{base character}.

@item @b{extended function designator} @anchor{glos-extended function designator}
 @Noun{}
a @term{designator} for a @term{function}; that is,
an @term{object} that denotes a @term{function}
and that is one of:
a @term{function name} (denoting the @term{function} it names
in the @term{global environment}),
or a @term{function} (denoting itself).
The consequences are undefined if 
a @term{function name} is used as an 
@term{extended function designator} but
it does not have a global definition as a @term{function},
or if it is a @term{symbol} 
that has a global definition as a @term{macro} or a @term{special form}.
See also @ref{glos-function designator, function designator}.

@item @b{extended lambda list}  @Noun{}
a list resembling an @term{ordinary lambda list} in form and purpose, but 
offering additional syntax or functionality not available in an
@term{ordinary lambda list}.
@gexample{@code{defmacro} uses extended lambda lists.}

@item @b{extension}  @Noun{}
a facility in an @term{implementation} of @clisp{}@spc{}
that is not specified by this standard.

@item @b{extent}  @Noun{}
the interval of time during which a @term{reference} to 
an @term{object},
a  @term{binding},
an @term{exit point},
a  @term{tag},
a  @term{handler},
a  @term{restart},
or an @term{environment} is defined.

@item @b{external file format}  @Noun{}
an @term{object} of @term{implementation-dependent} nature which determines
one of possibly several @term{implementation-dependent} ways in which
@term{characters} are encoded externally in a @term{character} @term{file}.

@item @b{external file format designator}  @Noun{}
a @term{designator} for an @term{external file format}; that is,
an @term{object} that denotes an @term{external file format}
and that is one of:
the @term{symbol} @kwd{default} 
(denoting an @term{implementation-dependent} default 
@term{external file format} that can accomodate at least
the @term{base characters}),
some other @term{object} defined by the @term{implementation} to be
an @term{external file format designator}
(denoting an @term{implementation-defined} @term{external file format}),
or some other @term{object} defined by the @term{implementation} to be
an @term{external file format} 
(denoting itself).

@item @b{external symbol}  @Noun{}@spc{}(of a @term{package})
a @term{symbol} that is part of the `external interface' to the @term{package}
and that are @term{inherited}@sub3{} by any other @term{package}
that @term{uses} the @term{package}.
When using the @term{Lisp reader}, 
if a @term{package prefix} is used,
the @term{name} of an @term{external symbol} is separated
from the @term{package} @term{name} by a single @term{package marker}
while
the @term{name} of an @term{internal symbol} is separated
from the @term{package} @term{name} by a double @term{package marker};
see @ref{Symbols as Tokens, Section 2.3.4 (Symbols as Tokens)}.

@item @b{externalizable object}  @Noun{}
an @term{object} that can be used as a @term{literal} @term{object} 
in @term{code} to be processed by the @term{file compiler}.  


@end table
@node F
@unnumberedsec F
@table @asis

@item @b{false}  @Noun{}
the @term{symbol} @nil{},
used to represent the failure of a @term{predicate} test.

@item @b{fbound}  @pronounced{@Stress{ef}@stress{ba\.und}} @Adjective{}@spc{}
(of a @term{function name})
@term{bound} in the @term{function} @term{namespace}.
(The @term{names} of @term{macros} and @term{special operators} are @term{fbound},
but the nature and @term{type} of the @term{object} which is their @term{value}
is @term{implementation-dependent}.
Further, defining a @term{setf expander} @param{F} does not cause the @term{setf function}
@f{(setf @param{F})} to become defined; as such, if there is a such a definition
of a @term{setf expander} @param{F}, the @term{function} @f{(setf @param{F})}
can be @term{fbound} if and only if, by design or coincidence, a
function binding for @f{(setf @param{F})} has been independently established.)
See the @term{functions} @ref{fboundp} and @code{symbol-function}.

@item @b{feature}  @Noun{}
1. an aspect or attribute 
of @clisp{}, 
of the @term{implementation},
or of the @term{environment}.
2. a @term{symbol} that names a @term{feature}@sub1{}.
See @ref{Features, Section 24.1.2 (Features)}.
@gexample{The @kwd{ansi-cl} feature is present in all conforming implementations.}

@item @b{feature expression}  @Noun{}
A boolean combination of @term{features} used by the @f{#+} and @f{#-} 
@term{reader macros} in order to direct conditional @term{reading} of
@term{expressions} by the @term{Lisp reader}.
See @ref{FeatureExpressions, Section 24.1.2.1 (Feature Expressions)}.

@item @b{features list}  @Noun{}
the @term{list} that is @thevalueof{*features*}.

@item @b{file}  @Noun{}
a named entry in a @term{file system},
having an @term{implementation-defined} nature.

@item @b{file compiler}  @Noun{}
any @term{compiler} which @term{compiles} @term{source code} contained in a @term{file},
producing a @term{compiled file} as output.  The @code{compile-file} 
function is the only interface to such a @term{compiler} provided by @clisp{},
but there might be other, @term{implementation-defined} mechanisms for 
invoking the @term{file compiler}.

@item @b{file position}  @Noun{}@spc{}(in a @term{stream})
a non-negative @term{integer} that represents a position in the @term{stream}.
Not all @term{streams} are able to represent the notion of @term{file position};
in the description of any @term{operator} which manipulates @term{file positions}, 
the behavior for @term{streams} that don't have this notion must be explicitly stated.
For @term{binary} @term{streams}, the @term{file position} represents the number 
of preceding @term{bytes} in the @term{stream}.
For @term{character} @term{streams}, the constraint is more relaxed: 
@term{file positions} must increase monotonically, the amount of the increase
between @term{file positions} corresponding to any two successive characters
in the @term{stream} is @term{implementation-dependent}.

@item @b{file position designator}  @Noun{}@spc{}(in a @term{stream})
a @term{designator} for a @term{file position} in that @term{stream}; that is,
the symbol @kwd{start}  
(denoting @f{0}, the first @term{file position} in that @term{stream}),
the symbol @kwd{end}
(denoting the last @term{file position} in that @term{stream};
@ie{} the position following the last @term{element} of the @term{stream}),
or a @term{file position} (denoting itself).

@item @b{file stream}  @Noun{}
an @term{object} @oftype{file-stream}.

@item @b{file system}  @Noun{}
a facility which permits aggregations of data to be stored in named
@term{files} on some medium that is external to the @term{Lisp image}
and that therefore persists from @term{session} to @term{session}.

@item @b{filename}  @Noun{}
a handle, not necessarily ever directly represented as an @term{object},
that can be used to refer to a @term{file} in a @term{file system}.
@term{Pathnames} and @term{namestrings} are two kinds of @term{objects} 
that substitute for @term{filenames} in @clisp{}.  

@item @b{fill pointer}  @Noun{}@spc{}(of a @term{vector})
an @term{integer} associated with a @term{vector} that represents the
index above which no @term{elements} are @term{active}.
(A @term{fill pointer} is a non-negative @term{integer} no
larger than the total number of @term{elements} in the @term{vector}.
Not all @term{vectors} have @term{fill pointers}.)

@item @b{finite}  @Adjective{}@spc{}(of a @term{type})
having a finite number of @term{elements}.
@gexample{The type specifier @f{(integer 0 5)} denotes a finite type,
but the type specifiers @code{integer} and @f{(integer 0)} do not.}

@item @b{fixnum}  @Noun{}@spc{}
an @term{integer} @oftype{fixnum}.

@item @b{float}  @Noun{}
an @term{object} @oftype{float}.

@item @b{for-value}  @Adjective{}@spc{}(of a @term{reference} to a @term{binding})
being a @term{reference} that @term{reads}@sub1{}
the @term{value} of the @term{binding}.

@item @b{form}  @Noun{}
1. any @term{object} meant to be @term{evaluated}.
2.    a @term{symbol},
a @term{compound form},
or a @term{self-evaluating object}.
3. (for an @term{operator}, as in ``@metavar{operator} @term{form}'')
a @term{compound form} having that @term{operator} as its first element.
@gexample{A @code{quote} form is a constant form.}

@item @b{formal argument}  @Noun{}@spc{}@Traditional{}@spc{}
a @term{parameter}.

@item @b{formal parameter}  @Noun{}@spc{}@Traditional{}@spc{}
a @term{parameter}.

@item @b{format}  @TransitiveVerb{}@spc{}(a @term{format control} and @term{format arguments})
to perform output as if by @code{format},
using the @term{format string} and @term{format arguments}.

@item @b{format argument}  @Noun{}
an @term{object} which is used as data by functions such as @code{format}
which interpret @term{format controls}.

@item @b{format control}  @Noun{}
a @term{format string},
or a @term{function} that obeys the @term{argument} conventions
for a @term{function} returned by @themacro{formatter}.
See @ref{CompilingFormatStrings, Section 22.2.1.3 (Compiling Format Strings)}.

@item @b{format directive}  @Noun{}
1. a sequence of @term{characters} in a @term{format string}
which is introduced by a @term{tilde}, and which is specially 
interpreted by @term{code} which processes @term{format strings}
to mean that some special operation should be performed, possibly
involving data supplied by the @term{format arguments} that 
accompanied the @term{format string}.  See the @term{function} @ref{format}.
@gexample{In @f{"@tild{}D base 10 = @tild{}8R"}, the character
sequences `@f{@tild{}D}' and `@f{@tild{}8R}' are format directives.}
2. the conceptual category of all @term{format directives}@sub1{}
which use the same dispatch character.
@gexample{Both @f{"@tild{}3d"} and @f{"@tild{}3,'0D"} are valid uses of the
`@f{@tild{}D}' format directive.}

@item @b{format string}  @Noun{}
a @term{string} which can contain both ordinary text and @term{format directives},
and which is used in conjunction with @term{format arguments} to describe how 
text output should be formatted by certain functions, such as @code{format}.

@item @b{free declaration}  @Noun{}
a declaration that is not a @term{bound declaration}.
See @ref{declare}.

@item @b{fresh}  @Adjective{}@spc{}
1. (of an @term{object} @term{yielded} by a @term{function})
having been newly-allocated by that @term{function}.
(The caller of a @term{function} that returns a @term{fresh} @term{object}
may freely modify the @term{object} without fear that such modification will
compromise the future correct behavior of that @term{function}.)
2. (of a @term{binding} for a @term{name})
newly-allocated; not shared with other @term{bindings} for that @term{name}.

@item @b{freshline}  @Noun{}
a conceptual operation on a @term{stream}, implemented by @thefunction{fresh-line}
and by the @term{format directive} @f{@tild{}@ampers{}}, which advances the display position
to the beginning of the next line (as if a @term{newline} had been typed, or 
@thefunction{terpri} had been called)
unless the @term{stream} is already known to be positioned at the beginning of a line.
Unlike @term{newline}, @term{freshline} is not a @term{character}.

@item @b{funbound}  @pronounced{@Stress{ef}unba\.und} @Noun{}@spc{}(of a @term{function name})
not @term{fbound}.

@item @b{function}  @Noun{}

1. an @term{object} representing code,
which can be @term{called} with zero or more @term{arguments},
and which produces zero or more @term{values}.
2. an @term{object} @oftype{function}.

@item @b{function block name}  @Noun{}@spc{}(of a @term{function name})
The @term{symbol} that would be used as the name of an @term{implicit block}
which surrounds the body of a @term{function} having that @term{function name}.
If the @term{function name} is a @term{symbol}, its @term{function block name} is
the @term{function name} itself.
If the @term{function name} is a @term{list} whose @term{car} is @t{setf}
and whose @term{cadr} is a @term{symbol}, its @term{function block name} is 
the @term{symbol} that is the @term{cadr} of the @term{function name}.
An @term{implementation} which supports additional kinds of @term{function names}
must specify for each how the corresponding @term{function block name} is computed.

@item @b{function cell}  @Noun{}@spc{}@Traditional{}@spc{}(of a @term{symbol})
The @term{place} which holds the @term{definition} of the
global @term{function} @term{binding}, if any, named by that @term{symbol},
and which is @term{accessed} by @code{symbol-function}.
See @ref{glos-cell, cell}.

@item @b{function designator} @anchor{glos-function designator}
 @Noun{}
a @term{designator} for a @term{function}; that is,
an @term{object} that denotes a @term{function}
and that is one of:
a @term{symbol} (denoting the @term{function} named by that @term{symbol}
in the @term{global environment}),
or a @term{function} (denoting itself).
The consequences are undefined if 
a @term{symbol} is used as a @term{function designator} but
it does not have a global definition as a @term{function},
or it has a global definition as a @term{macro} or a @term{special form}.
See also @ref{glos-extended function designator, extended function designator}.

@item @b{function form}  @Noun{}
a @term{form} that is a @term{list} and that has a first element 
which is the @term{name} of a @term{function} to be called on
@term{arguments} which are the result of @term{evaluating} subsequent
elements of the @term{function form}.

@item @b{function name}  @Noun{}@spc{}
1. (in an @term{environment})
A @term{symbol} or a @term{list} @f{(setf @i{symbol})} 
that is the @term{name} of a @term{function} in that @term{environment}.
2. A @term{symbol} or a @term{list} @f{(setf @i{symbol})}.

@item @b{functional evaluation}  @Noun{}@spc{}
the process of extracting a @term{functional value} from a @term{function name}
or a @term{lambda expression}.
The evaluator performs @term{functional evaluation} 
implicitly when it encounters a @term{function name} 
or a @term{lambda expression}
in the @term{car} of a @term{compound form}, 
or explicitly when it encounters a @code{function} @term{special form}.
Neither a use of a @term{symbol} as a @term{function designator} nor a
use of @thefunction{symbol-function} to extract the @term{functional value}
of a @term{symbol} is considered a @term{functional evaluation}.

@item @b{functional value}  @Noun{}@spc{}
1. (of a @term{function name} @mat{N} in an @term{environment} @mat{E})
The @term{value} of the @term{binding} named @mat{N}
in the @term{function} @term{namespace} for @term{environment} @mat{E};
that is, the contents of the @term{function cell} named @mat{N} in 
@term{environment} @mat{E}.
2. (of an @term{fbound} @term{symbol} @mat{S})
the contents of the @term{symbol}'s @term{function cell}; that is,
the @term{value} of the @term{binding} named @mat{S}
in the @term{function} @term{namespace} of the @term{global environment}.
(A @term{name} that is a @term{macro name} in the @term{global environment}
or is a @term{special operator} might or might not be @term{fbound}.
But if @mat{S} is such a @term{name} and is @term{fbound}, the specific
nature of its @term{functional value} is @term{implementation-dependent};
in particular, it might or might not be a @term{function}.)

@item @b{further compilation}  @Noun{}@spc{}
@term{implementation-dependent} compilation beyond @term{minimal compilation}.
Further compilation is permitted to take place at @term{run time}.
@gexample{Block compilation and generation of machine-specific instructions
are examples of further compilation.}  


@end table
@node G
@unnumberedsec G
@table @asis

@item @b{general}  @Adjective{}@spc{}(of an @term{array})
having @term{element type} @code{t},
and consequently able to have any @term{object} as an @term{element}.

@item @b{generalized boolean} @anchor{glos-generalized boolean}
 @Noun{}@spc{}
an @term{object} used as a truth value, where the symbol@tie{}@nil{}@spc{}
represents @term{false} and all other @term{objects} represent @term{true}.
See @ref{glos-boolean, boolean}.

@item @b{generalized instance}  @Noun{}@spc{}(of a @term{class})
an @term{object} the @term{class} of which is either that @term{class} itself,
or some subclass of that @term{class}.  (Because of the correspondence between
types and classes, the term ``generalized instance of @mat{X}''
implies ``object of type @mat{X}'' and in cases where @mat{X} is a @term{class} 
(or @term{class name}) the reverse is also true.
The former terminology emphasizes the view of @mat{X} as a @term{class}
while the latter emphasizes the view of @mat{X} as a @term{type specifier}.)

@item @b{generalized reference}  @Noun{}
a reference to a location storing an @term{object} as if to a @term{variable}.
(Such a reference can be either to @term{read} or @term{write} the location.)
See @ref{Generalized Reference, Section 5.1 (Generalized Reference)}.  See also @term{place}.

@item @b{generalized synonym stream}  @Noun{}@spc{}(with a @term{synonym stream symbol})
1. (to a @term{stream}) 
a @term{synonym stream} to the @term{stream},
or a @term{composite stream} which has as a target 
a @term{generalized synonym stream} to the @term{stream}.
2. (to a @term{symbol})
a @term{synonym stream} to the @term{symbol},
or a @term{composite stream} which has as a target 
a @term{generalized synonym stream} to the @term{symbol}.

@item @b{generic function}  @Noun{}
a @term{function} whose behavior depends on the @term{classes} or
identities of the arguments supplied to it and whose parts include, among
other things, a set of @term{methods}, a @term{lambda list}, and a
@term{method combination} type.

@item @b{generic function lambda list}  @Noun{}
A @term{lambda list} that is used to describe data flow into a @term{generic function}.
See @ref{Generic Function Lambda Lists, Section 3.4.2 (Generic Function Lambda Lists)}.

@item @b{gensym}  @Noun{}@spc{}@Traditional{}@spc{}
an @term{uninterned} @term{symbol}.
See the @term{function} @ref{gensym}.

@item @b{global declaration}  @Noun{}@spc{}
a @term{form} that makes certain kinds of information about 
code globally available; that is, a @code{proclaim} @term{form} 
or a @code{declaim} @term{form}.

@item @b{global environment}  @Noun{}@spc{}
that part of an @term{environment} that contains @term{bindings}
with @term{indefinite scope} and @term{indefinite extent}.

@item @b{global variable}  @Noun{}
a @term{dynamic variable} or a @term{constant variable}.

@item @b{glyph}  @Noun{}@spc{}
a visual representation.
@gexample{Graphic characters have associated glyphs.}

@item @b{go}  @Verb{}@spc{}
to transfer control to a @term{go point}.
See the @term{special operator} @ref{go}.

@item @b{go point} 
one of possibly several @term{exit points} that are @term{established} 
by @code{tagbody} (or other abstractions, such as @code{prog}, 
which are built from @code{tagbody}).

@item @b{go tag}  @Noun{}@spc{}
the @term{symbol} or @term{integer} that, within the @term{lexical scope} 
of a @code{tagbody} @term{form}, names an @term{exit point}
@term{established} by that @code{tagbody} @term{form}.

@item @b{graphic}  @Adjective{}@spc{}(of a @term{character})
being a ``printing'' or ``displayable'' @term{character} 
that has a standard visual representation
as a single @term{glyph}, such as @f{A} or @f{*} or @f{=}.
@term{Space} is defined to be @term{graphic}.
Of the @term{standard characters}, all but @term{newline} are @term{graphic}.
See @ref{glos-non-graphic, non-graphic}.


@end table
@node H
@unnumberedsec H
@table @asis

@item @b{handle}  @Verb{}@spc{}(of a @term{condition} being @term{signaled})
to perform a non-local transfer of control, terminating the ongoing
@term{signaling} of the @term{condition}.

@item @b{handler}  @Noun{}@spc{}

a @term{condition handler}.

@item @b{hash table}  @Noun{}@spc{}
an @term{object} @oftype{hash-table}, 
which provides a mapping from @term{keys} to @term{values}.

@item @b{home package}  @Noun{}@spc{}(of a @term{symbol})
the @term{package}, if any, which is contents of the @term{package cell} 
of the @term{symbol}, and which dictates how the @term{Lisp printer} 
prints the @term{symbol} when it is not @term{accessible} in the
@term{current package}. (@term{Symbols} which have @nil{}@spc{}in their
@term{package cell} are said to have no @term{home package}, and also
to be @term{apparently uninterned}.)


@end table
@node I
@unnumberedsec I
@table @asis

@item @b{I/O customization variable}  @Noun{}
one of the @term{stream variables} in @thenextfigure{}, 
or some other (@term{implementation-defined}) @term{stream variable}
that is defined by the @term{implementation} 
to be an @term{I/O customization variable}.


@float Figure,fig26.2
@cartouche
@multitable{*standard-input*}{*standard-output*}{*trace-output*}

@item *debug-io* @tab *error-io* @tab query-io*
@item *standard-input* @tab *standard-output* @tab *trace-output*
@end multitable
@end cartouche
@caption{Standardized I/O Customization Variables}
@end float


@item @b{identical}  @Adjective{}@spc{}
the @term{same} under @code{eq}.

@item @b{identifier}  @Noun{}@spc{}       
1. a @term{symbol} used to identify or to distinguish @term{names}. 
2. a @term{string} used the same way.            

@item @b{immutable}  @Adjective{}
not subject to change, either because no @term{operator} is provided which is
capable of effecting such change or because some constraint exists which 
prohibits the use of an @term{operator} that might otherwise be capable of
effecting such a change.  Except as explicitly indicated otherwise,
@term{implementations} are not required to detect attempts to modify
@term{immutable} @term{objects} or @term{cells}; the consequences of attempting
to make such modification are undefined.
@gexample{Numbers are immutable.}

@item @b{implementation}  @Noun{}@spc{}
a system, mechanism, or body of @term{code} that implements the semantics of @clisp{}.

@item @b{implementation limit}  @Noun{}@spc{}
a restriction imposed by an @term{implementation}.

@item @b{implementation-defined}  @Adjective{}@spc{}
@term{implementation-dependent}, but required by this specification to be
defined by each @term{conforming implementation} and to be documented by 
the corresponding implementor.

@item @b{implementation-dependent}  @Adjective{}@spc{}
describing a behavior or aspect of @clisp{}@spc{}which has been deliberately left
unspecified, that might be defined in some @term{conforming implementations} 
but not in others, and whose details may differ between @term{implementations}.
A @term{conforming implementation} is encouraged (but not required) to 
document its treatment of each item in this specification which is
marked @term{implementation-dependent}, although in some cases
such documentation might simply identify the item as ``undefined.''

@item @b{implementation-independent}  @Adjective{}@spc{}
used to identify or emphasize a behavior or aspect of @clisp{}@spc{}which does 
not vary between @term{conforming implementations}.

@item @b{implicit block}  @Noun{}@spc{}
a @term{block} introduced by a @term{macro form} 
rather than by an explicit @code{block} @term{form}.

@item @b{implicit compilation}  @Noun{}@spc{}
@term{compilation} performed during @term{evaluation}.

@item @b{implicit progn}  @Noun{}@spc{}
an ordered set of adjacent @term{forms} appearing in another
@term{form}, and defined by their context in that @term{form}
to be executed as if within a @code{progn}.

@item @b{implicit tagbody}  @Noun{}@spc{}
an ordered set of adjacent @term{forms} and/or @term{tags} 
appearing in another @term{form}, and defined by their context 
in that @term{form} to be executed as if within a @code{tagbody}.

@item @b{import}  @TransitiveVerb{}@spc{}(a @term{symbol} into a @term{package})
to make the @term{symbol} be @term{present} in the @term{package}.

@item @b{improper list} @anchor{glos-improper list}
 @Noun{}@spc{}
a @term{list} which is not a @term{proper list}:  
a @term{circular list} or a @term{dotted list}.

@item @b{inaccessible}  @Adjective{}@spc{}
not @term{accessible}.

@item @b{indefinite extent} @anchor{glos-indefinite extent}
 @Noun{}@spc{}
an @term{extent} whose duration is unlimited.
@gexample{Most Common Lisp objects have indefinite extent.}

@item @b{indefinite scope}  @Noun{}@spc{}
@term{scope} that is unlimited.

@item @b{indicator}  @Noun{}@spc{}
a @term{property indicator}.

@item @b{indirect instance}  @Noun{}@spc{}(of a @term{class} @mat{C@sub1{}})
an @term{object} of @term{class} @mat{C@sub2{}}, 
where @mat{C@sub2{}} is a @term{subclass} of @mat{C@sub1{}}.
@gexample{An integer is an indirect instance of the class @code{number}.}

@item @b{inherit}  @TransitiveVerb{}@spc{}
1. to receive or acquire a quality, trait, or characteristic; 
to gain access to a feature defined elsewhere.
2. (a @term{class}) to acquire the structure and behavior defined
by a @term{superclass}.
3. (a @term{package}) to make @term{symbols} @term{exported} by another
@term{package} @term{accessible} by using @code{use-package}.

@item @b{initial pprint dispatch table}  @Noun{}
@thevalueof{*print-pprint-dispatch*} at the time the @term{Lisp image} is started.

@item @b{initial readtable}  @Noun{}
@thevalueof{*readtable*} at the time the @term{Lisp image} is started.

@item @b{initialization argument list}  @Noun{}@spc{}
a @term{property list} of initialization argument @term{names} and @term{values}
used in the protocol for initializing and reinitializing @term{instances} of @term{classes}.
See @ref{Object Creation and Initialization, Section 7.1 (Object Creation and Initialization)}.

@item @b{initialization form}  @Noun{}@spc{}
a @term{form} used to supply the initial @term{value} for a @term{slot}
or @term{variable}.
@gexample{The initialization form for a slot in a @code{defclass} form
is introduced by the keyword @kwd{initform}.}

@item @b{input}  @Adjective{}@spc{}(of a @term{stream})
supporting input operations (@ie{} being a ``data source'').
An @term{input} @term{stream} might also be an @term{output} @term{stream},
in which case it is sometimes called a @term{bidirectional} @term{stream}.
See the @term{function} @ref{input-stream-p}.

@item @b{instance}  @Noun{}@spc{}
1. a @term{direct instance}.
2. a @term{generalized instance}.
3. an @term{indirect instance}.

@item @b{integer}  @Noun{}@spc{}
an @term{object} @oftype{integer}, which represents a mathematical integer.

@item @b{interactive stream}  @Noun{}@spc{}
a @term{stream} on which it makes sense to perform interactive querying.
See @ref{InteractiveStreams, Section 21.1.1.1.3 (Interactive Streams)}.

@item @b{intern}  @TransitiveVerb{}@spc{}
1. (a @term{string} in a @term{package})
to look up the @term{string} in the @term{package}, 
returning either a @term{symbol} with that @term{name}
which was already @term{accessible} in the @term{package}
or a newly created @term{internal symbol} of the @term{package} 
with that @term{name}.
2. @Idiomatic{}@spc{}generally, to observe a protocol whereby objects which 
are equivalent or have equivalent names under some predicate defined
by the protocol are mapped to a single canonical object.

@item @b{internal symbol}  @Noun{}@spc{}(of a @term{package})
a symbol which is @term{accessible} in the @term{package},
but which is not an @term{external symbol} of the @term{package}.

@item @b{internal time}  @Noun{}
@term{time}, represented as an @term{integer} number of @term{internal time units}.
@term{Absolute} @term{internal time} is measured as an offset 
from an arbitrarily chosen, @term{implementation-dependent} base.
See @ref{InternalTime, Section 25.1.4.3 (Internal Time)}.

@item @b{internal time unit}  @Noun{}@spc{}
a unit of time equal to @mat{1/n} of a second, 
for some @term{implementation-defined} @term{integer} value of @mat{n}.
See the @term{variable} @ref{internal-time-units-per-second}.

@item @b{interned}  @Adjective{}@spc{}@Traditional{}@spc{}
1. (of a @term{symbol}) @term{accessible}@sub3{} in
any @term{package}.
2. (of a @term{symbol} in a specific @term{package}) 
@term{present} in that @term{package}.

@item @b{interpreted function}  @Noun{}@spc{}
a @term{function} that is not a @term{compiled function}.
(It is possible for there to be a @term{conforming implementation} which
has no @term{interpreted functions}, but a @term{conforming program}
must not assume that all @term{functions} are @term{compiled functions}.)

@item @b{interpreted implementation}  @Noun{}
an @term{implementation} that uses an execution strategy for 
@term{interpreted functions} that does not involve a one-time semantic
analysis pre-pass, and instead uses ``lazy'' (and sometimes repetitious)
semantic analysis of @term{forms} as they are encountered during execution.

@item @b{interval designator}  @Noun{}@spc{}(of @term{type} @mat{T})
an ordered pair of @term{objects} that describe a @term{subtype} of @mat{T}
by delimiting an interval on the real number line.
See @ref{Interval Designators, Section 12.1.6 (Interval Designators)}.

@item @b{invalid}  @Noun{}, @Adjective{}
1. @Noun{}
a possible @term{constituent trait} of a @term{character}
which if present signifies that the @term{character} 
cannot ever appear in a @term{token} 
except under the control of a @term{single escape} @term{character}.
For details, see @ref{ConstituentChars, Section 2.1.4.1 (Constituent Characters)}.
2. @Adjective{}@spc{}(of a @term{character})
being a @term{character} that has @term{syntax type} @term{constituent}
in the @term{current readtable} and that has the 
@term{constituent trait} @term{invalid}@sub1{}.
See @ref{ConstituentTraitsOfStdChars, Figure 2.8}.

@item @b{iteration form}  @Noun{}
a @term{compound form} whose @term{operator} is named in @thenextfigure{},
or a @term{compound form} that has an @term{implementation-defined} @term{operator}
and that is defined by the @term{implementation} to be an @term{iteration form}.


@float Figure,fig26.3
@cartouche
@multitable{do-all-symbols}{do-external-symbols}{dotimes}

@item do @tab do-external-symbols @tab dotimes
@item do* @tab do-symbols @tab loop
@item do-all-symbols @tab dolist @tab 
@end multitable
@end cartouche
@caption{Standardized Iteration Forms}
@end float


@item @b{iteration variable}  @Noun{}
a @term{variable} @mat{V}, the @term{binding} for which was created by an
@term{explicit use} of @mat{V} in an @term{iteration form}.


@end table
@node K
@unnumberedsec K
@table @asis

@item @b{key}  @Noun{}@spc{}
an @term{object} used for selection during retrieval. 
See @ref{glos-association list, association list}, @term{property list}, and @term{hash table}.
Also, see @ref{Sequence Concepts, Section 17.1 (Sequence Concepts)}.

@item @b{keyword}  @Noun{}@spc{}
1. a @term{symbol} the @term{home package} of which is the @code{KEYWORD} @term{package}.
2. any @term{symbol}, usually but not necessarily in the @code{KEYWORD} @term{package},
that is used as an identifying marker in keyword-style argument passing.
See @ref{lambda (Symbol)}.
3. @Idiomatic{}@spc{}a @term{lambda list keyword}.

@item @b{keyword parameter}  @Noun{}
A @term{parameter} for which a corresponding keyword @term{argument}
is optional.  (There is no such thing as a required keyword @term{argument}.)
If the @term{argument} is not supplied, a default value is used.
See also @ref{glos-supplied-p parameter, supplied-p parameter}.

@item @b{keyword/value pair}  @Noun{}@spc{}
two successive @term{elements} (a @term{keyword} and a @term{value}, 
respectively) of a @term{property list}.


@end table
@node L
@unnumberedsec L
@table @asis

@item @b{lambda combination}  @Noun{}@spc{}@Traditional{}@spc{}
a @term{lambda form}.

@item @b{lambda expression}  @Noun{}@spc{}
a @term{list} which can be used in place of a @term{function name} in 
certain contexts to denote a @term{function} by directly describing its
behavior rather than indirectly by referring to the name of an
@term{established} @term{function}; its name derives from the fact that its
first element is the @term{symbol} @f{lambda}.
See @ref{lambda (Symbol)}.

@item @b{lambda form}  @Noun{}@spc{}
a @term{form} that is a @term{list} and that has a first element
which is a @term{lambda expression} representing a @term{function}
to be called on @term{arguments} which are the result of @term{evaluating}
subsequent elements of the @term{lambda form}.

@item @b{lambda list}  @Noun{}@spc{}
a @term{list} that specifies a set of @term{parameters} 
(sometimes called @term{lambda variables})
and a protocol for receiving @term{values} for those @term{parameters};
that is,
an @term{ordinary lambda list},
an @term{extended lambda list},
or a @term{modified lambda list}.

@item @b{lambda list keyword}  @Noun{}@spc{}
a @term{symbol} whose @term{name} begins with @term{ampersand}
and that is specially recognized in a @term{lambda list}.
Note that no @term{standardized} @term{lambda list keyword} 
is in the @code{KEYWORD} @term{package}.

@item @b{lambda variable}  @Noun{}@spc{}
a @term{formal parameter}, used to emphasize the @term{variable}'s
relation to the @term{lambda list} that @term{established} it.

@item @b{leaf}  @Noun{}@spc{}
1. an @term{atom} in a @term{tree}@sub1{}.
2. a terminal node of a @term{tree}@sub2{}.

@item @b{leap seconds}  @Noun{}
additional one-second intervals of time that are occasionally inserted 
into the true calendar by official timekeepers as a correction similar 
to ``leap years.''  All @clisp{}@spc{}@term{time} representations ignore 
@term{leap seconds}; every day is assumed to be exactly 86400 seconds 
long.

@item @b{left-parenthesis}  @Noun{}
the @term{standard character} ``@f{(}'',
that is variously called
``left parenthesis''
or ``open parenthesis''
See @ref{StdCharsThree, Figure 2.5}.

@item @b{length}  @Noun{}@spc{}(of a @term{sequence})
the number of @term{elements} in the @term{sequence}.
(Note that if the @term{sequence} is a @term{vector} with a 
@term{fill pointer}, its @term{length} is the same as the 
@term{fill pointer} even though the total allocated size of
the @term{vector} might be larger.)

@item @b{lexical binding}  @Noun{}@spc{}
a @term{binding} in a @term{lexical environment}.

@item @b{lexical closure}  @Noun{}@spc{}
a @term{function} that, when invoked on @term{arguments}, executes
the body of a @term{lambda expression} in the @term{lexical environment} 
that was captured at the time of the creation of the @term{lexical closure},
augmented by @term{bindings} of the @term{function}'s @term{parameters}
to the corresponding @term{arguments}.

@item @b{lexical environment}  @Noun{}@spc{}
that part of the @term{environment} that contains @term{bindings}
whose names have @term{lexical scope}. A @term{lexical environment} 
contains, among other things:
ordinary @term{bindings} of @term{variable} @term{names} to @term{values},
lexically @term{established} @term{bindings} of @term{function names}
to @term{functions},
@term{macros},
@term{symbol macros},
@term{blocks},
@term{tags},
and
@term{local declarations} (see @ref{declare}).

@item @b{lexical scope}  @Noun{}@spc{}
@term{scope} that is limited to a spatial or textual region within the
establishing @term{form}.
@gexample{The names of parameters to a function normally are lexically scoped.}

@item @b{lexical variable}  @Noun{}@spc{}
a @term{variable} the @term{binding} for which is in the
@term{lexical environment}.

@item @b{Lisp image}  @Noun{}
a running instantiation of a @clisp{}@spc{}@term{implementation}.
A @term{Lisp image} is characterized by a single address space in which any
@term{object} can directly refer to any another in conformance with this specification,
and by a single, common, @term{global environment}.
(External operating systems sometimes call this a 
``core image,''
``fork,''
``incarnation,'' 
``job,''
or ``process.''  Note however, that the issue of a ``process'' in such 
an operating system is technically orthogonal to the issue of a @term{Lisp image}
being defined here.  Depending on the operating system, a single ``process'' 
might have multiple @term{Lisp images}, and multiple ``processes'' might reside
in a single @term{Lisp image}.  Hence, it is the idea of a fully shared address
space for direct reference among all @term{objects} which is the defining
characteristic.  Note, too, that two ``processes'' which have a communication 
area that permits the sharing of some but not all @term{objects} are considered
to be distinct @term{Lisp images}.)

@item @b{Lisp printer}  @Noun{}@spc{}@Traditional{}@spc{}
the procedure that prints the character representation of an
@term{object} onto a @term{stream}. (This procedure is implemented
by @thefunction{write}.)

@item @b{Lisp read-eval-print loop}  @Noun{}@spc{}@Traditional{}@spc{}
an endless loop that @term{reads}@sub2{} a @term{form},
@term{evaluates} it,
and prints (@ie{} @term{writes}@sub2{}) the results.
In many @term{implementations},
the default mode of interaction with @clisp{}@spc{}during program development
is through such a loop.

@item @b{Lisp reader}  @Noun{}@spc{}@Traditional{}@spc{}
the procedure that parses character representations of @term{objects}
from a @term{stream}, producing @term{objects}.
(This procedure is implemented by @thefunction{read}.)


@item @b{list}  @Noun{}@spc{}
1. a chain of @term{conses} in which the @term{car} of each
@term{cons} is an @term{element} of the @term{list}, 
and the @term{cdr} of each @term{cons} is either the next
link in the chain or a terminating @term{atom}.  
See also @ref{glos-proper list, proper list},
@term{dotted list}, 
or @term{circular list}.
2. the @term{type} that is the union of @code{null} and @code{cons}.

@item @b{list designator}  @Noun{}
a @term{designator} for a @term{list} of @term{objects}; that is,
an @term{object} that denotes a @term{list} 
and that is one of:
a @term{non-nil} @term{atom} 
(denoting a @term{singleton} @term{list} 
whose @term{element} is that @term{non-nil} @term{atom})
or a @term{proper list} (denoting itself).

@item @b{list structure}  @Noun{}@spc{}(of a @term{list})
the set of @term{conses} that make up the @term{list}.
Note that while the @term{car}[1b] component of each such @term{cons}
is part of the @term{list structure}, 
the @term{objects} that are @term{elements} of the @term{list}
(@ie{} the @term{objects} that are the @term{cars}@sub2{} of each @term{cons}
in the @term{list})
are not themselves part of its @term{list structure}, 
even if they are @term{conses},
except in the (@term{circular}@sub2{})
case where the @term{list} 
actually contains one of its @term{tails} as an @term{element}.
(The @term{list structure} of a @term{list} is sometimes redundantly 
referred to as its ``top-level list structure'' in order to emphasize
that any @term{conses} that are @term{elements} of the @term{list} 
are not involved.)

@item @b{literal}  @Adjective{}@spc{}(of an @term{object})
referenced directly in a program rather than being computed by the program;
that is,
appearing as data in a @code{quote} @term{form}, 
or, if the @term{object} is a @term{self-evaluating object},
appearing as unquoted data.
@gexample{In the form @f{(cons "one" '("two"))}, 
the expressions @f{"one"}, @f{("two")}, and @f{"two"}
are literal objects.}

@item @b{load}  @TransitiveVerb{}@spc{}(a @term{file})
to cause the @term{code} contained in the @term{file} to be @term{executed}.
See the @term{function} @ref{load}.

@item @b{load time}  @Noun{}
the duration of time that the loader is @term{loading} @term{compiled code}.

@item @b{load time value}  @Noun{}@spc{}
an @term{object} referred to in @term{code} by a @code{load-time-value} 
@term{form}.  The @term{value} of such a @term{form} is some specific
@term{object} which can only be computed in the run-time @term{environment}.
In the case of @term{file} @term{compilation}, the @term{value} is
computed once as part of the process of @term{loading} the @term{compiled file},
and not again.  See the @term{special operator} @ref{load-time-value}.

@item @b{loader}  @Noun{}
a facility that is part of Lisp and that @term{loads} a @term{file}.
See the @term{function} @ref{load}.

@item @b{local declaration}  @Noun{}@spc{}
an @term{expression} which may appear only in specially designated
positions of certain @term{forms}, and which provides information about
the code contained within the containing @term{form}; 
that is, a @t{declare} @term{expression}.

@item @b{local precedence order}  @Noun{}@spc{}(of a @term{class})
a @term{list} consisting of the @term{class} followed by its
@term{direct superclasses} in the order mentioned in the defining
@term{form} for the @term{class}.

@item @b{local slot}  @Noun{}@spc{}(of a @term{class})
a @term{slot} @term{accessible} in only one @term{instance}, 
namely the @term{instance} in which the @term{slot} is allocated.

@item @b{logical block}  @Noun{}
a conceptual grouping of related output used by the @term{pretty printer}.
See the @term{macro} @ref{pprint-logical-block} and @ref{DynamicControlofOutput, Section 22.2.1.1 (Dynamic Control of the Arrangement of Output)}.

@item @b{logical host}  @Noun{}
an @term{object} of @term{implementation-dependent} nature 
that is used as the representation of a ``host'' in a @term{logical pathname},
and that has an associated set of translation rules for converting
@term{logical pathnames} belonging to that host into @term{physical pathnames}.
See @ref{Logical Pathnames, Section 19.3 (Logical Pathnames)}.

@item @b{logical host designator}  @Noun{}
a @term{designator} for a @term{logical host}; that is,
an @term{object} that denotes a @term{logical host} 
and that is one of:
a @term{string} (denoting the @term{logical host} that it names),
or a @term{logical host} (denoting itself).
(Note that because the representation of a @term{logical host} 
is @term{implementation-dependent},
it is possible that an @term{implementation} might represent 
a @term{logical host} as the @term{string} that names it.)

@item @b{logical pathname}  @Noun{}@spc{}
an @term{object} @oftype{logical-pathname}.

@item @b{long float}  @Noun{}@spc{}
an @term{object} @oftype{long-float}.

@item @b{loop keyword}  @Noun{}@spc{}@Traditional{}
a symbol that is a specially recognized part of the syntax of 
an extended @code{loop} @term{form}.  Such symbols are recognized by their
@term{name} (using @code{string=}), not by their identity; as such, they
may be in any package.  A @term{loop keyword} is not a @term{keyword}.

@item @b{lowercase}  @Adjective{}@spc{}(of a @term{character})
being among @term{standard characters} corresponding to
the small letters @f{a} through @f{z},
or being some other @term{implementation-defined} @term{character}
that is defined by the @term{implementation} to be @term{lowercase}.
See @ref{CharactersWithCase, Section 13.1.4.3 (Characters With Case)}.


@end table
@node M
@unnumberedsec M
@table @asis

@item @b{macro}  @Noun{}@spc{}
1. a @term{macro form}
2. a @term{macro function}.
3. a @term{macro name}.

@item @b{macro character}  @Noun{}@spc{}
a @term{character} which, when encountered by the @term{Lisp reader} 
in its main dispatch loop, introduces a @term{reader macro}@sub1{}.
(@term{Macro characters} have nothing to do with @term{macros}.)

@item @b{macro expansion}  @Noun{}@spc{}
1. the process of translating a @term{macro form} into another
@term{form}.
2. the @term{form} resulting from this process.

@item @b{macro form}  @Noun{}@spc{}
a @term{form} that stands for another @term{form} 
(@eg{} for the purposes of abstraction, information hiding, 
or syntactic convenience);
that is, 
either a @term{compound form} whose first element is a @term{macro name}, 
or     a @term{form} that is a @term{symbol} that names a 
@term{symbol macro}.

@item @b{macro function}  @Noun{}@spc{}
a @term{function} of two arguments, a @term{form} and an 
@term{environment}, that implements @term{macro expansion} by
producing a @term{form} to be evaluated in place of the original
argument @term{form}.

@item @b{macro lambda list}  @Noun{}
an @term{extended lambda list} used in @term{forms} that @term{establish}
@term{macro} definitions, such as @code{defmacro} and @code{macrolet}.
See @ref{Macro Lambda Lists, Section 3.4.4 (Macro Lambda Lists)}.

@item @b{macro name}  @Noun{}@spc{}
a @term{name} for which @code{macro-function} returns @term{true}
and which when used as the first element of a @term{compound form}
identifies that @term{form} as a @term{macro form}.

@item @b{macroexpand hook}  @Noun{}
the @term{function} that is @thevalueof{*macroexpand-hook*}.

@item @b{mapping}  @Noun{}@spc{}
1. a type of iteration in which a @term{function} is successively 
applied to @term{objects} taken from corresponding entries in
collections such as @term{sequences} or @term{hash tables}.
2. @Mathematics{}@spc{}a relation between two sets in which each element of the
first set (the ``domain'') is assigned one element of the second
set (the ``range'').

@item @b{metaclass}  @Noun{}@spc{}
1. a @term{class} whose instances are @term{classes}.
2. (of an @term{object}) the @term{class} of the @term{class} of the @term{object}.

@item @b{Metaobject Protocol}  @Noun{}
one of many possible descriptions of how a @term{conforming implementation}
might implement various aspects of the @CLOS{}.  This description is beyond
the scope of this document, and no @term{conforming implementation} is
required to adhere to it except as noted explicitly in this specification.
Nevertheless, its existence helps to establish normative practice, 
and implementors with no reason to diverge from it are encouraged to
consider making their @term{implementation} adhere to it where possible.
It is described in detail in @MetaObjectProtocol{}.

@item @b{method}  @Noun{}@spc{}
an @term{object} that is part of a @term{generic function} and which
provides information about how that @term{generic function} should 
behave when its @term{arguments} are @term{objects} of certain
@term{classes} or with certain identities.

@item @b{method combination}  @Noun{}@spc{}
1. generally, the composition of a set of @term{methods} to produce an
@term{effective method} for a @term{generic function}.
2. an object @oftype{method-combination}, which represents the details
of how the @term{method combination}@sub1{} for one or more 
specific @term{generic functions} is to be performed.

@item @b{method-defining form}  @Noun{}@spc{}
a @term{form} that defines a @term{method} for a @term{generic function},
whether explicitly or implicitly.  
See @ref{Introduction to Generic Functions, Section 7.6.1 (Introduction to Generic Functions)}.

@item @b{method-defining operator}  @Noun{}
an @term{operator} corresponding to a @term{method-defining} @term{form}.
See @ref{StdMethDefOps, Figure 7.1}.

@item @b{minimal compilation}  @Noun{}
actions the @term{compiler} must take at compile time. 
See @ref{Compilation Semantics, Section 3.2.2 (Compilation Semantics)}.

@item @b{modified lambda list} @anchor{glos-modified lambda list}
 @Noun{}@spc{}
a list resembling an @term{ordinary lambda list} in form and purpose, 
but which deviates in syntax or functionality from the definition of an 
@term{ordinary lambda list}.
See @ref{glos-ordinary lambda list, ordinary lambda list}.
@gexample{@code{deftype} uses a modified lambda list.}

@item @b{most recent}  @Adjective{}
innermost;
that is, having been @term{established} (and not yet @term{disestablished})
more recently than any other of its kind.

@item @b{multiple escape}  @Noun{}, @Adjective{}
1. @Noun{}@spc{}the @term{syntax type} of a @term{character} 
that is used in pairs  to indicate that the enclosed @term{characters}
are to be treated as @term{alphabetic}@sub2{} @term{characters}
with their @term{case} preserved.
For details, see @ref{MultipleEscapeChar, Section 2.1.4.5 (Multiple Escape Characters)}.
2. @Adjective{}@spc{}(of a @term{character}) 
having the @term{multiple escape} @term{syntax type}.
3. @Noun{}@spc{}a @term{multiple escape}@sub2{} @term{character}.
(In the @term{standard readtable},
@term{vertical-bar} is a @term{multiple escape} @term{character}.)

@item @b{multiple values}  @Noun{}@spc{}
1. more than one @term{value}.
@gexample{The function @code{truncate} returns multiple values.}
2. a variable number of @term{values}, possibly including zero or one.
@gexample{The function @code{values} returns multiple values.}
3. a fixed number of values other than one.
@gexample{The macro @code{multiple-value-bind} is among the few
operators in @clisp{}@spc{}which can detect and manipulate
multiple values.}


@end table
@node N
@unnumberedsec N
@table @asis

@item @b{name}  @Noun{}, @TransitiveVerb{}@spc{}
1. @Noun{}@spc{}an @term{identifier} by which an @term{object},
a @term{binding}, or an @term{exit point}
is referred to by association using a @term{binding}.
2. @TransitiveVerb{}@spc{}to give a @term{name} to.
3. @Noun{}@spc{}(of an @term{object} having a name component) 
the @term{object} which is that component.  
@gexample{The string which is a symbol's name is returned
by @code{symbol-name}.}
4. @Noun{}@spc{}(of a @term{pathname})
a. the name component, returned by @code{pathname-name}.
b. the entire namestring, returned by @code{namestring}.
5. @Noun{}@spc{}(of a @term{character})
a @term{string} that names the @term{character}
and that has @term{length} greater than one.
(All @term{non-graphic} @term{characters} are required to have @term{names}
unless they have some @term{implementation-defined} @term{attribute}
which is not @term{null}.  Whether or not other @term{characters}
have @term{names} is @term{implementation-dependent}.)

@item @b{named constant}  @Noun{}@spc{}
a @term{variable} that is defined by @clisp{},
by the @term{implementation},
or by user code (see the @term{macro} @ref{defconstant})
to always @term{yield} the same @term{value} when @term{evaluated}.
@gexample{The value of a named constant may not be changed
by assignment or by binding.}

@item @b{namespace}  @Noun{}@spc{}
1. @term{bindings} whose denotations are restricted to a particular kind.
@gexample{The bindings of names to tags is the tag namespace.}
2. any @term{mapping} whose domain is a set of @term{names}.
@gexample{A package defines a namespace.}

@item @b{namestring}  @Noun{}@spc{}
a @term{string} that represents a @term{filename}
using either the @term{standardized} notation for naming @term{logical pathnames}
described in @ref{Syntax of Logical Pathname Namestrings, Section 19.3.1 (Syntax of Logical Pathname Namestrings)},
or some @term{implementation-defined} notation for naming a @term{physical pathname}.

@item @b{newline}  @Noun{}
the @term{standard character} @NewlineChar{},
notated for the @term{Lisp reader} as @f{#@bsl{}Newline}.

@item @b{next method}  @Noun{}@spc{}
the next @term{method} to be invoked with respect to a given
@term{method} for a particular set of arguments or argument
@term{classes}.  
See @ref{ApplyMethCombToSortedMethods, Section 7.6.6.1.3 (Applying method combination to the sorted list of applicable methods)}.

@item @b{nickname}  @Noun{}@spc{}(of a @term{package})
one of possibly several @term{names} that can be used to refer to
the @term{package} but that is not the primary @term{name} 
of the @term{package}.

@item @b{nil} @anchor{glos-nil}
 @Noun{}@spc{}
the @term{object} that is at once
the @term{symbol} named @f{"NIL"} in the @code{COMMON-LISP} @term{package},
the @term{empty list},
the @term{boolean} (or @term{generalized boolean}) representing @term{false},
and the @term{name} of the @term{empty type}.

@item @b{non-atomic}  @Adjective{}@spc{}
being other than an @term{atom}; @ie{} being a @term{cons}.

@item @b{non-constant variable}  @Noun{}
a @term{variable} that is not a @term{constant variable}.

@item @b{non-correctable}  @Adjective{}@spc{}(of an @term{error})
not intentionally @term{correctable}.
(Because of the dynamic nature of @term{restarts},
it is neither possible nor generally useful to completely prohibit
an @term{error} from being @term{correctable}.
This term is used in order to express an intent that no special effort
should be made by @term{code} signaling an @term{error} to make
that @term{error} @term{correctable}; 
however, there is no actual requirement on @term{conforming programs}
or @term{conforming implementations} imposed by this term.)

@item @b{non-empty}  @Adjective{}
having at least one @term{element}.

@item @b{non-generic function}  @Noun{}@spc{}
a @term{function} that is not a @term{generic function}.

@item @b{non-graphic} @anchor{glos-non-graphic}
 @Adjective{}@spc{}(of a @term{character})
not @term{graphic}.
See @ref{GraphicChars, Section 13.1.4.1 (Graphic Characters)}.

@item @b{non-list}  @Noun{}, @Adjective{}@spc{}
other than a @term{list}; @ie{} a @term{non-nil} @term{atom}.

@item @b{non-local exit}  @Noun{}@spc{}
a transfer of control (and sometimes @term{values}) to 
an @term{exit point} for reasons other than a @term{normal return}.
@gexample{The operators @code{go}, @code{throw}, 
and @code{return-from} cause a non-local exit.}

@item @b{non-nil}  @Noun{}, @Adjective{}@spc{}
not @nil{}.  Technically, any @term{object} which is not @nil{}@spc{}can be
referred to as @term{true}, but that would tend to imply a unique view
of the @term{object} as a @term{generalized boolean}.
Referring to such an @term{object} as @term{non-nil} avoids this implication.

@item @b{non-null lexical environment}  @Noun{}@spc{}
a @term{lexical environment} that has additional information not present in
the @term{global environment}, such as one or more @term{bindings}.

@item @b{non-simple}  @Adjective{}
not @term{simple}.

@item @b{non-terminating}  @Adjective{}@spc{}(of a @term{macro character})
being such that it is treated as a constituent @term{character}
when it appears in the middle of an extended token.
See @ref{Reader Algorithm, Section 2.2 (Reader Algorithm)}.

@item @b{non-top-level form}  @Noun{}@spc{}
a @term{form} that, by virtue of its position as a @term{subform}
of another @term{form}, is not a @term{top level form}.
See @ref{TopLevelForms, Section 3.2.3.1 (Processing of Top Level Forms)}.

@item @b{normal return}  @Noun{}@spc{}
the natural transfer of control and @term{values} which occurs after
the complete @term{execution} of a @term{form}.

@item @b{normalized}  @Adjective{}, @ANSI{}, @IEEE{}@spc{}(of a @term{float})
conforming to the description of ``normalized'' as described by @IEEEFloatingPoint{}.
See @ref{glos-denormalized, denormalized}.

@item @b{null}  @Adjective{}, @Noun{}@spc{}
1. @Adjective{}@spc{}
a. (of a @term{list}) having no @term{elements}: empty.  See @ref{glos-empty list, empty list}.
b. (of a @term{string}) having a @term{length} of zero.
(It is common, both within this document and in observed spoken behavior,
to refer to an empty string by an apparent definite reference,
as in ``the @term{null} @term{string}'' even though no attempt is made to
@term{intern}@sub2{} null strings.  The phrase 
``a @term{null} @term{string}'' is technically more correct, 
but is generally considered awkward by most Lisp programmers.  
As such, the phrase ``the @term{null} @term{string}'' 
should be treated as an indefinite reference in all cases 
except for anaphoric references.)
c. (of an @term{implementation-defined} @term{attribute} of a @term{character})
An @term{object} to which the value of that @term{attribute} defaults 
if no specific value was requested.
2. @Noun{}@spc{}an @term{object} @oftype{null} (the only such @term{object} being @nil{}).

@item @b{null lexical environment}  @Noun{}@spc{}
the @term{lexical environment} which has no @term{bindings}.

@item @b{number}  @Noun{}
an @term{object} @oftype{number}.

@item @b{numeric}  @Adjective{}@spc{}(of a @term{character})
being one of the @term{standard characters} @f{0} through @term{9},
or being some other @term{graphic} @term{character}
defined by the @term{implementation} to be @term{numeric}.


@end table
@node O
@unnumberedsec O
@table @asis

@item @b{object}  @Noun{}@spc{}
1. any Lisp datum. 
@gexample{The function @code{cons} creates an object which refers
to two other objects.}
2. (immediately following the name of a @term{type})
an @term{object} which is of that @term{type}, used to emphasize that the
@term{object} is not just a @term{name} for an object of that @term{type}
but really an @term{element} of the @term{type} in cases where @term{objects}
of that @term{type} (such as @code{function} or @code{class}) are commonly
referred to by @term{name}.
@gexample{The function @code{symbol-function} takes a function name 
and returns a function object.}

@item @b{object-traversing}  @Adjective{}@spc{}
operating in succession on components of an @term{object}.
@gexample{The operators @code{mapcar}, @code{maphash}, 
@code{with-package-iterator} and @code{count}
perform object-traversing operations.}

@item @b{open}  @Adjective{}, @TransitiveVerb{}@spc{}(a @term{file})
1. @TransitiveVerb{}@spc{}to create and return a @term{stream} to the @term{file}.
2. @Adjective{}@spc{}(of a @term{stream})
having been @term{opened}@sub1{}, but not yet @term{closed}.

@item @b{operator}  @Noun{}@spc{}
1. a @term{function}, @term{macro}, or @term{special operator}.
2. a @term{symbol} that names
such a @term{function}, @term{macro}, or @term{special operator}.
3. (in a @code{function} @term{special form})
the @term{cadr} of the @code{function} @term{special form}, which 
might be either an @term{operator}@sub2{} or a @term{lambda expression}.
4. (of a @term{compound form})
the @term{car} of the @term{compound form}, which might be 
either an @term{operator}@sub2{}
or a @term{lambda expression}, and which is never @f{(setf @term{symbol})}.

@item @b{optimize quality}  @Noun{}@spc{}
one of several aspects of a program that might be optimizable by
certain compilers.  Since optimizing one such quality
might conflict with optimizing another, relative priorities for
qualities can be established in an @code{optimize} @term{declaration}.
The @term{standardized} @term{optimize qualities} are
@f{compilation-speed} (speed of the compilation process), 
@f{debug} (ease of debugging),
@f{safety} (run-time error checking),
@f{space} (both code size and run-time space),
and
@f{speed} (of the object code).
@term{Implementations} may define additional @term{optimize qualities}.

@item @b{optional parameter}  @Noun{}
A @term{parameter} for which a corresponding positional @term{argument}
is optional.  If the @term{argument} is not supplied, a default value
is used.  See also @ref{glos-supplied-p parameter, supplied-p parameter}.

@item @b{ordinary function}  @Noun{}@spc{}
a @term{function} that is not a @term{generic function}.

@item @b{ordinary lambda list} @anchor{glos-ordinary lambda list}
 @Noun{}@spc{}
the kind of @term{lambda list} used by @t{lambda}.
See @ref{glos-modified lambda list, modified lambda list} and @term{extended lambda list}.
@gexample{@code{defun} uses an ordinary lambda list.}

@item @b{otherwise inaccessible part}  @Noun{}@spc{}(of an @term{object}, @mat{O@sub1{}})
an @term{object}, @mat{O@sub2{}}, which would be made @term{inaccessible} if 
@mat{O@sub1{}} were made @term{inaccessible}.  (Every @term{object} is an
@term{otherwise inaccessible part} of itself.)

@item @b{output}  @Adjective{}@spc{}(of a @term{stream})
supporting output operations (@ie{} being a ``data sink'').
An @term{output} @term{stream} might also be an @term{input} @term{stream},
in which case it is sometimes called a @term{bidirectional} @term{stream}.
See the @term{function} @ref{output-stream-p}.


@end table
@node P
@unnumberedsec P
@table @asis

@item @b{package}  @Noun{}@spc{}
an @term{object} @oftype{package}.

@item @b{package cell}  @Noun{}@spc{}@Traditional{}@spc{}(of a @term{symbol})
The @term{place} in a @term{symbol} that holds one of
possibly several @term{packages} in which the @term{symbol} is 
@term{interned}, called the @term{home package}, or which holds
@nil{}@spc{}if no such @term{package} exists or is known.
See the @term{function} @ref{symbol-package}.

@item @b{package designator}  @Noun{}
a @term{designator} for a @term{package}; that is,
an @term{object} that denotes a @term{package}
and that is one of:
a @term{@packagenamedesignator{}} 
(denoting the @term{package} that has the @term{string}
that it designates as its @term{name} 
or as one of its @term{nicknames}),
or a @term{package} (denoting itself).

@item @b{package marker}  @Noun{}@spc{}
a character which is used in the textual notation for a symbol 
to separate the package name from the symbol name, and which
is @term{colon} in the @term{standard readtable}.
See @ref{Character Syntax, Section 2.1 (Character Syntax)}.

@item @b{package prefix}  @Noun{}@spc{}
a notation preceding the @term{name} of a @term{symbol} in text that is
processed by the @term{Lisp reader}, which uses a @term{package} @term{name}
followed by one or more @term{package markers}, and which indicates that
the symbol is looked up in the indicated @term{package}.

@item @b{package registry}  @Noun{}
A mapping of @term{names} to @term{package} @term{objects}.
It is possible for there to be a @term{package} @term{object} which is not
in this mapping; such a @term{package} is called an @term{unregistered package}.
@term{Operators} such as @code{find-package} consult this mapping in order
to find a @term{package} from its @term{name}.
@term{Operators} such as @code{do-all-symbols}, @code{find-all-symbols}, 
and @code{list-all-packages} operate only on @term{packages} that exist
in the @term{package registry}.

@item @b{pairwise}  @Adverb{}@spc{}(of an adjective on a set)
applying individually to all possible pairings of elements of the set.
@gexample{The types @mat{A}, @mat{B}, and @mat{C} are pairwise disjoint if 
@mat{A} and @mat{B} are disjoint,
@mat{B} and @mat{C} are disjoint, and
@mat{A} and @mat{C} are disjoint.}

@item @b{parallel} @anchor{glos-parallel}
 @Adjective{}@spc{}@Traditional{}@spc{}(of @term{binding} or @term{assignment})
done in the style of @code{psetq}, @code{let}, or @code{do};
that is, first evaluating all of the @term{forms} that produce @term{values},
and only then @term{assigning} or @term{binding} the @term{variables} (or @term{places}).
Note that this does not imply traditional computational ``parallelism'' 
since the @term{forms} that produce @term{values} are evaluated @term{sequentially}.
See @ref{glos-sequential, sequential}.

@item @b{parameter}  @Noun{}@spc{}
1. (of a @term{function})
a @term{variable} in the definition of a @term{function}
which takes on the @term{value} of a corresponding @term{argument}
(or of a @term{list} of corresponding arguments)
to that @term{function} when it is called,
or
which in some cases is given a default value because there
is no corresponding @term{argument}.
2. (of a @term{format directive})
an @term{object} received as data flow by a @term{format directive}
due to a prefix notation within the @term{format string} at the 
@term{format directive}'s point of use.
See @ref{Formatted Output, Section 22.3 (Formatted Output)}.
@gexample{In @f{"@tild{}3,'0D"}, the number @f{3} and the character
@f{#@bsl{}0} are parameters to the @f{@tild{}D} format directive.}

@item @b{parameter specializer}  @Noun{}@spc{}
1. (of a @term{method}) an @term{expression} which constrains the
@term{method} to be applicable only to @term{argument} sequences
in which the corresponding @term{argument} matches the
@term{parameter specializer}.
2. a @term{class},
or a @term{list} @f{(eql @term{object})}.

@item @b{parameter specializer name}  @Noun{}@spc{}
1. (of a @term{method} definition) an expression used in code to
name a @term{parameter specializer}. 
See @ref{Introduction to Methods, Section 7.6.2 (Introduction to Methods)}.
2. a @term{class},
a @term{symbol} naming a @term{class},
or a @term{list} @f{(eql @term{form})}.

@item @b{pathname}  @Noun{}@spc{}
an @term{object} @oftype{pathname}, which is a structured representation 
of the name of a @term{file}.  A @term{pathname} has six components:
a ``host,''
a ``device,''
a ``directory,''
a ``name,''
a ``type,'' and
a ``version.''

@item @b{pathname designator}  @Noun{}
a @term{designator} for a @term{pathname}; that is,
an @term{object} that denotes a @term{pathname}
and that is one of:
a @term{pathname} @term{namestring} 
(denoting the corresponding @term{pathname}),
a @term{stream associated with a file} 
(denoting the @term{pathname} used to open the @term{file};
this may be, but is not required to be, the actual name of the @term{file}),
or a @term{pathname} (denoting itself).
See @ref{File Operations on Open and Closed Streams, Section 21.1.1.1.2 (Open and Closed Streams)}.

@item @b{physical pathname}  @Noun{}
a @term{pathname} that is not a @term{logical pathname}.

@editornote{KMP: Still need to reconcile some confusion in the uses of ``generalized
reference'' and ``place.'' I think one was supposed to refer to the
abstract concept, and the other to an object (a form), but the usages
have become blurred.}

@item @b{place}  @Noun{}@spc{}
1. a @term{form} which is suitable for use as a @term{generalized reference}.
2. the conceptual location referred to by such a @term{place}@sub1{}.

@item @b{plist}  @pronounced{@Stress{p@harde{}}@stress{list}} @Noun{}@spc{}
a @term{property list}.

@item @b{portable}  @Adjective{}@spc{}(of @term{code})
required to produce equivalent results and observable side effects
in all @term{conforming implementations}.

@item @b{potential copy}  @Noun{}@spc{}(of an @term{object} @mat{O@sub1{}} subject to constriants)
an @term{object} @mat{O@sub2{}} that if the specified constraints are satisfied
by @mat{O@sub1{}} without any modification might or might not be @term{identical}
to @mat{O@sub1{}}, or else that must be a @term{fresh} @term{object} that
resembles a @term{copy} of @mat{O@sub1{}} except that it has been modified as
necessary to satisfy the constraints.

@item @b{potential number}  @Noun{}@spc{}
A textual notation that might be parsed by the @term{Lisp reader} 
in some @term{conforming implementation} as a @term{number} 
but is not required to be parsed as a @term{number}.
No @term{object} is a @term{potential number}---either an @term{object} is
a @term{number} or it is not.
See @ref{PotentialNumbersAsTokens, Section 2.3.1.1 (Potential Numbers as Tokens)}.

@item @b{pprint dispatch table}  @Noun{}@spc{}
an @term{object} that can be @thevalueof{*print-pprint-dispatch*} 
and hence can control how @term{objects} are printed when
@code{*print-pretty*} is @term{true}.
See @ref{PPrintDispatchTables, Section 22.2.1.4 (Pretty Print Dispatch Tables)}.

@item @b{predicate}  @Noun{}@spc{}
a @term{function} that returns a @term{generalized boolean}
as its first value.

@item @b{present}  @Noun{}
1. (of a @term{feature} in a @term{Lisp image})
a state of being that is in effect if and only if the @term{symbol} 
naming the @term{feature} is an @term{element} of the @term{features list}.
2. (of a @term{symbol} in a @term{package})
being accessible in that @term{package} directly,
rather than being inherited from another @term{package}.

@item @b{pretty print}  @TransitiveVerb{}@spc{}(an @term{object})
to invoke the @term{pretty printer} on the @term{object}.

@item @b{pretty printer}  @Noun{}@spc{}
the procedure that prints the character representation of an
@term{object} onto a @term{stream} when the @term{value} of
@code{*print-pretty*} is @term{true}, 
and that uses layout techniques (@eg{} indentation) that
tend to highlight the structure of the @term{object} in a way that
makes it easier for human readers to parse visually.
See the @term{variable} @ref{*print-pprint-dispatch*} and @ref{The Lisp Pretty Printer, Section 22.2 (The Lisp Pretty Printer)}.

@item @b{pretty printing stream}  @Noun{}@spc{}
a @term{stream} that does pretty printing.  Such streams are created by
@thefunction{pprint-logical-block} as a link between the output stream 
and the logical block.

@item @b{primary method}  @Noun{}@spc{}
a member of one of two sets of @term{methods} 
(the set of @term{auxiliary methods} is the other)
that form an exhaustive partition of the set of @term{methods}
on the @term{method}'s @term{generic function}.
How these sets are determined is dependent on the @term{method combination} type;
see @ref{Introduction to Methods, Section 7.6.2 (Introduction to Methods)}.

@item @b{primary value}  @Noun{}@spc{}(of @term{values} resulting from the
@term{evaluation} of a @term{form})
the first @term{value}, if any, or else @nil{}@spc{}if there are no @term{values}.
@gexample{The primary value returned by @code{truncate} is an
integer quotient, truncated toward zero.}

@item @b{principal}  @Adjective{}@spc{}(of a value returned by a @clisp{}@spc{}@term{function} that
implements a mathematically irrational or transcendental 
function defined in the complex domain)
of possibly many (sometimes an infinite number of) correct values for the
mathematical function, being the particular @term{value} which the corresponding
@clisp{}@spc{}@term{function} has been defined to return.

@item @b{print name}  @Noun{}@spc{}@Traditional{}@spc{}(usually of a @term{symbol})
a @term{name}@sub3{}.

@item @b{printer control variable}  @Noun{}@spc{}
a @term{variable} whose specific purpose is to control some action
of the @term{Lisp printer}; that is, one of the @term{variables}
in @ref{StdPrinterControlVars, Figure 22.1},
or else some @term{implementation-defined} @term{variable} which is
defined by the @term{implementation} to be a @term{printer control variable}.

@item @b{printer escaping}  @Noun{}
The combined state of the @term{printer control variables}
@code{*print-escape*} and @code{*print-readably*}.
If the value of either @code{*print-readably*} or @code{*print-escape*} is @term{true}, 
then @newterm{printer escaping} is ``enabled'';
otherwise (if the values of both @code{*print-readably*} and @code{*print-escape*}
are @term{false}), 
then @term{printer escaping} is ``disabled''.

@item @b{printing}  @Adjective{}@spc{}(of a @term{character})
being a @term{graphic} @term{character} other than @term{space}.

@item @b{process}  @TransitiveVerb{}@spc{}(a @term{form} by the @term{compiler})
to perform @term{minimal compilation}, determining the time of 
evaluation for a @term{form}, and possibly @term{evaluating} that
@term{form} (if required).

@item @b{processor}  @Noun{}, @ANSI{}
an @term{implementation}.

@item @b{proclaim}  @TransitiveVerb{}@spc{}(a @term{proclamation})
to @term{establish} that @term{proclamation}.

@item @b{proclamation}  @Noun{}@spc{}
a @term{global declaration}.

@item @b{prog tag}  @Noun{}@spc{}@Traditional{}@spc{}
a @term{go tag}.

@item @b{program}  @Noun{}@spc{}@Traditional{}@spc{}
@clisp{}@spc{}@term{code}.

@item @b{programmer}  @Noun{}
an active entity, typically a human, that writes a @term{program},
and that might or might not also be a @term{user} of the @term{program}.

@item @b{programmer code}  @Noun{}@spc{}
@term{code} that is supplied by the programmer;
that is, @term{code} that is not @term{system code}.

@item @b{proper list} @anchor{glos-proper list}
 @Noun{}@spc{}
A @term{list} terminated by the @term{empty list}.
(The @term{empty list} is a @term{proper list}.)
See @ref{glos-improper list, improper list}.

@item @b{proper name}  @Noun{}@spc{}(of a @term{class})
a @term{symbol} that @term{names} the @term{class} whose @term{name}
is that @term{symbol}. 
See the @term{functions} @ref{class-name} and @code{find-class}.

@item @b{proper sequence}  @Noun{}@spc{}
a @term{sequence} which is not an @term{improper list}; 
that is, a @term{vector} or a @term{proper list}.

@item @b{proper subtype}  @Noun{}@spc{}(of a @term{type})
a @term{subtype} of the @term{type} which is not the @term{same} @term{type}
as the @term{type} (@ie{} its @term{elements} are a ``proper subset'' of the 
@term{type}).

@item @b{property}  @Noun{}@spc{}(of a @term{property list})
1. a conceptual pairing of a @term{property indicator} and its
associated @term{property value} on a @term{property list}.
2. a @term{property value}.

@item @b{property indicator}  @Noun{}@spc{}(of a @term{property list}) 
the @term{name} part of a @term{property}, used as a @term{key}
when looking up a @term{property value} on a @term{property list}. 

@item @b{property list}  @Noun{}@spc{}
1.  a @term{list} containing an even number of @term{elements} that are
alternating @term{names}  (sometimes called @term{indicators} 
or @term{keys}) and @term{values} (sometimes called @term{properties}).
When there is more than one @term{name} and @term{value} pair with
the @term{identical} @term{name} in a @term{property list},
the first such pair determines the @term{property}.
2. (of a @term{symbol})
the component of the @term{symbol} containing a @term{property list}.


@item @b{property value}  @Noun{}@spc{}(of a @term{property indicator} on 
a @term{property list})
the @term{object} associated with the @term{property indicator}
on the @term{property list}.

@item @b{purports to conform}  @Verb{}
makes a good-faith claim of conformance.  
This term expresses intention to conform, regardless of whether the
goal of that intention is realized in practice.  
For example, language implementations have been known to have bugs,
and while an @term{implementation} of this specification with bugs
might not be a @term{conforming implementation}, it can still
@term{purport to conform}.  This is an important distinction in
certain specific cases; @eg{} see the @term{variable} @ref{*features*}.


@end table
@node Q
@unnumberedsec Q
@table @asis

@item @b{qualified method}  @Noun{}@spc{}
a @term{method} that has one or more @term{qualifiers}.

@item @b{qualifier}  @Noun{}@spc{}(of a @term{method} for a @term{generic function})
one of possibly several @term{objects} used to annotate the @term{method} 
in a way that identifies its role in the @term{method combination}.  
The @term{method combination} @term{type} determines 
how many @term{qualifiers} are permitted for each @term{method}, 
which @term{qualifiers} are permitted,
and
the semantics of those @term{qualifiers}.

@item @b{query I/O}  @Noun{}@spc{}
the @term{bidirectional} @term{stream}
that is the @term{value} of @thevariable{*query-io*}.

@item @b{quoted object}  @Noun{}@spc{}
an @term{object} which is the second element of a
@code{quote} @term{form}.


@end table
@node R
@unnumberedsec R
@table @asis

@item @b{radix}  @Noun{}
an @term{integer} between 2 and 36, inclusive, which can be used 
to designate a base with respect to which certain kinds of numeric
input or output are performed.  
(There are @mat{n} valid digit characters for any given @term{radix} @mat{n},
and those digits are the first @mat{n} digits in the sequence
@f{0}, @f{1}, @mat{@ldots{}}, @f{9}, @f{A}, @f{B}, @mat{@ldots{}}, @f{Z},
which have the weights   
@f{0}, @f{1}, @mat{@ldots{}}, @f{9}, @f{10}, @f{11}, @mat{@ldots{}}, @f{35},
respectively.
Case is not significant in parsing numbers of radix greater
than @f{10}, so ``9b8a'' and ``9B8A'' denote the same @term{radix}
@f{16} number.)

@item @b{random state}  @Noun{}@spc{}
an @term{object} @oftype{random-state}.

@item @b{rank}  @Noun{}@spc{}
a non-negative @term{integer} indicating the number of
@term{dimensions} of an @term{array}.

@item @b{ratio}  @Noun{}@spc{}
an @term{object} @oftype{ratio}.

@item @b{ratio marker}  @Noun{}@spc{}
a character which is used in the textual notation for a @term{ratio}
to separate the numerator from the denominator, and which
is @term{slash} in the @term{standard readtable}.
See @ref{Character Syntax, Section 2.1 (Character Syntax)}.

@item @b{rational}  @Noun{}@spc{}
an @term{object} @oftype{rational}.

@item @b{read}  @TransitiveVerb{}@spc{}
1. (a @term{binding} or @term{slot} or component)
to obtain the @term{value} of the @term{binding} or @term{slot}.
2. (an @term{object} from a @term{stream})
to parse an @term{object} from its representation on the @term{stream}.

@item @b{readably}  @Adverb{}@spc{}(of a manner of printing an @term{object} @mat{O@sub1{}})
in such a way as to permit the @term{Lisp Reader} to later @term{parse}
the printed output into an @term{object} @mat{O@sub2{}} that is @term{similar} to @mat{O@sub1{}}.

@item @b{reader} @anchor{glos-reader}
 @Noun{}
1. a @term{function} that @term{reads}@sub1{} a @term{variable} or @term{slot}.
2. the @term{Lisp reader}.

@item @b{reader macro}  @Noun{}
1. a textual notation introduced by dispatch on one or two @term{characters} 
that defines special-purpose syntax for use by the @term{Lisp reader},
and that is implemented by a @term{reader macro function}.
See @ref{Reader Algorithm, Section 2.2 (Reader Algorithm)}.
2. the @term{character} or @term{characters} that introduce
a @term{reader macro}@sub1{}; that is,
a @term{macro character}
or the conceptual pairing of a @term{dispatching macro character} and the
@term{character} that follows it.
(A @term{reader macro} is not a kind of @term{macro}.)

@item @b{reader macro function}  @Noun{}
a @term{function} @term{designator} that denotes a @term{function}
that implements a @term{reader macro}@sub2{}.
See the @term{functions} @ref{set-macro-character} and @code{set-dispatch-macro-character}.

@item @b{readtable}  @Noun{}
an @term{object} @oftype{readtable}.

@item @b{readtable case}  @Noun{}
an attribute of a @term{readtable}
whose value is a @term{case sensitivity mode},
and that selects the manner in which @term{characters}
in a @term{symbol}'s @term{name} are to be treated by
the @term{Lisp reader}
and the @term{Lisp printer}.
See @ref{Effect of Readtable Case on the Lisp Reader, Section 23.1.2 (Effect of Readtable Case on the Lisp Reader)}@spc{}and @ref{ReadtableCasePrintEffect, Section 22.1.3.3.2 (Effect of Readtable Case on the Lisp Printer)}.

@item @b{readtable designator}  @Noun{}
a @term{designator} for a @term{readtable}; that is,
an @term{object} that denotes a @term{readtable}
and that is one of:
@nil{}@spc{}(denoting the @term{standard readtable}),
or a @term{readtable} (denoting itself).

@item @b{recognizable subtype}  @Noun{}@spc{}(of a @term{type})
a @term{subtype} of the @term{type} which can be reliably detected 
to be such by the @term{implementation}.
See the @term{function} @ref{subtypep}.

@item @b{reference}  @Noun{}, @TransitiveVerb{}@spc{}
1. @Noun{}@spc{}an act or occurrence of referring to an @term{object},
a @term{binding}, an @term{exit point}, a @term{tag}, 
or an @term{environment}.
2. @TransitiveVerb{}@spc{}to refer to an @term{object}, a @term{binding}, an
@term{exit point}, a @term{tag}, or an @term{environment},
usually by @term{name}.

@item @b{registered package}  @Noun{}
a @term{package} @term{object} that is installed in the @term{package registry}.
(Every @term{registered package} has a @term{name} that is a @term{string},
as well as zero or more @term{string} nicknames.
All @term{packages} that are initially specified by @clisp{}@spc{}
or created by @code{make-package} or @code{defpackage}
are @term{registered packages}.  @term{Registered packages} can be turned into
@term{unregistered packages} by @code{delete-package}.)

@item @b{relative} @anchor{glos-relative}
 @Adjective{}
1. (of a @term{time})
representing an offset from an @term{absolute} @term{time}
in the units appropriate to that time.
For example, 
a @term{relative} @term{internal time} is the difference between
two @term{absolute} @term{internal times}, and is measured in
@term{internal time units}.
2. (of a @term{pathname})
representing a position in a directory hierarchy by motion 
from a position other than the root, which might therefore vary.
@gexample{The notation @f{#P"../foo.text"} denotes a relative
pathname if the host file system is Unix.}
See @ref{glos-absolute, absolute}.

@item @b{repertoire}  @Noun{}, @ISO{}
a @term{subtype} of @code{character}.  See @ref{CharRepertoires, Section 13.1.2.2 (Character Repertoires)}.

@item @b{report}  @Noun{}@spc{}(of a @term{condition})
to @term{call} @thefunction{print-object} on the @term{condition} 
in an @term{environment} where @thevalueof{*print-escape*} is @term{false}.

@item @b{report message}  @Noun{}
the text that is output by a @term{condition reporter}.

@item @b{required parameter}  @Noun{}
A @term{parameter} for which a corresponding positional @term{argument}
must be supplied when @term{calling} the @term{function}.

@item @b{rest list}  @Noun{}@spc{}(of a @term{function} having a @term{rest parameter})
The @term{list} to which the @term{rest parameter} is @term{bound} on some
particular @term{call} to the @term{function}.

@item @b{rest parameter}  @Noun{}
A @term{parameter} which was introduced by @keyref{rest}.

@item @b{restart}  @Noun{}@spc{}
an @term{object} @oftype{restart}.

@item @b{restart designator}  @Noun{}
a @term{designator} for a @term{restart}; that is,
an @term{object} that denotes a @term{restart}
and that is one of:
a @term{non-nil} @term{symbol} 
(denoting the most recently established @term{active}
@term{restart} whose @term{name} is that @term{symbol}),
or a @term{restart} (denoting itself).

@item @b{restart function}  @Noun{}
a @term{function} that invokes a @term{restart}, as if by @code{invoke-restart}.
The primary purpose of a @term{restart function} is to provide an alternate
interface. By convention, a @term{restart function} usually has the same name 
as the @term{restart} which it invokes. @Thenextfigure{}@spc{}shows a list of the
@term{standardized} @term{restart functions}.


@float Figure,fig26.4
@cartouche
@multitable{continue}{muffle-warning}{use-value}

@item abort @tab muffle-warning @tab use-value
@item continue @tab store-value @tab 
@end multitable
@end cartouche
@caption{Standardized Restart Functions}
@end float


@item @b{return}  @TransitiveVerb{}@spc{}(of @term{values})
1. (from a @term{block}) to transfer control and @term{values} from the @term{block};
that is, to cause the @term{block} to @term{yield} the @term{values} immediately
without doing any further evaluation of the @term{forms} in its body.
2. (from a @term{form}) to @term{yield} the @term{values}.

@item @b{return value}  @Noun{}@spc{}@Traditional{}@spc{}
a @term{value}@sub1{}

@item @b{right-parenthesis}  @Noun{}
the @term{standard character} ``@f{)}'',
that is variously called
``right parenthesis''
or ``close parenthesis''
See @ref{StdCharsThree, Figure 2.5}.

@item @b{run time}  @Noun{}
1. @term{load time}
2. @term{execution time}

@item @b{run-time compiler}  @Noun{}
refers to the @code{compile} function or to @term{implicit compilation}, 
for which the compilation and run-time @term{environments} are maintained 
in the same @term{Lisp image}.

@item @b{run-time definition}  @Noun{}
a definition in the @term{run-time environment}.

@item @b{run-time environment}  @Noun{}
the @term{environment} in which a program is @term{executed}.


@end table
@node S
@unnumberedsec S
@table @asis

@item @b{safe}  @Adjective{}@spc{}
1. (of @term{code})
processed in a @term{lexical environment} where the the highest
@code{safety} level (@f{3}) was in effect. 
See @ref{optimize}.
2. (of a @term{call}) a @term{safe call}.

@item @b{safe call}  @Noun{}
a @term{call} in which 
the @term{call},
the @term{function} being @term{called},
and the point of @term{functional evaluation}
are all @term{safe}@sub1{} @term{code}.
For more detailed information, see @ref{SafeAndUnsafeCalls, Section 3.5.1.1 (Safe and Unsafe Calls)}.

@item @b{same}  @Adjective{}@spc{}
1. (of @term{objects} under a specified @term{predicate}) 
indistinguishable by that @term{predicate}.
@gexample{The symbol @f{car}, the string @f{"car"}, and the string @f{"CAR"}
are the @f{same} under @code{string-equal}}.
2. (of @term{objects} if no predicate is implied by context)
indistinguishable by @code{eql}.
Note that @code{eq} might be capable of distinguishing some 
@term{numbers} and @term{characters} which @code{eql} cannot 
distinguish, but the nature of such, if any, 
is @term{implementation-dependent}.
Since @code{eq} is used only rarely in this specification,
@code{eql} is the default predicate when none is mentioned explicitly.
@gexample{The conses returned by two successive calls to @code{cons}
are never the same.}
3. (of @term{types}) having the same set of @term{elements};
that is, each @term{type} is a @term{subtype} of the others.
@gexample{The types specified by @f{(integer 0 1)},
@f{(unsigned-byte 1)},
and @f{bit} are the same.}

@item @b{satisfy the test}  @Verb{}@spc{}
(of an @term{object} being considered by a @term{sequence function})
1. (for a one @term{argument} test)
to be in a state such that the @term{function} which is the
@param{predicate} @term{argument} to the @term{sequence function}
returns @term{true} when given a single @term{argument} that is the
result of calling the @term{sequence function}'s @param{key} @term{argument}
on the @term{object} being considered.  
See @ref{Satisfying a One-Argument Test, Section 17.2.2 (Satisfying a One-Argument Test)}.
2. (for a two @term{argument} test)
to be in a state such that the two-place @term{predicate} 
which is the @term{sequence function}'s 
@param{test} @term{argument}
returns @term{true} when given a first @term{argument} that 
is
the @term{object} being considered, 
and when given a second @term{argument}
that is the result of calling the @term{sequence function}'s 
@param{key} @term{argument} on an @term{element} of the
@term{sequence function}'s @param{sequence} @term{argument} 
which is being tested for equality;
or to be in a state such that the @param{test-not} @term{function}
returns @term{false} given the same @term{arguments}.
See @ref{Satisfying a Two-Argument Test, Section 17.2.1 (Satisfying a Two-Argument Test)}.

@item @b{scope}  @Noun{}@spc{}
the structural or textual region of code in which @term{references} 
to an @term{object}, a @term{binding}, an @term{exit point}, 
a @term{tag}, or an @term{environment} (usually by @term{name}) 
can occur.

@item @b{script}  @Noun{}@spc{}@ISO{}
one of possibly several sets that form an @term{exhaustive partition}
of the type @code{character}.  See @ref{CharScripts, Section 13.1.2.1 (Character Scripts)}.

@item @b{secondary value}  @Noun{}@spc{}(of @term{values} resulting from the
@term{evaluation} of a @term{form})
the second @term{value}, if any, 
or else @nil{}@spc{}if there are fewer than two @term{values}.
@gexample{The secondary value returned by @code{truncate} is a remainder.}

@item @b{section}  @Noun{}
a partitioning of output by a @term{conditional newline} on a @term{pretty printing stream}.
See @ref{DynamicControlofOutput, Section 22.2.1.1 (Dynamic Control of the Arrangement of Output)}.

@item @b{self-evaluating object}  @Noun{}
an @term{object} that is neither a @term{symbol} nor a
@term{cons}.
If a @term{self-evaluating object} is @term{evaluated},
it @term{yields} itself as its only @term{value}.
@gexample{Strings are self-evaluating objects.}

@item @b{semi-standard}  @Adjective{}@spc{}(of a language feature)
not required to be implemented by any @term{conforming implementation},
but nevertheless recommended as the canonical approach in situations where
an @term{implementation} does plan to support such a feature.
The presence of @term{semi-standard} aspects in the language is intended
to lessen portability problems and reduce the risk of gratuitous divergence
among @term{implementations} that might stand in the way of future 
standardization.

@item @b{semicolon}  @Noun{}
the @term{standard character} that is called ``semicolon'' (@f{;}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{sequence}  @Noun{}@spc{}
1. an ordered collection of elements
2. a @term{vector} or a @term{list}.

@item @b{sequence function}  @Noun{}
one of the @term{functions} in @ref{SequenceFunctions, Figure 17.1},
or an @term{implementation-defined} @term{function} 
that operates on one or more @term{sequences}.
and that is defined by the @term{implementation} to be a @term{sequence function}.

@item @b{sequential} @anchor{glos-sequential}
 @Adjective{}@spc{}@Traditional{}@spc{}(of @term{binding} or @term{assignment})
done in the style of @code{setq}, @code{let*}, or @code{do*};
that is, interleaving the evaluation of the @term{forms} that produce @term{values}
with the @term{assignments} or @term{bindings} of the @term{variables} (or @term{places}).
See @ref{glos-parallel, parallel}.

@item @b{sequentially}  @Adverb{}
in a @term{sequential} way.

@item @b{serious condition}  @Noun{}@spc{}
a @term{condition} @oftype{serious-condition}, 
which represents a @term{situation} that is generally sufficiently 
severe that entry into the @term{debugger} should be expected if 
the @term{condition} is @term{signaled} but not @term{handled}.

@item @b{session}  @Noun{}
the conceptual aggregation of events in a @term{Lisp image} from the time
it is started to the time it is terminated.

@item @b{set}  @TransitiveVerb{}@spc{}@Traditional{}@spc{}(any @term{variable}
or a @term{symbol} that 
is the @term{name} of a @term{dynamic variable})
to @term{assign} the @term{variable}.

@item @b{setf expander}  @Noun{}@spc{}
a function used by @code{setf} to compute the @term{setf expansion}
of a @term{place}.

@item @b{setf expansion}  @Noun{}@spc{}
a set of five @term{expressions}@sub1{} that, taken together, describe 
how to store into a @term{place} 
and which @term{subforms} of the macro call associated with the
@term{place} are evaluated.
See @ref{SetfExpansions, Section 5.1.1.2 (Setf Expansions)}.

@item @b{setf function}  @Noun{}
a @term{function} whose @term{name} is @f{(setf @term{symbol})}.

@item @b{setf function name}  @Noun{}@spc{}(of a @term{symbol} @param{S})
the @term{list} @f{(setf @param{S})}.

@item @b{shadow}  @TransitiveVerb{}@spc{}
1. to override the meaning of.
@gexample{That binding of @f{X} shadows an outer one.} 
2. to hide the presence of.
@gexample{That @code{macrolet} of @f{F} shadows the
outer @code{flet} of @f{F}.}
3. to replace.
@gexample{That package shadows the symbol @f{cl:car} with
its own symbol @f{car}.}

@item @b{shadowing symbol}  @Noun{}@spc{}(in a @term{package})
an @term{element} of the @term{package}'s @term{shadowing symbols list}.

@item @b{shadowing symbols list}  @Noun{}@spc{}(of a @term{package})
a @term{list}, associated with the @term{package}, 
of @term{symbols} that are to be exempted from `symbol conflict errors'
detected when packages are @term{used}.
See the @term{function} @ref{package-shadowing-symbols}.

@item @b{shared slot}  @Noun{}@spc{}(of a @term{class}) 
a @term{slot} @term{accessible} in more than one @term{instance} 
of a @term{class}; specifically, such a @term{slot} is @term{accessible}
in all @term{direct instances} of the @term{class} and in those 
@term{indirect instances} whose @term{class} does not 
@term{shadow}@sub1{} the @term{slot}.

@item @b{sharpsign}  @Noun{}
the @term{standard character} that is variously called ``number sign,'' ``sharp,''
or ``sharp sign'' (@f{#}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{short float}  @Noun{}@spc{}
an @term{object} @oftype{short-float}.

@item @b{sign}  @Noun{}@spc{}
one of the @term{standard characters} ``@f{+}'' or ``@f{-}''.

@item @b{signal}  @Verb{}@spc{}
to announce, using a standard protocol, that a particular situation,
represented by a @term{condition}, has been detected.  
See @ref{Condition System Concepts, Section 9.1 (Condition System Concepts)}.

@item @b{signature}  @Noun{}@spc{}(of a @term{method})
a description of the @term{parameters} and
@term{parameter specializers} for the @term{method} which 
determines the @term{method}'s applicability for a given set of
required @term{arguments}, and which also describes the
@term{argument} conventions for its other, non-required 
@term{arguments}.

@item @b{similar}  @Adjective{}@spc{}(of two @term{objects})
defined to be equivalent under the @term{similarity} relationship.

@item @b{similarity}  @Noun{}
a two-place conceptual equivalence predicate, 
which is independent of the @term{Lisp image} 
so that two @term{objects} in different @term{Lisp images} 
can be understood to be equivalent under this predicate.
See @ref{Literal Objects in Compiled Files, Section 3.2.4 (Literal Objects in Compiled Files)}.

@item @b{simple}  @Adjective{}
1. (of an @term{array}) being @oftype{simple-array}.
2. (of a @term{character})
having no @term{implementation-defined} @term{attributes},
or else having @term{implementation-defined} @term{attributes}
each of which has the @term{null} value for that @term{attribute}.

@item @b{simple array}  @Noun{}@spc{}
an @term{array} @oftype{simple-array}.

@item @b{simple bit array}  @Noun{}
a @term{bit array} that is a @term{simple array};
that is, an @term{object} of @term{type} @f{(simple-array bit)}.

@item @b{simple bit vector}  @Noun{}@spc{}
a @term{bit vector} @oftype{simple-bit-vector}.

@item @b{simple condition}  @Noun{}@spc{}
a @term{condition} @oftype{simple-condition}.

@item @b{simple general vector}  @Noun{}@spc{}
a @term{simple vector}.

@item @b{simple string}  @Noun{}@spc{}
a @term{string} @oftype{simple-string}.

@item @b{simple vector}  @Noun{}
a @term{vector} @oftype{simple-vector},
sometimes called a ``@term{simple general vector}.''
Not all @term{vectors} that are @term{simple} are @term{simple vectors}---only
those that have @term{element type} @code{t}.

@item @b{single escape}  @Noun{}, @Adjective{}
1. @Noun{}@spc{}the @term{syntax type} of a @term{character} 
that indicates that the next @term{character} is 
to be treated as an @term{alphabetic}@sub2{} @term{character}
with its @term{case} preserved.
For details, see @ref{SingleEscapeChar, Section 2.1.4.6 (Single Escape Character)}.
2. @Adjective{}@spc{}(of a @term{character})
having the @term{single escape} @term{syntax type}.
3. @Noun{}@spc{}a @term{single escape}@sub2{} @term{character}.
(In the @term{standard readtable},
@term{slash} is the only @term{single escape}.)

@item @b{single float}  @Noun{}@spc{}
an @term{object} @oftype{single-float}.

@item @b{single-quote}  @Noun{}
the @term{standard character} that is variously called
``apostrophe,''
``acute accent,''
``quote,''
or ``single quote'' (@f{'}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{singleton}  @Adjective{}@spc{}(of a @term{sequence})
having only one @term{element}.
@gexample{@f{(list 'hello)} returns a singleton list.}

@item @b{situation}  @Noun{}@spc{}
the @term{evaluation} of a @term{form} in a specific @term{environment}.

@item @b{slash}  @Noun{}
the @term{standard character} that is variously called
``solidus'' 
or ``slash'' (@f{/}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{slot}  @Noun{}@spc{}
a component of an @term{object} that can store a @term{value}.

@item @b{slot specifier}  @Noun{}
a representation of a @term{slot} 
that includes the @term{name} of the @term{slot} and zero or more @term{slot} options.
A @term{slot} option pertains only to a single @term{slot}.

@item @b{source code}  @Noun{}@spc{}
@term{code} representing @term{objects} suitable for @term{evaluation}
(@eg{} @term{objects} created by @code{read}, 
by @term{macro expansion}, 
or by @term{compiler macro expansion}).

@item @b{source file}  @Noun{}@spc{}
a @term{file} which contains a textual representation of @term{source code},
that can be edited, @term{loaded}, or @term{compiled}.

@item @b{space}  @Noun{}
the @term{standard character} @SpaceChar{},
notated for the @term{Lisp reader} as @f{#@bsl{}Space}.

@item @b{special form}  @Noun{}@spc{}
a @term{list}, other than a @term{macro form}, which is a
@term{form} with special syntax or special @term{evaluation} 
rules or both, possibly manipulating the @term{evaluation} 
@term{environment} or control flow or both.  The first element of
a @term{special form} is a @term{special operator}.

@item @b{special operator}  @Noun{}@spc{}
one of a fixed set of @term{symbols}, 
enumerated in @ref{CLSpecialOps, Figure 3.2},
that may appear in the @term{car} of
a @term{form} in order to identify the @term{form} as a @term{special form}.

@item @b{special variable}  @Noun{}@spc{}@Traditional{}
a @term{dynamic variable}.

@item @b{specialize}  @TransitiveVerb{}@spc{}(a @term{generic function})
to define a @term{method} for the @term{generic function}, or in other words,
to refine the behavior of the @term{generic function} by giving it a specific
meaning for a particular set of @term{classes} or @term{arguments}. 

@item @b{specialized}  @Adjective{}@spc{}
1. (of a @term{generic function})
having @term{methods} which @term{specialize} the @term{generic function}.
2. (of an @term{array})
having an @term{actual array element type}
that is a @term{proper subtype} of @thetype{t};
see @ref{Array Elements, Section 15.1.1 (Array Elements)}.
@gexample{@f{(make-array 5 :element-type 'bit)} makes an array of length
five that is specialized for bits.}

@item @b{specialized lambda list}  @Noun{}
an @term{extended lambda list} used in @term{forms} that @term{establish}
@term{method} definitions, such as @code{defmethod}.
See @ref{Specialized Lambda Lists, Section 3.4.3 (Specialized Lambda Lists)}.

@item @b{spreadable argument list designator}  @Noun{}
a @term{designator} for a @term{list} of @term{objects}; that is,
an @term{object} that denotes a @term{list} 
and that is a @term{non-null} @term{list} @mat{L1} of length @mat{n},
whose last element is a @term{list} @mat{L2} of length @mat{m}
(denoting a list @mat{L3} of length @mat{m+n-1} whose @term{elements} are
@mat{L1@subs1{i}} for @mat{i < n-1} followed by @mat{L2@subs1{j}} for @mat{j < m}).
@gexample{The list (1 2 (3 4 5)) is a spreadable argument list designator for
the list (1 2 3 4 5).}

@item @b{stack allocate}  @TransitiveVerb{}@spc{}@Traditional{}@spc{}
to allocate in a non-permanent way, such as on a stack.  Stack-allocation
is an optimization technique used in some @term{implementations} for
allocating certain kinds of @term{objects} that have @term{dynamic extent}.
Such @term{objects} are allocated on the stack rather than in the heap
so that their storage can be freed as part of unwinding the stack rather
than taking up space in the heap until the next garbage collection.
What @term{types} (if any) can have @term{dynamic extent} can vary
from @term{implementation} to @term{implementation}.  No
@term{implementation} is ever required to perform stack-allocation.

@item @b{stack-allocated}  @Adjective{}@spc{}@Traditional{}@spc{}
having been @term{stack allocated}.

@item @b{standard character}  @Noun{}@spc{}
a @term{character} @oftype{standard-char}, which is one of a fixed set of 96
such @term{characters} required to be present in all @term{conforming implementations}.
See @ref{Standard Characters, Section 2.1.3 (Standard Characters)}.

@item @b{standard class}  @Noun{}@spc{}
a @term{class} that is a @term{generalized instance} @ofclass{standard-class}.

@item @b{standard generic function} 
a @term{function} @oftype{standard-generic-function}.

@item @b{standard input}  @Noun{}@spc{}
the @term{input} @term{stream} which is the @term{value} of the @term{dynamic variable}
@code{*standard-input*}.

@item @b{standard method combination}  @Noun{}@spc{}
the @term{method combination} named @code{standard}.

@item @b{standard object}  @Noun{}@spc{}
an @term{object} that is 
a @term{generalized instance} 
@ofclass{standard-object}.

@item @b{standard output}  @Noun{}@spc{}
the @term{output} @term{stream} which is the @term{value} of the @term{dynamic variable}
@code{*standard-output*}.

@item @b{standard pprint dispatch table}  @Noun{}
A @term{pprint dispatch table} that is @term{different} from 
the @term{initial pprint dispatch table},
that implements @term{pretty printing} as described in this specification,
and that, unlike other @term{pprint dispatch tables},
must never be modified by any program.
(Although the definite reference ``the @term{standard pprint dispatch table}''
is generally used
within this document, it is actually @term{implementation-dependent} whether a
single @term{object} fills the role of the @term{standard pprint dispatch table},
or whether there might be multiple such objects, any one of which could be used on any
given occasion where ``the @term{standard pprint dispatch table}'' is called for.
As such, this phrase should be seen as an indefinite reference 
in all cases except for anaphoric references.)

@item @b{standard readtable}  @Noun{}
A @term{readtable} that is @term{different} from the @term{initial readtable},
that implements the @term{expression} syntax defined in this specification,
and that, unlike other @term{readtables}, must never be modified by any program.
(Although the definite reference ``the @term{standard readtable}'' is generally used
within this document, it is actually @term{implementation-dependent} whether a
single @term{object} fills the role of the @term{standard readtable},
or whether there might be multiple such objects, any one of which could be used on any
given occasion where ``the @term{standard readtable}'' is called for.
As such, this phrase should be seen as an indefinite reference 
in all cases except for anaphoric references.)

@item @b{standard syntax}  @Noun{}
the syntax represented by the @term{standard readtable} 
and used as a reference syntax throughout this document.
See @ref{Character Syntax, Section 2.1 (Character Syntax)}.

@item @b{standardized}  @Adjective{}@spc{}(of a @term{name}, @term{object}, or definition)
having been defined by @clisp{}.
@gexample{All standardized variables that are required to 
hold bidirectional streams have ``@f{-io*}'' in their name.}

@item @b{startup environment}  @Noun{}
the @term{global environment} of the running @term{Lisp image} 
from which the @term{compiler} was invoked.

@item @b{step}  @TransitiveVerb{}, @Noun{}@spc{}
1. @TransitiveVerb{}@spc{}(an iteration @term{variable}) to @term{assign} the @term{variable}
a new @term{value} at the end of an iteration, in preparation for a new iteration.
2. @Noun{}@spc{}the @term{code} that identifies how the next value in an iteration
is to be computed.
3. @TransitiveVerb{}@spc{}(@term{code}) to specially execute the @term{code}, pausing at
intervals to allow user confirmation or intervention, usually for debugging.

@item @b{stream}  @Noun{}@spc{}
an @term{object} that can be used with an input or output function to
identify an appropriate source or sink of @term{characters} or 
@term{bytes} for that operation.

@item @b{stream associated with a file}  @Noun{}@spc{}
a @term{file stream}, or a @term{synonym stream} the @term{target} 
of which is a @term{stream associated with a file}.
Such a @term{stream} cannot be created with
@code{make-two-way-stream}, 
@code{make-echo-stream},
@code{make-broadcast-stream}, 
@code{make-concatenated-stream},
@code{make-string-input-stream},
or @code{make-string-output-stream}.

@item @b{stream designator}  @Noun{}
a @term{designator} for a @term{stream}; that is,
an @term{object} that denotes a @term{stream} 
and that is one of:
@code{t}@spc{}(denoting @thevalueof{*terminal-io*}), 
@nil{}@spc{}(denoting @thevalueof{*standard-input*}
for @term{input} @term{stream designators}
or denoting @thevalueof{*standard-output*}
for @term{output} @term{stream designators}),
or a @term{stream} (denoting itself).

@item @b{stream element type}  @Noun{}@spc{}(of a @term{stream})
the @term{type} of data for which the @term{stream} is specialized.

@item @b{stream variable}  @Noun{}
a @term{variable} whose @term{value} must be a @term{stream}.

@item @b{stream variable designator}  @Noun{}
a @term{designator} for a @term{stream variable}; that is,
a @term{symbol} that denotes a @term{stream variable} 
and that is one of:
@code{t}@spc{}(denoting @code{*terminal-io*}), 
@nil{}@spc{}(denoting @code{*standard-input*}
for @term{input} @term{stream variable designators}
or denoting @code{*standard-output*}
for @term{output} @term{stream variable designators}),
or some other @term{symbol} (denoting itself).

@item @b{string}  @Noun{}@spc{}
a specialized @term{vector} that is @oftype{string},
and whose elements are @oftypes{character}.

@item @b{string designator}  @Noun{}
a @term{designator} for a @term{string}; that is,
an @term{object} that denotes a @term{string} 
and that is one of:
a @term{character} (denoting a @term{singleton} @term{string}
that has the @term{character} as its only @term{element}),
a @term{symbol} (denoting the @term{string} that is its @term{name}),
or a @term{string} (denoting itself).
The intent is that this term be consistent with the behavior of @code{string};
@term{implementations} that extend @code{string} must extend the meaning of 
this term in a compatible way.

@item @b{string equal}  @Adjective{}@spc{}
the @term{same} under @code{string-equal}.

@item @b{string stream}  @Noun{}@spc{}
a @term{stream} @oftype{string-stream}.

@item @b{structure}  @Noun{}@spc{}
an @term{object} @oftype{structure-object}.

@item @b{structure class}  @Noun{}@spc{}
a @term{class} that is a @term{generalized instance} @ofclass{structure-class}.

@item @b{structure name}  @Noun{}
a @term{name} defined with @code{defstruct}.
Usually, such a @term{type} is also a @term{structure class},
but there may be @term{implementation-dependent} situations 
in which this is not so, if the @kwd{type} option to @code{defstruct} is used.

@item @b{style warning}  @Noun{}
a @term{condition} @oftype{style-warning}.

@item @b{subclass} @anchor{glos-subclass}
 @Noun{}@spc{}
a @term{class} that @term{inherits} from another @term{class}, 
called a @term{superclass}.
(No @term{class} is a @term{subclass} of itself.)

@item @b{subexpression}  @Noun{}@spc{}(of an @term{expression})
an @term{expression} that is contained within the @term{expression}. 
(In fact, the state of being a @term{subexpression} is not an attribute 
of the @term{subexpression}, but really an attribute of the containing
@term{expression} since the @term{same} @term{object} can at once be
a @term{subexpression} in one context, and not in another.)

@item @b{subform}  @Noun{}@spc{}(of a @term{form})
an @term{expression} that is a @term{subexpression} of the @term{form},
and which by virtue of its position in that @term{form} is also a
@term{form}.
@gexample{@f{(f x)} and @f{x}, but not @f{exit}, are subforms of
@f{(return-from exit (f x))}.}

@item @b{subrepertoire}  @Noun{}@spc{}
a subset of a @term{repertoire}.

@item @b{subtype} @anchor{glos-subtype}
 @Noun{}@spc{}
a @term{type} whose membership is the same as or a proper subset of the
membership of another @term{type}, called a @term{supertype}.
(Every @term{type} is a @term{subtype} of itself.)

@item @b{superclass}  @Noun{}@spc{}
a @term{class} from which another @term{class} 
(called a @term{subclass}) @term{inherits}.
(No @term{class} is a @term{superclass} of itself.)
See @ref{glos-subclass, subclass}.

@item @b{supertype}  @Noun{}@spc{}
a @term{type} whose membership is the same as or a proper superset
of the membership of another @term{type}, called a @term{subtype}.
(Every @term{type} is a @term{supertype} of itself.)
See @ref{glos-subtype, subtype}.

@item @b{supplied-p parameter} @anchor{glos-supplied-p parameter}
 @Noun{}
a @term{parameter} which recieves its @term{generalized boolean} value
implicitly due to the presence or absence of an @term{argument} 
corresponding to another @term{parameter} 
(such as an @term{optional parameter} or a @term{rest parameter}).
See @ref{Ordinary Lambda Lists, Section 3.4.1 (Ordinary Lambda Lists)}.

@item @b{symbol}  @Noun{}@spc{}
an @term{object} @oftype{symbol}.

@item @b{symbol macro}  @Noun{}@spc{}
a @term{symbol} that stands for another @term{form}.
See the @term{macro} @ref{symbol-macrolet}.

@item @b{synonym stream}  @Noun{}@spc{}
1. a @term{stream} @oftype{synonym-stream}, 
which is consequently a @term{stream} that is an alias for another @term{stream},
which is the @term{value} of a @term{dynamic variable}
whose @term{name} is the @term{synonym stream symbol} of the @term{synonym stream}.
See the @term{function} @ref{make-synonym-stream}.
2. (to a @term{stream})
a @term{synonym stream} which has the @term{stream} as the @term{value}
of its @term{synonym stream symbol}.
3. (to a @term{symbol})
a @term{synonym stream} which has the @term{symbol} as its
@term{synonym stream symbol}.

@item @b{synonym stream symbol}  @Noun{}@spc{}(of a @term{synonym stream})
the @term{symbol} which names the @term{dynamic variable} which has as its
@term{value} another @term{stream} for which the @term{synonym stream}
is an alias.

@item @b{syntax type}  @Noun{}@spc{}(of a @term{character})
one of several classifications, enumerated in @ref{PossibleSyntaxTypes, Figure 2.6},
that are used for dispatch during parsing by the @term{Lisp reader}.
See @ref{Character Syntax Types, Section 2.1.4 (Character Syntax Types)}.

@item @b{system class}  @Noun{}@spc{}
a @term{class} that may be @oftype{built-in-class} in a @term{conforming implementation}
and hence cannot be inherited by @term{classes} defined by @term{conforming programs}.

@item @b{system code}  @Noun{}@spc{}
@term{code} supplied by the @term{implementation} to implement this specification
(@eg{} the definition of @code{mapcar})
or generated automatically in support of this specification
(@eg{} during method combination);
that is, @term{code} that is not @term{programmer code}.


@end table
@node T
@unnumberedsec T
@table @asis

@item @b{t} @anchor{glos-t}
 @Noun{}@spc{}
1. a. the @term{boolean} representing true.
b. the canonical @term{generalized boolean} representing true.
(Although any @term{object} other than @nil{}@spc{}is considered @term{true} 
as a @term{generalized boolean},
@f{t} is generally used when there is no special reason to prefer one 
such @term{object} over another.)
2. the @term{name} of the @term{type} to which all @term{objects} belong---the
@term{supertype} of all @term{types} (including itself).
3. the @term{name} of the @term{superclass} of all @term{classes} except itself.

@item @b{tag}  @Noun{}@spc{}
1. a @term{catch tag}.
2. a @term{go tag}.

@item @b{tail}  @Noun{}@spc{}(of a @term{list})
an @term{object} that is the @term{same} as either some @term{cons}
which makes up that @term{list} or the @term{atom} (if any) which terminates
the @term{list}.
@gexample{The empty list is a tail of every proper list.}

@item @b{target}  @Noun{}@spc{}
1. (of a @term{constructed stream}) 
a @term{constituent} of the @term{constructed stream}.
@gexample{The target of a synonym stream is 
the value of its synonym stream symbol.}
2. (of a @term{displaced array})
the @term{array} to which the @term{displaced array} is displaced.
(In the case of a chain of @term{constructed streams} or @term{displaced arrays},
the unqualified term ``@term{target}'' always refers to the immediate 
@term{target} of the first item in the chain, not the immediate target
of the last item.)

@item @b{terminal I/O}  @Noun{}@spc{}
the @term{bidirectional} @term{stream}
that is the @term{value} of @thevariable{*terminal-io*}.

@item @b{terminating}  @Noun{}@spc{}(of a @term{macro character})
being such that, if it appears while parsing a token, it terminates that token.
See @ref{Reader Algorithm, Section 2.2 (Reader Algorithm)}.

@item @b{tertiary value}  @Noun{}@spc{}(of @term{values} resulting from the
@term{evaluation} of a @term{form})
the third @term{value}, if any,
or else @nil{}@spc{}if there are fewer than three @term{values}.

@item @b{throw}  @Verb{}@spc{}
to transfer control and @term{values} to a @term{catch}.
See the @term{special operator} @ref{throw}.

@item @b{tilde}  @Noun{}
the @term{standard character} that is called ``tilde'' (@f{@tild{}}).
See @ref{StdCharsThree, Figure 2.5}.

@item @b{time} 
a representation of a point (@term{absolute} @term{time}) 
or an interval (@term{relative} @term{time})
on a time line.
See @ref{glos-decoded time, decoded time}, @term{internal time}, and @term{universal time}.

@item @b{time zone}  @Noun{}
a @term{rational} multiple of @f{1/3600} between @f{-24} (inclusive)
and @f{24} (inclusive) that represents a time zone as a number of hours
offset from Greenwich Mean Time.  Time zone values increase with motion to the west,
so   Massachusetts, U.S.A. is in time zone @f{5},
California, U.S.A. is time zone @f{8},
and Moscow, Russia is time zone @term{-3}.
(When ``daylight savings time'' is separately represented
as an @term{argument} or @term{return value}, the @term{time zone}
that accompanies it does not depend on whether daylight savings time
is in effect.)

@item @b{token}  @Noun{}
a textual representation for a @term{number} or a @term{symbol}.
See @ref{Interpretation of Tokens, Section 2.3 (Interpretation of Tokens)}.

@item @b{top level form}  @Noun{}@spc{}
a @term{form} which is processed specially by @code{compile-file} for
the purposes of enabling @term{compile time} @term{evaluation} of that
@term{form}.  
@term{Top level forms} include those @term{forms} which 
are not @term{subforms} of any other @term{form},
and certain other cases.  See @ref{TopLevelForms, Section 3.2.3.1 (Processing of Top Level Forms)}.

@item @b{trace output}  @Noun{}@spc{}
the @term{output} @term{stream} which is the @term{value} of the @term{dynamic variable}
@code{*trace-output*}.

@item @b{tree}  @Noun{}@spc{}
1. a binary recursive data structure made up of @term{conses} and
@term{atoms}:  the @term{conses} are themselves also @term{trees}
(sometimes called ``subtrees'' or ``branches''), and the @term{atoms}
are terminal nodes (sometimes called @term{leaves}). Typically,
the @term{leaves} represent data while the branches establish some 
relationship among that data.
2. in general, any recursive data structure that has some notion of
``branches'' and @term{leaves}.

@item @b{tree structure}  @Noun{}@spc{}(of a @term{tree}@sub1{})
the set of @term{conses} that make up the @term{tree}.
Note that while the @term{car}[1b] component of each such @term{cons}
is part of the @term{tree structure}, 
the @term{objects} that are the @term{cars}@sub2{} of each @term{cons}
in the @term{tree}
are not themselves part of its @term{tree structure} 
unless they are also @term{conses}.

@item @b{true}  @Noun{}@spc{}
any @term{object} 
that is not @term{false}
and that is used to represent the success of a @term{predicate} test.
See @ref{glos-t, t}@sub1{}.

@item @b{truename}  @Noun{}@spc{}
1. the canonical @term{filename} of a @term{file} in the @term{file system}.
See @ref{Truenames, Section 20.1.3 (Truenames)}.
2. a @term{pathname} representing a @term{truename}@sub1{}.

@item @b{two-way stream}  @Noun{}@spc{}
a @term{stream} @oftype{two-way-stream},
which is a @term{bidirectional} @term{composite stream} that 
receives its input  from an associated @term{input}  @term{stream} 
and sends    its output to   an associated @term{output} @term{stream}.

@item @b{type}  @Noun{}@spc{}
1. a set of @term{objects}, usually with common structure, behavior, or purpose.
(Note that the expression ``@i{X} is of type @param{S@mat{@subs1{a}}}'' 
naturally implies that ``@i{X} is of type @param{S@mat{@subs1{b}}}'' if 
@param{S@mat{@subs1{a}}} is a @term{subtype} of @param{S@mat{@subs1{b}}}.)
2. (immediately following the name of a @term{type})
a @term{subtype} of that @term{type}.
@gexample{The type @code{vector} is an array type.}

@item @b{type declaration}  @Noun{}@spc{}
a @term{declaration} that asserts that every reference to a 
specified @term{binding} within the scope of the @term{declaration}
results in some @term{object} of the specified @term{type}.

@item @b{type equivalent}  @Adjective{}@spc{}(of two @term{types} @mat{X} and @mat{Y})
having the same @term{elements};
that is, @mat{X} is a @term{subtype} of @mat{Y} 
and @mat{Y} is a @term{subtype} of @mat{X}.

@item @b{type expand}  @Noun{}
to fully expand a @term{type specifier}, removing any references to
@term{derived types}.  (@clisp{}@spc{}provides no program interface to cause
this to occur, but the semantics of @clisp{}@spc{}are such that every
@term{implementation} must be able to do this internally, and some
situations involving @term{type specifiers} are most easily described
in terms of a fully expanded @term{type specifier}.)

@item @b{type specifier}  @Noun{}@spc{}
an @term{expression} that denotes a @term{type}.
@gexample{The symbol @f{random-state}, the list @f{(integer 3 5)},
the list @f{(and list (not null))}, and the class named
@f{standard-class} are type specifiers.}


@end table
@node U
@unnumberedsec U
@table @asis

@item @b{unbound} @anchor{glos-unbound}
 @Adjective{}@spc{}
not having an associated denotation in a @term{binding}.
See @ref{glos-bound, bound}.

@item @b{unbound variable}  @Noun{}
a @term{name} that is syntactically plausible as the name of a
@term{variable} but which is not @term{bound} 
in the @term{variable} @term{namespace}.

@item @b{undefined function}  @Noun{}
a @term{name} that is syntactically plausible as the name of a
@term{function} but which is not @term{bound}
in the @term{function} @term{namespace}.

@item @b{unintern}  @TransitiveVerb{}@spc{}(a @term{symbol} in a @term{package})
to make the @term{symbol} not be @term{present} in that @term{package}.
(The @term{symbol} might continue to be @term{accessible} by inheritance.)

@item @b{uninterned}  @Adjective{}@spc{}(of a @term{symbol}) 
not @term{accessible} in any @term{package}; @ie{} not @term{interned}@sub1{}.

@item @b{universal time}  @Noun{}
@term{time}, represented as a non-negative @term{integer} number of seconds.
@term{Absolute} @term{universal time} is measured as an offset
from the beginning of the year 1900 (ignoring @term{leap seconds}).
See @ref{UniversalTime, Section 25.1.4.2 (Universal Time)}.

@item @b{unqualified method}  @Noun{}@spc{}
a @term{method} with no @term{qualifiers}.

@item @b{unregistered package}  @Noun{}
a @term{package} @term{object} that is not present in the @term{package registry}.
An @term{unregistered package} has no @term{name}; @ie{} its @term{name} is @nil{}.
See the @term{function} @ref{delete-package}.

@item @b{unsafe}  @Adjective{}@spc{}(of @term{code})
not @term{safe}.  (Note that, unless explicitly specified otherwise,
if a particular kind of error checking is
guaranteed only in a @term{safe} context, the same checking might or might not occur
in that context if it were @term{unsafe}; describing a context as @term{unsafe}
means that certain kinds of error checking are not reliably enabled
but does not guarantee that error checking is definitely disabled.)

@item @b{unsafe call}  @Noun{}
a @term{call} that is not a @term{safe call}.
For more detailed information, see @ref{SafeAndUnsafeCalls, Section 3.5.1.1 (Safe and Unsafe Calls)}.

@item @b{upgrade}  @TransitiveVerb{}@spc{}(a declared @term{type} to an actual @term{type})
1. (when creating an @term{array})
to substitute an @term{actual array element type} 
for an @term{expressed array element type}
when choosing an appropriately @term{specialized} @term{array} representation.
See the @term{function} @ref{upgraded-array-element-type}.
2. (when creating a @term{complex})
to substitute an @term{actual complex part type} 
for an @term{expressed complex part type}
when choosing an appropriately @term{specialized} @term{complex} representation.
See the @term{function} @ref{upgraded-complex-part-type}.

@item @b{upgraded array element type}  @Noun{}@spc{}(of a @term{type})
a @term{type} that is a @term{supertype} of the @term{type}
and that is used instead of the @term{type} whenever the
@term{type} is used as an @term{array element type} 
for object creation or type discrimination.
See @ref{ArrayUpgrading, Section 15.1.2.1 (Array Upgrading)}.

@item @b{upgraded complex part type}  @Noun{}@spc{}(of a @term{type})
a @term{type} that is a @term{supertype} of the @term{type}
and that is used instead of the @term{type} whenever the
@term{type} is used as a @term{complex part type} 
for object creation or type discrimination.
See the @term{function} @ref{upgraded-complex-part-type}.

@item @b{uppercase}  @Adjective{}@spc{}(of a @term{character})
being among @term{standard characters} corresponding to
the capital letters @f{A} through @f{Z},
or being some other @term{implementation-defined} @term{character}
that is defined by the @term{implementation} to be @term{uppercase}.
See @ref{CharactersWithCase, Section 13.1.4.3 (Characters With Case)}.

@item @b{use}  @TransitiveVerb{}@spc{}(a @term{package} @mat{P@sub1{}})
to @term{inherit} the @term{external symbols} of @mat{P@sub1{}}.
(If a package @mat{P@sub2{}} uses @mat{P@sub1{}},
the @term{external symbols} of @mat{P@sub1{}}
become @term{internal symbols} of @mat{P@sub2{}} 
unless they are explicitly @term{exported}.)
@gexample{The package @code{CL-USER} uses the package @code{CL}.}

@item @b{use list}  @Noun{}@spc{}(of a @term{package})
a (possibly empty) @term{list} associated with each @term{package}
which determines what other @term{packages} are currently being
@term{used} by that @term{package}.

@item @b{user}  @Noun{}@spc{}
an active entity, typically a human, that invokes or interacts with a
@term{program} at run time, but that is not necessarily a @term{programmer}.


@end table
@node V
@unnumberedsec V
@table @asis

@item @b{valid array dimension}  @Noun{}@spc{}
a @term{fixnum} suitable for use as an @term{array} @term{dimension}.
Such a @term{fixnum} must be greater than or equal to zero, 
and less than the @term{value} of @code{array-dimension-limit}.
When multiple @term{array} @term{dimensions} are to be used together to specify a 
multi-dimensional @term{array}, there is also an implied constraint 
that the product of all of the @term{dimensions} be less than the @term{value} of 
@code{array-total-size-limit}.

@item @b{valid array index}  @Noun{}@spc{}(of an @term{array})
a @term{fixnum} suitable for use as one of possibly several indices needed
to name an @term{element} of the @term{array} according to a multi-dimensional
Cartesian coordinate system. Such a @term{fixnum} must
be greater than or equal to zero,
and must be less than the corresponding @term{dimension}@sub1{}
of the @term{array}.
(Unless otherwise explicitly specified, 
the phrase ``a @term{list} of @term{valid array indices}'' further implies
that the @term{length} of the @term{list} must be the same as the
@term{rank} of the @term{array}.)
@gexample{For a @f{2} by@tie{}@f{3} array,
valid array indices for the first  dimension are @f{0} and@tie{}@f{1}, and
valid array indices for the second dimension are @f{0}, @f{1} and@tie{}@f{2}.}

@item @b{valid array row-major index}  @Noun{}@spc{}(of an @term{array},
which might have any number 
of @term{dimensions}@sub2{})
a single @term{fixnum} suitable for use in naming any @term{element}
of the @term{array}, by viewing the array's storage as a linear
series of @term{elements} in row-major order.
Such a @term{fixnum} must be greater than or equal to zero,
and less than the @term{array total size} of the @term{array}.

@item @b{valid fill pointer}  @Noun{}@spc{}(of an @term{array})
a @term{fixnum} suitable for use as a @term{fill pointer} for the @term{array}.
Such a @term{fixnum} must be greater than or equal to zero, 
and less than or equal to the @term{array total size} of the @term{array}.

@editornote{KMP: The ``valid pathname xxx'' definitions were taken from 
text found in make-pathname, but look wrong to me.
I'll fix them later.}


@item @b{valid logical pathname host}  @Noun{}
a @term{string} that has been defined as the name of a @term{logical host}.
See the @term{function} @ref{load-logical-pathname-translations}.

@item @b{valid pathname device}  @Noun{}
a @term{string},
@nil{},
@kwd{unspecific}, 
or some other @term{object} defined by the @term{implementation} 
to be a @term{valid pathname device}.

@item @b{valid pathname directory}  @Noun{}
a @term{string},
a @term{list} of @term{strings},
@nil{},
@kwd{wild},
@kwd{unspecific},
or some other @term{object} defined by the @term{implementation} 
to be a @term{valid directory component}.

@item @b{valid pathname host}  @Noun{}
a @term{valid physical pathname host}
or a @term{valid logical pathname host}.

@item @b{valid pathname name}  @Noun{}
a @term{string},
@nil{},
@kwd{wild},
@kwd{unspecific},
or some other @term{object} defined by the @term{implementation} 
to be a @term{valid pathname name}.

@item @b{valid pathname type}  @Noun{}
a @term{string},
@nil{},
@kwd{wild},
@kwd{unspecific}.

@item @b{valid pathname version}  @Noun{}
a non-negative @term{integer},
or one of @kwd{wild},
@kwd{newest},
@kwd{unspecific},
or @nil{}.
The symbols @kwd{oldest}, @kwd{previous}, and @kwd{installed} are
@term{semi-standard} special version symbols.

@item @b{valid physical pathname host}  @Noun{}
any of
a @term{string},
a @term{list} of @term{strings},
or the symbol @kwd{unspecific},
that is recognized by the implementation as the name of a host.


@item @b{valid sequence index}  @Noun{}@spc{}(of a @term{sequence})
an @term{integer} suitable for use to name an @term{element} 
of the @term{sequence}.  Such an @term{integer} must 
be greater than or equal to zero,
and must be less than the @term{length} of the @term{sequence}.
(If the @term{sequence} is an @term{array},
the @term{valid sequence index} is further constrained to be a @term{fixnum}.)

@item @b{value}  @Noun{}@spc{}
1. a. one of possibly several @term{objects} that are the result of
an @term{evaluation}.
b. (in a situation where exactly one value is expected from the
@term{evaluation} of a @term{form})
the @term{primary value} returned by the @term{form}.
c. (of @term{forms} in an @term{implicit progn}) one of possibly
several @term{objects} that result from the @term{evaluation}
of the last @term{form}, or @nil{}@spc{}if there are no @term{forms}.
2. an @term{object} associated with a @term{name} in a @term{binding}.
3. (of a @term{symbol}) the @term{value} of the @term{dynamic variable}
named by that symbol.
4. an @term{object} associated with a @term{key} 
in an @term{association list}, 
a  @term{property list},
or a  @term{hash table}.

@item @b{value cell}  @Noun{}@spc{}@Traditional{}@spc{}(of a @term{symbol})
The @term{place} which holds the @term{value}, if any, of the
@term{dynamic variable} named by that @term{symbol},
and which is @term{accessed} by @code{symbol-value}.
See @ref{glos-cell, cell}.

@item @b{variable}  @Noun{}@spc{}
a @term{binding} in the ``variable'' @term{namespace}.
See @ref{SymbolsAsForms, Section 3.1.2.1.1 (Symbols as Forms)}.

@item @b{vector}  @Noun{}@spc{}
a one-dimensional @term{array}.

@item @b{vertical-bar}  @Noun{}
the @term{standard character} that is called ``vertical bar'' (@f{|}).
See @ref{StdCharsThree, Figure 2.5}.


@end table
@node W
@unnumberedsec W
@table @asis

@item @b{whitespace}  @Noun{}@spc{}
1. one or more @term{characters} that are
either the @term{graphic} @term{character} @f{#@bsl{}Space}
or else @term{non-graphic} characters such as @f{#@bsl{}Newline} 
that only move the print position.
2. a. @Noun{}@spc{}the @term{syntax type} of a @term{character} 
that is a @term{token} separator.
For details, see @ref{WhitespaceChars, Section 2.1.4.7 (Whitespace Characters)}.
b. @Adjective{}@spc{}(of a @term{character})
having the @term{whitespace}[2a] @term{syntax type}@sub2{}.
c. @Noun{}@spc{}a @term{whitespace}[2b] @term{character}.

@item @b{wild}  @Adjective{}
1. (of a @term{namestring}) using an @term{implementation-defined}
syntax for naming files, which might ``match'' any of possibly several
possible @term{filenames}, and which can therefore be used to refer to 
the aggregate of the @term{files} named by those @term{filenames}.
2. (of a @term{pathname}) a structured representation of a name which
might ``match'' any of possibly several @term{pathnames}, and which can
therefore be used to refer to the aggregate of the @term{files} named by those
@term{pathnames}.  The set of @term{wild} @term{pathnames} includes, but
is not restricted to, @term{pathnames} which have a component which is
@kwd{wild}, or which have a directory component which contains @kwd{wild} 
or @kwd{wild-inferors}.
See the @term{function} @ref{wild-pathname-p}.

@item @b{write}  @TransitiveVerb{}@spc{}
1. (a @term{binding} or @term{slot} or component)
to change the @term{value} of the @term{binding} or @term{slot}.
2. (an @term{object} to a @term{stream})
to output a representation of the @term{object} to the @term{stream}.

@item @b{writer}  @Noun{}
a @term{function} that @term{writes}@sub1{} a @term{variable} or @term{slot}.


@end table
@node Y
@unnumberedsec Y
@table @asis

@item @b{yield}  @TransitiveVerb{}@spc{}(@term{values})
to produce the @term{values} as the result of @term{evaluation}.
@gexample{The form @f{(+ 2 3)} yields @f{5}.}

@end table



@node Appendix
@appendix Appendix
@menu
* Removed Language Features::
@end menu


@node Removed Language Features
@section Removed Language Features

@menu
* Requirements for removed and deprecated features::
* Removed Types::
* Removed Operators::
* Removed Argument Conventions::
* Removed Variables::
* Removed Reader Syntax::
* Packages No Longer Required::
@end menu
@node Requirements for removed and deprecated features
@subsection Requirements for removed and deprecated features

For this standard,
some features from the language described in @CLtL{}@spc{}have been removed,
and others have been deprecated (and will most likely not appear
in future @clisp{}@spc{}standards).
Which features were removed and which were deprecated
was decided on a case-by-case basis by the X3J13 committee.

@term{Conforming implementations} that wish to retain any removed 
features for compatibility must assure that such compatibility 
does not interfere with the correct function of @term{conforming programs}.
For example, symbols corresponding to the names of removed functions
may not appear in the the @code{COMMON-LISP} @term{package}.
(Note, however, that this specification has been devised in such a way 
that there can be a package named @f{LISP} which can contain such symbols.)

@term{Conforming implementations} must implement all deprecated features.
For a list of deprecated features, see @ref{Deprecated Language Features, Section 1.8 (Deprecated Language Features)}.


@node Removed Types
@subsection Removed Types

The @term{type} @f{string-char}
@cindex string-char 
was removed.


@node Removed Operators
@subsection Removed Operators

The functions
@f{int-char}
@cindex int-char
,
@f{char-bits}
@cindex char-bits
,
@f{char-font}
@cindex char-font
,
@f{make-char}
@cindex make-char
,
@f{char-bit}
@cindex char-bit
,
@f{set-char-bit}
@cindex set-char-bit
,
@f{string-char-p}
@cindex string-char-p
,
and
@f{commonp}
@cindex commonp
were removed.

The @term{special operator} @f{compiler-let} was removed.


@node Removed Argument Conventions
@subsection Removed Argument Conventions

The @param{font} argument to @code{digit-char}
@cindex digit-char 
was removed.
The @param{bits} and @param{font} arguments to @code{code-char}
@cindex code-char 

were removed.



@node Removed Variables
@subsection Removed Variables

The variables
@f{char-font-limit}
@cindex char-font-limit
,
@f{char-bits-limit}
@cindex char-bits-limit
,
@f{char-control-bit}
@cindex char-control-bit
,
@f{char-meta-bit}
@cindex char-meta-bit
,
@f{char-super-bit}
@cindex char-super-bit
,
@f{char-hyper-bit}
@cindex char-hyper-bit
,
and @f{*break-on-warnings*}
@cindex *break-on-warnings*
were removed.


@node Removed Reader Syntax
@subsection Removed Reader Syntax

The ``@f{#,}'' @term{reader macro} in @term{standard syntax} was removed.


@node Packages No Longer Required
@subsection Packages No Longer Required

The @term{packages} 
@code{LISP}
@cindex LISP
,
@code{USER}
@cindex USER
,
and @code{SYSTEM}
@cindex SYSTEM
are no longer required.  It is valid for @term{packages} with one or more of these
names to be provided by a @term{conforming implementation} as extensions.



@node Index
@unnumbered Index
@printindex cp
@node Symbol Index
@unnumbered Symbol Index
@printindex sy
@node List of Figures
@unnumbered List of Figures
@listoffloats Figure
@ifnotinfo
@node Table of Contents
@unnumbered
@contents
@end ifnotinfo
@bye